import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;

import tcwi.xml.*;
import tcwi.exception.Exceptions;
import tcwi.fileHandler.*;
import tcwi.TCWIFile.CompareFile;
import tcwi.TCWIFile.ErrorFile;
import tcwi.TCWIFile.TCWIFile;

public class Web_TreeViewInitializator {

	private static final String VERSION = "0.2.0.0";
	private static final String AUTHORS = "EifX & hulllemann";
	private static ArrayList<TCWIFile> files;
	private static Check check = new Check();
	private static Exceptions exception;
	
	/**
	 * Read the file-list generated by web_ProjectInitializator
	 * @param projectName
	 * @param settingsFile
	 */
	public static void getAllFiles(String projectName, String settingsFile, String projectType, String project_settings_path){
		try{
			if(projectType.equals("normal")){
				files = TCWIFile.createTCWIFileArrayFromErrorFile(project_settings_path);
			}else if(projectType.equals("compare")){
				files = TCWIFile.createTCWIFileArrayFromCompareFile(project_settings_path);
			}else{
				exception.throwException(12, null, true, "");
			}
		}catch(IOException e){
			exception.throwException(1, e, true, "");
		}
	}
	
	/**
	 * Check a given folder for failure dbg-files.
	 * @param path
	 * @return
	 */
	public static boolean isAFailFolder(String path, String projectType){
		ArrayList<TCWIFile> filesNew = new ArrayList<TCWIFile>();
		for(int i=0;i<files.size();i++){
			if(projectType.equals("normal")){
				if(((ErrorFile) files.get(i)).getPath().contains(path)){
					filesNew.add((ErrorFile) files.get(i));
				}
			}else if(projectType.equals("compare")){
				if(((CompareFile) files.get(i)).getPath().contains(path)){
					filesNew.add((CompareFile) files.get(i));
				}
			}else{
				exception.throwException(12, null, true, "");
			}
		}
		for(int i=0;i<filesNew.size();i++){
			if(projectType.equals("normal")){
				if(((ErrorFile) filesNew.get(i)).haveErrors()){
					if(((ErrorFile) filesNew.get(i)).isHaveNoDBG()){
						return false;
					}else{
						return true;
					}
				}
			}else if(projectType.equals("compare")){
				return ((CompareFile) filesNew.get(i)).haveChanges();
			}else{
				exception.throwException(12, null, true, "");
			}
		}
		return false;
	}

	/**
	 * Write the output filefalse
	 * @param path
	 * @param prettyOutput
	 */
	public static void writeTxt(String path, String txt){
		try{
			File f = new File(path);
			f.delete();
			RandomAccessFile file = new RandomAccessFile(path,"rw");
			file.writeBytes(txt);
			file.close();
		}catch (IOException e){
			exception.throwException(3, e, true, path);
		}
	}

	/**
	 * This method cleans a string. Only letters and numbers are excepted in a string, all other
	 * values are replaced by an underscore.
	 * @param str
	 * @return a clean String
	 */
	public static String cleanStr(String str){
		String newStr = "";
		for(int i=0;i<str.length();i++){
			if(((str.charAt(i)>=65)&&(str.charAt(i)<=90))||((str.charAt(i)>=97)&&(str.charAt(i)<=122))||((str.charAt(i)>=48)&&(str.charAt(i)<=57))){
				newStr += str.charAt(i);
			}else{
				newStr += "_";
			}
		}
		return "dir"+newStr;
	}
	
	/**
	 * Get the right icon for the treeview
	 * @param path
	 * @param projectType
	 * @return
	 */
	private static String getIcon(String path, String projectType){
		if(projectType.equals("normal")){
			if(!isAFailFolder(path,projectType)){
				return "folderok";
			}else{
				return "folderfail";
			}
		}else if(projectType.equals("compare")){
			if(!isAFailFolder(path,projectType)){
				return "folderidentical";
			}else{
				return "folderdifference";
			}
		}else{
			exception.throwException(12, null, true, "");
			return "";
		}
	}
	
	/**
	 * Get the right icon for the treeview
	 * @param file
	 * @param projectType
	 * @return
	 */
	private static String getIcon(TCWIFile file, String projectType){
		if(projectType.equals("normal")){
			if(!((ErrorFile) file).haveErrors()){
				return "fileok";
			}else{
				if(((ErrorFile) file).isHaveNoDBG()){
					return "fileempty";
				}else{
					return "filefail";
				}
			}
		}else if(projectType.equals("compare")){
			if(!((CompareFile) file).haveChanges()){
				return "fileidentical";
			}else{
				return "filedifference";
			}
		}else{
			exception.throwException(12, null, true, "");
			return "";
		}
	}

	/**
	 * Count how many "}]" needed to close an dir
	 * @param pathOld
	 * @param pathNew
	 * @return
	 */
	private static int getFolderDifference(String[] pathOld, String[] pathNew){
		int diff = 0;
		int maxLen = 0;
		if(pathOld.length>pathNew.length){
			maxLen = pathNew.length-1;
			diff = pathOld.length-pathNew.length;
		}else{
			maxLen = pathOld.length-1;
		}
		
		for(int i=0;i<pathOld.length-1;i++){
			if(i>pathNew.length-1){
				return diff;
			}
			if(!pathOld[i].equals(pathNew[i])){
				return maxLen-i+diff;
			}
		}
		
		return 0;
	}
	
	/**
	 * Do the main work
	 * @param projectName
	 * @param projectType
	 * @param projectPath
	 * @return a JSON-String
	 */
	private static String generateJSONString(String projectName, String projectType, String projectPath){
		String jsonString = "";
		
		ArrayList<String> relativeFiles = new ArrayList<String>();
		for(int i=0;i<files.size();i++){
			if(projectType.equals("normal")){
				relativeFiles.add(((ErrorFile) files.get(i)).getPath().substring(projectPath.length()+1));
			}else if(projectType.equals("compare")){
				relativeFiles.add(((CompareFile) files.get(i)).getPath().substring(projectPath.length()+1));
			}else{
				exception.throwException(12, null, true, "");
			}
		}
		String[] oldArr = {""};
		String oldP = "";
		int pathArrLen = 0;
		for(int i=0;i<relativeFiles.size();i++){
			int notEqual = -1;
			String newPath = relativeFiles.get(i);
			
			String[] pathArr;
			pathArr = relativeFiles.get(i).split(check.folderSeparator()+"");
			
			//Search for differences between the new and the last file
			for(int j=0;j<pathArr.length;j++){
				if(oldArr.length>j){
					if(!pathArr[j].equals(oldArr[j])){
						notEqual = j;
						break;
					}
				}else{
					notEqual = j;
					break;
				}
			}
			
			//If a file exists in the tree, do nothing
			if(notEqual==-1){
				break;
			}

			//If the path has changed, draw the missing parts
			String p = "";
			if(pathArr.length-1!=notEqual){
				int foldDiff = getFolderDifference(oldArr,pathArr);
				for(int j=1;j<=foldDiff;j++){
					if(j==foldDiff){
						jsonString += "}],";
					}else{
						jsonString += "}]";
					}
				}
				
				for(int j=notEqual;j<pathArr.length-1;j++){
					for(int k=0;k<=j;k++){
						p+=check.folderSeparator()+pathArr[k];
					}
					p = projectPath+p;
					
					if(i!=0&&foldDiff==0&&j==notEqual){
						jsonString += "},{";
					}
					
					jsonString += "\"data\":\""+pathArr[j]+"\",\"attr\":{\"id\":\"dir"+i+""+j+"\",\"rel\":\""+getIcon(p,projectType)+"\"},\"children\":[{";

				}
			}else{
				jsonString += "},{";
				p = oldP;
			}

			newPath = newPath.replace("\\", "/");
			newPath = newPath.replace(" ", "_");
			
			jsonString += "\"data\":\""+pathArr[pathArr.length-1]+"\",\"attr\":{\"id\":\"chkbox"+i+"\",\"rel\":\""+getIcon(files.get(i),projectType)+"\"},\"metadata\":{\"link\":\""+newPath+"\"}";

			oldArr = pathArr;
			oldP = p;
			pathArrLen = pathArr.length;
		}
		for(int j=0;j<pathArrLen-1;j++){
			jsonString += "}]";
		}
		return jsonString;
		
	}
	
	/**
	 * Main function
	 * @param args
	 */
	public static void main(String[] args) {
		if(args.length!=2){
			System.out.println("Help - web_TreeViewInitializator "+VERSION+" by "+AUTHORS);
			System.out.println("----------------------------------------------------");
			System.out.println("\nUsage: web_TreeViewInitializator [PROJECTNAME] [GLOBAL_SETTINGS]");
			System.out.println("\n[PROJECTNAME]");
			System.out.println("\n     Project name\n");
			System.out.println("\n[GLOBAL_SETTINGS]");
			System.out.println("\n     Absolute Path for the global_settings.xml\n     (include the name of the settings file)\n");
		}else{
			System.out.println("\nRead needed variables...");
			String projectName = args[0];
			String globalSettings = args[1];
			
			//Init the XMLParser
			Parser settingsParser = new Parser(globalSettings);
			String WebIntProjectsPath = settingsParser.getSetting_ProjectPath();
			String TreeViewPath = settingsParser.getSetting_TreeviewPath();
			
			//Read the project dir
			String project_settings_path = WebIntProjectsPath+check.folderSeparator()+projectName+".project";
			String project_settings_xml_path = WebIntProjectsPath+check.folderSeparator()+projectName+".project.xml";
			
			//If the project have minimal one error, the main-folder in the tree-list is a fail folder
			Parser parser = new Parser(project_settings_xml_path);
			boolean failureProject = parser.getSetting_ProjectFailureProject().equals("true");
			
			String projectPath = parser.getSetting_ProjectBasePath();
			String projectType = parser.getSetting_ProjectType();
			String projectVersion = parser.getSetting_ProjectVersion();
			
			//Do the work
			System.out.println("Read folder tree...");
			getAllFiles(projectName,globalSettings,projectType,project_settings_path);

			System.out.println("Build JSON-File...");
	
			String folderMood = "";
			
			if(projectType.equals("normal")){
				if(!failureProject){
					folderMood = "folderok";
				}else{
					folderMood = "folderfail";
				}
			}else if(projectType.equals("compare")){
				if(!failureProject){
					folderMood = "folderidentical";
				}else{
					folderMood = "folderdifference";
				}
			}else{
				exception.throwException(12, null, true, "");
			}
			
			String JSONString = "[{\"data\":\""+projectName+" "+projectVersion+"\",\"attr\":{\"id\":\"maindir\",\"rel\":\""+folderMood+"\"},\"children\":[{"+generateJSONString(projectName,projectType,projectPath)+"}]}]";
			
			System.out.println("Save folder tree...");
			
			//Build the path for the JSON-path
			writeTxt(TreeViewPath+check.folderSeparator()+projectName+".json",JSONString);
			System.out.println("DONE!");
		}
	}

}
