2012-01-09 17:19:32,487 TRACE PCDerivationTest trying to find comp. object node, list: obj1
2012-01-09 17:19:32,494 TRACE PCDerivationTest # traversing /MF1
2012-01-09 17:19:32,501 TRACE PCDerivationTest    # collecting: [Object: obj1]
2012-01-09 17:19:32,502 TRACE PCDerivationTest    # collecting: [Object: obj1]
2012-01-09 17:19:32,524 DEBUG PCDerivation$ Trying to find path for: [Object: obj2]
2012-01-09 17:19:32,547 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, sourceFile -> obj2.c, generated -> false, objectFile -> obj2, listName -> obj)
2012-01-09 17:19:32,553 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, sourceFile -> obj2.c, generated -> false, objectFile -> obj2, listName -> obj) is: MakefileBNode --> Map(expr -> MF1, path -> /MF1)
2012-01-09 17:19:32,553 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> MF1, path -> /MF1)
2012-01-09 17:19:32,558 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> MF1, path -> /MF1) is: RootNode --> Map()
2012-01-09 17:19:32,559 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:19:32,568 DEBUG PCDerivation$ Expression of path for object occurrence obj2.c: MF1
2012-01-09 17:19:32,568 DEBUG PCDerivation$ Trying to find path for: [Object: obj3]
2012-01-09 17:19:32,568 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> obj3, sourceFile -> obj3.c, generated -> false, objectFile -> obj3, listName -> obj)
2012-01-09 17:19:32,569 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> obj3, sourceFile -> obj3.c, generated -> false, objectFile -> obj3, listName -> obj) is: MakefileBNode --> Map(expr -> MF2, path -> /MF1/MF2)
2012-01-09 17:19:32,569 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> MF2, path -> /MF1/MF2)
2012-01-09 17:19:32,569 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> MF2, path -> /MF1/MF2) is: MakefileBNode --> Map(expr -> MF1, path -> /MF1)
2012-01-09 17:19:32,569 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> MF1, path -> /MF1)
2012-01-09 17:19:32,571 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:19:32,571 DEBUG PCDerivation$ Expression of path for object occurrence obj3.c: (obj3 && (MF2 && MF1))
2012-01-09 17:20:14,172 TRACE PCDerivationTest trying to find comp. object node, list: obj1
2012-01-09 17:20:14,180 TRACE PCDerivationTest # traversing /MF1
2012-01-09 17:20:14,188 TRACE PCDerivationTest    # collecting: [Object: obj1]
2012-01-09 17:20:14,190 TRACE PCDerivationTest    # collecting: [Object: obj1]
2012-01-09 17:20:14,212 DEBUG PCDerivation$ Trying to find path for: [Object: obj2]
2012-01-09 17:20:14,232 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, sourceFile -> obj2.c, generated -> false, objectFile -> obj2, listName -> obj)
2012-01-09 17:20:14,237 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, sourceFile -> obj2.c, generated -> false, objectFile -> obj2, listName -> obj) is: MakefileBNode --> Map(expr -> MF1, path -> /MF1)
2012-01-09 17:20:14,237 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> MF1, path -> /MF1)
2012-01-09 17:20:14,242 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> MF1, path -> /MF1) is: RootNode --> Map()
2012-01-09 17:20:14,243 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:20:14,249 DEBUG PCDerivation$ Expression of path for object occurrence obj2.c: MF1
2012-01-09 17:20:14,249 DEBUG PCDerivation$ Trying to find path for: [Object: obj3]
2012-01-09 17:20:14,249 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> obj3, sourceFile -> obj3.c, generated -> false, objectFile -> obj3, listName -> obj)
2012-01-09 17:20:14,250 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> obj3, sourceFile -> obj3.c, generated -> false, objectFile -> obj3, listName -> obj) is: MakefileBNode --> Map(expr -> MF2, path -> /MF1/MF2)
2012-01-09 17:20:14,250 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> MF2, path -> /MF1/MF2)
2012-01-09 17:20:14,250 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> MF2, path -> /MF1/MF2) is: MakefileBNode --> Map(expr -> MF1, path -> /MF1)
2012-01-09 17:20:14,250 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> MF1, path -> /MF1)
2012-01-09 17:20:14,252 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:20:14,252 DEBUG PCDerivation$ Expression of path for object occurrence obj3.c: (obj3 && (MF2 && MF1))
2012-01-09 17:26:40,016 INFO KBuildMinerMain$ Starting KBuildMiner...
2012-01-09 17:26:40,068 INFO KBuildMinerMain$ === PreProcessing arch/x86/Makefile
2012-01-09 17:26:40,069 INFO KBuildMinerMain$ === Processing arch/x86/Makefile
2012-01-09 17:27:24,042 INFO KBuildMinerMain$ Starting KBuildMiner...
2012-01-09 17:27:24,089 INFO KBuildMinerMain$ === PreProcessing arch/x86/Makefile
2012-01-09 17:27:24,091 INFO KBuildMinerMain$ === Processing arch/x86/Makefile
2012-01-09 17:32:24,763 INFO KBuildMinerMain$ Starting KBuildMiner...
2012-01-09 17:34:52,643 INFO KBuildMinerMain$ Starting KBuildMiner...
2012-01-09 17:34:52,672 INFO KBuildMinerMain$ === PreProcessing applets/Kbuild
2012-01-09 17:34:52,673 INFO KBuildMinerMain$ === Processing applets/Kbuild
2012-01-09 17:34:52,720 TRACE ModelFactory addObject
2012-01-09 17:34:52,723 TRACE ModelFactory  addVariableAssignment: always, value: $(hostprogs-y)
2012-01-09 17:34:52,724 TRACE ModelFactory pushIf
2012-01-09 17:34:52,726 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@8e0227c2,Hole(List(gsd.buildanalysis.linux.model.BNode@ce6b207c, [Object: applets]),NodeLoc([Makefile: applets/Kbuild],Top),List()))
2012-01-09 17:34:52,727 TRACE ModelFactory pushElse
2012-01-09 17:34:52,728 TRACE ModelFactory  addVariableAssignment: srctree_slash, value: $(srctree)/
2012-01-09 17:34:52,729 TRACE ModelFactory popEndIf
2012-01-09 17:34:52,729 TRACE ModelFactory  addVariableAssignment: HOSTCFLAGS_usage.o, value: -I$(srctree_slash)include -Iinclude
2012-01-09 17:34:52,729 TRACE ModelFactory  addVariableAssignment: HOSTCFLAGS_usage_pod.o, value: -I$(srctree_slash)include -Iinclude
2012-01-09 17:34:52,736 TRACE ModelFactory  addVariableAssignment: quiet_cmd_gen_usage_compressed, value: GEN     include/usage_compressed.h
2012-01-09 17:34:52,736 TRACE ModelFactory  addVariableAssignment: cmd_gen_usage_compressed, value: $(srctree_slash)applets/usage_compressed include/usage_compressed.h applets
2012-01-09 17:34:52,740 TRACE ModelFactory  addVariableAssignment: quiet_cmd_gen_applet_tables, value: GEN     include/applet_tables.h
2012-01-09 17:34:52,741 TRACE ModelFactory  addVariableAssignment: cmd_gen_applet_tables, value: applets/applet_tables include/applet_tables.h include/NUM_APPLETS.h
2012-01-09 17:34:52,748 INFO KBuildMinerMain$ === PostProcessing applets/Kbuild
2012-01-09 17:34:52,774 INFO KBuildMinerMain$ === PreProcessing archival/Kbuild
2012-01-09 17:34:52,774 INFO KBuildMinerMain$ === Processing archival/Kbuild
2012-01-09 17:34:52,776 TRACE ModelFactory addMakefile
2012-01-09 17:34:52,802 TRACE ModelFactory addObject
2012-01-09 17:34:52,803 TRACE ModelFactory addObject
2012-01-09 17:34:52,803 TRACE ModelFactory addObject
2012-01-09 17:34:52,804 TRACE ModelFactory addObject
2012-01-09 17:34:52,804 TRACE ModelFactory addObject
2012-01-09 17:34:52,804 TRACE ModelFactory addObject
2012-01-09 17:34:52,805 TRACE ModelFactory addObject
2012-01-09 17:34:52,805 TRACE ModelFactory addObject
2012-01-09 17:34:52,806 TRACE ModelFactory addObject
2012-01-09 17:34:52,806 TRACE ModelFactory addObject
2012-01-09 17:34:52,806 TRACE ModelFactory addObject
2012-01-09 17:34:52,806 TRACE ModelFactory addObject
2012-01-09 17:34:52,807 TRACE ModelFactory addObject
2012-01-09 17:34:52,807 TRACE ModelFactory addObject
2012-01-09 17:34:52,807 TRACE ModelFactory addObject
2012-01-09 17:34:52,807 TRACE ModelFactory addObject
2012-01-09 17:34:52,808 TRACE ModelFactory addObject
2012-01-09 17:34:52,808 TRACE ModelFactory addObject
2012-01-09 17:34:52,808 TRACE ModelFactory addObject
2012-01-09 17:34:52,808 INFO KBuildMinerMain$ === PostProcessing archival/Kbuild
2012-01-09 17:34:52,853 INFO KBuildMinerMain$ === PreProcessing archival/libarchive/Kbuild
2012-01-09 17:34:52,853 INFO KBuildMinerMain$ === Processing archival/libarchive/Kbuild
2012-01-09 17:34:52,856 TRACE ModelFactory pushListVariable: COMMON_FILES
2012-01-09 17:34:52,857 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-09 17:34:52,858 TRACE ModelFactory addObjectToList: data_skip
2012-01-09 17:34:52,858 TRACE ModelFactory addObjectToList: data_extract_all
2012-01-09 17:34:52,858 TRACE ModelFactory addObjectToList: data_extract_to_stdout
2012-01-09 17:34:52,858 TRACE ModelFactory addObjectToList: filter_accept_all
2012-01-09 17:34:52,858 TRACE ModelFactory addObjectToList: filter_accept_list
2012-01-09 17:34:52,859 TRACE ModelFactory addObjectToList: filter_accept_reject_list
2012-01-09 17:34:52,859 TRACE ModelFactory addObjectToList: header_skip
2012-01-09 17:34:52,859 TRACE ModelFactory addObjectToList: header_list
2012-01-09 17:34:52,859 TRACE ModelFactory addObjectToList: header_verbose_list
2012-01-09 17:34:52,859 TRACE ModelFactory addObjectToList: seek_by_read
2012-01-09 17:34:52,859 TRACE ModelFactory addObjectToList: seek_by_jump
2012-01-09 17:34:52,859 TRACE ModelFactory addObjectToList: data_align
2012-01-09 17:34:52,860 TRACE ModelFactory addObjectToList: find_list_entry
2012-01-09 17:34:52,860 TRACE ModelFactory addObjectToList: init_handle
2012-01-09 17:34:52,861 TRACE ModelFactory popListVariable
2012-01-09 17:34:52,861 TRACE ModelFactory  addVariableAssignment: COMMON_FILES, value: data_skip.o \
	data_extract_all.o \
	data_extract_to_stdout.o \
\
	filter_accept_all.o \
	filter_accept_list.o \
	filter_accept_reject_list.o \
\
	header_skip.o \
	header_list.o \
	header_verbose_list.o \
\
	seek_by_read.o \
	seek_by_jump.o \
\
	data_align.o \
	find_list_entry.o \
	init_handle.o
2012-01-09 17:34:52,861 TRACE ModelFactory pushListVariable: DPKG_FILES
2012-01-09 17:34:52,861 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-09 17:34:52,861 TRACE ModelFactory addObjectToList: get_header_ar
2012-01-09 17:34:52,861 TRACE ModelFactory addObjectToList: unpack_ar_archive
2012-01-09 17:34:52,861 TRACE ModelFactory addObjectToList: get_header_tar
2012-01-09 17:34:52,862 TRACE ModelFactory addObjectToList: filter_accept_list_reassign
2012-01-09 17:34:52,862 TRACE ModelFactory popListVariable
2012-01-09 17:34:52,862 TRACE ModelFactory  addVariableAssignment: DPKG_FILES, value: get_header_ar.o \
	unpack_ar_archive.o \
	get_header_tar.o \
	filter_accept_list_reassign.o
2012-01-09 17:34:52,862 TRACE ModelFactory addObject
2012-01-09 17:34:52,862 TRACE ModelFactory addObject
2012-01-09 17:34:52,863 TRACE ModelFactory addObject
2012-01-09 17:34:52,863 TRACE ModelFactory addObject
2012-01-09 17:34:52,864 TRACE ModelFactory addObject
2012-01-09 17:34:52,864 TRACE ModelFactory addObject
2012-01-09 17:34:52,865 TRACE ModelFactory addVariableReference
2012-01-09 17:34:52,866 TRACE ModelFactory addVariableReference
2012-01-09 17:34:52,867 TRACE ModelFactory addObject
2012-01-09 17:34:52,867 TRACE ModelFactory addObject
2012-01-09 17:34:52,867 TRACE ModelFactory addObject
2012-01-09 17:34:52,868 TRACE ModelFactory addObject
2012-01-09 17:34:52,868 TRACE ModelFactory addObject
2012-01-09 17:34:52,868 TRACE ModelFactory addObject
2012-01-09 17:34:52,869 TRACE ModelFactory addObject
2012-01-09 17:34:52,869 TRACE ModelFactory addObject
2012-01-09 17:34:52,870 TRACE ModelFactory addObject
2012-01-09 17:34:52,870 TRACE ModelFactory addObject
2012-01-09 17:34:52,871 TRACE ModelFactory addObject
2012-01-09 17:34:52,871 TRACE ModelFactory addObject
2012-01-09 17:34:52,871 TRACE ModelFactory addObject
2012-01-09 17:34:52,872 TRACE ModelFactory addObject
2012-01-09 17:34:52,872 TRACE ModelFactory addObject
2012-01-09 17:34:52,873 TRACE ModelFactory addObject
2012-01-09 17:34:52,873 TRACE ModelFactory addObject
2012-01-09 17:34:52,873 TRACE ModelFactory addObject
2012-01-09 17:34:52,874 TRACE ModelFactory addObject
2012-01-09 17:34:52,874 TRACE ModelFactory addObject
2012-01-09 17:34:52,875 TRACE ModelFactory addObject
2012-01-09 17:34:52,875 TRACE ModelFactory addObject
2012-01-09 17:34:52,875 TRACE ModelFactory addObject
2012-01-09 17:34:52,876 TRACE ModelFactory addObject
2012-01-09 17:34:52,876 TRACE ModelFactory addObject
2012-01-09 17:34:52,877 TRACE ModelFactory addObject
2012-01-09 17:34:52,877 TRACE ModelFactory addObject
2012-01-09 17:34:52,877 TRACE ModelFactory addObject
2012-01-09 17:34:52,878 TRACE ModelFactory addObject
2012-01-09 17:34:52,878 TRACE ModelFactory pushIf
2012-01-09 17:34:52,879 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@a4a03820,Hole(List([Object: data_extract_to_command], [Object: decompress_bunzip2], [Object: decompress_bunzip2], [Object: decompress_unxz], [Object: open_transformer], [Object: get_header_tar_lzma], [Object: decompress_unlzma], [Object: open_transformer], [Object: get_header_tar_bz2], [Object: decompress_bunzip2], [Object: open_transformer], [Object: get_header_tar_gz], [Object: decompress_unzip], [Object: open_transformer], [Object: decompress_uncompress], [Object: open_transformer], [Object: lzo1x_9x], [Object: lzo1x_d], [Object: lzo1x_1o], [Object: lzo1x_1], [Object: decompress_unzip], [Object: decompress_uncompress], [Object: get_header_tar], [Object: get_header_cpio], [Object: decompress_unzip], [Object: open_transformer], [Object: get_header_cpio], [Object: decompress_unzip], [Object: decompress_unzip], [VariableReference: DPKG_FILES], [VariableReference: DPKG_FILES], [Object: get_header_cpio], [Object: decompress_unxz], [Object: decompress_unlzma], [Object: decompress_bunzip2], [Object: unpack_ar_archive], [Object: get_header_ar], gsd.buildanalysis.linux.model.BNode@c7432e8b, [VariableDefinition: DPKG_FILES], gsd.buildanalysis.linux.model.BNode@6937fc5f, [VariableDefinition: COMMON_FILES]),NodeLoc([Makefile: archival/libarchive/Kbuild],Top),List()))
2012-01-09 17:34:52,879 TRACE ModelFactory addVariableReference
2012-01-09 17:34:52,879 TRACE ModelFactory popEndIf
2012-01-09 17:34:52,879 INFO KBuildMinerMain$ === PostProcessing archival/libarchive/Kbuild
2012-01-09 17:34:52,955 INFO KBuildMinerMain$ === PreProcessing archival/libarchive/Kbuild
2012-01-09 17:34:52,955 INFO KBuildMinerMain$ === Processing archival/libarchive/Kbuild
2012-01-09 17:34:52,956 TRACE ModelFactory pushListVariable: COMMON_FILES
2012-01-09 17:34:52,956 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-09 17:34:52,956 TRACE ModelFactory addObjectToList: data_skip
2012-01-09 17:34:52,956 TRACE ModelFactory addObjectToList: data_extract_all
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: data_extract_to_stdout
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: filter_accept_all
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: filter_accept_list
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: filter_accept_reject_list
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: header_skip
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: header_list
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: header_verbose_list
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: seek_by_read
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: seek_by_jump
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: data_align
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: find_list_entry
2012-01-09 17:34:52,957 TRACE ModelFactory addObjectToList: init_handle
2012-01-09 17:34:52,957 TRACE ModelFactory popListVariable
2012-01-09 17:34:52,957 TRACE ModelFactory  addVariableAssignment: COMMON_FILES, value: data_skip.o \
	data_extract_all.o \
	data_extract_to_stdout.o \
\
	filter_accept_all.o \
	filter_accept_list.o \
	filter_accept_reject_list.o \
\
	header_skip.o \
	header_list.o \
	header_verbose_list.o \
\
	seek_by_read.o \
	seek_by_jump.o \
\
	data_align.o \
	find_list_entry.o \
	init_handle.o
2012-01-09 17:34:52,958 TRACE ModelFactory pushListVariable: DPKG_FILES
2012-01-09 17:34:52,958 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-09 17:34:52,958 TRACE ModelFactory addObjectToList: get_header_ar
2012-01-09 17:34:52,958 TRACE ModelFactory addObjectToList: unpack_ar_archive
2012-01-09 17:34:52,958 TRACE ModelFactory addObjectToList: get_header_tar
2012-01-09 17:34:52,958 TRACE ModelFactory addObjectToList: filter_accept_list_reassign
2012-01-09 17:34:52,958 TRACE ModelFactory popListVariable
2012-01-09 17:34:52,958 TRACE ModelFactory  addVariableAssignment: DPKG_FILES, value: get_header_ar.o \
	unpack_ar_archive.o \
	get_header_tar.o \
	filter_accept_list_reassign.o
2012-01-09 17:34:52,958 TRACE ModelFactory addObject
2012-01-09 17:34:52,958 TRACE ModelFactory addObject
2012-01-09 17:34:52,959 TRACE ModelFactory addObject
2012-01-09 17:34:52,959 TRACE ModelFactory addObject
2012-01-09 17:34:52,959 TRACE ModelFactory addObject
2012-01-09 17:34:52,959 TRACE ModelFactory addObject
2012-01-09 17:34:52,959 TRACE ModelFactory addVariableReference
2012-01-09 17:34:52,959 TRACE ModelFactory addVariableReference
2012-01-09 17:34:52,960 TRACE ModelFactory addObject
2012-01-09 17:34:52,960 TRACE ModelFactory addObject
2012-01-09 17:34:52,960 TRACE ModelFactory addObject
2012-01-09 17:34:52,960 TRACE ModelFactory addObject
2012-01-09 17:34:52,960 TRACE ModelFactory addObject
2012-01-09 17:34:52,960 TRACE ModelFactory addObject
2012-01-09 17:34:52,961 TRACE ModelFactory addObject
2012-01-09 17:34:52,961 TRACE ModelFactory addObject
2012-01-09 17:34:52,961 TRACE ModelFactory addObject
2012-01-09 17:34:52,961 TRACE ModelFactory addObject
2012-01-09 17:34:52,961 TRACE ModelFactory addObject
2012-01-09 17:34:52,961 TRACE ModelFactory addObject
2012-01-09 17:34:52,962 TRACE ModelFactory addObject
2012-01-09 17:34:52,962 TRACE ModelFactory addObject
2012-01-09 17:34:52,962 TRACE ModelFactory addObject
2012-01-09 17:34:52,963 TRACE ModelFactory addObject
2012-01-09 17:34:52,963 TRACE ModelFactory addObject
2012-01-09 17:34:52,963 TRACE ModelFactory addObject
2012-01-09 17:34:52,963 TRACE ModelFactory addObject
2012-01-09 17:34:52,963 TRACE ModelFactory addObject
2012-01-09 17:34:52,963 TRACE ModelFactory addObject
2012-01-09 17:34:52,964 TRACE ModelFactory addObject
2012-01-09 17:34:52,964 TRACE ModelFactory addObject
2012-01-09 17:34:52,964 TRACE ModelFactory addObject
2012-01-09 17:34:52,964 TRACE ModelFactory addObject
2012-01-09 17:34:52,964 TRACE ModelFactory addObject
2012-01-09 17:34:52,964 TRACE ModelFactory addObject
2012-01-09 17:34:52,965 TRACE ModelFactory addObject
2012-01-09 17:34:52,965 TRACE ModelFactory addObject
2012-01-09 17:34:52,965 TRACE ModelFactory pushIf
2012-01-09 17:34:52,966 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@a4a03820,Hole(List([Object: data_extract_to_command], [Object: decompress_bunzip2], [Object: decompress_bunzip2], [Object: decompress_unxz], [Object: open_transformer], [Object: get_header_tar_lzma], [Object: decompress_unlzma], [Object: open_transformer], [Object: get_header_tar_bz2], [Object: decompress_bunzip2], [Object: open_transformer], [Object: get_header_tar_gz], [Object: decompress_unzip], [Object: open_transformer], [Object: decompress_uncompress], [Object: open_transformer], [Object: lzo1x_9x], [Object: lzo1x_d], [Object: lzo1x_1o], [Object: lzo1x_1], [Object: decompress_unzip], [Object: decompress_uncompress], [Object: get_header_tar], [Object: get_header_cpio], [Object: decompress_unzip], [Object: open_transformer], [Object: get_header_cpio], [Object: decompress_unzip], [Object: decompress_unzip], [VariableReference: DPKG_FILES], [VariableReference: DPKG_FILES], [Object: get_header_cpio], [Object: decompress_unxz], [Object: decompress_unlzma], [Object: decompress_bunzip2], [Object: unpack_ar_archive], [Object: get_header_ar], gsd.buildanalysis.linux.model.BNode@c7432e8b, [VariableDefinition: DPKG_FILES], gsd.buildanalysis.linux.model.BNode@6937fc5f, [VariableDefinition: COMMON_FILES]),NodeLoc([Makefile: archival/libarchive/Kbuild],Top),List()))
2012-01-09 17:34:52,966 TRACE ModelFactory addVariableReference
2012-01-09 17:34:52,966 TRACE ModelFactory popEndIf
2012-01-09 17:34:52,966 INFO KBuildMinerMain$ === PostProcessing archival/libarchive/Kbuild
2012-01-09 17:34:53,009 INFO KBuildMinerMain$ === PreProcessing console-tools/Kbuild
2012-01-09 17:34:53,009 INFO KBuildMinerMain$ === Processing console-tools/Kbuild
2012-01-09 17:34:53,020 TRACE ModelFactory addObject
2012-01-09 17:34:53,020 TRACE ModelFactory addObject
2012-01-09 17:34:53,021 TRACE ModelFactory addObject
2012-01-09 17:34:53,021 TRACE ModelFactory addObject
2012-01-09 17:34:53,021 TRACE ModelFactory addObject
2012-01-09 17:34:53,021 TRACE ModelFactory addObject
2012-01-09 17:34:53,021 TRACE ModelFactory addObject
2012-01-09 17:34:53,021 TRACE ModelFactory addObject
2012-01-09 17:34:53,021 TRACE ModelFactory addObject
2012-01-09 17:34:53,022 TRACE ModelFactory addObject
2012-01-09 17:34:53,022 TRACE ModelFactory addObject
2012-01-09 17:34:53,022 TRACE ModelFactory addObject
2012-01-09 17:34:53,022 TRACE ModelFactory addObject
2012-01-09 17:34:53,022 TRACE ModelFactory addObject
2012-01-09 17:34:53,022 TRACE ModelFactory addObject
2012-01-09 17:34:53,023 TRACE ModelFactory addObject
2012-01-09 17:34:53,023 INFO KBuildMinerMain$ === PostProcessing console-tools/Kbuild
2012-01-09 17:34:53,056 INFO KBuildMinerMain$ === PreProcessing coreutils/Kbuild
2012-01-09 17:34:53,056 INFO KBuildMinerMain$ === Processing coreutils/Kbuild
2012-01-09 17:34:53,065 TRACE ModelFactory addMakefile
2012-01-09 17:34:53,067 TRACE ModelFactory addObject
2012-01-09 17:34:53,067 TRACE ModelFactory addObject
2012-01-09 17:34:53,067 TRACE ModelFactory addObject
2012-01-09 17:34:53,067 TRACE ModelFactory addObject
2012-01-09 17:34:53,068 TRACE ModelFactory addObject
2012-01-09 17:34:53,068 TRACE ModelFactory addObject
2012-01-09 17:34:53,068 TRACE ModelFactory addObject
2012-01-09 17:34:53,069 TRACE ModelFactory addObject
2012-01-09 17:34:53,069 TRACE ModelFactory addObject
2012-01-09 17:34:53,069 TRACE ModelFactory addObject
2012-01-09 17:34:53,069 TRACE ModelFactory addObject
2012-01-09 17:34:53,070 TRACE ModelFactory addObject
2012-01-09 17:34:53,070 TRACE ModelFactory addObject
2012-01-09 17:34:53,070 TRACE ModelFactory addObject
2012-01-09 17:34:53,070 TRACE ModelFactory addObject
2012-01-09 17:34:53,071 TRACE ModelFactory addObject
2012-01-09 17:34:53,071 TRACE ModelFactory addObject
2012-01-09 17:34:53,071 TRACE ModelFactory addObject
2012-01-09 17:34:53,071 TRACE ModelFactory addObject
2012-01-09 17:34:53,072 TRACE ModelFactory addObject
2012-01-09 17:34:53,072 TRACE ModelFactory addObject
2012-01-09 17:34:53,072 TRACE ModelFactory addObject
2012-01-09 17:34:53,073 TRACE ModelFactory addObject
2012-01-09 17:34:53,073 TRACE ModelFactory addObject
2012-01-09 17:34:53,073 TRACE ModelFactory addObject
2012-01-09 17:34:53,074 TRACE ModelFactory addObject
2012-01-09 17:34:53,074 TRACE ModelFactory addObject
2012-01-09 17:34:53,075 TRACE ModelFactory addObject
2012-01-09 17:34:53,075 TRACE ModelFactory addObject
2012-01-09 17:34:53,075 TRACE ModelFactory addObject
2012-01-09 17:34:53,076 TRACE ModelFactory addObject
2012-01-09 17:34:53,076 TRACE ModelFactory addObject
2012-01-09 17:34:53,076 TRACE ModelFactory addObject
2012-01-09 17:34:53,077 TRACE ModelFactory addObject
2012-01-09 17:34:53,077 TRACE ModelFactory addObject
2012-01-09 17:34:53,077 TRACE ModelFactory addObject
2012-01-09 17:34:53,077 TRACE ModelFactory addObject
2012-01-09 17:34:53,077 TRACE ModelFactory addObject
2012-01-09 17:34:53,078 TRACE ModelFactory addObject
2012-01-09 17:34:53,078 TRACE ModelFactory addObject
2012-01-09 17:34:53,078 TRACE ModelFactory addObject
2012-01-09 17:34:53,078 TRACE ModelFactory addObject
2012-01-09 17:34:53,079 TRACE ModelFactory addObject
2012-01-09 17:34:53,079 TRACE ModelFactory addObject
2012-01-09 17:34:53,079 TRACE ModelFactory addObject
2012-01-09 17:34:53,079 TRACE ModelFactory addObject
2012-01-09 17:34:53,080 TRACE ModelFactory addObject
2012-01-09 17:34:53,080 TRACE ModelFactory addObject
2012-01-09 17:34:53,080 TRACE ModelFactory addObject
2012-01-09 17:34:53,081 TRACE ModelFactory addObject
2012-01-09 17:34:53,081 TRACE ModelFactory addObject
2012-01-09 17:34:53,081 TRACE ModelFactory addObject
2012-01-09 17:34:53,081 TRACE ModelFactory addObject
2012-01-09 17:34:53,082 TRACE ModelFactory addObject
2012-01-09 17:34:53,082 TRACE ModelFactory addObject
2012-01-09 17:34:53,082 TRACE ModelFactory addObject
2012-01-09 17:34:53,083 TRACE ModelFactory addObject
2012-01-09 17:34:53,083 TRACE ModelFactory addObject
2012-01-09 17:34:53,083 TRACE ModelFactory addObject
2012-01-09 17:34:53,084 TRACE ModelFactory addObject
2012-01-09 17:34:53,084 TRACE ModelFactory addObject
2012-01-09 17:34:53,084 TRACE ModelFactory addObject
2012-01-09 17:34:53,084 TRACE ModelFactory addObject
2012-01-09 17:34:53,085 TRACE ModelFactory addObject
2012-01-09 17:34:53,085 TRACE ModelFactory addObject
2012-01-09 17:34:53,085 TRACE ModelFactory addObject
2012-01-09 17:34:53,085 TRACE ModelFactory addObject
2012-01-09 17:34:53,086 TRACE ModelFactory addObject
2012-01-09 17:34:53,086 TRACE ModelFactory addObject
2012-01-09 17:34:53,086 TRACE ModelFactory addObject
2012-01-09 17:34:53,088 TRACE ModelFactory addObject
2012-01-09 17:34:53,089 TRACE ModelFactory addObject
2012-01-09 17:34:53,089 TRACE ModelFactory addObject
2012-01-09 17:34:53,089 TRACE ModelFactory addObject
2012-01-09 17:34:53,089 TRACE ModelFactory addObject
2012-01-09 17:34:53,090 TRACE ModelFactory addObject
2012-01-09 17:34:53,090 TRACE ModelFactory addObject
2012-01-09 17:34:53,090 TRACE ModelFactory addObject
2012-01-09 17:34:53,090 TRACE ModelFactory addObject
2012-01-09 17:34:53,090 TRACE ModelFactory addObject
2012-01-09 17:34:53,091 TRACE ModelFactory addObject
2012-01-09 17:34:53,091 TRACE ModelFactory addObject
2012-01-09 17:34:53,091 TRACE ModelFactory addObject
2012-01-09 17:34:53,091 TRACE ModelFactory addObject
2012-01-09 17:34:53,092 TRACE ModelFactory addObject
2012-01-09 17:34:53,092 TRACE ModelFactory addObject
2012-01-09 17:34:53,092 TRACE ModelFactory addObject
2012-01-09 17:34:53,092 TRACE ModelFactory addObject
2012-01-09 17:34:53,092 TRACE ModelFactory addObject
2012-01-09 17:34:53,093 TRACE ModelFactory addObject
2012-01-09 17:34:53,093 TRACE ModelFactory addObject
2012-01-09 17:34:53,093 TRACE ModelFactory addObject
2012-01-09 17:34:53,093 TRACE ModelFactory addObject
2012-01-09 17:34:53,094 TRACE ModelFactory addObject
2012-01-09 17:34:53,094 INFO KBuildMinerMain$ === PostProcessing coreutils/Kbuild
2012-01-09 17:34:53,144 INFO KBuildMinerMain$ === PreProcessing coreutils/libcoreutils/Kbuild
2012-01-09 17:34:53,145 INFO KBuildMinerMain$ === Processing coreutils/libcoreutils/Kbuild
2012-01-09 17:34:53,146 TRACE ModelFactory addObject
2012-01-09 17:34:53,147 TRACE ModelFactory addObject
2012-01-09 17:34:53,147 TRACE ModelFactory addObject
2012-01-09 17:34:53,147 TRACE ModelFactory addObject
2012-01-09 17:34:53,148 TRACE ModelFactory addObject
2012-01-09 17:34:53,148 INFO KBuildMinerMain$ === PostProcessing coreutils/libcoreutils/Kbuild
2012-01-09 17:34:53,170 INFO KBuildMinerMain$ === PreProcessing coreutils/libcoreutils/Kbuild
2012-01-09 17:34:53,171 INFO KBuildMinerMain$ === Processing coreutils/libcoreutils/Kbuild
2012-01-09 17:34:53,172 TRACE ModelFactory addObject
2012-01-09 17:34:53,172 TRACE ModelFactory addObject
2012-01-09 17:34:53,172 TRACE ModelFactory addObject
2012-01-09 17:34:53,172 TRACE ModelFactory addObject
2012-01-09 17:34:53,173 TRACE ModelFactory addObject
2012-01-09 17:34:53,173 INFO KBuildMinerMain$ === PostProcessing coreutils/libcoreutils/Kbuild
2012-01-09 17:34:53,176 INFO KBuildMinerMain$ === PreProcessing debianutils/Kbuild
2012-01-09 17:34:53,176 INFO KBuildMinerMain$ === Processing debianutils/Kbuild
2012-01-09 17:34:53,186 TRACE ModelFactory addObject
2012-01-09 17:34:53,186 TRACE ModelFactory addObject
2012-01-09 17:34:53,187 TRACE ModelFactory addObject
2012-01-09 17:34:53,188 TRACE ModelFactory addObject
2012-01-09 17:34:53,188 TRACE ModelFactory addObject
2012-01-09 17:34:53,188 INFO KBuildMinerMain$ === PostProcessing debianutils/Kbuild
2012-01-09 17:34:53,213 INFO KBuildMinerMain$ === PreProcessing e2fsprogs/Kbuild
2012-01-09 17:34:53,213 INFO KBuildMinerMain$ === Processing e2fsprogs/Kbuild
2012-01-09 17:34:53,229 TRACE ModelFactory addObject
2012-01-09 17:34:53,229 TRACE ModelFactory addObject
2012-01-09 17:34:53,229 TRACE ModelFactory addObject
2012-01-09 17:34:53,229 TRACE ModelFactory addObject
2012-01-09 17:34:53,230 TRACE ModelFactory addObject
2012-01-09 17:34:53,230 TRACE ModelFactory addObject
2012-01-09 17:34:53,230 INFO KBuildMinerMain$ === PostProcessing e2fsprogs/Kbuild
2012-01-09 17:34:53,265 INFO KBuildMinerMain$ === PreProcessing editors/Kbuild
2012-01-09 17:34:53,265 INFO KBuildMinerMain$ === Processing editors/Kbuild
2012-01-09 17:34:53,276 TRACE ModelFactory addObject
2012-01-09 17:34:53,277 TRACE ModelFactory addObject
2012-01-09 17:34:53,277 TRACE ModelFactory addObject
2012-01-09 17:34:53,277 TRACE ModelFactory addObject
2012-01-09 17:34:53,278 TRACE ModelFactory addObject
2012-01-09 17:34:53,278 TRACE ModelFactory addObject
2012-01-09 17:34:53,279 TRACE ModelFactory addObject
2012-01-09 17:34:53,279 INFO KBuildMinerMain$ === PostProcessing editors/Kbuild
2012-01-09 17:34:53,330 INFO KBuildMinerMain$ === PreProcessing findutils/Kbuild
2012-01-09 17:34:53,330 INFO KBuildMinerMain$ === Processing findutils/Kbuild
2012-01-09 17:34:53,332 TRACE ModelFactory addObject
2012-01-09 17:34:53,332 TRACE ModelFactory addObject
2012-01-09 17:34:53,332 TRACE ModelFactory addObject
2012-01-09 17:34:53,332 INFO KBuildMinerMain$ === PostProcessing findutils/Kbuild
2012-01-09 17:34:53,348 INFO KBuildMinerMain$ === PreProcessing init/Kbuild
2012-01-09 17:34:53,348 INFO KBuildMinerMain$ === Processing init/Kbuild
2012-01-09 17:34:53,349 TRACE ModelFactory addObject
2012-01-09 17:34:53,350 TRACE ModelFactory addObject
2012-01-09 17:34:53,350 TRACE ModelFactory addObject
2012-01-09 17:34:53,350 TRACE ModelFactory addObject
2012-01-09 17:34:53,350 INFO KBuildMinerMain$ === PostProcessing init/Kbuild
2012-01-09 17:34:53,368 INFO KBuildMinerMain$ === PreProcessing libbb/Kbuild
2012-01-09 17:34:53,369 INFO KBuildMinerMain$ === Processing libbb/Kbuild
2012-01-09 17:34:53,372 TRACE ModelFactory addObject
2012-01-09 17:34:53,372 TRACE ModelFactory addObject
2012-01-09 17:34:53,373 TRACE ModelFactory addObject
2012-01-09 17:34:53,373 TRACE ModelFactory addObject
2012-01-09 17:34:53,373 TRACE ModelFactory addObject
2012-01-09 17:34:53,374 TRACE ModelFactory addObject
2012-01-09 17:34:53,374 TRACE ModelFactory addObject
2012-01-09 17:34:53,374 TRACE ModelFactory addObject
2012-01-09 17:34:53,375 TRACE ModelFactory addObject
2012-01-09 17:34:53,375 TRACE ModelFactory addObject
2012-01-09 17:34:53,376 TRACE ModelFactory addObject
2012-01-09 17:34:53,376 TRACE ModelFactory addObject
2012-01-09 17:34:53,376 TRACE ModelFactory addObject
2012-01-09 17:34:53,377 TRACE ModelFactory addObject
2012-01-09 17:34:53,377 TRACE ModelFactory addObject
2012-01-09 17:34:53,377 TRACE ModelFactory addObject
2012-01-09 17:34:53,378 TRACE ModelFactory addObject
2012-01-09 17:34:53,378 TRACE ModelFactory addObject
2012-01-09 17:34:53,378 TRACE ModelFactory addObject
2012-01-09 17:34:53,379 TRACE ModelFactory addObject
2012-01-09 17:34:53,379 TRACE ModelFactory addObject
2012-01-09 17:34:53,380 TRACE ModelFactory addObject
2012-01-09 17:34:53,380 TRACE ModelFactory addObject
2012-01-09 17:34:53,380 TRACE ModelFactory addObject
2012-01-09 17:34:53,381 TRACE ModelFactory addObject
2012-01-09 17:34:53,381 TRACE ModelFactory addObject
2012-01-09 17:34:53,381 TRACE ModelFactory addObject
2012-01-09 17:34:53,382 TRACE ModelFactory addObject
2012-01-09 17:34:53,382 TRACE ModelFactory addObject
2012-01-09 17:34:53,382 TRACE ModelFactory addObject
2012-01-09 17:34:53,383 TRACE ModelFactory addObject
2012-01-09 17:34:53,383 TRACE ModelFactory addObject
2012-01-09 17:34:53,383 TRACE ModelFactory addObject
2012-01-09 17:34:53,384 TRACE ModelFactory addObject
2012-01-09 17:34:53,384 TRACE ModelFactory addObject
2012-01-09 17:34:53,385 TRACE ModelFactory addObject
2012-01-09 17:34:53,385 TRACE ModelFactory addObject
2012-01-09 17:34:53,385 TRACE ModelFactory addObject
2012-01-09 17:34:53,386 TRACE ModelFactory addObject
2012-01-09 17:34:53,386 TRACE ModelFactory addObject
2012-01-09 17:34:53,386 TRACE ModelFactory addObject
2012-01-09 17:34:53,387 TRACE ModelFactory addObject
2012-01-09 17:34:53,387 TRACE ModelFactory addObject
2012-01-09 17:34:53,387 TRACE ModelFactory addObject
2012-01-09 17:34:53,387 TRACE ModelFactory addObject
2012-01-09 17:34:53,387 TRACE ModelFactory addObject
2012-01-09 17:34:53,388 TRACE ModelFactory addObject
2012-01-09 17:34:53,388 TRACE ModelFactory addObject
2012-01-09 17:34:53,388 TRACE ModelFactory addObject
2012-01-09 17:34:53,388 TRACE ModelFactory addObject
2012-01-09 17:34:53,388 TRACE ModelFactory addObject
2012-01-09 17:34:53,389 TRACE ModelFactory addObject
2012-01-09 17:34:53,389 TRACE ModelFactory addObject
2012-01-09 17:34:53,389 TRACE ModelFactory addObject
2012-01-09 17:34:53,389 TRACE ModelFactory addObject
2012-01-09 17:34:53,390 TRACE ModelFactory addObject
2012-01-09 17:34:53,390 TRACE ModelFactory addObject
2012-01-09 17:34:53,390 TRACE ModelFactory addObject
2012-01-09 17:34:53,390 TRACE ModelFactory addObject
2012-01-09 17:34:53,390 TRACE ModelFactory addObject
2012-01-09 17:34:53,391 TRACE ModelFactory addObject
2012-01-09 17:34:53,391 TRACE ModelFactory addObject
2012-01-09 17:34:53,391 TRACE ModelFactory addObject
2012-01-09 17:34:53,391 TRACE ModelFactory addObject
2012-01-09 17:34:53,392 TRACE ModelFactory addObject
2012-01-09 17:34:53,392 TRACE ModelFactory addObject
2012-01-09 17:34:53,392 TRACE ModelFactory addObject
2012-01-09 17:34:53,392 TRACE ModelFactory addObject
2012-01-09 17:34:53,392 TRACE ModelFactory addObject
2012-01-09 17:34:53,393 TRACE ModelFactory addObject
2012-01-09 17:34:53,393 TRACE ModelFactory addObject
2012-01-09 17:34:53,393 TRACE ModelFactory addObject
2012-01-09 17:34:53,393 TRACE ModelFactory addObject
2012-01-09 17:34:53,393 TRACE ModelFactory addObject
2012-01-09 17:34:53,394 TRACE ModelFactory addObject
2012-01-09 17:34:53,394 TRACE ModelFactory addObject
2012-01-09 17:34:53,394 TRACE ModelFactory addObject
2012-01-09 17:34:53,395 TRACE ModelFactory addObject
2012-01-09 17:34:53,395 TRACE ModelFactory addObject
2012-01-09 17:34:53,395 TRACE ModelFactory addObject
2012-01-09 17:34:53,395 TRACE ModelFactory addObject
2012-01-09 17:34:53,396 TRACE ModelFactory addObject
2012-01-09 17:34:53,396 TRACE ModelFactory addObject
2012-01-09 17:34:53,396 TRACE ModelFactory addObject
2012-01-09 17:34:53,397 TRACE ModelFactory addObject
2012-01-09 17:34:53,397 TRACE ModelFactory addObject
2012-01-09 17:34:53,397 TRACE ModelFactory addObject
2012-01-09 17:34:53,398 TRACE ModelFactory addObject
2012-01-09 17:34:53,398 TRACE ModelFactory addObject
2012-01-09 17:34:53,398 TRACE ModelFactory addObject
2012-01-09 17:34:53,399 TRACE ModelFactory addObject
2012-01-09 17:34:53,399 TRACE ModelFactory addObject
2012-01-09 17:34:53,399 TRACE ModelFactory addObject
2012-01-09 17:34:53,400 TRACE ModelFactory addObject
2012-01-09 17:34:53,400 TRACE ModelFactory addObject
2012-01-09 17:34:53,400 TRACE ModelFactory addObject
2012-01-09 17:34:53,401 TRACE ModelFactory addObject
2012-01-09 17:34:53,401 TRACE ModelFactory addObject
2012-01-09 17:34:53,401 TRACE ModelFactory addObject
2012-01-09 17:34:53,401 TRACE ModelFactory addObject
2012-01-09 17:34:53,402 TRACE ModelFactory addObject
2012-01-09 17:34:53,402 TRACE ModelFactory addObject
2012-01-09 17:34:53,402 TRACE ModelFactory addObject
2012-01-09 17:34:53,403 TRACE ModelFactory addObject
2012-01-09 17:34:53,403 TRACE ModelFactory addObject
2012-01-09 17:34:53,403 TRACE ModelFactory addObject
2012-01-09 17:34:53,404 TRACE ModelFactory addObject
2012-01-09 17:34:53,404 TRACE ModelFactory addObject
2012-01-09 17:34:53,404 TRACE ModelFactory addObject
2012-01-09 17:34:53,405 TRACE ModelFactory addObject
2012-01-09 17:34:53,405 TRACE ModelFactory addObject
2012-01-09 17:34:53,406 TRACE ModelFactory addObject
2012-01-09 17:34:53,406 TRACE ModelFactory addObject
2012-01-09 17:34:53,406 TRACE ModelFactory addObject
2012-01-09 17:34:53,407 TRACE ModelFactory addObject
2012-01-09 17:34:53,407 TRACE ModelFactory addObject
2012-01-09 17:34:53,407 TRACE ModelFactory addObject
2012-01-09 17:34:53,408 TRACE ModelFactory addObject
2012-01-09 17:34:53,408 TRACE ModelFactory addObject
2012-01-09 17:34:53,408 TRACE ModelFactory addObject
2012-01-09 17:34:53,408 TRACE ModelFactory addObject
2012-01-09 17:34:53,409 TRACE ModelFactory addObject
2012-01-09 17:34:53,409 TRACE ModelFactory addObject
2012-01-09 17:34:53,409 TRACE ModelFactory addObject
2012-01-09 17:34:53,410 TRACE ModelFactory addObject
2012-01-09 17:34:53,410 TRACE ModelFactory addObject
2012-01-09 17:34:53,410 TRACE ModelFactory addObject
2012-01-09 17:34:53,411 TRACE ModelFactory addObject
2012-01-09 17:34:53,411 TRACE ModelFactory addObject
2012-01-09 17:34:53,411 TRACE ModelFactory addObject
2012-01-09 17:34:53,411 TRACE ModelFactory addObject
2012-01-09 17:34:53,411 TRACE ModelFactory addObject
2012-01-09 17:34:53,412 TRACE ModelFactory addObject
2012-01-09 17:34:53,412 TRACE ModelFactory addObject
2012-01-09 17:34:53,412 TRACE ModelFactory addObject
2012-01-09 17:34:53,412 TRACE ModelFactory addObject
2012-01-09 17:34:53,412 TRACE ModelFactory addObject
2012-01-09 17:34:53,413 TRACE ModelFactory addObject
2012-01-09 17:34:53,413 TRACE ModelFactory addObject
2012-01-09 17:34:53,413 TRACE ModelFactory addObject
2012-01-09 17:34:53,413 TRACE ModelFactory addObject
2012-01-09 17:34:53,414 TRACE ModelFactory addObject
2012-01-09 17:34:53,414 TRACE ModelFactory addObject
2012-01-09 17:34:53,414 TRACE ModelFactory addObject
2012-01-09 17:34:53,415 TRACE ModelFactory addObject
2012-01-09 17:34:53,415 TRACE ModelFactory addObject
2012-01-09 17:34:53,415 TRACE ModelFactory addObject
2012-01-09 17:34:53,416 TRACE ModelFactory addObject
2012-01-09 17:34:53,416 TRACE ModelFactory addObject
2012-01-09 17:34:53,416 TRACE ModelFactory addObject
2012-01-09 17:34:53,417 TRACE ModelFactory addObject
2012-01-09 17:34:53,417 TRACE ModelFactory addObject
2012-01-09 17:34:53,417 TRACE ModelFactory addObject
2012-01-09 17:34:53,418 TRACE ModelFactory addObject
2012-01-09 17:34:53,418 TRACE ModelFactory addObject
2012-01-09 17:34:53,418 TRACE ModelFactory addObject
2012-01-09 17:34:53,419 TRACE ModelFactory addObject
2012-01-09 17:34:53,419 TRACE ModelFactory addObject
2012-01-09 17:34:53,419 TRACE ModelFactory addObject
2012-01-09 17:34:53,420 TRACE ModelFactory addObject
2012-01-09 17:34:53,420 TRACE ModelFactory addObject
2012-01-09 17:34:53,420 TRACE ModelFactory addObject
2012-01-09 17:34:53,421 TRACE ModelFactory addObject
2012-01-09 17:34:53,421 TRACE ModelFactory addObject
2012-01-09 17:34:53,421 TRACE ModelFactory addObject
2012-01-09 17:34:53,422 TRACE ModelFactory addObject
2012-01-09 17:34:53,422 INFO KBuildMinerMain$ === PostProcessing libbb/Kbuild
2012-01-09 17:34:53,504 INFO KBuildMinerMain$ === PreProcessing libpwdgrp/Kbuild
2012-01-09 17:34:53,504 INFO KBuildMinerMain$ === Processing libpwdgrp/Kbuild
2012-01-09 17:34:53,515 TRACE ModelFactory addObject
2012-01-09 17:34:53,515 TRACE ModelFactory addObject
2012-01-09 17:34:53,515 INFO KBuildMinerMain$ === PostProcessing libpwdgrp/Kbuild
2012-01-09 17:34:53,533 INFO KBuildMinerMain$ === PreProcessing loginutils/Kbuild
2012-01-09 17:34:53,533 INFO KBuildMinerMain$ === Processing loginutils/Kbuild
2012-01-09 17:34:53,534 TRACE ModelFactory addObject
2012-01-09 17:34:53,535 TRACE ModelFactory addObject
2012-01-09 17:34:53,535 TRACE ModelFactory addObject
2012-01-09 17:34:53,535 TRACE ModelFactory addObject
2012-01-09 17:34:53,536 TRACE ModelFactory addObject
2012-01-09 17:34:53,536 TRACE ModelFactory addObject
2012-01-09 17:34:53,536 TRACE ModelFactory addObject
2012-01-09 17:34:53,537 TRACE ModelFactory addObject
2012-01-09 17:34:53,537 TRACE ModelFactory addObject
2012-01-09 17:34:53,537 TRACE ModelFactory addObject
2012-01-09 17:34:53,537 TRACE ModelFactory addObject
2012-01-09 17:34:53,537 TRACE ModelFactory addObject
2012-01-09 17:34:53,538 TRACE ModelFactory addObject
2012-01-09 17:34:53,538 TRACE ModelFactory addObject
2012-01-09 17:34:53,538 INFO KBuildMinerMain$ === PostProcessing loginutils/Kbuild
2012-01-09 17:34:53,560 INFO KBuildMinerMain$ === PreProcessing mailutils/Kbuild
2012-01-09 17:34:53,560 INFO KBuildMinerMain$ === Processing mailutils/Kbuild
2012-01-09 17:34:53,562 TRACE ModelFactory addObject
2012-01-09 17:34:53,562 TRACE ModelFactory addObject
2012-01-09 17:34:53,562 TRACE ModelFactory addObject
2012-01-09 17:34:53,562 TRACE ModelFactory addObject
2012-01-09 17:34:53,563 TRACE ModelFactory addObject
2012-01-09 17:34:53,563 TRACE ModelFactory addObject
2012-01-09 17:34:53,563 TRACE ModelFactory addObject
2012-01-09 17:34:53,563 TRACE ModelFactory addObject
2012-01-09 17:34:53,563 INFO KBuildMinerMain$ === PostProcessing mailutils/Kbuild
2012-01-09 17:34:53,582 INFO KBuildMinerMain$ === PreProcessing miscutils/Kbuild
2012-01-09 17:34:53,582 INFO KBuildMinerMain$ === Processing miscutils/Kbuild
2012-01-09 17:34:53,584 TRACE ModelFactory addObject
2012-01-09 17:34:53,584 TRACE ModelFactory addObject
2012-01-09 17:34:53,585 TRACE ModelFactory addObject
2012-01-09 17:34:53,585 TRACE ModelFactory addObject
2012-01-09 17:34:53,585 TRACE ModelFactory addObject
2012-01-09 17:34:53,586 TRACE ModelFactory addObject
2012-01-09 17:34:53,586 TRACE ModelFactory addObject
2012-01-09 17:34:53,586 TRACE ModelFactory addObject
2012-01-09 17:34:53,587 TRACE ModelFactory addObject
2012-01-09 17:34:53,587 TRACE ModelFactory addObject
2012-01-09 17:34:53,587 TRACE ModelFactory addObject
2012-01-09 17:34:53,588 TRACE ModelFactory addObject
2012-01-09 17:34:53,588 TRACE ModelFactory addObject
2012-01-09 17:34:53,588 TRACE ModelFactory addObject
2012-01-09 17:34:53,589 TRACE ModelFactory addObject
2012-01-09 17:34:53,589 TRACE ModelFactory addObject
2012-01-09 17:34:53,589 TRACE ModelFactory addObject
2012-01-09 17:34:53,590 TRACE ModelFactory addObject
2012-01-09 17:34:53,590 TRACE ModelFactory addObject
2012-01-09 17:34:53,590 TRACE ModelFactory addObject
2012-01-09 17:34:53,591 TRACE ModelFactory addObject
2012-01-09 17:34:53,591 TRACE ModelFactory addObject
2012-01-09 17:34:53,591 TRACE ModelFactory addObject
2012-01-09 17:34:53,592 TRACE ModelFactory addObject
2012-01-09 17:34:53,592 TRACE ModelFactory addObject
2012-01-09 17:34:53,592 TRACE ModelFactory addObject
2012-01-09 17:34:53,593 TRACE ModelFactory addObject
2012-01-09 17:34:53,593 TRACE ModelFactory addObject
2012-01-09 17:34:53,593 TRACE ModelFactory addObject
2012-01-09 17:34:53,594 TRACE ModelFactory addObject
2012-01-09 17:34:53,594 TRACE ModelFactory addObject
2012-01-09 17:34:53,594 TRACE ModelFactory addObject
2012-01-09 17:34:53,595 TRACE ModelFactory addObject
2012-01-09 17:34:53,595 TRACE ModelFactory addObject
2012-01-09 17:34:53,595 TRACE ModelFactory addObject
2012-01-09 17:34:53,596 TRACE ModelFactory addObject
2012-01-09 17:34:53,596 TRACE ModelFactory addObject
2012-01-09 17:34:53,596 TRACE ModelFactory addObject
2012-01-09 17:34:53,597 TRACE ModelFactory addObject
2012-01-09 17:34:53,597 TRACE ModelFactory addObject
2012-01-09 17:34:53,597 TRACE ModelFactory addObject
2012-01-09 17:34:53,597 TRACE ModelFactory addObject
2012-01-09 17:34:53,597 TRACE ModelFactory addObject
2012-01-09 17:34:53,598 TRACE ModelFactory addObject
2012-01-09 17:34:53,598 TRACE ModelFactory addObject
2012-01-09 17:34:53,598 TRACE ModelFactory addObject
2012-01-09 17:34:53,598 TRACE ModelFactory addObject
2012-01-09 17:34:53,598 TRACE ModelFactory addObject
2012-01-09 17:34:53,599 TRACE ModelFactory addObject
2012-01-09 17:34:53,599 TRACE ModelFactory addObject
2012-01-09 17:34:53,599 TRACE ModelFactory addObject
2012-01-09 17:34:53,599 INFO KBuildMinerMain$ === PostProcessing miscutils/Kbuild
2012-01-09 17:34:53,643 INFO KBuildMinerMain$ === PreProcessing modutils/Kbuild
2012-01-09 17:34:53,643 INFO KBuildMinerMain$ === Processing modutils/Kbuild
2012-01-09 17:34:53,660 TRACE ModelFactory addObject
2012-01-09 17:34:53,660 TRACE ModelFactory addObject
2012-01-09 17:34:53,661 TRACE ModelFactory addObject
2012-01-09 17:34:53,661 TRACE ModelFactory addObject
2012-01-09 17:34:53,662 TRACE ModelFactory addObject
2012-01-09 17:34:53,662 TRACE ModelFactory addObject
2012-01-09 17:34:53,662 TRACE ModelFactory addObject
2012-01-09 17:34:53,663 TRACE ModelFactory addObject
2012-01-09 17:34:53,663 TRACE ModelFactory addObject
2012-01-09 17:34:53,663 TRACE ModelFactory addObject
2012-01-09 17:34:53,663 TRACE ModelFactory addObject
2012-01-09 17:34:53,664 TRACE ModelFactory addObject
2012-01-09 17:34:53,664 TRACE ModelFactory addObject
2012-01-09 17:34:53,664 TRACE ModelFactory addObject
2012-01-09 17:34:53,664 INFO KBuildMinerMain$ === PostProcessing modutils/Kbuild
2012-01-09 17:34:53,697 INFO KBuildMinerMain$ === PreProcessing networking/Kbuild
2012-01-09 17:34:53,697 INFO KBuildMinerMain$ === Processing networking/Kbuild
2012-01-09 17:34:53,708 TRACE ModelFactory addObject
2012-01-09 17:34:53,708 TRACE ModelFactory addObject
2012-01-09 17:34:53,709 TRACE ModelFactory addObject
2012-01-09 17:34:53,709 TRACE ModelFactory addObject
2012-01-09 17:34:53,709 TRACE ModelFactory addObject
2012-01-09 17:34:53,709 TRACE ModelFactory addObject
2012-01-09 17:34:53,709 TRACE ModelFactory addObject
2012-01-09 17:34:53,709 TRACE ModelFactory addObject
2012-01-09 17:34:53,710 TRACE ModelFactory addObject
2012-01-09 17:34:53,710 TRACE ModelFactory addObject
2012-01-09 17:34:53,710 TRACE ModelFactory addObject
2012-01-09 17:34:53,710 TRACE ModelFactory addObject
2012-01-09 17:34:53,710 TRACE ModelFactory addObject
2012-01-09 17:34:53,710 TRACE ModelFactory addObject
2012-01-09 17:34:53,710 TRACE ModelFactory addObject
2012-01-09 17:34:53,711 TRACE ModelFactory addObject
2012-01-09 17:34:53,711 TRACE ModelFactory addObject
2012-01-09 17:34:53,711 TRACE ModelFactory addObject
2012-01-09 17:34:53,711 TRACE ModelFactory addObject
2012-01-09 17:34:53,711 TRACE ModelFactory addObject
2012-01-09 17:34:53,711 TRACE ModelFactory addObject
2012-01-09 17:34:53,711 TRACE ModelFactory addObject
2012-01-09 17:34:53,712 TRACE ModelFactory addObject
2012-01-09 17:34:53,712 TRACE ModelFactory addObject
2012-01-09 17:34:53,712 TRACE ModelFactory addObject
2012-01-09 17:34:53,712 TRACE ModelFactory addObject
2012-01-09 17:34:53,712 TRACE ModelFactory addObject
2012-01-09 17:34:53,713 TRACE ModelFactory addObject
2012-01-09 17:34:53,713 TRACE ModelFactory addObject
2012-01-09 17:34:53,713 TRACE ModelFactory addObject
2012-01-09 17:34:53,713 TRACE ModelFactory addObject
2012-01-09 17:34:53,713 TRACE ModelFactory addObject
2012-01-09 17:34:53,713 TRACE ModelFactory addObject
2012-01-09 17:34:53,714 TRACE ModelFactory addObject
2012-01-09 17:34:53,714 TRACE ModelFactory addObject
2012-01-09 17:34:53,714 TRACE ModelFactory addObject
2012-01-09 17:34:53,714 TRACE ModelFactory addObject
2012-01-09 17:34:53,714 TRACE ModelFactory addObject
2012-01-09 17:34:53,715 TRACE ModelFactory addObject
2012-01-09 17:34:53,715 TRACE ModelFactory addObject
2012-01-09 17:34:53,715 TRACE ModelFactory addObject
2012-01-09 17:34:53,715 TRACE ModelFactory addObject
2012-01-09 17:34:53,715 TRACE ModelFactory addObject
2012-01-09 17:34:53,715 TRACE ModelFactory addObject
2012-01-09 17:34:53,716 TRACE ModelFactory addObject
2012-01-09 17:34:53,716 TRACE ModelFactory addObject
2012-01-09 17:34:53,716 TRACE ModelFactory addObject
2012-01-09 17:34:53,716 TRACE ModelFactory addObject
2012-01-09 17:34:53,716 INFO KBuildMinerMain$ === PostProcessing networking/Kbuild
2012-01-09 17:34:53,739 INFO KBuildMinerMain$ === PreProcessing networking/libiproute/Kbuild
2012-01-09 17:34:53,739 INFO KBuildMinerMain$ === Processing networking/libiproute/Kbuild
2012-01-09 17:34:53,752 TRACE ModelFactory addObject
2012-01-09 17:34:53,753 TRACE ModelFactory addObject
2012-01-09 17:34:53,753 TRACE ModelFactory addObject
2012-01-09 17:34:53,753 TRACE ModelFactory addObject
2012-01-09 17:34:53,753 TRACE ModelFactory addObject
2012-01-09 17:34:53,753 TRACE ModelFactory addObject
2012-01-09 17:34:53,753 TRACE ModelFactory addObject
2012-01-09 17:34:53,753 TRACE ModelFactory addObject
2012-01-09 17:34:53,753 TRACE ModelFactory addObject
2012-01-09 17:34:53,753 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,754 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,755 TRACE ModelFactory addObject
2012-01-09 17:34:53,756 TRACE ModelFactory addObject
2012-01-09 17:34:53,756 TRACE ModelFactory addObject
2012-01-09 17:34:53,756 TRACE ModelFactory addObject
2012-01-09 17:34:53,756 TRACE ModelFactory addObject
2012-01-09 17:34:53,756 TRACE ModelFactory addObject
2012-01-09 17:34:53,756 TRACE ModelFactory addObject
2012-01-09 17:34:53,756 TRACE ModelFactory addObject
2012-01-09 17:34:53,756 TRACE ModelFactory addObject
2012-01-09 17:34:53,756 TRACE ModelFactory addObject
2012-01-09 17:34:53,757 INFO KBuildMinerMain$ === PostProcessing networking/libiproute/Kbuild
2012-01-09 17:34:53,782 INFO KBuildMinerMain$ === PreProcessing networking/udhcp/Kbuild
2012-01-09 17:34:53,782 INFO KBuildMinerMain$ === Processing networking/udhcp/Kbuild
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,784 TRACE ModelFactory addObject
2012-01-09 17:34:53,785 TRACE ModelFactory addObject
2012-01-09 17:34:53,790 TRACE ModelFactory addObject
2012-01-09 17:34:53,790 TRACE ModelFactory addObject
2012-01-09 17:34:53,790 TRACE ModelFactory addObject
2012-01-09 17:34:53,790 TRACE ModelFactory addObject
2012-01-09 17:34:53,790 TRACE ModelFactory addObject
2012-01-09 17:34:53,790 TRACE ModelFactory addObject
2012-01-09 17:34:53,791 TRACE ModelFactory addObject
2012-01-09 17:34:53,791 TRACE ModelFactory addObject
2012-01-09 17:34:53,791 INFO KBuildMinerMain$ === PostProcessing networking/udhcp/Kbuild
2012-01-09 17:34:53,816 INFO KBuildMinerMain$ === PreProcessing printutils/Kbuild
2012-01-09 17:34:53,816 INFO KBuildMinerMain$ === Processing printutils/Kbuild
2012-01-09 17:34:53,825 TRACE ModelFactory addObject
2012-01-09 17:34:53,825 TRACE ModelFactory addObject
2012-01-09 17:34:53,825 TRACE ModelFactory addObject
2012-01-09 17:34:53,825 INFO KBuildMinerMain$ === PostProcessing printutils/Kbuild
2012-01-09 17:34:53,841 INFO KBuildMinerMain$ === PreProcessing procps/Kbuild
2012-01-09 17:34:53,842 INFO KBuildMinerMain$ === Processing procps/Kbuild
2012-01-09 17:34:53,844 TRACE ModelFactory addObject
2012-01-09 17:34:53,844 TRACE ModelFactory addObject
2012-01-09 17:34:53,845 TRACE ModelFactory addObject
2012-01-09 17:34:53,845 TRACE ModelFactory addObject
2012-01-09 17:34:53,846 TRACE ModelFactory addObject
2012-01-09 17:34:53,846 TRACE ModelFactory addObject
2012-01-09 17:34:53,847 TRACE ModelFactory addObject
2012-01-09 17:34:53,849 TRACE ModelFactory addObject
2012-01-09 17:34:53,850 TRACE ModelFactory addObject
2012-01-09 17:34:53,850 TRACE ModelFactory addObject
2012-01-09 17:34:53,850 TRACE ModelFactory addObject
2012-01-09 17:34:53,850 TRACE ModelFactory addObject
2012-01-09 17:34:53,851 TRACE ModelFactory addObject
2012-01-09 17:34:53,851 TRACE ModelFactory addObject
2012-01-09 17:34:53,851 TRACE ModelFactory addObject
2012-01-09 17:34:53,851 TRACE ModelFactory addObject
2012-01-09 17:34:53,851 TRACE ModelFactory addObject
2012-01-09 17:34:53,851 TRACE ModelFactory addObject
2012-01-09 17:34:53,851 TRACE ModelFactory addObject
2012-01-09 17:34:53,851 TRACE ModelFactory addObject
2012-01-09 17:34:53,851 TRACE ModelFactory addObject
2012-01-09 17:34:53,852 INFO KBuildMinerMain$ === PostProcessing procps/Kbuild
2012-01-09 17:34:53,874 INFO KBuildMinerMain$ === PreProcessing runit/Kbuild
2012-01-09 17:34:53,874 INFO KBuildMinerMain$ === Processing runit/Kbuild
2012-01-09 17:34:53,876 TRACE ModelFactory addObject
2012-01-09 17:34:53,876 TRACE ModelFactory addObject
2012-01-09 17:34:53,876 TRACE ModelFactory addObject
2012-01-09 17:34:53,877 TRACE ModelFactory addObject
2012-01-09 17:34:53,877 TRACE ModelFactory addObject
2012-01-09 17:34:53,877 TRACE ModelFactory addObject
2012-01-09 17:34:53,878 TRACE ModelFactory addObject
2012-01-09 17:34:53,878 TRACE ModelFactory addObject
2012-01-09 17:34:53,878 TRACE ModelFactory addObject
2012-01-09 17:34:53,878 INFO KBuildMinerMain$ === PostProcessing runit/Kbuild
2012-01-09 17:34:53,896 INFO KBuildMinerMain$ === PreProcessing selinux/Kbuild
2012-01-09 17:34:53,896 INFO KBuildMinerMain$ === Processing selinux/Kbuild
2012-01-09 17:34:53,897 TRACE ModelFactory addObject
2012-01-09 17:34:53,898 TRACE ModelFactory addObject
2012-01-09 17:34:53,898 TRACE ModelFactory addObject
2012-01-09 17:34:53,898 TRACE ModelFactory addObject
2012-01-09 17:34:53,899 TRACE ModelFactory addObject
2012-01-09 17:34:53,899 TRACE ModelFactory addObject
2012-01-09 17:34:53,899 TRACE ModelFactory addObject
2012-01-09 17:34:53,900 TRACE ModelFactory addObject
2012-01-09 17:34:53,900 TRACE ModelFactory addObject
2012-01-09 17:34:53,900 TRACE ModelFactory addObject
2012-01-09 17:34:53,901 TRACE ModelFactory addObject
2012-01-09 17:34:53,901 TRACE ModelFactory addObject
2012-01-09 17:34:53,901 INFO KBuildMinerMain$ === PostProcessing selinux/Kbuild
2012-01-09 17:34:53,937 INFO KBuildMinerMain$ === PreProcessing shell/Kbuild
2012-01-09 17:34:53,937 INFO KBuildMinerMain$ === Processing shell/Kbuild
2012-01-09 17:34:53,939 TRACE ModelFactory addObject
2012-01-09 17:34:53,939 TRACE ModelFactory addObject
2012-01-09 17:34:53,939 TRACE ModelFactory addObject
2012-01-09 17:34:53,939 TRACE ModelFactory addObject
2012-01-09 17:34:53,940 TRACE ModelFactory addObject
2012-01-09 17:34:53,940 TRACE ModelFactory addObject
2012-01-09 17:34:53,940 TRACE ModelFactory addObject
2012-01-09 17:34:53,940 TRACE ModelFactory addObject
2012-01-09 17:34:53,941 TRACE ModelFactory addObject
2012-01-09 17:34:53,941 TRACE ModelFactory addObject
2012-01-09 17:34:53,941 INFO KBuildMinerMain$ === PostProcessing shell/Kbuild
2012-01-09 17:34:53,979 INFO KBuildMinerMain$ === PreProcessing sysklogd/Kbuild
2012-01-09 17:34:53,979 INFO KBuildMinerMain$ === Processing sysklogd/Kbuild
2012-01-09 17:34:53,997 TRACE ModelFactory addObject
2012-01-09 17:34:53,997 TRACE ModelFactory addObject
2012-01-09 17:34:53,998 TRACE ModelFactory addObject
2012-01-09 17:34:53,998 TRACE ModelFactory addObject
2012-01-09 17:34:53,998 INFO KBuildMinerMain$ === PostProcessing sysklogd/Kbuild
2012-01-09 17:34:54,012 INFO KBuildMinerMain$ === PreProcessing util-linux/Kbuild
2012-01-09 17:34:54,012 INFO KBuildMinerMain$ === Processing util-linux/Kbuild
2012-01-09 17:34:54,013 TRACE ModelFactory addObject
2012-01-09 17:34:54,014 TRACE ModelFactory addObject
2012-01-09 17:34:54,014 TRACE ModelFactory addObject
2012-01-09 17:34:54,014 TRACE ModelFactory addObject
2012-01-09 17:34:54,015 TRACE ModelFactory addObject
2012-01-09 17:34:54,015 TRACE ModelFactory addObject
2012-01-09 17:34:54,015 TRACE ModelFactory addObject
2012-01-09 17:34:54,016 TRACE ModelFactory addObject
2012-01-09 17:34:54,016 TRACE ModelFactory addObject
2012-01-09 17:34:54,016 TRACE ModelFactory addObject
2012-01-09 17:34:54,016 TRACE ModelFactory addObject
2012-01-09 17:34:54,017 TRACE ModelFactory addObject
2012-01-09 17:34:54,017 TRACE ModelFactory addObject
2012-01-09 17:34:54,017 TRACE ModelFactory addObject
2012-01-09 17:34:54,017 TRACE ModelFactory addObject
2012-01-09 17:34:54,017 TRACE ModelFactory addObject
2012-01-09 17:34:54,017 TRACE ModelFactory addObject
2012-01-09 17:34:54,018 TRACE ModelFactory addObject
2012-01-09 17:34:54,018 TRACE ModelFactory addObject
2012-01-09 17:34:54,022 TRACE ModelFactory addObject
2012-01-09 17:34:54,023 TRACE ModelFactory addObject
2012-01-09 17:34:54,023 TRACE ModelFactory addObject
2012-01-09 17:34:54,023 TRACE ModelFactory addObject
2012-01-09 17:34:54,023 TRACE ModelFactory addObject
2012-01-09 17:34:54,023 TRACE ModelFactory addObject
2012-01-09 17:34:54,024 TRACE ModelFactory addObject
2012-01-09 17:34:54,024 TRACE ModelFactory addObject
2012-01-09 17:34:54,024 TRACE ModelFactory addObject
2012-01-09 17:34:54,024 TRACE ModelFactory addObject
2012-01-09 17:34:54,024 TRACE ModelFactory addObject
2012-01-09 17:34:54,025 TRACE ModelFactory addObject
2012-01-09 17:34:54,025 TRACE ModelFactory addObject
2012-01-09 17:34:54,025 TRACE ModelFactory addObject
2012-01-09 17:34:54,025 TRACE ModelFactory addObject
2012-01-09 17:34:54,025 TRACE ModelFactory addObject
2012-01-09 17:34:54,025 TRACE ModelFactory addObject
2012-01-09 17:34:54,026 TRACE ModelFactory addObject
2012-01-09 17:34:54,026 TRACE ModelFactory addObject
2012-01-09 17:34:54,026 TRACE ModelFactory addObject
2012-01-09 17:34:54,026 TRACE ModelFactory addObject
2012-01-09 17:34:54,026 INFO KBuildMinerMain$ === PostProcessing util-linux/Kbuild
2012-01-09 17:34:54,056 INFO KBuildMinerMain$ === PreProcessing util-linux/volume_id/Kbuild
2012-01-09 17:34:54,056 INFO KBuildMinerMain$ === Processing util-linux/volume_id/Kbuild
2012-01-09 17:34:54,073 TRACE ModelFactory addObject
2012-01-09 17:34:54,073 TRACE ModelFactory addObject
2012-01-09 17:34:54,073 TRACE ModelFactory addObject
2012-01-09 17:34:54,074 TRACE ModelFactory addObject
2012-01-09 17:34:54,074 TRACE ModelFactory addObject
2012-01-09 17:34:54,074 TRACE ModelFactory addObject
2012-01-09 17:34:54,075 TRACE ModelFactory addObject
2012-01-09 17:34:54,075 TRACE ModelFactory addObject
2012-01-09 17:34:54,075 TRACE ModelFactory addObject
2012-01-09 17:34:54,076 TRACE ModelFactory addObject
2012-01-09 17:34:54,076 TRACE ModelFactory addObject
2012-01-09 17:34:54,076 TRACE ModelFactory addObject
2012-01-09 17:34:54,076 TRACE ModelFactory addObject
2012-01-09 17:34:54,077 TRACE ModelFactory addObject
2012-01-09 17:34:54,077 TRACE ModelFactory addObject
2012-01-09 17:34:54,077 TRACE ModelFactory addObject
2012-01-09 17:34:54,077 TRACE ModelFactory addObject
2012-01-09 17:34:54,077 TRACE ModelFactory addObject
2012-01-09 17:34:54,078 TRACE ModelFactory addObject
2012-01-09 17:34:54,078 TRACE ModelFactory addObject
2012-01-09 17:34:54,078 TRACE ModelFactory addObject
2012-01-09 17:34:54,078 TRACE ModelFactory addObject
2012-01-09 17:34:54,078 INFO KBuildMinerMain$ === PostProcessing util-linux/volume_id/Kbuild
2012-01-09 17:34:54,107 INFO PersistenceManager$ Saving Build AST to: ast.xml
2012-01-09 17:34:55,110 INFO KBuildMinerMain$ Deriving file presence conditions...
2012-01-09 17:34:56,305 DEBUG PCDerivation$ Trying to find path for: [Object: applets]
2012-01-09 17:34:56,308 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> applets/applets.c, builtAs -> y, generated -> false, objectFile -> applets, listName -> obj)
2012-01-09 17:34:56,309 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> applets/applets.c, builtAs -> y, generated -> false, objectFile -> applets, listName -> obj) is: MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild)
2012-01-09 17:34:56,309 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild)
2012-01-09 17:34:56,309 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,309 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,319 DEBUG PCDerivation$ Expression of path for object occurrence applets/applets.c: [TRUE]
2012-01-09 17:34:56,319 DEBUG PCDerivation$ Trying to find path for: [Object: data_skip]
2012-01-09 17:34:56,319 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES)
2012-01-09 17:34:56,319 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,319 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,320 TRACE PCDerivation$ trying to find variable reference, var: COMMON_FILES
2012-01-09 17:34:56,322 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-09 17:34:56,345 TRACE PCDerivation$    # collecting: [VariableReference: COMMON_FILES]
2012-01-09 17:34:56,345 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,345 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES) is: IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,345 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,345 TRACE PCDerivation$ parent of IfBNode --> Map(expr -> Unknown(!(lib-y == ""))) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,345 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,346 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,347 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,347 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,347 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,349 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_skip.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,349 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_all]
2012-01-09 17:34:56,349 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES)
2012-01-09 17:34:56,349 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,350 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_all.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,350 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_stdout]
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES)
2012-01-09 17:34:56,350 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,350 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,351 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,351 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,351 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,351 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_stdout.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,351 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_all]
2012-01-09 17:34:56,351 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES)
2012-01-09 17:34:56,351 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,351 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,351 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,351 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,351 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,352 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,352 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,352 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_all.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,352 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list]
2012-01-09 17:34:56,352 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES)
2012-01-09 17:34:56,352 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,352 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,352 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,352 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,352 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,353 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,353 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,353 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,353 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_reject_list]
2012-01-09 17:34:56,353 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES)
2012-01-09 17:34:56,353 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,353 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,353 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,353 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,353 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,353 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,354 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,354 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_reject_list.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,354 DEBUG PCDerivation$ Trying to find path for: [Object: header_skip]
2012-01-09 17:34:56,354 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES)
2012-01-09 17:34:56,354 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,354 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,354 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,354 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,354 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,354 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,355 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,355 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_skip.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,355 DEBUG PCDerivation$ Trying to find path for: [Object: header_list]
2012-01-09 17:34:56,355 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES)
2012-01-09 17:34:56,355 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,355 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,355 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,355 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,355 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,363 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,364 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,364 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_list.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,364 DEBUG PCDerivation$ Trying to find path for: [Object: header_verbose_list]
2012-01-09 17:34:56,364 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES)
2012-01-09 17:34:56,364 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,364 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,364 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,364 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,364 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,364 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,365 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,365 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_verbose_list.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,365 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_read]
2012-01-09 17:34:56,365 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES)
2012-01-09 17:34:56,365 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,365 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,365 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,365 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,365 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,365 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,366 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,366 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_read.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,366 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_jump]
2012-01-09 17:34:56,366 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES)
2012-01-09 17:34:56,366 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,366 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,366 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,366 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,366 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,366 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,367 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,367 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_jump.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,367 DEBUG PCDerivation$ Trying to find path for: [Object: data_align]
2012-01-09 17:34:56,367 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES)
2012-01-09 17:34:56,367 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,367 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,367 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,367 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,367 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,367 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,367 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,367 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_align.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,368 DEBUG PCDerivation$ Trying to find path for: [Object: find_list_entry]
2012-01-09 17:34:56,368 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES)
2012-01-09 17:34:56,368 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,368 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,368 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,368 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,368 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,368 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,368 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,368 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/find_list_entry.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,368 DEBUG PCDerivation$ Trying to find path for: [Object: init_handle]
2012-01-09 17:34:56,368 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES)
2012-01-09 17:34:56,369 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,369 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,369 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,369 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,369 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,369 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,369 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,369 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/init_handle.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,369 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-09 17:34:56,369 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES)
2012-01-09 17:34:56,369 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,369 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,369 TRACE PCDerivation$ trying to find variable reference, var: DPKG_FILES
2012-01-09 17:34:56,369 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-09 17:34:56,373 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-09 17:34:56,373 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-09 17:34:56,387 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,387 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,388 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,388 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,388 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,388 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,388 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,388 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,388 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,389 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,389 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-09 17:34:56,389 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-09 17:34:56,389 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES)
2012-01-09 17:34:56,389 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,389 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,389 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,389 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,389 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,390 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,390 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,390 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,390 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,390 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,390 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-09 17:34:56,390 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-09 17:34:56,390 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES)
2012-01-09 17:34:56,391 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,391 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,391 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,391 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,391 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,391 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,391 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,391 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,391 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,392 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,392 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-09 17:34:56,392 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list_reassign]
2012-01-09 17:34:56,392 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES)
2012-01-09 17:34:56,392 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,392 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,392 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,392 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,392 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,392 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,393 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,393 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,393 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,393 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,393 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list_reassign.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-09 17:34:56,393 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-09 17:34:56,403 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib)
2012-01-09 17:34:56,404 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,404 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,404 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,404 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,404 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-09 17:34:56,404 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-09 17:34:56,404 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib)
2012-01-09 17:34:56,404 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,404 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,404 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,404 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,404 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-09 17:34:56,404 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_bunzip2]
2012-01-09 17:34:56,404 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib)
2012-01-09 17:34:56,405 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,405 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_bunzip2.c: (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m")))
2012-01-09 17:34:56,405 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unlzma]
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib)
2012-01-09 17:34:56,405 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,405 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unlzma.c: (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")))
2012-01-09 17:34:56,405 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unxz]
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib)
2012-01-09 17:34:56,405 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,405 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,405 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unxz.c: (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-09 17:34:56,405 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_cpio]
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib)
2012-01-09 17:34:56,406 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,406 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_cpio.c: ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")))
2012-01-09 17:34:56,406 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unzip]
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib)
2012-01-09 17:34:56,406 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,406 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unzip.c: ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")))
2012-01-09 17:34:56,406 DEBUG PCDerivation$ Trying to find path for: [Object: open_transformer]
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib)
2012-01-09 17:34:56,406 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,406 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,407 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/open_transformer.c: (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-09 17:34:56,407 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib)
2012-01-09 17:34:56,407 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,407 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-09 17:34:56,407 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_uncompress]
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib)
2012-01-09 17:34:56,407 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,407 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_uncompress.c: (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m")))
2012-01-09 17:34:56,407 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1]
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib)
2012-01-09 17:34:56,407 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,407 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,408 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-09 17:34:56,408 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1o]
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib)
2012-01-09 17:34:56,408 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,408 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1o.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-09 17:34:56,408 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_d]
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib)
2012-01-09 17:34:56,408 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,408 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_d.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-09 17:34:56,408 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_9x]
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib)
2012-01-09 17:34:56,408 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,408 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,409 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_9x.c: ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m"))
2012-01-09 17:34:56,409 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_gz]
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib)
2012-01-09 17:34:56,409 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,409 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_gz.c: ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))
2012-01-09 17:34:56,409 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_bz2]
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib)
2012-01-09 17:34:56,409 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,409 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_bz2.c: ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))
2012-01-09 17:34:56,409 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_lzma]
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib)
2012-01-09 17:34:56,409 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,409 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,410 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_lzma.c: ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))
2012-01-09 17:34:56,410 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_command]
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib)
2012-01-09 17:34:56,410 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,410 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_command.c: ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m"))
2012-01-09 17:34:56,410 DEBUG PCDerivation$ Trying to find path for: [Object: ar]
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/ar.c, generated -> false, objectFile -> ar, listName -> lib)
2012-01-09 17:34:56,410 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/ar.c, generated -> false, objectFile -> ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,410 DEBUG PCDerivation$ Expression of path for object occurrence archival/ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-09 17:34:56,410 DEBUG PCDerivation$ Trying to find path for: [Object: cpio]
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")), sourceFile -> archival/cpio.c, generated -> false, objectFile -> cpio, listName -> lib)
2012-01-09 17:34:56,410 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")), sourceFile -> archival/cpio.c, generated -> false, objectFile -> cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,410 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,411 DEBUG PCDerivation$ Expression of path for object occurrence archival/cpio.c: ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m"))
2012-01-09 17:34:56,411 DEBUG PCDerivation$ Trying to find path for: [Object: dpkg]
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), sourceFile -> archival/dpkg.c, generated -> false, objectFile -> dpkg, listName -> lib)
2012-01-09 17:34:56,411 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), sourceFile -> archival/dpkg.c, generated -> false, objectFile -> dpkg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,411 DEBUG PCDerivation$ Expression of path for object occurrence archival/dpkg.c: ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m"))
2012-01-09 17:34:56,411 DEBUG PCDerivation$ Trying to find path for: [Object: dpkg_deb]
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), sourceFile -> archival/dpkg_deb.c, generated -> false, objectFile -> dpkg_deb, listName -> lib)
2012-01-09 17:34:56,411 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), sourceFile -> archival/dpkg_deb.c, generated -> false, objectFile -> dpkg_deb, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,411 DEBUG PCDerivation$ Expression of path for object occurrence archival/dpkg_deb.c: ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m"))
2012-01-09 17:34:56,411 DEBUG PCDerivation$ Trying to find path for: [Object: rpm2cpio]
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m")), sourceFile -> archival/rpm2cpio.c, generated -> false, objectFile -> rpm2cpio, listName -> lib)
2012-01-09 17:34:56,411 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m")), sourceFile -> archival/rpm2cpio.c, generated -> false, objectFile -> rpm2cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,411 DEBUG PCDerivation$ Expression of path for object occurrence archival/rpm2cpio.c: ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))
2012-01-09 17:34:56,411 DEBUG PCDerivation$ Trying to find path for: [Object: rpm]
2012-01-09 17:34:56,411 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")), sourceFile -> archival/rpm.c, generated -> false, objectFile -> rpm, listName -> lib)
2012-01-09 17:34:56,412 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")), sourceFile -> archival/rpm.c, generated -> false, objectFile -> rpm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,412 DEBUG PCDerivation$ Expression of path for object occurrence archival/rpm.c: ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))
2012-01-09 17:34:56,412 DEBUG PCDerivation$ Trying to find path for: [Object: tar]
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/tar.c, generated -> false, objectFile -> tar, listName -> lib)
2012-01-09 17:34:56,412 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/tar.c, generated -> false, objectFile -> tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,412 DEBUG PCDerivation$ Expression of path for object occurrence archival/tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-09 17:34:56,412 DEBUG PCDerivation$ Trying to find path for: [Object: unzip]
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m")), sourceFile -> archival/unzip.c, generated -> false, objectFile -> unzip, listName -> lib)
2012-01-09 17:34:56,412 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m")), sourceFile -> archival/unzip.c, generated -> false, objectFile -> unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,412 DEBUG PCDerivation$ Expression of path for object occurrence archival/unzip.c: ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))
2012-01-09 17:34:56,412 DEBUG PCDerivation$ Trying to find path for: [Object: lzop]
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/lzop.c, generated -> false, objectFile -> lzop, listName -> lib)
2012-01-09 17:34:56,412 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/lzop.c, generated -> false, objectFile -> lzop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,412 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,412 DEBUG PCDerivation$ Expression of path for object occurrence archival/lzop.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-09 17:34:56,413 DEBUG PCDerivation$ Trying to find path for: [Object: bbunzip]
2012-01-09 17:34:56,413 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m"))), sourceFile -> archival/bbunzip.c, generated -> false, objectFile -> bbunzip, listName -> lib)
2012-01-09 17:34:56,413 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m"))), sourceFile -> archival/bbunzip.c, generated -> false, objectFile -> bbunzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,413 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,413 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,413 DEBUG PCDerivation$ Expression of path for object occurrence archival/bbunzip.c: (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")))
2012-01-09 17:34:56,413 DEBUG PCDerivation$ Trying to find path for: [Object: gzip]
2012-01-09 17:34:56,413 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m")), sourceFile -> archival/gzip.c, generated -> false, objectFile -> gzip, listName -> lib)
2012-01-09 17:34:56,413 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m")), sourceFile -> archival/gzip.c, generated -> false, objectFile -> gzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,413 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,413 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,413 DEBUG PCDerivation$ Expression of path for object occurrence archival/gzip.c: ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))
2012-01-09 17:34:56,413 DEBUG PCDerivation$ Trying to find path for: [Object: bzip2]
2012-01-09 17:34:56,413 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m")), sourceFile -> archival/bzip2.c, generated -> false, objectFile -> bzip2, listName -> lib)
2012-01-09 17:34:56,423 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m")), sourceFile -> archival/bzip2.c, generated -> false, objectFile -> bzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,424 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-09 17:34:56,424 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,424 DEBUG PCDerivation$ Expression of path for object occurrence archival/bzip2.c: ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))
2012-01-09 17:34:56,424 DEBUG PCDerivation$ Trying to find path for: [Object: data_skip]
2012-01-09 17:34:56,424 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES)
2012-01-09 17:34:56,424 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,424 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,424 TRACE PCDerivation$ trying to find variable reference, var: COMMON_FILES
2012-01-09 17:34:56,424 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-09 17:34:56,431 TRACE PCDerivation$    # collecting: [VariableReference: COMMON_FILES]
2012-01-09 17:34:56,431 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,432 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES) is: IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,432 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,432 TRACE PCDerivation$ parent of IfBNode --> Map(expr -> Unknown(!(lib-y == ""))) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,432 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,432 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,432 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,432 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_skip.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,432 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_all]
2012-01-09 17:34:56,432 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES)
2012-01-09 17:34:56,432 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,432 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,432 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,432 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,432 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,433 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,433 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_all.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,433 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_stdout]
2012-01-09 17:34:56,433 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES)
2012-01-09 17:34:56,433 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,433 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,433 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,433 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,433 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,443 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,444 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_stdout.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,444 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_all]
2012-01-09 17:34:56,444 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES)
2012-01-09 17:34:56,444 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,444 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,444 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,444 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,444 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,444 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,444 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_all.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,444 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list]
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES)
2012-01-09 17:34:56,445 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,445 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,445 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_reject_list]
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES)
2012-01-09 17:34:56,445 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,445 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,446 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,446 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_reject_list.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,446 DEBUG PCDerivation$ Trying to find path for: [Object: header_skip]
2012-01-09 17:34:56,446 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES)
2012-01-09 17:34:56,446 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,446 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,446 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,446 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,446 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,446 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,446 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_skip.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,446 DEBUG PCDerivation$ Trying to find path for: [Object: header_list]
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES)
2012-01-09 17:34:56,447 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,447 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_list.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,447 DEBUG PCDerivation$ Trying to find path for: [Object: header_verbose_list]
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES)
2012-01-09 17:34:56,447 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,447 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,448 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,448 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_verbose_list.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,448 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_read]
2012-01-09 17:34:56,448 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES)
2012-01-09 17:34:56,448 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,448 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,448 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,448 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,448 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,448 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,448 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_read.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,448 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_jump]
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES)
2012-01-09 17:34:56,449 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,449 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_jump.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,449 DEBUG PCDerivation$ Trying to find path for: [Object: data_align]
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES)
2012-01-09 17:34:56,449 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,449 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,450 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,450 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_align.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,450 DEBUG PCDerivation$ Trying to find path for: [Object: find_list_entry]
2012-01-09 17:34:56,450 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES)
2012-01-09 17:34:56,450 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,450 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,450 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,450 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,450 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,450 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,450 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/find_list_entry.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,450 DEBUG PCDerivation$ Trying to find path for: [Object: init_handle]
2012-01-09 17:34:56,451 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES)
2012-01-09 17:34:56,451 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,451 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-09 17:34:56,451 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-09 17:34:56,451 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-09 17:34:56,451 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,451 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,451 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/init_handle.c: Unknown(!(lib-y == ""))
2012-01-09 17:34:56,451 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-09 17:34:56,451 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES)
2012-01-09 17:34:56,451 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,451 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,451 TRACE PCDerivation$ trying to find variable reference, var: DPKG_FILES
2012-01-09 17:34:56,451 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-09 17:34:56,465 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-09 17:34:56,465 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-09 17:34:56,469 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,470 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,470 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,470 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-09 17:34:56,470 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES)
2012-01-09 17:34:56,470 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,470 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,470 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-09 17:34:56,471 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,471 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-09 17:34:56,471 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list_reassign]
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,471 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,472 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list_reassign.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-09 17:34:56,472 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-09 17:34:56,472 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib)
2012-01-09 17:34:56,472 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,472 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,472 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,472 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-09 17:34:56,472 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-09 17:34:56,472 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib)
2012-01-09 17:34:56,472 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,472 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,472 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,472 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-09 17:34:56,472 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_bunzip2]
2012-01-09 17:34:56,472 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib)
2012-01-09 17:34:56,472 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,472 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,472 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,472 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_bunzip2.c: (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m")))
2012-01-09 17:34:56,473 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unlzma]
2012-01-09 17:34:56,473 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib)
2012-01-09 17:34:56,473 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,473 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,473 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,473 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unlzma.c: (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")))
2012-01-09 17:34:56,473 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unxz]
2012-01-09 17:34:56,473 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib)
2012-01-09 17:34:56,473 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,473 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,473 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,473 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unxz.c: (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-09 17:34:56,473 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_cpio]
2012-01-09 17:34:56,483 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib)
2012-01-09 17:34:56,484 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,484 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,484 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,484 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_cpio.c: ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")))
2012-01-09 17:34:56,484 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unzip]
2012-01-09 17:34:56,484 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib)
2012-01-09 17:34:56,484 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,484 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,484 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,484 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unzip.c: ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")))
2012-01-09 17:34:56,484 DEBUG PCDerivation$ Trying to find path for: [Object: open_transformer]
2012-01-09 17:34:56,484 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib)
2012-01-09 17:34:56,484 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,484 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,484 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,484 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/open_transformer.c: (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-09 17:34:56,484 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-09 17:34:56,484 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib)
2012-01-09 17:34:56,485 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,485 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-09 17:34:56,485 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_uncompress]
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib)
2012-01-09 17:34:56,485 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,485 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_uncompress.c: (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m")))
2012-01-09 17:34:56,485 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1]
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib)
2012-01-09 17:34:56,485 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,485 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-09 17:34:56,485 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1o]
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib)
2012-01-09 17:34:56,485 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,485 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,486 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1o.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-09 17:34:56,486 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_d]
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib)
2012-01-09 17:34:56,486 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,486 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_d.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-09 17:34:56,486 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_9x]
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib)
2012-01-09 17:34:56,486 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,486 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_9x.c: ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m"))
2012-01-09 17:34:56,486 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_gz]
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib)
2012-01-09 17:34:56,486 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,486 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,486 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_gz.c: ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))
2012-01-09 17:34:56,487 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_bz2]
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib)
2012-01-09 17:34:56,487 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,487 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_bz2.c: ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))
2012-01-09 17:34:56,487 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_lzma]
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib)
2012-01-09 17:34:56,487 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,487 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_lzma.c: ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))
2012-01-09 17:34:56,487 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_command]
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib)
2012-01-09 17:34:56,487 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,487 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_command.c: ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m"))
2012-01-09 17:34:56,487 DEBUG PCDerivation$ Trying to find path for: [Object: chvt]
2012-01-09 17:34:56,487 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m")), sourceFile -> console-tools/chvt.c, generated -> false, objectFile -> chvt, listName -> lib)
2012-01-09 17:34:56,488 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m")), sourceFile -> console-tools/chvt.c, generated -> false, objectFile -> chvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,488 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,488 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,488 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,488 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/chvt.c: ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m"))
2012-01-09 17:34:56,488 DEBUG PCDerivation$ Trying to find path for: [Object: fgconsole]
2012-01-09 17:34:56,488 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m")), sourceFile -> console-tools/fgconsole.c, generated -> false, objectFile -> fgconsole, listName -> lib)
2012-01-09 17:34:56,488 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m")), sourceFile -> console-tools/fgconsole.c, generated -> false, objectFile -> fgconsole, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,488 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,488 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,488 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/fgconsole.c: ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m"))
2012-01-09 17:34:56,488 DEBUG PCDerivation$ Trying to find path for: [Object: clear]
2012-01-09 17:34:56,488 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m")), sourceFile -> console-tools/clear.c, generated -> false, objectFile -> clear, listName -> lib)
2012-01-09 17:34:56,488 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m")), sourceFile -> console-tools/clear.c, generated -> false, objectFile -> clear, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,488 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,488 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,488 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/clear.c: ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m"))
2012-01-09 17:34:56,488 DEBUG PCDerivation$ Trying to find path for: [Object: deallocvt]
2012-01-09 17:34:56,488 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m")), sourceFile -> console-tools/deallocvt.c, generated -> false, objectFile -> deallocvt, listName -> lib)
2012-01-09 17:34:56,488 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m")), sourceFile -> console-tools/deallocvt.c, generated -> false, objectFile -> deallocvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,489 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/deallocvt.c: ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m"))
2012-01-09 17:34:56,489 DEBUG PCDerivation$ Trying to find path for: [Object: dumpkmap]
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m")), sourceFile -> console-tools/dumpkmap.c, generated -> false, objectFile -> dumpkmap, listName -> lib)
2012-01-09 17:34:56,489 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m")), sourceFile -> console-tools/dumpkmap.c, generated -> false, objectFile -> dumpkmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,489 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/dumpkmap.c: ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m"))
2012-01-09 17:34:56,489 DEBUG PCDerivation$ Trying to find path for: [Object: setconsole]
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m")), sourceFile -> console-tools/setconsole.c, generated -> false, objectFile -> setconsole, listName -> lib)
2012-01-09 17:34:56,489 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m")), sourceFile -> console-tools/setconsole.c, generated -> false, objectFile -> setconsole, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,489 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setconsole.c: ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m"))
2012-01-09 17:34:56,489 DEBUG PCDerivation$ Trying to find path for: [Object: kbd_mode]
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m")), sourceFile -> console-tools/kbd_mode.c, generated -> false, objectFile -> kbd_mode, listName -> lib)
2012-01-09 17:34:56,489 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m")), sourceFile -> console-tools/kbd_mode.c, generated -> false, objectFile -> kbd_mode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,489 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,490 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/kbd_mode.c: ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m"))
2012-01-09 17:34:56,490 DEBUG PCDerivation$ Trying to find path for: [Object: loadfont]
2012-01-09 17:34:56,490 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m"))), sourceFile -> console-tools/loadfont.c, generated -> false, objectFile -> loadfont, listName -> lib)
2012-01-09 17:34:56,490 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m"))), sourceFile -> console-tools/loadfont.c, generated -> false, objectFile -> loadfont, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,490 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,490 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,490 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/loadfont.c: (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m")))
2012-01-09 17:34:56,490 DEBUG PCDerivation$ Trying to find path for: [Object: loadkmap]
2012-01-09 17:34:56,490 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m")), sourceFile -> console-tools/loadkmap.c, generated -> false, objectFile -> loadkmap, listName -> lib)
2012-01-09 17:34:56,490 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m")), sourceFile -> console-tools/loadkmap.c, generated -> false, objectFile -> loadkmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,490 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,490 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,490 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/loadkmap.c: ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m"))
2012-01-09 17:34:56,490 DEBUG PCDerivation$ Trying to find path for: [Object: openvt]
2012-01-09 17:34:56,490 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m")), sourceFile -> console-tools/openvt.c, generated -> false, objectFile -> openvt, listName -> lib)
2012-01-09 17:34:56,490 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m")), sourceFile -> console-tools/openvt.c, generated -> false, objectFile -> openvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,490 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,490 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,490 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/openvt.c: ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m"))
2012-01-09 17:34:56,490 DEBUG PCDerivation$ Trying to find path for: [Object: reset]
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESET == "y") || (CONFIG_RESET == "m")), sourceFile -> console-tools/reset.c, generated -> false, objectFile -> reset, listName -> lib)
2012-01-09 17:34:56,491 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESET == "y") || (CONFIG_RESET == "m")), sourceFile -> console-tools/reset.c, generated -> false, objectFile -> reset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,491 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/reset.c: ((CONFIG_RESET == "y") || (CONFIG_RESET == "m"))
2012-01-09 17:34:56,491 DEBUG PCDerivation$ Trying to find path for: [Object: resize]
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m")), sourceFile -> console-tools/resize.c, generated -> false, objectFile -> resize, listName -> lib)
2012-01-09 17:34:56,491 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m")), sourceFile -> console-tools/resize.c, generated -> false, objectFile -> resize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,491 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/resize.c: ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m"))
2012-01-09 17:34:56,491 DEBUG PCDerivation$ Trying to find path for: [Object: setkeycodes]
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m")), sourceFile -> console-tools/setkeycodes.c, generated -> false, objectFile -> setkeycodes, listName -> lib)
2012-01-09 17:34:56,491 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m")), sourceFile -> console-tools/setkeycodes.c, generated -> false, objectFile -> setkeycodes, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,491 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setkeycodes.c: ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m"))
2012-01-09 17:34:56,491 DEBUG PCDerivation$ Trying to find path for: [Object: setlogcons]
2012-01-09 17:34:56,491 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m")), sourceFile -> console-tools/setlogcons.c, generated -> false, objectFile -> setlogcons, listName -> lib)
2012-01-09 17:34:56,491 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m")), sourceFile -> console-tools/setlogcons.c, generated -> false, objectFile -> setlogcons, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,492 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setlogcons.c: ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m"))
2012-01-09 17:34:56,492 DEBUG PCDerivation$ Trying to find path for: [Object: showkey]
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m")), sourceFile -> console-tools/showkey.c, generated -> false, objectFile -> showkey, listName -> lib)
2012-01-09 17:34:56,492 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m")), sourceFile -> console-tools/showkey.c, generated -> false, objectFile -> showkey, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,492 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/showkey.c: ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m"))
2012-01-09 17:34:56,492 DEBUG PCDerivation$ Trying to find path for: [Object: getopt_mk_fifo_nod]
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib)
2012-01-09 17:34:56,492 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-09 17:34:56,492 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,492 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,492 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/getopt_mk_fifo_nod.c: (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")))
2012-01-09 17:34:56,492 DEBUG PCDerivation$ Trying to find path for: [Object: cp_mv_stat]
2012-01-09 17:34:56,492 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib)
2012-01-09 17:34:56,493 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-09 17:34:56,493 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-09 17:34:56,493 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,493 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,493 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/cp_mv_stat.c: ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m")))
2012-01-09 17:34:56,493 DEBUG PCDerivation$ Trying to find path for: [Object: basename]
2012-01-09 17:34:56,493 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m")), sourceFile -> coreutils/basename.c, generated -> false, objectFile -> basename, listName -> lib)
2012-01-09 17:34:56,493 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m")), sourceFile -> coreutils/basename.c, generated -> false, objectFile -> basename, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,493 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,493 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,493 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/basename.c: ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m"))
2012-01-09 17:34:56,493 DEBUG PCDerivation$ Trying to find path for: [Object: cat]
2012-01-09 17:34:56,493 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))), sourceFile -> coreutils/cat.c, generated -> false, objectFile -> cat, listName -> lib)
2012-01-09 17:34:56,502 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))), sourceFile -> coreutils/cat.c, generated -> false, objectFile -> cat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,503 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cat.c: (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")))
2012-01-09 17:34:56,503 DEBUG PCDerivation$ Trying to find path for: [Object: date]
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DATE == "y") || (CONFIG_DATE == "m")), sourceFile -> coreutils/date.c, generated -> false, objectFile -> date, listName -> lib)
2012-01-09 17:34:56,503 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DATE == "y") || (CONFIG_DATE == "m")), sourceFile -> coreutils/date.c, generated -> false, objectFile -> date, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,503 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/date.c: ((CONFIG_DATE == "y") || (CONFIG_DATE == "m"))
2012-01-09 17:34:56,503 DEBUG PCDerivation$ Trying to find path for: [Object: hostid]
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m")), sourceFile -> coreutils/hostid.c, generated -> false, objectFile -> hostid, listName -> lib)
2012-01-09 17:34:56,503 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m")), sourceFile -> coreutils/hostid.c, generated -> false, objectFile -> hostid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,503 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/hostid.c: ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m"))
2012-01-09 17:34:56,503 DEBUG PCDerivation$ Trying to find path for: [Object: id]
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m"))), sourceFile -> coreutils/id.c, generated -> false, objectFile -> id, listName -> lib)
2012-01-09 17:34:56,503 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m"))), sourceFile -> coreutils/id.c, generated -> false, objectFile -> id, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,503 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,504 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/id.c: (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m")))
2012-01-09 17:34:56,504 DEBUG PCDerivation$ Trying to find path for: [Object: test]
2012-01-09 17:34:56,504 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test.c, generated -> false, objectFile -> test, listName -> lib)
2012-01-09 17:34:56,504 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test.c, generated -> false, objectFile -> test, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,504 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,504 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,504 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/test.c: ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-09 17:34:56,504 DEBUG PCDerivation$ Trying to find path for: [Object: test_ptr_hack]
2012-01-09 17:34:56,504 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test_ptr_hack.c, generated -> false, objectFile -> test_ptr_hack, listName -> lib)
2012-01-09 17:34:56,504 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test_ptr_hack.c, generated -> false, objectFile -> test_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,504 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,504 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,504 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/test_ptr_hack.c: ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-09 17:34:56,504 DEBUG PCDerivation$ Trying to find path for: [Object: touch]
2012-01-09 17:34:56,504 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m")), sourceFile -> coreutils/touch.c, generated -> false, objectFile -> touch, listName -> lib)
2012-01-09 17:34:56,504 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m")), sourceFile -> coreutils/touch.c, generated -> false, objectFile -> touch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,504 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,504 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,504 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/touch.c: ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m"))
2012-01-09 17:34:56,504 DEBUG PCDerivation$ Trying to find path for: [Object: tr]
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TR == "y") || (CONFIG_TR == "m")), sourceFile -> coreutils/tr.c, generated -> false, objectFile -> tr, listName -> lib)
2012-01-09 17:34:56,505 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TR == "y") || (CONFIG_TR == "m")), sourceFile -> coreutils/tr.c, generated -> false, objectFile -> tr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,505 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tr.c: ((CONFIG_TR == "y") || (CONFIG_TR == "m"))
2012-01-09 17:34:56,505 DEBUG PCDerivation$ Trying to find path for: [Object: uudecode]
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m"))), sourceFile -> coreutils/uudecode.c, generated -> false, objectFile -> uudecode, listName -> lib)
2012-01-09 17:34:56,505 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m"))), sourceFile -> coreutils/uudecode.c, generated -> false, objectFile -> uudecode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,505 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uudecode.c: (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m")))
2012-01-09 17:34:56,505 DEBUG PCDerivation$ Trying to find path for: [Object: who]
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m"))), sourceFile -> coreutils/who.c, generated -> false, objectFile -> who, listName -> lib)
2012-01-09 17:34:56,505 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m"))), sourceFile -> coreutils/who.c, generated -> false, objectFile -> who, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,505 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/who.c: (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m")))
2012-01-09 17:34:56,505 DEBUG PCDerivation$ Trying to find path for: [Object: cal]
2012-01-09 17:34:56,505 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CAL == "y") || (CONFIG_CAL == "m")), sourceFile -> coreutils/cal.c, generated -> false, objectFile -> cal, listName -> lib)
2012-01-09 17:34:56,506 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CAL == "y") || (CONFIG_CAL == "m")), sourceFile -> coreutils/cal.c, generated -> false, objectFile -> cal, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,506 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cal.c: ((CONFIG_CAL == "y") || (CONFIG_CAL == "m"))
2012-01-09 17:34:56,506 DEBUG PCDerivation$ Trying to find path for: [Object: catv]
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CATV == "y") || (CONFIG_CATV == "m")), sourceFile -> coreutils/catv.c, generated -> false, objectFile -> catv, listName -> lib)
2012-01-09 17:34:56,506 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CATV == "y") || (CONFIG_CATV == "m")), sourceFile -> coreutils/catv.c, generated -> false, objectFile -> catv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,506 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/catv.c: ((CONFIG_CATV == "y") || (CONFIG_CATV == "m"))
2012-01-09 17:34:56,506 DEBUG PCDerivation$ Trying to find path for: [Object: chgrp]
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")), sourceFile -> coreutils/chgrp.c, generated -> false, objectFile -> chgrp, listName -> lib)
2012-01-09 17:34:56,506 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")), sourceFile -> coreutils/chgrp.c, generated -> false, objectFile -> chgrp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,506 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chgrp.c: ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m"))
2012-01-09 17:34:56,506 DEBUG PCDerivation$ Trying to find path for: [Object: chown]
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))), sourceFile -> coreutils/chown.c, generated -> false, objectFile -> chown, listName -> lib)
2012-01-09 17:34:56,506 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))), sourceFile -> coreutils/chown.c, generated -> false, objectFile -> chown, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,506 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,507 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chown.c: (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")))
2012-01-09 17:34:56,507 DEBUG PCDerivation$ Trying to find path for: [Object: chmod]
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m")), sourceFile -> coreutils/chmod.c, generated -> false, objectFile -> chmod, listName -> lib)
2012-01-09 17:34:56,507 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m")), sourceFile -> coreutils/chmod.c, generated -> false, objectFile -> chmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,507 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chmod.c: ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m"))
2012-01-09 17:34:56,507 DEBUG PCDerivation$ Trying to find path for: [Object: chroot]
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m")), sourceFile -> coreutils/chroot.c, generated -> false, objectFile -> chroot, listName -> lib)
2012-01-09 17:34:56,507 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m")), sourceFile -> coreutils/chroot.c, generated -> false, objectFile -> chroot, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,507 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chroot.c: ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m"))
2012-01-09 17:34:56,507 DEBUG PCDerivation$ Trying to find path for: [Object: cksum]
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m")), sourceFile -> coreutils/cksum.c, generated -> false, objectFile -> cksum, listName -> lib)
2012-01-09 17:34:56,507 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m")), sourceFile -> coreutils/cksum.c, generated -> false, objectFile -> cksum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,507 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,507 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cksum.c: ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m"))
2012-01-09 17:34:56,508 DEBUG PCDerivation$ Trying to find path for: [Object: comm]
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_COMM == "y") || (CONFIG_COMM == "m")), sourceFile -> coreutils/comm.c, generated -> false, objectFile -> comm, listName -> lib)
2012-01-09 17:34:56,508 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_COMM == "y") || (CONFIG_COMM == "m")), sourceFile -> coreutils/comm.c, generated -> false, objectFile -> comm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,508 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/comm.c: ((CONFIG_COMM == "y") || (CONFIG_COMM == "m"))
2012-01-09 17:34:56,508 DEBUG PCDerivation$ Trying to find path for: [Object: cp]
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CP == "y") || (CONFIG_CP == "m")), sourceFile -> coreutils/cp.c, generated -> false, objectFile -> cp, listName -> lib)
2012-01-09 17:34:56,508 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CP == "y") || (CONFIG_CP == "m")), sourceFile -> coreutils/cp.c, generated -> false, objectFile -> cp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,508 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cp.c: ((CONFIG_CP == "y") || (CONFIG_CP == "m"))
2012-01-09 17:34:56,508 DEBUG PCDerivation$ Trying to find path for: [Object: cut]
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CUT == "y") || (CONFIG_CUT == "m")), sourceFile -> coreutils/cut.c, generated -> false, objectFile -> cut, listName -> lib)
2012-01-09 17:34:56,508 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CUT == "y") || (CONFIG_CUT == "m")), sourceFile -> coreutils/cut.c, generated -> false, objectFile -> cut, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,508 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cut.c: ((CONFIG_CUT == "y") || (CONFIG_CUT == "m"))
2012-01-09 17:34:56,508 DEBUG PCDerivation$ Trying to find path for: [Object: dd]
2012-01-09 17:34:56,508 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DD == "y") || (CONFIG_DD == "m")), sourceFile -> coreutils/dd.c, generated -> false, objectFile -> dd, listName -> lib)
2012-01-09 17:34:56,509 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DD == "y") || (CONFIG_DD == "m")), sourceFile -> coreutils/dd.c, generated -> false, objectFile -> dd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,509 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dd.c: ((CONFIG_DD == "y") || (CONFIG_DD == "m"))
2012-01-09 17:34:56,509 DEBUG PCDerivation$ Trying to find path for: [Object: df]
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DF == "y") || (CONFIG_DF == "m")), sourceFile -> coreutils/df.c, generated -> false, objectFile -> df, listName -> lib)
2012-01-09 17:34:56,509 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DF == "y") || (CONFIG_DF == "m")), sourceFile -> coreutils/df.c, generated -> false, objectFile -> df, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,509 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/df.c: ((CONFIG_DF == "y") || (CONFIG_DF == "m"))
2012-01-09 17:34:56,509 DEBUG PCDerivation$ Trying to find path for: [Object: dirname]
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m")), sourceFile -> coreutils/dirname.c, generated -> false, objectFile -> dirname, listName -> lib)
2012-01-09 17:34:56,509 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m")), sourceFile -> coreutils/dirname.c, generated -> false, objectFile -> dirname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,509 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dirname.c: ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m"))
2012-01-09 17:34:56,509 DEBUG PCDerivation$ Trying to find path for: [Object: dos2unix]
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m")), sourceFile -> coreutils/dos2unix.c, generated -> false, objectFile -> dos2unix, listName -> lib)
2012-01-09 17:34:56,509 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m")), sourceFile -> coreutils/dos2unix.c, generated -> false, objectFile -> dos2unix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,509 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,510 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dos2unix.c: ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m"))
2012-01-09 17:34:56,510 DEBUG PCDerivation$ Trying to find path for: [Object: du]
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DU == "y") || (CONFIG_DU == "m")), sourceFile -> coreutils/du.c, generated -> false, objectFile -> du, listName -> lib)
2012-01-09 17:34:56,510 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DU == "y") || (CONFIG_DU == "m")), sourceFile -> coreutils/du.c, generated -> false, objectFile -> du, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,510 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/du.c: ((CONFIG_DU == "y") || (CONFIG_DU == "m"))
2012-01-09 17:34:56,510 DEBUG PCDerivation$ Trying to find path for: [Object: echo]
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/echo.c, generated -> false, objectFile -> echo, listName -> lib)
2012-01-09 17:34:56,510 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/echo.c, generated -> false, objectFile -> echo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,510 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/echo.c: ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-09 17:34:56,510 DEBUG PCDerivation$ Trying to find path for: [Object: env]
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ENV == "y") || (CONFIG_ENV == "m")), sourceFile -> coreutils/env.c, generated -> false, objectFile -> env, listName -> lib)
2012-01-09 17:34:56,510 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ENV == "y") || (CONFIG_ENV == "m")), sourceFile -> coreutils/env.c, generated -> false, objectFile -> env, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,510 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,510 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/env.c: ((CONFIG_ENV == "y") || (CONFIG_ENV == "m"))
2012-01-09 17:34:56,511 DEBUG PCDerivation$ Trying to find path for: [Object: expr]
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m")), sourceFile -> coreutils/expr.c, generated -> false, objectFile -> expr, listName -> lib)
2012-01-09 17:34:56,511 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m")), sourceFile -> coreutils/expr.c, generated -> false, objectFile -> expr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,511 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/expr.c: ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))
2012-01-09 17:34:56,511 DEBUG PCDerivation$ Trying to find path for: [Object: expand]
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m"))), sourceFile -> coreutils/expand.c, generated -> false, objectFile -> expand, listName -> lib)
2012-01-09 17:34:56,511 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m"))), sourceFile -> coreutils/expand.c, generated -> false, objectFile -> expand, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,511 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/expand.c: (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m")))
2012-01-09 17:34:56,511 DEBUG PCDerivation$ Trying to find path for: [Object: false]
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m")), sourceFile -> coreutils/false.c, generated -> false, objectFile -> false, listName -> lib)
2012-01-09 17:34:56,511 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m")), sourceFile -> coreutils/false.c, generated -> false, objectFile -> false, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,511 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/false.c: ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m"))
2012-01-09 17:34:56,511 DEBUG PCDerivation$ Trying to find path for: [Object: fold]
2012-01-09 17:34:56,511 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m")), sourceFile -> coreutils/fold.c, generated -> false, objectFile -> fold, listName -> lib)
2012-01-09 17:34:56,512 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m")), sourceFile -> coreutils/fold.c, generated -> false, objectFile -> fold, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,512 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,512 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,512 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/fold.c: ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m"))
2012-01-09 17:34:56,512 DEBUG PCDerivation$ Trying to find path for: [Object: fsync]
2012-01-09 17:34:56,512 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m")), sourceFile -> coreutils/fsync.c, generated -> false, objectFile -> fsync, listName -> lib)
2012-01-09 17:34:56,512 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m")), sourceFile -> coreutils/fsync.c, generated -> false, objectFile -> fsync, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,512 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,512 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,512 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/fsync.c: ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m"))
2012-01-09 17:34:56,512 DEBUG PCDerivation$ Trying to find path for: [Object: head]
2012-01-09 17:34:56,512 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m")), sourceFile -> coreutils/head.c, generated -> false, objectFile -> head, listName -> lib)
2012-01-09 17:34:56,512 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m")), sourceFile -> coreutils/head.c, generated -> false, objectFile -> head, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,512 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,512 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,512 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/head.c: ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m"))
2012-01-09 17:34:56,512 DEBUG PCDerivation$ Trying to find path for: [Object: install]
2012-01-09 17:34:56,512 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")), sourceFile -> coreutils/install.c, generated -> false, objectFile -> install, listName -> lib)
2012-01-09 17:34:56,513 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")), sourceFile -> coreutils/install.c, generated -> false, objectFile -> install, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,513 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,513 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,513 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/install.c: ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m"))
2012-01-09 17:34:56,513 DEBUG PCDerivation$ Trying to find path for: [Object: ln]
2012-01-09 17:34:56,513 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LN == "y") || (CONFIG_LN == "m")), sourceFile -> coreutils/ln.c, generated -> false, objectFile -> ln, listName -> lib)
2012-01-09 17:34:56,513 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LN == "y") || (CONFIG_LN == "m")), sourceFile -> coreutils/ln.c, generated -> false, objectFile -> ln, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,513 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,513 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,513 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/ln.c: ((CONFIG_LN == "y") || (CONFIG_LN == "m"))
2012-01-09 17:34:56,513 DEBUG PCDerivation$ Trying to find path for: [Object: logname]
2012-01-09 17:34:56,513 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m")), sourceFile -> coreutils/logname.c, generated -> false, objectFile -> logname, listName -> lib)
2012-01-09 17:34:56,513 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m")), sourceFile -> coreutils/logname.c, generated -> false, objectFile -> logname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,513 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,523 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,523 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/logname.c: ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m"))
2012-01-09 17:34:56,524 DEBUG PCDerivation$ Trying to find path for: [Object: ls]
2012-01-09 17:34:56,524 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))), sourceFile -> coreutils/ls.c, generated -> false, objectFile -> ls, listName -> lib)
2012-01-09 17:34:56,524 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))), sourceFile -> coreutils/ls.c, generated -> false, objectFile -> ls, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,524 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,524 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,524 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/ls.c: (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")))
2012-01-09 17:34:56,524 DEBUG PCDerivation$ Trying to find path for: [Object: md5_sha1_sum]
2012-01-09 17:34:56,524 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m"))), sourceFile -> coreutils/md5_sha1_sum.c, generated -> false, objectFile -> md5_sha1_sum, listName -> lib)
2012-01-09 17:34:56,524 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m"))), sourceFile -> coreutils/md5_sha1_sum.c, generated -> false, objectFile -> md5_sha1_sum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,524 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,524 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,524 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/md5_sha1_sum.c: (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m")))
2012-01-09 17:34:56,524 DEBUG PCDerivation$ Trying to find path for: [Object: mkdir]
2012-01-09 17:34:56,524 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m")), sourceFile -> coreutils/mkdir.c, generated -> false, objectFile -> mkdir, listName -> lib)
2012-01-09 17:34:56,524 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m")), sourceFile -> coreutils/mkdir.c, generated -> false, objectFile -> mkdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,524 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,524 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,524 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mkdir.c: ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m"))
2012-01-09 17:34:56,524 DEBUG PCDerivation$ Trying to find path for: [Object: mkfifo]
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")), sourceFile -> coreutils/mkfifo.c, generated -> false, objectFile -> mkfifo, listName -> lib)
2012-01-09 17:34:56,525 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")), sourceFile -> coreutils/mkfifo.c, generated -> false, objectFile -> mkfifo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,525 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mkfifo.c: ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m"))
2012-01-09 17:34:56,525 DEBUG PCDerivation$ Trying to find path for: [Object: mknod]
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")), sourceFile -> coreutils/mknod.c, generated -> false, objectFile -> mknod, listName -> lib)
2012-01-09 17:34:56,525 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")), sourceFile -> coreutils/mknod.c, generated -> false, objectFile -> mknod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,525 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mknod.c: ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))
2012-01-09 17:34:56,525 DEBUG PCDerivation$ Trying to find path for: [Object: mv]
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MV == "y") || (CONFIG_MV == "m")), sourceFile -> coreutils/mv.c, generated -> false, objectFile -> mv, listName -> lib)
2012-01-09 17:34:56,525 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MV == "y") || (CONFIG_MV == "m")), sourceFile -> coreutils/mv.c, generated -> false, objectFile -> mv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,525 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mv.c: ((CONFIG_MV == "y") || (CONFIG_MV == "m"))
2012-01-09 17:34:56,525 DEBUG PCDerivation$ Trying to find path for: [Object: nice]
2012-01-09 17:34:56,525 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NICE == "y") || (CONFIG_NICE == "m")), sourceFile -> coreutils/nice.c, generated -> false, objectFile -> nice, listName -> lib)
2012-01-09 17:34:56,526 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NICE == "y") || (CONFIG_NICE == "m")), sourceFile -> coreutils/nice.c, generated -> false, objectFile -> nice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,526 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/nice.c: ((CONFIG_NICE == "y") || (CONFIG_NICE == "m"))
2012-01-09 17:34:56,526 DEBUG PCDerivation$ Trying to find path for: [Object: nohup]
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m")), sourceFile -> coreutils/nohup.c, generated -> false, objectFile -> nohup, listName -> lib)
2012-01-09 17:34:56,526 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m")), sourceFile -> coreutils/nohup.c, generated -> false, objectFile -> nohup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,526 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/nohup.c: ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m"))
2012-01-09 17:34:56,526 DEBUG PCDerivation$ Trying to find path for: [Object: od]
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OD == "y") || (CONFIG_OD == "m")), sourceFile -> coreutils/od.c, generated -> false, objectFile -> od, listName -> lib)
2012-01-09 17:34:56,526 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OD == "y") || (CONFIG_OD == "m")), sourceFile -> coreutils/od.c, generated -> false, objectFile -> od, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,526 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/od.c: ((CONFIG_OD == "y") || (CONFIG_OD == "m"))
2012-01-09 17:34:56,526 DEBUG PCDerivation$ Trying to find path for: [Object: printenv]
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m")), sourceFile -> coreutils/printenv.c, generated -> false, objectFile -> printenv, listName -> lib)
2012-01-09 17:34:56,526 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m")), sourceFile -> coreutils/printenv.c, generated -> false, objectFile -> printenv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,526 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,527 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/printenv.c: ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m"))
2012-01-09 17:34:56,527 DEBUG PCDerivation$ Trying to find path for: [Object: printf]
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m"))), sourceFile -> coreutils/printf.c, generated -> false, objectFile -> printf, listName -> lib)
2012-01-09 17:34:56,527 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m"))), sourceFile -> coreutils/printf.c, generated -> false, objectFile -> printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,527 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/printf.c: (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m")))
2012-01-09 17:34:56,527 DEBUG PCDerivation$ Trying to find path for: [Object: pwd]
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWD == "y") || (CONFIG_PWD == "m")), sourceFile -> coreutils/pwd.c, generated -> false, objectFile -> pwd, listName -> lib)
2012-01-09 17:34:56,527 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWD == "y") || (CONFIG_PWD == "m")), sourceFile -> coreutils/pwd.c, generated -> false, objectFile -> pwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,527 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/pwd.c: ((CONFIG_PWD == "y") || (CONFIG_PWD == "m"))
2012-01-09 17:34:56,527 DEBUG PCDerivation$ Trying to find path for: [Object: readlink]
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m")), sourceFile -> coreutils/readlink.c, generated -> false, objectFile -> readlink, listName -> lib)
2012-01-09 17:34:56,527 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m")), sourceFile -> coreutils/readlink.c, generated -> false, objectFile -> readlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,527 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,528 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/readlink.c: ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m"))
2012-01-09 17:34:56,528 DEBUG PCDerivation$ Trying to find path for: [Object: realpath]
2012-01-09 17:34:56,528 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m")), sourceFile -> coreutils/realpath.c, generated -> false, objectFile -> realpath, listName -> lib)
2012-01-09 17:34:56,528 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m")), sourceFile -> coreutils/realpath.c, generated -> false, objectFile -> realpath, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,528 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,528 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,528 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/realpath.c: ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m"))
2012-01-09 17:34:56,528 DEBUG PCDerivation$ Trying to find path for: [Object: rm]
2012-01-09 17:34:56,528 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RM == "y") || (CONFIG_RM == "m")), sourceFile -> coreutils/rm.c, generated -> false, objectFile -> rm, listName -> lib)
2012-01-09 17:34:56,528 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RM == "y") || (CONFIG_RM == "m")), sourceFile -> coreutils/rm.c, generated -> false, objectFile -> rm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,528 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,528 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,528 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/rm.c: ((CONFIG_RM == "y") || (CONFIG_RM == "m"))
2012-01-09 17:34:56,528 DEBUG PCDerivation$ Trying to find path for: [Object: rmdir]
2012-01-09 17:34:56,528 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m")), sourceFile -> coreutils/rmdir.c, generated -> false, objectFile -> rmdir, listName -> lib)
2012-01-09 17:34:56,528 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m")), sourceFile -> coreutils/rmdir.c, generated -> false, objectFile -> rmdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,528 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,528 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,528 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/rmdir.c: ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m"))
2012-01-09 17:34:56,528 DEBUG PCDerivation$ Trying to find path for: [Object: seq]
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m")), sourceFile -> coreutils/seq.c, generated -> false, objectFile -> seq, listName -> lib)
2012-01-09 17:34:56,529 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m")), sourceFile -> coreutils/seq.c, generated -> false, objectFile -> seq, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,529 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/seq.c: ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m"))
2012-01-09 17:34:56,529 DEBUG PCDerivation$ Trying to find path for: [Object: sleep]
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m")), sourceFile -> coreutils/sleep.c, generated -> false, objectFile -> sleep, listName -> lib)
2012-01-09 17:34:56,529 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m")), sourceFile -> coreutils/sleep.c, generated -> false, objectFile -> sleep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,529 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sleep.c: ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m"))
2012-01-09 17:34:56,529 DEBUG PCDerivation$ Trying to find path for: [Object: split]
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m")), sourceFile -> coreutils/split.c, generated -> false, objectFile -> split, listName -> lib)
2012-01-09 17:34:56,529 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m")), sourceFile -> coreutils/split.c, generated -> false, objectFile -> split, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,529 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/split.c: ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m"))
2012-01-09 17:34:56,529 DEBUG PCDerivation$ Trying to find path for: [Object: sort]
2012-01-09 17:34:56,529 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SORT == "y") || (CONFIG_SORT == "m")), sourceFile -> coreutils/sort.c, generated -> false, objectFile -> sort, listName -> lib)
2012-01-09 17:34:56,529 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SORT == "y") || (CONFIG_SORT == "m")), sourceFile -> coreutils/sort.c, generated -> false, objectFile -> sort, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,530 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sort.c: ((CONFIG_SORT == "y") || (CONFIG_SORT == "m"))
2012-01-09 17:34:56,530 DEBUG PCDerivation$ Trying to find path for: [Object: stat]
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STAT == "y") || (CONFIG_STAT == "m")), sourceFile -> coreutils/stat.c, generated -> false, objectFile -> stat, listName -> lib)
2012-01-09 17:34:56,530 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STAT == "y") || (CONFIG_STAT == "m")), sourceFile -> coreutils/stat.c, generated -> false, objectFile -> stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,530 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/stat.c: ((CONFIG_STAT == "y") || (CONFIG_STAT == "m"))
2012-01-09 17:34:56,530 DEBUG PCDerivation$ Trying to find path for: [Object: stty]
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STTY == "y") || (CONFIG_STTY == "m")), sourceFile -> coreutils/stty.c, generated -> false, objectFile -> stty, listName -> lib)
2012-01-09 17:34:56,530 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STTY == "y") || (CONFIG_STTY == "m")), sourceFile -> coreutils/stty.c, generated -> false, objectFile -> stty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,530 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/stty.c: ((CONFIG_STTY == "y") || (CONFIG_STTY == "m"))
2012-01-09 17:34:56,530 DEBUG PCDerivation$ Trying to find path for: [Object: sum]
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SUM == "y") || (CONFIG_SUM == "m")), sourceFile -> coreutils/sum.c, generated -> false, objectFile -> sum, listName -> lib)
2012-01-09 17:34:56,530 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SUM == "y") || (CONFIG_SUM == "m")), sourceFile -> coreutils/sum.c, generated -> false, objectFile -> sum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,530 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,531 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sum.c: ((CONFIG_SUM == "y") || (CONFIG_SUM == "m"))
2012-01-09 17:34:56,531 DEBUG PCDerivation$ Trying to find path for: [Object: sync]
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m")), sourceFile -> coreutils/sync.c, generated -> false, objectFile -> sync, listName -> lib)
2012-01-09 17:34:56,531 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m")), sourceFile -> coreutils/sync.c, generated -> false, objectFile -> sync, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,531 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sync.c: ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m"))
2012-01-09 17:34:56,531 DEBUG PCDerivation$ Trying to find path for: [Object: tac]
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAC == "y") || (CONFIG_TAC == "m")), sourceFile -> coreutils/tac.c, generated -> false, objectFile -> tac, listName -> lib)
2012-01-09 17:34:56,531 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAC == "y") || (CONFIG_TAC == "m")), sourceFile -> coreutils/tac.c, generated -> false, objectFile -> tac, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,531 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tac.c: ((CONFIG_TAC == "y") || (CONFIG_TAC == "m"))
2012-01-09 17:34:56,531 DEBUG PCDerivation$ Trying to find path for: [Object: tail]
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m")), sourceFile -> coreutils/tail.c, generated -> false, objectFile -> tail, listName -> lib)
2012-01-09 17:34:56,531 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m")), sourceFile -> coreutils/tail.c, generated -> false, objectFile -> tail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,531 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,531 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tail.c: ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m"))
2012-01-09 17:34:56,532 DEBUG PCDerivation$ Trying to find path for: [Object: tee]
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TEE == "y") || (CONFIG_TEE == "m")), sourceFile -> coreutils/tee.c, generated -> false, objectFile -> tee, listName -> lib)
2012-01-09 17:34:56,532 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TEE == "y") || (CONFIG_TEE == "m")), sourceFile -> coreutils/tee.c, generated -> false, objectFile -> tee, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,532 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tee.c: ((CONFIG_TEE == "y") || (CONFIG_TEE == "m"))
2012-01-09 17:34:56,532 DEBUG PCDerivation$ Trying to find path for: [Object: true]
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m")), sourceFile -> coreutils/true.c, generated -> false, objectFile -> true, listName -> lib)
2012-01-09 17:34:56,532 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m")), sourceFile -> coreutils/true.c, generated -> false, objectFile -> true, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,532 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/true.c: ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m"))
2012-01-09 17:34:56,532 DEBUG PCDerivation$ Trying to find path for: [Object: tty]
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTY == "y") || (CONFIG_TTY == "m")), sourceFile -> coreutils/tty.c, generated -> false, objectFile -> tty, listName -> lib)
2012-01-09 17:34:56,532 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTY == "y") || (CONFIG_TTY == "m")), sourceFile -> coreutils/tty.c, generated -> false, objectFile -> tty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,532 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tty.c: ((CONFIG_TTY == "y") || (CONFIG_TTY == "m"))
2012-01-09 17:34:56,532 DEBUG PCDerivation$ Trying to find path for: [Object: uname]
2012-01-09 17:34:56,532 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m")), sourceFile -> coreutils/uname.c, generated -> false, objectFile -> uname, listName -> lib)
2012-01-09 17:34:56,533 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m")), sourceFile -> coreutils/uname.c, generated -> false, objectFile -> uname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,533 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,533 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,533 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uname.c: ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m"))
2012-01-09 17:34:56,533 DEBUG PCDerivation$ Trying to find path for: [Object: uniq]
2012-01-09 17:34:56,533 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m")), sourceFile -> coreutils/uniq.c, generated -> false, objectFile -> uniq, listName -> lib)
2012-01-09 17:34:56,533 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m")), sourceFile -> coreutils/uniq.c, generated -> false, objectFile -> uniq, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,533 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,533 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,533 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uniq.c: ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m"))
2012-01-09 17:34:56,533 DEBUG PCDerivation$ Trying to find path for: [Object: usleep]
2012-01-09 17:34:56,533 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m")), sourceFile -> coreutils/usleep.c, generated -> false, objectFile -> usleep, listName -> lib)
2012-01-09 17:34:56,533 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m")), sourceFile -> coreutils/usleep.c, generated -> false, objectFile -> usleep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,533 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,543 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,543 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/usleep.c: ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m"))
2012-01-09 17:34:56,544 DEBUG PCDerivation$ Trying to find path for: [Object: uuencode]
2012-01-09 17:34:56,544 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m")), sourceFile -> coreutils/uuencode.c, generated -> false, objectFile -> uuencode, listName -> lib)
2012-01-09 17:34:56,544 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m")), sourceFile -> coreutils/uuencode.c, generated -> false, objectFile -> uuencode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,544 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,544 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,544 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uuencode.c: ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m"))
2012-01-09 17:34:56,544 DEBUG PCDerivation$ Trying to find path for: [Object: wc]
2012-01-09 17:34:56,544 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WC == "y") || (CONFIG_WC == "m")), sourceFile -> coreutils/wc.c, generated -> false, objectFile -> wc, listName -> lib)
2012-01-09 17:34:56,544 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WC == "y") || (CONFIG_WC == "m")), sourceFile -> coreutils/wc.c, generated -> false, objectFile -> wc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,544 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,544 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,544 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/wc.c: ((CONFIG_WC == "y") || (CONFIG_WC == "m"))
2012-01-09 17:34:56,544 DEBUG PCDerivation$ Trying to find path for: [Object: whoami]
2012-01-09 17:34:56,544 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m")), sourceFile -> coreutils/whoami.c, generated -> false, objectFile -> whoami, listName -> lib)
2012-01-09 17:34:56,544 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m")), sourceFile -> coreutils/whoami.c, generated -> false, objectFile -> whoami, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,544 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,544 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,544 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/whoami.c: ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m"))
2012-01-09 17:34:56,544 DEBUG PCDerivation$ Trying to find path for: [Object: yes]
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_YES == "y") || (CONFIG_YES == "m")), sourceFile -> coreutils/yes.c, generated -> false, objectFile -> yes, listName -> lib)
2012-01-09 17:34:56,545 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_YES == "y") || (CONFIG_YES == "m")), sourceFile -> coreutils/yes.c, generated -> false, objectFile -> yes, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,545 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/yes.c: ((CONFIG_YES == "y") || (CONFIG_YES == "m"))
2012-01-09 17:34:56,545 DEBUG PCDerivation$ Trying to find path for: [Object: getopt_mk_fifo_nod]
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib)
2012-01-09 17:34:56,545 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-09 17:34:56,545 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,545 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/getopt_mk_fifo_nod.c: (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")))
2012-01-09 17:34:56,545 DEBUG PCDerivation$ Trying to find path for: [Object: cp_mv_stat]
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib)
2012-01-09 17:34:56,545 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,545 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/cp_mv_stat.c: ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m")))
2012-01-09 17:34:56,545 DEBUG PCDerivation$ Trying to find path for: [Object: mktemp]
2012-01-09 17:34:56,545 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m")), sourceFile -> debianutils/mktemp.c, generated -> false, objectFile -> mktemp, listName -> lib)
2012-01-09 17:34:56,546 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m")), sourceFile -> debianutils/mktemp.c, generated -> false, objectFile -> mktemp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,546 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,546 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,546 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,546 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/mktemp.c: ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m"))
2012-01-09 17:34:56,546 DEBUG PCDerivation$ Trying to find path for: [Object: pipe_progress]
2012-01-09 17:34:56,546 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m")), sourceFile -> debianutils/pipe_progress.c, generated -> false, objectFile -> pipe_progress, listName -> lib)
2012-01-09 17:34:56,546 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m")), sourceFile -> debianutils/pipe_progress.c, generated -> false, objectFile -> pipe_progress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,546 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,546 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,546 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/pipe_progress.c: ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m"))
2012-01-09 17:34:56,546 DEBUG PCDerivation$ Trying to find path for: [Object: run_parts]
2012-01-09 17:34:56,546 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m")), sourceFile -> debianutils/run_parts.c, generated -> false, objectFile -> run_parts, listName -> lib)
2012-01-09 17:34:56,546 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m")), sourceFile -> debianutils/run_parts.c, generated -> false, objectFile -> run_parts, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,546 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,546 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,546 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/run_parts.c: ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m"))
2012-01-09 17:34:56,546 DEBUG PCDerivation$ Trying to find path for: [Object: start_stop_daemon]
2012-01-09 17:34:56,546 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m")), sourceFile -> debianutils/start_stop_daemon.c, generated -> false, objectFile -> start_stop_daemon, listName -> lib)
2012-01-09 17:34:56,547 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m")), sourceFile -> debianutils/start_stop_daemon.c, generated -> false, objectFile -> start_stop_daemon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,547 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,547 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,547 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/start_stop_daemon.c: ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m"))
2012-01-09 17:34:56,547 DEBUG PCDerivation$ Trying to find path for: [Object: which]
2012-01-09 17:34:56,547 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m")), sourceFile -> debianutils/which.c, generated -> false, objectFile -> which, listName -> lib)
2012-01-09 17:34:56,547 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m")), sourceFile -> debianutils/which.c, generated -> false, objectFile -> which, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,547 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-09 17:34:56,547 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,547 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/which.c: ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m"))
2012-01-09 17:34:56,547 DEBUG PCDerivation$ Trying to find path for: [Object: chattr]
2012-01-09 17:34:56,547 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")), sourceFile -> e2fsprogs/chattr.c, generated -> false, objectFile -> chattr, listName -> lib)
2012-01-09 17:34:56,547 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")), sourceFile -> e2fsprogs/chattr.c, generated -> false, objectFile -> chattr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,547 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,547 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,547 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,547 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/chattr.c: ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m"))
2012-01-09 17:34:56,547 DEBUG PCDerivation$ Trying to find path for: [Object: e2fs_lib]
2012-01-09 17:34:56,547 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))), sourceFile -> e2fsprogs/e2fs_lib.c, generated -> false, objectFile -> e2fs_lib, listName -> lib)
2012-01-09 17:34:56,547 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))), sourceFile -> e2fsprogs/e2fs_lib.c, generated -> false, objectFile -> e2fs_lib, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,548 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/e2fs_lib.c: (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")))
2012-01-09 17:34:56,548 DEBUG PCDerivation$ Trying to find path for: [Object: lsattr]
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")), sourceFile -> e2fsprogs/lsattr.c, generated -> false, objectFile -> lsattr, listName -> lib)
2012-01-09 17:34:56,548 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")), sourceFile -> e2fsprogs/lsattr.c, generated -> false, objectFile -> lsattr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,548 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/lsattr.c: ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))
2012-01-09 17:34:56,548 DEBUG PCDerivation$ Trying to find path for: [Object: fsck]
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m")), sourceFile -> e2fsprogs/fsck.c, generated -> false, objectFile -> fsck, listName -> lib)
2012-01-09 17:34:56,548 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m")), sourceFile -> e2fsprogs/fsck.c, generated -> false, objectFile -> fsck, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,548 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/fsck.c: ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m"))
2012-01-09 17:34:56,548 DEBUG PCDerivation$ Trying to find path for: [Object: tune2fs]
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m")), sourceFile -> e2fsprogs/tune2fs.c, generated -> false, objectFile -> tune2fs, listName -> lib)
2012-01-09 17:34:56,548 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m")), sourceFile -> e2fsprogs/tune2fs.c, generated -> false, objectFile -> tune2fs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-09 17:34:56,548 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,548 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/tune2fs.c: ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m"))
2012-01-09 17:34:56,549 DEBUG PCDerivation$ Trying to find path for: [Object: patch]
2012-01-09 17:34:56,549 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m")), sourceFile -> editors/patch.c, generated -> false, objectFile -> patch, listName -> lib)
2012-01-09 17:34:56,549 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m")), sourceFile -> editors/patch.c, generated -> false, objectFile -> patch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,549 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,549 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,549 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,549 DEBUG PCDerivation$ Expression of path for object occurrence editors/patch.c: ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m"))
2012-01-09 17:34:56,549 DEBUG PCDerivation$ Trying to find path for: [Object: vi]
2012-01-09 17:34:56,549 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VI == "y") || (CONFIG_VI == "m")), sourceFile -> editors/vi.c, generated -> false, objectFile -> vi, listName -> lib)
2012-01-09 17:34:56,549 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VI == "y") || (CONFIG_VI == "m")), sourceFile -> editors/vi.c, generated -> false, objectFile -> vi, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,549 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,549 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,549 DEBUG PCDerivation$ Expression of path for object occurrence editors/vi.c: ((CONFIG_VI == "y") || (CONFIG_VI == "m"))
2012-01-09 17:34:56,549 DEBUG PCDerivation$ Trying to find path for: [Object: awk]
2012-01-09 17:34:56,549 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AWK == "y") || (CONFIG_AWK == "m")), sourceFile -> editors/awk.c, generated -> false, objectFile -> awk, listName -> lib)
2012-01-09 17:34:56,549 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AWK == "y") || (CONFIG_AWK == "m")), sourceFile -> editors/awk.c, generated -> false, objectFile -> awk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,549 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,549 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,549 DEBUG PCDerivation$ Expression of path for object occurrence editors/awk.c: ((CONFIG_AWK == "y") || (CONFIG_AWK == "m"))
2012-01-09 17:34:56,549 DEBUG PCDerivation$ Trying to find path for: [Object: cmp]
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CMP == "y") || (CONFIG_CMP == "m")), sourceFile -> editors/cmp.c, generated -> false, objectFile -> cmp, listName -> lib)
2012-01-09 17:34:56,550 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CMP == "y") || (CONFIG_CMP == "m")), sourceFile -> editors/cmp.c, generated -> false, objectFile -> cmp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,550 DEBUG PCDerivation$ Expression of path for object occurrence editors/cmp.c: ((CONFIG_CMP == "y") || (CONFIG_CMP == "m"))
2012-01-09 17:34:56,550 DEBUG PCDerivation$ Trying to find path for: [Object: diff]
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m")), sourceFile -> editors/diff.c, generated -> false, objectFile -> diff, listName -> lib)
2012-01-09 17:34:56,550 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m")), sourceFile -> editors/diff.c, generated -> false, objectFile -> diff, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,550 DEBUG PCDerivation$ Expression of path for object occurrence editors/diff.c: ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m"))
2012-01-09 17:34:56,550 DEBUG PCDerivation$ Trying to find path for: [Object: ed]
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ED == "y") || (CONFIG_ED == "m")), sourceFile -> editors/ed.c, generated -> false, objectFile -> ed, listName -> lib)
2012-01-09 17:34:56,550 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ED == "y") || (CONFIG_ED == "m")), sourceFile -> editors/ed.c, generated -> false, objectFile -> ed, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,550 DEBUG PCDerivation$ Expression of path for object occurrence editors/ed.c: ((CONFIG_ED == "y") || (CONFIG_ED == "m"))
2012-01-09 17:34:56,550 DEBUG PCDerivation$ Trying to find path for: [Object: sed]
2012-01-09 17:34:56,550 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SED == "y") || (CONFIG_SED == "m")), sourceFile -> editors/sed.c, generated -> false, objectFile -> sed, listName -> lib)
2012-01-09 17:34:56,550 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SED == "y") || (CONFIG_SED == "m")), sourceFile -> editors/sed.c, generated -> false, objectFile -> sed, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,551 DEBUG PCDerivation$ Expression of path for object occurrence editors/sed.c: ((CONFIG_SED == "y") || (CONFIG_SED == "m"))
2012-01-09 17:34:56,551 DEBUG PCDerivation$ Trying to find path for: [Object: find]
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FIND == "y") || (CONFIG_FIND == "m")), sourceFile -> findutils/find.c, generated -> false, objectFile -> find, listName -> lib)
2012-01-09 17:34:56,551 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FIND == "y") || (CONFIG_FIND == "m")), sourceFile -> findutils/find.c, generated -> false, objectFile -> find, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-09 17:34:56,551 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,551 DEBUG PCDerivation$ Expression of path for object occurrence findutils/find.c: ((CONFIG_FIND == "y") || (CONFIG_FIND == "m"))
2012-01-09 17:34:56,551 DEBUG PCDerivation$ Trying to find path for: [Object: grep]
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GREP == "y") || (CONFIG_GREP == "m")), sourceFile -> findutils/grep.c, generated -> false, objectFile -> grep, listName -> lib)
2012-01-09 17:34:56,551 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GREP == "y") || (CONFIG_GREP == "m")), sourceFile -> findutils/grep.c, generated -> false, objectFile -> grep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,551 DEBUG PCDerivation$ Expression of path for object occurrence findutils/grep.c: ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))
2012-01-09 17:34:56,551 DEBUG PCDerivation$ Trying to find path for: [Object: xargs]
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m")), sourceFile -> findutils/xargs.c, generated -> false, objectFile -> xargs, listName -> lib)
2012-01-09 17:34:56,551 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m")), sourceFile -> findutils/xargs.c, generated -> false, objectFile -> xargs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-09 17:34:56,551 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,552 DEBUG PCDerivation$ Expression of path for object occurrence findutils/xargs.c: ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m"))
2012-01-09 17:34:56,552 DEBUG PCDerivation$ Trying to find path for: [Object: bootchartd]
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m")), sourceFile -> init/bootchartd.c, generated -> false, objectFile -> bootchartd, listName -> lib)
2012-01-09 17:34:56,552 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m")), sourceFile -> init/bootchartd.c, generated -> false, objectFile -> bootchartd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-09 17:34:56,552 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,552 DEBUG PCDerivation$ Expression of path for object occurrence init/bootchartd.c: ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m"))
2012-01-09 17:34:56,552 DEBUG PCDerivation$ Trying to find path for: [Object: halt]
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HALT == "y") || (CONFIG_HALT == "m")), sourceFile -> init/halt.c, generated -> false, objectFile -> halt, listName -> lib)
2012-01-09 17:34:56,552 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HALT == "y") || (CONFIG_HALT == "m")), sourceFile -> init/halt.c, generated -> false, objectFile -> halt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,552 DEBUG PCDerivation$ Expression of path for object occurrence init/halt.c: ((CONFIG_HALT == "y") || (CONFIG_HALT == "m"))
2012-01-09 17:34:56,552 DEBUG PCDerivation$ Trying to find path for: [Object: init]
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INIT == "y") || (CONFIG_INIT == "m")), sourceFile -> init/init.c, generated -> false, objectFile -> init, listName -> lib)
2012-01-09 17:34:56,552 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INIT == "y") || (CONFIG_INIT == "m")), sourceFile -> init/init.c, generated -> false, objectFile -> init, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-09 17:34:56,552 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,553 DEBUG PCDerivation$ Expression of path for object occurrence init/init.c: ((CONFIG_INIT == "y") || (CONFIG_INIT == "m"))
2012-01-09 17:34:56,553 DEBUG PCDerivation$ Trying to find path for: [Object: mesg]
2012-01-09 17:34:56,553 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MESG == "y") || (CONFIG_MESG == "m")), sourceFile -> init/mesg.c, generated -> false, objectFile -> mesg, listName -> lib)
2012-01-09 17:34:56,553 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MESG == "y") || (CONFIG_MESG == "m")), sourceFile -> init/mesg.c, generated -> false, objectFile -> mesg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-09 17:34:56,553 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-09 17:34:56,553 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,553 DEBUG PCDerivation$ Expression of path for object occurrence init/mesg.c: ((CONFIG_MESG == "y") || (CONFIG_MESG == "m"))
2012-01-09 17:34:56,553 DEBUG PCDerivation$ Trying to find path for: [Object: get_shell_name]
2012-01-09 17:34:56,553 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_shell_name.c, builtAs -> y, generated -> false, objectFile -> get_shell_name, listName -> lib)
2012-01-09 17:34:56,553 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_shell_name.c, builtAs -> y, generated -> false, objectFile -> get_shell_name, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,553 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,553 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,553 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,553 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_shell_name.c: [TRUE]
2012-01-09 17:34:56,553 DEBUG PCDerivation$ Trying to find path for: [Object: parse_config]
2012-01-09 17:34:56,563 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_config.c, builtAs -> y, generated -> false, objectFile -> parse_config, listName -> lib)
2012-01-09 17:34:56,564 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_config.c, builtAs -> y, generated -> false, objectFile -> parse_config, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,564 DEBUG PCDerivation$ Expression of path for object occurrence libbb/parse_config.c: [TRUE]
2012-01-09 17:34:56,564 DEBUG PCDerivation$ Trying to find path for: [Object: percent_decode]
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/percent_decode.c, builtAs -> y, generated -> false, objectFile -> percent_decode, listName -> lib)
2012-01-09 17:34:56,564 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/percent_decode.c, builtAs -> y, generated -> false, objectFile -> percent_decode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,564 DEBUG PCDerivation$ Expression of path for object occurrence libbb/percent_decode.c: [TRUE]
2012-01-09 17:34:56,564 DEBUG PCDerivation$ Trying to find path for: [Object: systemd_support]
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m")), sourceFile -> libbb/systemd_support.c, generated -> false, objectFile -> systemd_support, listName -> lib)
2012-01-09 17:34:56,564 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m")), sourceFile -> libbb/systemd_support.c, generated -> false, objectFile -> systemd_support, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,564 DEBUG PCDerivation$ Expression of path for object occurrence libbb/systemd_support.c: ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m"))
2012-01-09 17:34:56,564 DEBUG PCDerivation$ Trying to find path for: [Object: appletlib]
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/appletlib.c, builtAs -> y, generated -> false, objectFile -> appletlib, listName -> lib)
2012-01-09 17:34:56,564 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/appletlib.c, builtAs -> y, generated -> false, objectFile -> appletlib, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,564 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,565 DEBUG PCDerivation$ Expression of path for object occurrence libbb/appletlib.c: [TRUE]
2012-01-09 17:34:56,565 DEBUG PCDerivation$ Trying to find path for: [Object: ask_confirmation]
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ask_confirmation.c, builtAs -> y, generated -> false, objectFile -> ask_confirmation, listName -> lib)
2012-01-09 17:34:56,565 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ask_confirmation.c, builtAs -> y, generated -> false, objectFile -> ask_confirmation, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,565 DEBUG PCDerivation$ Expression of path for object occurrence libbb/ask_confirmation.c: [TRUE]
2012-01-09 17:34:56,565 DEBUG PCDerivation$ Trying to find path for: [Object: bb_askpass]
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_askpass.c, builtAs -> y, generated -> false, objectFile -> bb_askpass, listName -> lib)
2012-01-09 17:34:56,565 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_askpass.c, builtAs -> y, generated -> false, objectFile -> bb_askpass, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,565 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_askpass.c: [TRUE]
2012-01-09 17:34:56,565 DEBUG PCDerivation$ Trying to find path for: [Object: bb_bswap_64]
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_bswap_64.c, builtAs -> y, generated -> false, objectFile -> bb_bswap_64, listName -> lib)
2012-01-09 17:34:56,565 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_bswap_64.c, builtAs -> y, generated -> false, objectFile -> bb_bswap_64, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,565 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,565 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_bswap_64.c: [TRUE]
2012-01-09 17:34:56,566 DEBUG PCDerivation$ Trying to find path for: [Object: bb_do_delay]
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_do_delay.c, builtAs -> y, generated -> false, objectFile -> bb_do_delay, listName -> lib)
2012-01-09 17:34:56,566 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_do_delay.c, builtAs -> y, generated -> false, objectFile -> bb_do_delay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,566 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_do_delay.c: [TRUE]
2012-01-09 17:34:56,566 DEBUG PCDerivation$ Trying to find path for: [Object: bb_pwd]
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_pwd.c, builtAs -> y, generated -> false, objectFile -> bb_pwd, listName -> lib)
2012-01-09 17:34:56,566 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_pwd.c, builtAs -> y, generated -> false, objectFile -> bb_pwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,566 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_pwd.c: [TRUE]
2012-01-09 17:34:56,566 DEBUG PCDerivation$ Trying to find path for: [Object: bb_qsort]
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_qsort.c, builtAs -> y, generated -> false, objectFile -> bb_qsort, listName -> lib)
2012-01-09 17:34:56,566 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_qsort.c, builtAs -> y, generated -> false, objectFile -> bb_qsort, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,566 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_qsort.c: [TRUE]
2012-01-09 17:34:56,566 DEBUG PCDerivation$ Trying to find path for: [Object: bb_strtonum]
2012-01-09 17:34:56,566 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_strtonum.c, builtAs -> y, generated -> false, objectFile -> bb_strtonum, listName -> lib)
2012-01-09 17:34:56,567 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_strtonum.c, builtAs -> y, generated -> false, objectFile -> bb_strtonum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,567 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_strtonum.c: [TRUE]
2012-01-09 17:34:56,567 DEBUG PCDerivation$ Trying to find path for: [Object: change_identity]
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/change_identity.c, builtAs -> y, generated -> false, objectFile -> change_identity, listName -> lib)
2012-01-09 17:34:56,567 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/change_identity.c, builtAs -> y, generated -> false, objectFile -> change_identity, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,567 DEBUG PCDerivation$ Expression of path for object occurrence libbb/change_identity.c: [TRUE]
2012-01-09 17:34:56,567 DEBUG PCDerivation$ Trying to find path for: [Object: chomp]
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/chomp.c, builtAs -> y, generated -> false, objectFile -> chomp, listName -> lib)
2012-01-09 17:34:56,567 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/chomp.c, builtAs -> y, generated -> false, objectFile -> chomp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,567 DEBUG PCDerivation$ Expression of path for object occurrence libbb/chomp.c: [TRUE]
2012-01-09 17:34:56,567 DEBUG PCDerivation$ Trying to find path for: [Object: compare_string_array]
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/compare_string_array.c, builtAs -> y, generated -> false, objectFile -> compare_string_array, listName -> lib)
2012-01-09 17:34:56,567 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/compare_string_array.c, builtAs -> y, generated -> false, objectFile -> compare_string_array, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,567 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,568 DEBUG PCDerivation$ Expression of path for object occurrence libbb/compare_string_array.c: [TRUE]
2012-01-09 17:34:56,568 DEBUG PCDerivation$ Trying to find path for: [Object: concat_path_file]
2012-01-09 17:34:56,568 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_path_file.c, builtAs -> y, generated -> false, objectFile -> concat_path_file, listName -> lib)
2012-01-09 17:34:56,568 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_path_file.c, builtAs -> y, generated -> false, objectFile -> concat_path_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,568 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,568 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,568 DEBUG PCDerivation$ Expression of path for object occurrence libbb/concat_path_file.c: [TRUE]
2012-01-09 17:34:56,568 DEBUG PCDerivation$ Trying to find path for: [Object: concat_subpath_file]
2012-01-09 17:34:56,568 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_subpath_file.c, builtAs -> y, generated -> false, objectFile -> concat_subpath_file, listName -> lib)
2012-01-09 17:34:56,568 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_subpath_file.c, builtAs -> y, generated -> false, objectFile -> concat_subpath_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,568 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,568 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,568 DEBUG PCDerivation$ Expression of path for object occurrence libbb/concat_subpath_file.c: [TRUE]
2012-01-09 17:34:56,568 DEBUG PCDerivation$ Trying to find path for: [Object: copy_file]
2012-01-09 17:34:56,568 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copy_file.c, builtAs -> y, generated -> false, objectFile -> copy_file, listName -> lib)
2012-01-09 17:34:56,568 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copy_file.c, builtAs -> y, generated -> false, objectFile -> copy_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,568 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,568 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,568 DEBUG PCDerivation$ Expression of path for object occurrence libbb/copy_file.c: [TRUE]
2012-01-09 17:34:56,568 DEBUG PCDerivation$ Trying to find path for: [Object: copyfd]
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copyfd.c, builtAs -> y, generated -> false, objectFile -> copyfd, listName -> lib)
2012-01-09 17:34:56,569 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copyfd.c, builtAs -> y, generated -> false, objectFile -> copyfd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,569 DEBUG PCDerivation$ Expression of path for object occurrence libbb/copyfd.c: [TRUE]
2012-01-09 17:34:56,569 DEBUG PCDerivation$ Trying to find path for: [Object: crc32]
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/crc32.c, builtAs -> y, generated -> false, objectFile -> crc32, listName -> lib)
2012-01-09 17:34:56,569 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/crc32.c, builtAs -> y, generated -> false, objectFile -> crc32, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,569 DEBUG PCDerivation$ Expression of path for object occurrence libbb/crc32.c: [TRUE]
2012-01-09 17:34:56,569 DEBUG PCDerivation$ Trying to find path for: [Object: create_icmp6_socket]
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp6_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp6_socket, listName -> lib)
2012-01-09 17:34:56,569 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp6_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp6_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,569 DEBUG PCDerivation$ Expression of path for object occurrence libbb/create_icmp6_socket.c: [TRUE]
2012-01-09 17:34:56,569 DEBUG PCDerivation$ Trying to find path for: [Object: create_icmp_socket]
2012-01-09 17:34:56,569 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp_socket, listName -> lib)
2012-01-09 17:34:56,569 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,570 DEBUG PCDerivation$ Expression of path for object occurrence libbb/create_icmp_socket.c: [TRUE]
2012-01-09 17:34:56,570 DEBUG PCDerivation$ Trying to find path for: [Object: default_error_retval]
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/default_error_retval.c, builtAs -> y, generated -> false, objectFile -> default_error_retval, listName -> lib)
2012-01-09 17:34:56,570 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/default_error_retval.c, builtAs -> y, generated -> false, objectFile -> default_error_retval, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,570 DEBUG PCDerivation$ Expression of path for object occurrence libbb/default_error_retval.c: [TRUE]
2012-01-09 17:34:56,570 DEBUG PCDerivation$ Trying to find path for: [Object: device_open]
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/device_open.c, builtAs -> y, generated -> false, objectFile -> device_open, listName -> lib)
2012-01-09 17:34:56,570 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/device_open.c, builtAs -> y, generated -> false, objectFile -> device_open, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,570 DEBUG PCDerivation$ Expression of path for object occurrence libbb/device_open.c: [TRUE]
2012-01-09 17:34:56,570 DEBUG PCDerivation$ Trying to find path for: [Object: dump]
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/dump.c, builtAs -> y, generated -> false, objectFile -> dump, listName -> lib)
2012-01-09 17:34:56,570 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/dump.c, builtAs -> y, generated -> false, objectFile -> dump, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,570 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,571 DEBUG PCDerivation$ Expression of path for object occurrence libbb/dump.c: [TRUE]
2012-01-09 17:34:56,571 DEBUG PCDerivation$ Trying to find path for: [Object: execable]
2012-01-09 17:34:56,571 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/execable.c, builtAs -> y, generated -> false, objectFile -> execable, listName -> lib)
2012-01-09 17:34:56,571 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/execable.c, builtAs -> y, generated -> false, objectFile -> execable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,571 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,571 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,571 DEBUG PCDerivation$ Expression of path for object occurrence libbb/execable.c: [TRUE]
2012-01-09 17:34:56,571 DEBUG PCDerivation$ Trying to find path for: [Object: fclose_nonstdin]
2012-01-09 17:34:56,571 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fclose_nonstdin.c, builtAs -> y, generated -> false, objectFile -> fclose_nonstdin, listName -> lib)
2012-01-09 17:34:56,571 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fclose_nonstdin.c, builtAs -> y, generated -> false, objectFile -> fclose_nonstdin, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,571 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,571 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,571 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fclose_nonstdin.c: [TRUE]
2012-01-09 17:34:56,571 DEBUG PCDerivation$ Trying to find path for: [Object: fflush_stdout_and_exit]
2012-01-09 17:34:56,571 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fflush_stdout_and_exit.c, builtAs -> y, generated -> false, objectFile -> fflush_stdout_and_exit, listName -> lib)
2012-01-09 17:34:56,571 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fflush_stdout_and_exit.c, builtAs -> y, generated -> false, objectFile -> fflush_stdout_and_exit, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,571 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,571 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,571 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fflush_stdout_and_exit.c: [TRUE]
2012-01-09 17:34:56,571 DEBUG PCDerivation$ Trying to find path for: [Object: fgets_str]
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fgets_str.c, builtAs -> y, generated -> false, objectFile -> fgets_str, listName -> lib)
2012-01-09 17:34:56,572 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fgets_str.c, builtAs -> y, generated -> false, objectFile -> fgets_str, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,572 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fgets_str.c: [TRUE]
2012-01-09 17:34:56,572 DEBUG PCDerivation$ Trying to find path for: [Object: find_pid_by_name]
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_pid_by_name.c, builtAs -> y, generated -> false, objectFile -> find_pid_by_name, listName -> lib)
2012-01-09 17:34:56,572 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_pid_by_name.c, builtAs -> y, generated -> false, objectFile -> find_pid_by_name, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,572 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_pid_by_name.c: [TRUE]
2012-01-09 17:34:56,572 DEBUG PCDerivation$ Trying to find path for: [Object: find_root_device]
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_root_device.c, builtAs -> y, generated -> false, objectFile -> find_root_device, listName -> lib)
2012-01-09 17:34:56,572 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_root_device.c, builtAs -> y, generated -> false, objectFile -> find_root_device, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,572 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_root_device.c: [TRUE]
2012-01-09 17:34:56,572 DEBUG PCDerivation$ Trying to find path for: [Object: full_write]
2012-01-09 17:34:56,572 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/full_write.c, builtAs -> y, generated -> false, objectFile -> full_write, listName -> lib)
2012-01-09 17:34:56,572 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/full_write.c, builtAs -> y, generated -> false, objectFile -> full_write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,573 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,573 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,573 DEBUG PCDerivation$ Expression of path for object occurrence libbb/full_write.c: [TRUE]
2012-01-09 17:34:56,573 DEBUG PCDerivation$ Trying to find path for: [Object: get_console]
2012-01-09 17:34:56,573 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_console.c, builtAs -> y, generated -> false, objectFile -> get_console, listName -> lib)
2012-01-09 17:34:56,583 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_console.c, builtAs -> y, generated -> false, objectFile -> get_console, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,584 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,584 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,584 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_console.c: [TRUE]
2012-01-09 17:34:56,584 DEBUG PCDerivation$ Trying to find path for: [Object: get_last_path_component]
2012-01-09 17:34:56,584 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_last_path_component.c, builtAs -> y, generated -> false, objectFile -> get_last_path_component, listName -> lib)
2012-01-09 17:34:56,584 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_last_path_component.c, builtAs -> y, generated -> false, objectFile -> get_last_path_component, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,584 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,584 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,584 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_last_path_component.c: [TRUE]
2012-01-09 17:34:56,584 DEBUG PCDerivation$ Trying to find path for: [Object: get_line_from_file]
2012-01-09 17:34:56,584 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_line_from_file.c, builtAs -> y, generated -> false, objectFile -> get_line_from_file, listName -> lib)
2012-01-09 17:34:56,584 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_line_from_file.c, builtAs -> y, generated -> false, objectFile -> get_line_from_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,584 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,584 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,584 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_line_from_file.c: [TRUE]
2012-01-09 17:34:56,584 DEBUG PCDerivation$ Trying to find path for: [Object: getopt32]
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getopt32.c, builtAs -> y, generated -> false, objectFile -> getopt32, listName -> lib)
2012-01-09 17:34:56,585 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getopt32.c, builtAs -> y, generated -> false, objectFile -> getopt32, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,585 DEBUG PCDerivation$ Expression of path for object occurrence libbb/getopt32.c: [TRUE]
2012-01-09 17:34:56,585 DEBUG PCDerivation$ Trying to find path for: [Object: getpty]
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getpty.c, builtAs -> y, generated -> false, objectFile -> getpty, listName -> lib)
2012-01-09 17:34:56,585 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getpty.c, builtAs -> y, generated -> false, objectFile -> getpty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,585 DEBUG PCDerivation$ Expression of path for object occurrence libbb/getpty.c: [TRUE]
2012-01-09 17:34:56,585 DEBUG PCDerivation$ Trying to find path for: [Object: get_volsize]
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_volsize.c, builtAs -> y, generated -> false, objectFile -> get_volsize, listName -> lib)
2012-01-09 17:34:56,585 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_volsize.c, builtAs -> y, generated -> false, objectFile -> get_volsize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,585 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_volsize.c: [TRUE]
2012-01-09 17:34:56,585 DEBUG PCDerivation$ Trying to find path for: [Object: herror_msg]
2012-01-09 17:34:56,585 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/herror_msg.c, builtAs -> y, generated -> false, objectFile -> herror_msg, listName -> lib)
2012-01-09 17:34:56,585 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/herror_msg.c, builtAs -> y, generated -> false, objectFile -> herror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,586 DEBUG PCDerivation$ Expression of path for object occurrence libbb/herror_msg.c: [TRUE]
2012-01-09 17:34:56,586 DEBUG PCDerivation$ Trying to find path for: [Object: human_readable]
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/human_readable.c, builtAs -> y, generated -> false, objectFile -> human_readable, listName -> lib)
2012-01-09 17:34:56,586 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/human_readable.c, builtAs -> y, generated -> false, objectFile -> human_readable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,586 DEBUG PCDerivation$ Expression of path for object occurrence libbb/human_readable.c: [TRUE]
2012-01-09 17:34:56,586 DEBUG PCDerivation$ Trying to find path for: [Object: inet_common]
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inet_common.c, builtAs -> y, generated -> false, objectFile -> inet_common, listName -> lib)
2012-01-09 17:34:56,586 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inet_common.c, builtAs -> y, generated -> false, objectFile -> inet_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,586 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inet_common.c: [TRUE]
2012-01-09 17:34:56,586 DEBUG PCDerivation$ Trying to find path for: [Object: info_msg]
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/info_msg.c, builtAs -> y, generated -> false, objectFile -> info_msg, listName -> lib)
2012-01-09 17:34:56,586 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/info_msg.c, builtAs -> y, generated -> false, objectFile -> info_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,586 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,587 DEBUG PCDerivation$ Expression of path for object occurrence libbb/info_msg.c: [TRUE]
2012-01-09 17:34:56,587 DEBUG PCDerivation$ Trying to find path for: [Object: inode_hash]
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inode_hash.c, builtAs -> y, generated -> false, objectFile -> inode_hash, listName -> lib)
2012-01-09 17:34:56,587 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inode_hash.c, builtAs -> y, generated -> false, objectFile -> inode_hash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,587 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inode_hash.c: [TRUE]
2012-01-09 17:34:56,587 DEBUG PCDerivation$ Trying to find path for: [Object: isdirectory]
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/isdirectory.c, builtAs -> y, generated -> false, objectFile -> isdirectory, listName -> lib)
2012-01-09 17:34:56,587 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/isdirectory.c, builtAs -> y, generated -> false, objectFile -> isdirectory, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,587 DEBUG PCDerivation$ Expression of path for object occurrence libbb/isdirectory.c: [TRUE]
2012-01-09 17:34:56,587 DEBUG PCDerivation$ Trying to find path for: [Object: kernel_version]
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/kernel_version.c, builtAs -> y, generated -> false, objectFile -> kernel_version, listName -> lib)
2012-01-09 17:34:56,587 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/kernel_version.c, builtAs -> y, generated -> false, objectFile -> kernel_version, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,587 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,587 DEBUG PCDerivation$ Expression of path for object occurrence libbb/kernel_version.c: [TRUE]
2012-01-09 17:34:56,587 DEBUG PCDerivation$ Trying to find path for: [Object: last_char_is]
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/last_char_is.c, builtAs -> y, generated -> false, objectFile -> last_char_is, listName -> lib)
2012-01-09 17:34:56,588 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/last_char_is.c, builtAs -> y, generated -> false, objectFile -> last_char_is, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,588 DEBUG PCDerivation$ Expression of path for object occurrence libbb/last_char_is.c: [TRUE]
2012-01-09 17:34:56,588 DEBUG PCDerivation$ Trying to find path for: [Object: lineedit]
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit.c, builtAs -> y, generated -> false, objectFile -> lineedit, listName -> lib)
2012-01-09 17:34:56,588 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit.c, builtAs -> y, generated -> false, objectFile -> lineedit, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,588 DEBUG PCDerivation$ Expression of path for object occurrence libbb/lineedit.c: [TRUE]
2012-01-09 17:34:56,588 DEBUG PCDerivation$ Trying to find path for: [Object: lineedit_ptr_hack]
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit_ptr_hack.c, builtAs -> y, generated -> false, objectFile -> lineedit_ptr_hack, listName -> lib)
2012-01-09 17:34:56,588 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit_ptr_hack.c, builtAs -> y, generated -> false, objectFile -> lineedit_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,588 DEBUG PCDerivation$ Expression of path for object occurrence libbb/lineedit_ptr_hack.c: [TRUE]
2012-01-09 17:34:56,588 DEBUG PCDerivation$ Trying to find path for: [Object: llist]
2012-01-09 17:34:56,588 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/llist.c, builtAs -> y, generated -> false, objectFile -> llist, listName -> lib)
2012-01-09 17:34:56,588 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/llist.c, builtAs -> y, generated -> false, objectFile -> llist, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,589 DEBUG PCDerivation$ Expression of path for object occurrence libbb/llist.c: [TRUE]
2012-01-09 17:34:56,589 DEBUG PCDerivation$ Trying to find path for: [Object: login]
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/login.c, builtAs -> y, generated -> false, objectFile -> login, listName -> lib)
2012-01-09 17:34:56,589 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/login.c, builtAs -> y, generated -> false, objectFile -> login, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,589 DEBUG PCDerivation$ Expression of path for object occurrence libbb/login.c: [TRUE]
2012-01-09 17:34:56,589 DEBUG PCDerivation$ Trying to find path for: [Object: make_directory]
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/make_directory.c, builtAs -> y, generated -> false, objectFile -> make_directory, listName -> lib)
2012-01-09 17:34:56,589 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/make_directory.c, builtAs -> y, generated -> false, objectFile -> make_directory, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,589 DEBUG PCDerivation$ Expression of path for object occurrence libbb/make_directory.c: [TRUE]
2012-01-09 17:34:56,589 DEBUG PCDerivation$ Trying to find path for: [Object: makedev]
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/makedev.c, builtAs -> y, generated -> false, objectFile -> makedev, listName -> lib)
2012-01-09 17:34:56,589 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/makedev.c, builtAs -> y, generated -> false, objectFile -> makedev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,589 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,590 DEBUG PCDerivation$ Expression of path for object occurrence libbb/makedev.c: [TRUE]
2012-01-09 17:34:56,590 DEBUG PCDerivation$ Trying to find path for: [Object: hash_md5_sha]
2012-01-09 17:34:56,590 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/hash_md5_sha.c, builtAs -> y, generated -> false, objectFile -> hash_md5_sha, listName -> lib)
2012-01-09 17:34:56,590 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/hash_md5_sha.c, builtAs -> y, generated -> false, objectFile -> hash_md5_sha, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,590 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,590 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,590 DEBUG PCDerivation$ Expression of path for object occurrence libbb/hash_md5_sha.c: [TRUE]
2012-01-09 17:34:56,590 DEBUG PCDerivation$ Trying to find path for: [Object: messages]
2012-01-09 17:34:56,590 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/messages.c, builtAs -> y, generated -> false, objectFile -> messages, listName -> lib)
2012-01-09 17:34:56,590 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/messages.c, builtAs -> y, generated -> false, objectFile -> messages, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,590 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,590 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,590 DEBUG PCDerivation$ Expression of path for object occurrence libbb/messages.c: [TRUE]
2012-01-09 17:34:56,590 DEBUG PCDerivation$ Trying to find path for: [Object: mode_string]
2012-01-09 17:34:56,590 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/mode_string.c, builtAs -> y, generated -> false, objectFile -> mode_string, listName -> lib)
2012-01-09 17:34:56,590 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/mode_string.c, builtAs -> y, generated -> false, objectFile -> mode_string, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,590 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,590 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,590 DEBUG PCDerivation$ Expression of path for object occurrence libbb/mode_string.c: [TRUE]
2012-01-09 17:34:56,590 DEBUG PCDerivation$ Trying to find path for: [Object: parse_mode]
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_mode.c, builtAs -> y, generated -> false, objectFile -> parse_mode, listName -> lib)
2012-01-09 17:34:56,591 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_mode.c, builtAs -> y, generated -> false, objectFile -> parse_mode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,591 DEBUG PCDerivation$ Expression of path for object occurrence libbb/parse_mode.c: [TRUE]
2012-01-09 17:34:56,591 DEBUG PCDerivation$ Trying to find path for: [Object: perror_msg]
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_msg.c, builtAs -> y, generated -> false, objectFile -> perror_msg, listName -> lib)
2012-01-09 17:34:56,591 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_msg.c, builtAs -> y, generated -> false, objectFile -> perror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,591 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_msg.c: [TRUE]
2012-01-09 17:34:56,591 DEBUG PCDerivation$ Trying to find path for: [Object: perror_nomsg]
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg, listName -> lib)
2012-01-09 17:34:56,591 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,591 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_nomsg.c: [TRUE]
2012-01-09 17:34:56,591 DEBUG PCDerivation$ Trying to find path for: [Object: perror_nomsg_and_die]
2012-01-09 17:34:56,591 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg_and_die.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg_and_die, listName -> lib)
2012-01-09 17:34:56,591 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg_and_die.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg_and_die, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,592 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_nomsg_and_die.c: [TRUE]
2012-01-09 17:34:56,592 DEBUG PCDerivation$ Trying to find path for: [Object: pidfile]
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/pidfile.c, builtAs -> y, generated -> false, objectFile -> pidfile, listName -> lib)
2012-01-09 17:34:56,592 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/pidfile.c, builtAs -> y, generated -> false, objectFile -> pidfile, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,592 DEBUG PCDerivation$ Expression of path for object occurrence libbb/pidfile.c: [TRUE]
2012-01-09 17:34:56,592 DEBUG PCDerivation$ Trying to find path for: [Object: platform]
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/platform.c, builtAs -> y, generated -> false, objectFile -> platform, listName -> lib)
2012-01-09 17:34:56,592 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/platform.c, builtAs -> y, generated -> false, objectFile -> platform, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,592 DEBUG PCDerivation$ Expression of path for object occurrence libbb/platform.c: [TRUE]
2012-01-09 17:34:56,592 DEBUG PCDerivation$ Trying to find path for: [Object: printable]
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable.c, builtAs -> y, generated -> false, objectFile -> printable, listName -> lib)
2012-01-09 17:34:56,592 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable.c, builtAs -> y, generated -> false, objectFile -> printable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,592 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,593 DEBUG PCDerivation$ Expression of path for object occurrence libbb/printable.c: [TRUE]
2012-01-09 17:34:56,593 DEBUG PCDerivation$ Trying to find path for: [Object: printable_string]
2012-01-09 17:34:56,593 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable_string.c, builtAs -> y, generated -> false, objectFile -> printable_string, listName -> lib)
2012-01-09 17:34:56,593 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable_string.c, builtAs -> y, generated -> false, objectFile -> printable_string, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,593 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,593 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,593 DEBUG PCDerivation$ Expression of path for object occurrence libbb/printable_string.c: [TRUE]
2012-01-09 17:34:56,593 DEBUG PCDerivation$ Trying to find path for: [Object: print_flags]
2012-01-09 17:34:56,593 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/print_flags.c, builtAs -> y, generated -> false, objectFile -> print_flags, listName -> lib)
2012-01-09 17:34:56,593 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/print_flags.c, builtAs -> y, generated -> false, objectFile -> print_flags, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,593 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,593 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,593 DEBUG PCDerivation$ Expression of path for object occurrence libbb/print_flags.c: [TRUE]
2012-01-09 17:34:56,593 DEBUG PCDerivation$ Trying to find path for: [Object: process_escape_sequence]
2012-01-09 17:34:56,603 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/process_escape_sequence.c, builtAs -> y, generated -> false, objectFile -> process_escape_sequence, listName -> lib)
2012-01-09 17:34:56,604 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/process_escape_sequence.c, builtAs -> y, generated -> false, objectFile -> process_escape_sequence, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,604 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,604 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,604 DEBUG PCDerivation$ Expression of path for object occurrence libbb/process_escape_sequence.c: [TRUE]
2012-01-09 17:34:56,604 DEBUG PCDerivation$ Trying to find path for: [Object: procps]
2012-01-09 17:34:56,604 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/procps.c, builtAs -> y, generated -> false, objectFile -> procps, listName -> lib)
2012-01-09 17:34:56,604 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/procps.c, builtAs -> y, generated -> false, objectFile -> procps, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,604 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,604 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,604 DEBUG PCDerivation$ Expression of path for object occurrence libbb/procps.c: [TRUE]
2012-01-09 17:34:56,604 DEBUG PCDerivation$ Trying to find path for: [Object: progress]
2012-01-09 17:34:56,604 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/progress.c, builtAs -> y, generated -> false, objectFile -> progress, listName -> lib)
2012-01-09 17:34:56,604 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/progress.c, builtAs -> y, generated -> false, objectFile -> progress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,604 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,604 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,604 DEBUG PCDerivation$ Expression of path for object occurrence libbb/progress.c: [TRUE]
2012-01-09 17:34:56,604 DEBUG PCDerivation$ Trying to find path for: [Object: ptr_to_globals]
2012-01-09 17:34:56,604 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ptr_to_globals.c, builtAs -> y, generated -> false, objectFile -> ptr_to_globals, listName -> lib)
2012-01-09 17:34:56,604 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ptr_to_globals.c, builtAs -> y, generated -> false, objectFile -> ptr_to_globals, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,605 DEBUG PCDerivation$ Expression of path for object occurrence libbb/ptr_to_globals.c: [TRUE]
2012-01-09 17:34:56,605 DEBUG PCDerivation$ Trying to find path for: [Object: read]
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read.c, builtAs -> y, generated -> false, objectFile -> read, listName -> lib)
2012-01-09 17:34:56,605 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read.c, builtAs -> y, generated -> false, objectFile -> read, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,605 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read.c: [TRUE]
2012-01-09 17:34:56,605 DEBUG PCDerivation$ Trying to find path for: [Object: read_printf]
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_printf.c, builtAs -> y, generated -> false, objectFile -> read_printf, listName -> lib)
2012-01-09 17:34:56,605 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_printf.c, builtAs -> y, generated -> false, objectFile -> read_printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,605 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read_printf.c: [TRUE]
2012-01-09 17:34:56,605 DEBUG PCDerivation$ Trying to find path for: [Object: read_key]
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_key.c, builtAs -> y, generated -> false, objectFile -> read_key, listName -> lib)
2012-01-09 17:34:56,605 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_key.c, builtAs -> y, generated -> false, objectFile -> read_key, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,605 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,606 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read_key.c: [TRUE]
2012-01-09 17:34:56,606 DEBUG PCDerivation$ Trying to find path for: [Object: recursive_action]
2012-01-09 17:34:56,606 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/recursive_action.c, builtAs -> y, generated -> false, objectFile -> recursive_action, listName -> lib)
2012-01-09 17:34:56,606 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/recursive_action.c, builtAs -> y, generated -> false, objectFile -> recursive_action, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,606 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,606 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,606 DEBUG PCDerivation$ Expression of path for object occurrence libbb/recursive_action.c: [TRUE]
2012-01-09 17:34:56,606 DEBUG PCDerivation$ Trying to find path for: [Object: remove_file]
2012-01-09 17:34:56,606 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/remove_file.c, builtAs -> y, generated -> false, objectFile -> remove_file, listName -> lib)
2012-01-09 17:34:56,606 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/remove_file.c, builtAs -> y, generated -> false, objectFile -> remove_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,606 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,606 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,606 DEBUG PCDerivation$ Expression of path for object occurrence libbb/remove_file.c: [TRUE]
2012-01-09 17:34:56,606 DEBUG PCDerivation$ Trying to find path for: [Object: run_shell]
2012-01-09 17:34:56,606 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/run_shell.c, builtAs -> y, generated -> false, objectFile -> run_shell, listName -> lib)
2012-01-09 17:34:56,606 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/run_shell.c, builtAs -> y, generated -> false, objectFile -> run_shell, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,606 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,606 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,606 DEBUG PCDerivation$ Expression of path for object occurrence libbb/run_shell.c: [TRUE]
2012-01-09 17:34:56,606 DEBUG PCDerivation$ Trying to find path for: [Object: safe_gethostname]
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_gethostname.c, builtAs -> y, generated -> false, objectFile -> safe_gethostname, listName -> lib)
2012-01-09 17:34:56,607 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_gethostname.c, builtAs -> y, generated -> false, objectFile -> safe_gethostname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,607 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_gethostname.c: [TRUE]
2012-01-09 17:34:56,607 DEBUG PCDerivation$ Trying to find path for: [Object: safe_poll]
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_poll.c, builtAs -> y, generated -> false, objectFile -> safe_poll, listName -> lib)
2012-01-09 17:34:56,607 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_poll.c, builtAs -> y, generated -> false, objectFile -> safe_poll, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,607 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_poll.c: [TRUE]
2012-01-09 17:34:56,607 DEBUG PCDerivation$ Trying to find path for: [Object: safe_strncpy]
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_strncpy.c, builtAs -> y, generated -> false, objectFile -> safe_strncpy, listName -> lib)
2012-01-09 17:34:56,607 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_strncpy.c, builtAs -> y, generated -> false, objectFile -> safe_strncpy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,607 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_strncpy.c: [TRUE]
2012-01-09 17:34:56,607 DEBUG PCDerivation$ Trying to find path for: [Object: safe_write]
2012-01-09 17:34:56,607 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_write.c, builtAs -> y, generated -> false, objectFile -> safe_write, listName -> lib)
2012-01-09 17:34:56,608 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_write.c, builtAs -> y, generated -> false, objectFile -> safe_write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,608 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_write.c: [TRUE]
2012-01-09 17:34:56,608 DEBUG PCDerivation$ Trying to find path for: [Object: setup_environment]
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/setup_environment.c, builtAs -> y, generated -> false, objectFile -> setup_environment, listName -> lib)
2012-01-09 17:34:56,608 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/setup_environment.c, builtAs -> y, generated -> false, objectFile -> setup_environment, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,608 DEBUG PCDerivation$ Expression of path for object occurrence libbb/setup_environment.c: [TRUE]
2012-01-09 17:34:56,608 DEBUG PCDerivation$ Trying to find path for: [Object: signals]
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/signals.c, builtAs -> y, generated -> false, objectFile -> signals, listName -> lib)
2012-01-09 17:34:56,608 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/signals.c, builtAs -> y, generated -> false, objectFile -> signals, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,608 DEBUG PCDerivation$ Expression of path for object occurrence libbb/signals.c: [TRUE]
2012-01-09 17:34:56,608 DEBUG PCDerivation$ Trying to find path for: [Object: simplify_path]
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/simplify_path.c, builtAs -> y, generated -> false, objectFile -> simplify_path, listName -> lib)
2012-01-09 17:34:56,608 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/simplify_path.c, builtAs -> y, generated -> false, objectFile -> simplify_path, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,608 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,609 DEBUG PCDerivation$ Expression of path for object occurrence libbb/simplify_path.c: [TRUE]
2012-01-09 17:34:56,609 DEBUG PCDerivation$ Trying to find path for: [Object: single_argv]
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/single_argv.c, builtAs -> y, generated -> false, objectFile -> single_argv, listName -> lib)
2012-01-09 17:34:56,609 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/single_argv.c, builtAs -> y, generated -> false, objectFile -> single_argv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,609 DEBUG PCDerivation$ Expression of path for object occurrence libbb/single_argv.c: [TRUE]
2012-01-09 17:34:56,609 DEBUG PCDerivation$ Trying to find path for: [Object: skip_whitespace]
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/skip_whitespace.c, builtAs -> y, generated -> false, objectFile -> skip_whitespace, listName -> lib)
2012-01-09 17:34:56,609 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/skip_whitespace.c, builtAs -> y, generated -> false, objectFile -> skip_whitespace, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,609 DEBUG PCDerivation$ Expression of path for object occurrence libbb/skip_whitespace.c: [TRUE]
2012-01-09 17:34:56,609 DEBUG PCDerivation$ Trying to find path for: [Object: speed_table]
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/speed_table.c, builtAs -> y, generated -> false, objectFile -> speed_table, listName -> lib)
2012-01-09 17:34:56,609 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/speed_table.c, builtAs -> y, generated -> false, objectFile -> speed_table, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,609 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,610 DEBUG PCDerivation$ Expression of path for object occurrence libbb/speed_table.c: [TRUE]
2012-01-09 17:34:56,610 DEBUG PCDerivation$ Trying to find path for: [Object: str_tolower]
2012-01-09 17:34:56,610 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/str_tolower.c, builtAs -> y, generated -> false, objectFile -> str_tolower, listName -> lib)
2012-01-09 17:34:56,610 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/str_tolower.c, builtAs -> y, generated -> false, objectFile -> str_tolower, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,610 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,610 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,610 DEBUG PCDerivation$ Expression of path for object occurrence libbb/str_tolower.c: [TRUE]
2012-01-09 17:34:56,610 DEBUG PCDerivation$ Trying to find path for: [Object: strrstr]
2012-01-09 17:34:56,610 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/strrstr.c, builtAs -> y, generated -> false, objectFile -> strrstr, listName -> lib)
2012-01-09 17:34:56,610 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/strrstr.c, builtAs -> y, generated -> false, objectFile -> strrstr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,610 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,610 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,610 DEBUG PCDerivation$ Expression of path for object occurrence libbb/strrstr.c: [TRUE]
2012-01-09 17:34:56,610 DEBUG PCDerivation$ Trying to find path for: [Object: time]
2012-01-09 17:34:56,610 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/time.c, builtAs -> y, generated -> false, objectFile -> time, listName -> lib)
2012-01-09 17:34:56,610 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/time.c, builtAs -> y, generated -> false, objectFile -> time, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,610 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,610 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,610 DEBUG PCDerivation$ Expression of path for object occurrence libbb/time.c: [TRUE]
2012-01-09 17:34:56,610 DEBUG PCDerivation$ Trying to find path for: [Object: trim]
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/trim.c, builtAs -> y, generated -> false, objectFile -> trim, listName -> lib)
2012-01-09 17:34:56,611 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/trim.c, builtAs -> y, generated -> false, objectFile -> trim, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,611 DEBUG PCDerivation$ Expression of path for object occurrence libbb/trim.c: [TRUE]
2012-01-09 17:34:56,611 DEBUG PCDerivation$ Trying to find path for: [Object: u_signal_names]
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/u_signal_names.c, builtAs -> y, generated -> false, objectFile -> u_signal_names, listName -> lib)
2012-01-09 17:34:56,611 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/u_signal_names.c, builtAs -> y, generated -> false, objectFile -> u_signal_names, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,611 DEBUG PCDerivation$ Expression of path for object occurrence libbb/u_signal_names.c: [TRUE]
2012-01-09 17:34:56,611 DEBUG PCDerivation$ Trying to find path for: [Object: uuencode]
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/uuencode.c, builtAs -> y, generated -> false, objectFile -> uuencode, listName -> lib)
2012-01-09 17:34:56,611 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/uuencode.c, builtAs -> y, generated -> false, objectFile -> uuencode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,611 DEBUG PCDerivation$ Expression of path for object occurrence libbb/uuencode.c: [TRUE]
2012-01-09 17:34:56,611 DEBUG PCDerivation$ Trying to find path for: [Object: vdprintf]
2012-01-09 17:34:56,611 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vdprintf.c, builtAs -> y, generated -> false, objectFile -> vdprintf, listName -> lib)
2012-01-09 17:34:56,612 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vdprintf.c, builtAs -> y, generated -> false, objectFile -> vdprintf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,612 DEBUG PCDerivation$ Expression of path for object occurrence libbb/vdprintf.c: [TRUE]
2012-01-09 17:34:56,612 DEBUG PCDerivation$ Trying to find path for: [Object: verror_msg]
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/verror_msg.c, builtAs -> y, generated -> false, objectFile -> verror_msg, listName -> lib)
2012-01-09 17:34:56,612 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/verror_msg.c, builtAs -> y, generated -> false, objectFile -> verror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,612 DEBUG PCDerivation$ Expression of path for object occurrence libbb/verror_msg.c: [TRUE]
2012-01-09 17:34:56,612 DEBUG PCDerivation$ Trying to find path for: [Object: vfork_daemon_rexec]
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vfork_daemon_rexec.c, builtAs -> y, generated -> false, objectFile -> vfork_daemon_rexec, listName -> lib)
2012-01-09 17:34:56,612 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vfork_daemon_rexec.c, builtAs -> y, generated -> false, objectFile -> vfork_daemon_rexec, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,612 DEBUG PCDerivation$ Expression of path for object occurrence libbb/vfork_daemon_rexec.c: [TRUE]
2012-01-09 17:34:56,612 DEBUG PCDerivation$ Trying to find path for: [Object: warn_ignoring_args]
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/warn_ignoring_args.c, builtAs -> y, generated -> false, objectFile -> warn_ignoring_args, listName -> lib)
2012-01-09 17:34:56,612 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/warn_ignoring_args.c, builtAs -> y, generated -> false, objectFile -> warn_ignoring_args, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,612 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,613 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,613 DEBUG PCDerivation$ Expression of path for object occurrence libbb/warn_ignoring_args.c: [TRUE]
2012-01-09 17:34:56,613 DEBUG PCDerivation$ Trying to find path for: [Object: wfopen]
2012-01-09 17:34:56,613 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen.c, builtAs -> y, generated -> false, objectFile -> wfopen, listName -> lib)
2012-01-09 17:34:56,613 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen.c, builtAs -> y, generated -> false, objectFile -> wfopen, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,613 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,613 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,613 DEBUG PCDerivation$ Expression of path for object occurrence libbb/wfopen.c: [TRUE]
2012-01-09 17:34:56,613 DEBUG PCDerivation$ Trying to find path for: [Object: wfopen_input]
2012-01-09 17:34:56,613 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen_input.c, builtAs -> y, generated -> false, objectFile -> wfopen_input, listName -> lib)
2012-01-09 17:34:56,613 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen_input.c, builtAs -> y, generated -> false, objectFile -> wfopen_input, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,613 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,613 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,623 DEBUG PCDerivation$ Expression of path for object occurrence libbb/wfopen_input.c: [TRUE]
2012-01-09 17:34:56,623 DEBUG PCDerivation$ Trying to find path for: [Object: write]
2012-01-09 17:34:56,623 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/write.c, builtAs -> y, generated -> false, objectFile -> write, listName -> lib)
2012-01-09 17:34:56,623 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/write.c, builtAs -> y, generated -> false, objectFile -> write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,623 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,623 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,623 DEBUG PCDerivation$ Expression of path for object occurrence libbb/write.c: [TRUE]
2012-01-09 17:34:56,623 DEBUG PCDerivation$ Trying to find path for: [Object: xatonum]
2012-01-09 17:34:56,623 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xatonum.c, builtAs -> y, generated -> false, objectFile -> xatonum, listName -> lib)
2012-01-09 17:34:56,623 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xatonum.c, builtAs -> y, generated -> false, objectFile -> xatonum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,624 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,624 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,624 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xatonum.c: [TRUE]
2012-01-09 17:34:56,624 DEBUG PCDerivation$ Trying to find path for: [Object: xconnect]
2012-01-09 17:34:56,624 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xconnect.c, builtAs -> y, generated -> false, objectFile -> xconnect, listName -> lib)
2012-01-09 17:34:56,624 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xconnect.c, builtAs -> y, generated -> false, objectFile -> xconnect, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,624 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,624 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,624 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xconnect.c: [TRUE]
2012-01-09 17:34:56,625 DEBUG PCDerivation$ Trying to find path for: [Object: xfuncs]
2012-01-09 17:34:56,625 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs.c, builtAs -> y, generated -> false, objectFile -> xfuncs, listName -> lib)
2012-01-09 17:34:56,625 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs.c, builtAs -> y, generated -> false, objectFile -> xfuncs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,625 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,625 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,625 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfuncs.c: [TRUE]
2012-01-09 17:34:56,625 DEBUG PCDerivation$ Trying to find path for: [Object: xfuncs_printf]
2012-01-09 17:34:56,625 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs_printf.c, builtAs -> y, generated -> false, objectFile -> xfuncs_printf, listName -> lib)
2012-01-09 17:34:56,625 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs_printf.c, builtAs -> y, generated -> false, objectFile -> xfuncs_printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,625 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,625 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,625 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfuncs_printf.c: [TRUE]
2012-01-09 17:34:56,626 DEBUG PCDerivation$ Trying to find path for: [Object: xfunc_die]
2012-01-09 17:34:56,626 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfunc_die.c, builtAs -> y, generated -> false, objectFile -> xfunc_die, listName -> lib)
2012-01-09 17:34:56,626 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfunc_die.c, builtAs -> y, generated -> false, objectFile -> xfunc_die, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,626 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,626 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,626 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfunc_die.c: [TRUE]
2012-01-09 17:34:56,626 DEBUG PCDerivation$ Trying to find path for: [Object: xgetcwd]
2012-01-09 17:34:56,626 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgetcwd.c, builtAs -> y, generated -> false, objectFile -> xgetcwd, listName -> lib)
2012-01-09 17:34:56,626 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgetcwd.c, builtAs -> y, generated -> false, objectFile -> xgetcwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,626 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,626 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,626 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xgetcwd.c: [TRUE]
2012-01-09 17:34:56,626 DEBUG PCDerivation$ Trying to find path for: [Object: xgethostbyname]
2012-01-09 17:34:56,626 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgethostbyname.c, builtAs -> y, generated -> false, objectFile -> xgethostbyname, listName -> lib)
2012-01-09 17:34:56,626 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgethostbyname.c, builtAs -> y, generated -> false, objectFile -> xgethostbyname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,626 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,626 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,626 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xgethostbyname.c: [TRUE]
2012-01-09 17:34:56,626 DEBUG PCDerivation$ Trying to find path for: [Object: xreadlink]
2012-01-09 17:34:56,627 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xreadlink.c, builtAs -> y, generated -> false, objectFile -> xreadlink, listName -> lib)
2012-01-09 17:34:56,627 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xreadlink.c, builtAs -> y, generated -> false, objectFile -> xreadlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,627 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,627 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,627 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xreadlink.c: [TRUE]
2012-01-09 17:34:56,627 DEBUG PCDerivation$ Trying to find path for: [Object: xrealloc_vector]
2012-01-09 17:34:56,627 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xrealloc_vector.c, builtAs -> y, generated -> false, objectFile -> xrealloc_vector, listName -> lib)
2012-01-09 17:34:56,627 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xrealloc_vector.c, builtAs -> y, generated -> false, objectFile -> xrealloc_vector, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,627 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,627 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,627 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xrealloc_vector.c: [TRUE]
2012-01-09 17:34:56,627 DEBUG PCDerivation$ Trying to find path for: [Object: match_fstype]
2012-01-09 17:34:56,627 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m")), sourceFile -> libbb/match_fstype.c, generated -> false, objectFile -> match_fstype, listName -> lib)
2012-01-09 17:34:56,627 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m")), sourceFile -> libbb/match_fstype.c, generated -> false, objectFile -> match_fstype, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,627 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,627 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,627 DEBUG PCDerivation$ Expression of path for object occurrence libbb/match_fstype.c: ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m"))
2012-01-09 17:34:56,627 DEBUG PCDerivation$ Trying to find path for: [Object: utmp]
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m")), sourceFile -> libbb/utmp.c, generated -> false, objectFile -> utmp, listName -> lib)
2012-01-09 17:34:56,628 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m")), sourceFile -> libbb/utmp.c, generated -> false, objectFile -> utmp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,628 DEBUG PCDerivation$ Expression of path for object occurrence libbb/utmp.c: ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m"))
2012-01-09 17:34:56,628 DEBUG PCDerivation$ Trying to find path for: [Object: selinux_common]
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m")), sourceFile -> libbb/selinux_common.c, generated -> false, objectFile -> selinux_common, listName -> lib)
2012-01-09 17:34:56,628 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m")), sourceFile -> libbb/selinux_common.c, generated -> false, objectFile -> selinux_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,628 DEBUG PCDerivation$ Expression of path for object occurrence libbb/selinux_common.c: ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m"))
2012-01-09 17:34:56,628 DEBUG PCDerivation$ Trying to find path for: [Object: mtab]
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m")), sourceFile -> libbb/mtab.c, generated -> false, objectFile -> mtab, listName -> lib)
2012-01-09 17:34:56,628 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m")), sourceFile -> libbb/mtab.c, generated -> false, objectFile -> mtab, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,628 DEBUG PCDerivation$ Expression of path for object occurrence libbb/mtab.c: ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m"))
2012-01-09 17:34:56,628 DEBUG PCDerivation$ Trying to find path for: [Object: unicode]
2012-01-09 17:34:56,628 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m")), sourceFile -> libbb/unicode.c, generated -> false, objectFile -> unicode, listName -> lib)
2012-01-09 17:34:56,628 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m")), sourceFile -> libbb/unicode.c, generated -> false, objectFile -> unicode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,629 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,629 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,629 DEBUG PCDerivation$ Expression of path for object occurrence libbb/unicode.c: ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m"))
2012-01-09 17:34:56,629 DEBUG PCDerivation$ Trying to find path for: [Object: die_if_bad_username]
2012-01-09 17:34:56,629 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m")), sourceFile -> libbb/die_if_bad_username.c, generated -> false, objectFile -> die_if_bad_username, listName -> lib)
2012-01-09 17:34:56,629 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m")), sourceFile -> libbb/die_if_bad_username.c, generated -> false, objectFile -> die_if_bad_username, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,629 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,629 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,629 DEBUG PCDerivation$ Expression of path for object occurrence libbb/die_if_bad_username.c: ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m"))
2012-01-09 17:34:56,629 DEBUG PCDerivation$ Trying to find path for: [Object: udp_io]
2012-01-09 17:34:56,629 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))), sourceFile -> libbb/udp_io.c, generated -> false, objectFile -> udp_io, listName -> lib)
2012-01-09 17:34:56,629 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))), sourceFile -> libbb/udp_io.c, generated -> false, objectFile -> udp_io, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,629 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,629 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,629 DEBUG PCDerivation$ Expression of path for object occurrence libbb/udp_io.c: (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")))
2012-01-09 17:34:56,629 DEBUG PCDerivation$ Trying to find path for: [Object: loop]
2012-01-09 17:34:56,629 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m"))), sourceFile -> libbb/loop.c, generated -> false, objectFile -> loop, listName -> lib)
2012-01-09 17:34:56,630 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m"))), sourceFile -> libbb/loop.c, generated -> false, objectFile -> loop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,630 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,630 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,630 DEBUG PCDerivation$ Expression of path for object occurrence libbb/loop.c: (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m")))
2012-01-09 17:34:56,630 DEBUG PCDerivation$ Trying to find path for: [Object: update_passwd]
2012-01-09 17:34:56,630 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))), sourceFile -> libbb/update_passwd.c, generated -> false, objectFile -> update_passwd, listName -> lib)
2012-01-09 17:34:56,630 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))), sourceFile -> libbb/update_passwd.c, generated -> false, objectFile -> update_passwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,630 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,630 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,630 DEBUG PCDerivation$ Expression of path for object occurrence libbb/update_passwd.c: (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")))
2012-01-09 17:34:56,630 DEBUG PCDerivation$ Trying to find path for: [Object: pw_encrypt]
2012-01-09 17:34:56,630 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m"))), sourceFile -> libbb/pw_encrypt.c, generated -> false, objectFile -> pw_encrypt, listName -> lib)
2012-01-09 17:34:56,630 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m"))), sourceFile -> libbb/pw_encrypt.c, generated -> false, objectFile -> pw_encrypt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,630 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,630 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,630 DEBUG PCDerivation$ Expression of path for object occurrence libbb/pw_encrypt.c: (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m")))
2012-01-09 17:34:56,631 DEBUG PCDerivation$ Trying to find path for: [Object: obscure]
2012-01-09 17:34:56,631 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> libbb/obscure.c, generated -> false, objectFile -> obscure, listName -> lib)
2012-01-09 17:34:56,631 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> libbb/obscure.c, generated -> false, objectFile -> obscure, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,631 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,631 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,631 DEBUG PCDerivation$ Expression of path for object occurrence libbb/obscure.c: ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))
2012-01-09 17:34:56,631 DEBUG PCDerivation$ Trying to find path for: [Object: correct_password]
2012-01-09 17:34:56,631 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))), sourceFile -> libbb/correct_password.c, generated -> false, objectFile -> correct_password, listName -> lib)
2012-01-09 17:34:56,631 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))), sourceFile -> libbb/correct_password.c, generated -> false, objectFile -> correct_password, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,631 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,631 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,631 DEBUG PCDerivation$ Expression of path for object occurrence libbb/correct_password.c: ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")))
2012-01-09 17:34:56,631 DEBUG PCDerivation$ Trying to find path for: [Object: find_mount_point]
2012-01-09 17:34:56,631 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))), sourceFile -> libbb/find_mount_point.c, generated -> false, objectFile -> find_mount_point, listName -> lib)
2012-01-09 17:34:56,631 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))), sourceFile -> libbb/find_mount_point.c, generated -> false, objectFile -> find_mount_point, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,631 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,631 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,631 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_mount_point.c: (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")))
2012-01-09 17:34:56,631 DEBUG PCDerivation$ Trying to find path for: [Object: rtc]
2012-01-09 17:34:56,632 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))), sourceFile -> libbb/rtc.c, generated -> false, objectFile -> rtc, listName -> lib)
2012-01-09 17:34:56,632 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))), sourceFile -> libbb/rtc.c, generated -> false, objectFile -> rtc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,632 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,632 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,632 DEBUG PCDerivation$ Expression of path for object occurrence libbb/rtc.c: (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")))
2012-01-09 17:34:56,632 DEBUG PCDerivation$ Trying to find path for: [Object: get_cpu_count]
2012-01-09 17:34:56,632 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))), sourceFile -> libbb/get_cpu_count.c, generated -> false, objectFile -> get_cpu_count, listName -> lib)
2012-01-09 17:34:56,632 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))), sourceFile -> libbb/get_cpu_count.c, generated -> false, objectFile -> get_cpu_count, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,632 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,632 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,632 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_cpu_count.c: ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")))
2012-01-09 17:34:56,632 DEBUG PCDerivation$ Trying to find path for: [Object: inet_cksum]
2012-01-09 17:34:56,632 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> libbb/inet_cksum.c, generated -> false, objectFile -> inet_cksum, listName -> lib)
2012-01-09 17:34:56,632 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> libbb/inet_cksum.c, generated -> false, objectFile -> inet_cksum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,632 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,632 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,632 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inet_cksum.c: ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-09 17:34:56,632 DEBUG PCDerivation$ Trying to find path for: [Object: xregcomp]
2012-01-09 17:34:56,633 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m"))), sourceFile -> libbb/xregcomp.c, generated -> false, objectFile -> xregcomp, listName -> lib)
2012-01-09 17:34:56,633 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m"))), sourceFile -> libbb/xregcomp.c, generated -> false, objectFile -> xregcomp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,633 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-09 17:34:56,633 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,633 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xregcomp.c: (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m")))
2012-01-09 17:34:56,633 DEBUG PCDerivation$ Trying to find path for: [Object: uidgid_get]
2012-01-09 17:34:56,633 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libpwdgrp/uidgid_get.c, builtAs -> y, generated -> false, objectFile -> uidgid_get, listName -> lib)
2012-01-09 17:34:56,633 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libpwdgrp/uidgid_get.c, builtAs -> y, generated -> false, objectFile -> uidgid_get, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-09 17:34:56,633 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-09 17:34:56,633 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,633 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,633 DEBUG PCDerivation$ Expression of path for object occurrence libpwdgrp/uidgid_get.c: [TRUE]
2012-01-09 17:34:56,633 DEBUG PCDerivation$ Trying to find path for: [Object: pwd_grp]
2012-01-09 17:34:56,641 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m")), sourceFile -> libpwdgrp/pwd_grp.c, generated -> false, objectFile -> pwd_grp, listName -> lib)
2012-01-09 17:34:56,642 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m")), sourceFile -> libpwdgrp/pwd_grp.c, generated -> false, objectFile -> pwd_grp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-09 17:34:56,642 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-09 17:34:56,642 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,642 DEBUG PCDerivation$ Expression of path for object occurrence libpwdgrp/pwd_grp.c: ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m"))
2012-01-09 17:34:56,642 DEBUG PCDerivation$ Trying to find path for: [Object: add-remove-shell]
2012-01-09 17:34:56,642 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m"))), sourceFile -> loginutils/add-remove-shell.c, generated -> false, objectFile -> add-remove-shell, listName -> lib)
2012-01-09 17:34:56,642 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m"))), sourceFile -> loginutils/add-remove-shell.c, generated -> false, objectFile -> add-remove-shell, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,642 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,642 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,642 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,642 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/add-remove-shell.c: (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m")))
2012-01-09 17:34:56,642 DEBUG PCDerivation$ Trying to find path for: [Object: addgroup]
2012-01-09 17:34:56,642 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")), sourceFile -> loginutils/addgroup.c, generated -> false, objectFile -> addgroup, listName -> lib)
2012-01-09 17:34:56,642 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")), sourceFile -> loginutils/addgroup.c, generated -> false, objectFile -> addgroup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,642 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,642 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,643 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/addgroup.c: ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))
2012-01-09 17:34:56,643 DEBUG PCDerivation$ Trying to find path for: [Object: adduser]
2012-01-09 17:34:56,643 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m")), sourceFile -> loginutils/adduser.c, generated -> false, objectFile -> adduser, listName -> lib)
2012-01-09 17:34:56,643 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m")), sourceFile -> loginutils/adduser.c, generated -> false, objectFile -> adduser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,643 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,643 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,643 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/adduser.c: ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))
2012-01-09 17:34:56,643 DEBUG PCDerivation$ Trying to find path for: [Object: cryptpw]
2012-01-09 17:34:56,643 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m")), sourceFile -> loginutils/cryptpw.c, generated -> false, objectFile -> cryptpw, listName -> lib)
2012-01-09 17:34:56,643 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m")), sourceFile -> loginutils/cryptpw.c, generated -> false, objectFile -> cryptpw, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,643 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,643 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,643 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/cryptpw.c: ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))
2012-01-09 17:34:56,643 DEBUG PCDerivation$ Trying to find path for: [Object: chpasswd]
2012-01-09 17:34:56,643 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")), sourceFile -> loginutils/chpasswd.c, generated -> false, objectFile -> chpasswd, listName -> lib)
2012-01-09 17:34:56,643 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")), sourceFile -> loginutils/chpasswd.c, generated -> false, objectFile -> chpasswd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,643 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,643 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,643 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/chpasswd.c: ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))
2012-01-09 17:34:56,643 DEBUG PCDerivation$ Trying to find path for: [Object: getty]
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m")), sourceFile -> loginutils/getty.c, generated -> false, objectFile -> getty, listName -> lib)
2012-01-09 17:34:56,644 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m")), sourceFile -> loginutils/getty.c, generated -> false, objectFile -> getty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,644 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/getty.c: ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m"))
2012-01-09 17:34:56,644 DEBUG PCDerivation$ Trying to find path for: [Object: login]
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")), sourceFile -> loginutils/login.c, generated -> false, objectFile -> login, listName -> lib)
2012-01-09 17:34:56,644 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")), sourceFile -> loginutils/login.c, generated -> false, objectFile -> login, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,644 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/login.c: ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))
2012-01-09 17:34:56,644 DEBUG PCDerivation$ Trying to find path for: [Object: passwd]
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> loginutils/passwd.c, generated -> false, objectFile -> passwd, listName -> lib)
2012-01-09 17:34:56,644 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> loginutils/passwd.c, generated -> false, objectFile -> passwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,644 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/passwd.c: ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))
2012-01-09 17:34:56,644 DEBUG PCDerivation$ Trying to find path for: [Object: su]
2012-01-09 17:34:56,644 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SU == "y") || (CONFIG_SU == "m")), sourceFile -> loginutils/su.c, generated -> false, objectFile -> su, listName -> lib)
2012-01-09 17:34:56,645 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SU == "y") || (CONFIG_SU == "m")), sourceFile -> loginutils/su.c, generated -> false, objectFile -> su, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,645 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/su.c: ((CONFIG_SU == "y") || (CONFIG_SU == "m"))
2012-01-09 17:34:56,645 DEBUG PCDerivation$ Trying to find path for: [Object: sulogin]
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m")), sourceFile -> loginutils/sulogin.c, generated -> false, objectFile -> sulogin, listName -> lib)
2012-01-09 17:34:56,645 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m")), sourceFile -> loginutils/sulogin.c, generated -> false, objectFile -> sulogin, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,645 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/sulogin.c: ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))
2012-01-09 17:34:56,645 DEBUG PCDerivation$ Trying to find path for: [Object: vlock]
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")), sourceFile -> loginutils/vlock.c, generated -> false, objectFile -> vlock, listName -> lib)
2012-01-09 17:34:56,645 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")), sourceFile -> loginutils/vlock.c, generated -> false, objectFile -> vlock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,645 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/vlock.c: ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))
2012-01-09 17:34:56,645 DEBUG PCDerivation$ Trying to find path for: [Object: deluser]
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))), sourceFile -> loginutils/deluser.c, generated -> false, objectFile -> deluser, listName -> lib)
2012-01-09 17:34:56,645 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))), sourceFile -> loginutils/deluser.c, generated -> false, objectFile -> deluser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,645 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-09 17:34:56,646 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,646 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/deluser.c: (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m")))
2012-01-09 17:34:56,646 DEBUG PCDerivation$ Trying to find path for: [Object: makemime]
2012-01-09 17:34:56,646 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")), sourceFile -> mailutils/makemime.c, generated -> false, objectFile -> makemime, listName -> lib)
2012-01-09 17:34:56,646 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")), sourceFile -> mailutils/makemime.c, generated -> false, objectFile -> makemime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,646 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,646 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,646 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,646 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/makemime.c: ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m"))
2012-01-09 17:34:56,646 DEBUG PCDerivation$ Trying to find path for: [Object: mail]
2012-01-09 17:34:56,646 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))), sourceFile -> mailutils/mail.c, generated -> false, objectFile -> mail, listName -> lib)
2012-01-09 17:34:56,646 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))), sourceFile -> mailutils/mail.c, generated -> false, objectFile -> mail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,646 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,653 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,653 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/mail.c: (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")))
2012-01-09 17:34:56,653 DEBUG PCDerivation$ Trying to find path for: [Object: popmaildir]
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m")), sourceFile -> mailutils/popmaildir.c, generated -> false, objectFile -> popmaildir, listName -> lib)
2012-01-09 17:34:56,654 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m")), sourceFile -> mailutils/popmaildir.c, generated -> false, objectFile -> popmaildir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,654 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/popmaildir.c: ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))
2012-01-09 17:34:56,654 DEBUG PCDerivation$ Trying to find path for: [Object: reformime]
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m")), sourceFile -> mailutils/reformime.c, generated -> false, objectFile -> reformime, listName -> lib)
2012-01-09 17:34:56,654 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m")), sourceFile -> mailutils/reformime.c, generated -> false, objectFile -> reformime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,654 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/reformime.c: ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))
2012-01-09 17:34:56,654 DEBUG PCDerivation$ Trying to find path for: [Object: sendmail]
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")), sourceFile -> mailutils/sendmail.c, generated -> false, objectFile -> sendmail, listName -> lib)
2012-01-09 17:34:56,654 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")), sourceFile -> mailutils/sendmail.c, generated -> false, objectFile -> sendmail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,654 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/sendmail.c: ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))
2012-01-09 17:34:56,654 DEBUG PCDerivation$ Trying to find path for: [Object: conspy]
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m")), sourceFile -> miscutils/conspy.c, generated -> false, objectFile -> conspy, listName -> lib)
2012-01-09 17:34:56,654 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m")), sourceFile -> miscutils/conspy.c, generated -> false, objectFile -> conspy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,654 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,654 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,655 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/conspy.c: ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m"))
2012-01-09 17:34:56,655 DEBUG PCDerivation$ Trying to find path for: [Object: nandwrite]
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m"))), sourceFile -> miscutils/nandwrite.c, generated -> false, objectFile -> nandwrite, listName -> lib)
2012-01-09 17:34:56,655 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m"))), sourceFile -> miscutils/nandwrite.c, generated -> false, objectFile -> nandwrite, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,655 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/nandwrite.c: (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m")))
2012-01-09 17:34:56,655 DEBUG PCDerivation$ Trying to find path for: [Object: setserial]
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m")), sourceFile -> miscutils/setserial.c, generated -> false, objectFile -> setserial, listName -> lib)
2012-01-09 17:34:56,655 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m")), sourceFile -> miscutils/setserial.c, generated -> false, objectFile -> setserial, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,655 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/setserial.c: ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m"))
2012-01-09 17:34:56,655 DEBUG PCDerivation$ Trying to find path for: [Object: ubi_tools]
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m"))), sourceFile -> miscutils/ubi_tools.c, generated -> false, objectFile -> ubi_tools, listName -> lib)
2012-01-09 17:34:56,655 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m"))), sourceFile -> miscutils/ubi_tools.c, generated -> false, objectFile -> ubi_tools, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,655 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ubi_tools.c: (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m")))
2012-01-09 17:34:56,655 DEBUG PCDerivation$ Trying to find path for: [Object: adjtimex]
2012-01-09 17:34:56,655 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m")), sourceFile -> miscutils/adjtimex.c, generated -> false, objectFile -> adjtimex, listName -> lib)
2012-01-09 17:34:56,656 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m")), sourceFile -> miscutils/adjtimex.c, generated -> false, objectFile -> adjtimex, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,656 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/adjtimex.c: ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m"))
2012-01-09 17:34:56,656 DEBUG PCDerivation$ Trying to find path for: [Object: bbconfig]
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m")), sourceFile -> miscutils/bbconfig.c, generated -> false, objectFile -> bbconfig, listName -> lib)
2012-01-09 17:34:56,656 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m")), sourceFile -> miscutils/bbconfig.c, generated -> false, objectFile -> bbconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,656 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/bbconfig.c: ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m"))
2012-01-09 17:34:56,656 DEBUG PCDerivation$ Trying to find path for: [Object: beep]
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m")), sourceFile -> miscutils/beep.c, generated -> false, objectFile -> beep, listName -> lib)
2012-01-09 17:34:56,656 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m")), sourceFile -> miscutils/beep.c, generated -> false, objectFile -> beep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,656 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/beep.c: ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m"))
2012-01-09 17:34:56,656 DEBUG PCDerivation$ Trying to find path for: [Object: chat]
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m")), sourceFile -> miscutils/chat.c, generated -> false, objectFile -> chat, listName -> lib)
2012-01-09 17:34:56,656 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m")), sourceFile -> miscutils/chat.c, generated -> false, objectFile -> chat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,656 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,656 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/chat.c: ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m"))
2012-01-09 17:34:56,656 DEBUG PCDerivation$ Trying to find path for: [Object: chrt]
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m")), sourceFile -> miscutils/chrt.c, generated -> false, objectFile -> chrt, listName -> lib)
2012-01-09 17:34:56,657 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m")), sourceFile -> miscutils/chrt.c, generated -> false, objectFile -> chrt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,657 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/chrt.c: ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m"))
2012-01-09 17:34:56,657 DEBUG PCDerivation$ Trying to find path for: [Object: crond]
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CROND == "y") || (CONFIG_CROND == "m")), sourceFile -> miscutils/crond.c, generated -> false, objectFile -> crond, listName -> lib)
2012-01-09 17:34:56,657 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CROND == "y") || (CONFIG_CROND == "m")), sourceFile -> miscutils/crond.c, generated -> false, objectFile -> crond, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,657 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/crond.c: ((CONFIG_CROND == "y") || (CONFIG_CROND == "m"))
2012-01-09 17:34:56,657 DEBUG PCDerivation$ Trying to find path for: [Object: crontab]
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")), sourceFile -> miscutils/crontab.c, generated -> false, objectFile -> crontab, listName -> lib)
2012-01-09 17:34:56,657 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")), sourceFile -> miscutils/crontab.c, generated -> false, objectFile -> crontab, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,657 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/crontab.c: ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))
2012-01-09 17:34:56,657 DEBUG PCDerivation$ Trying to find path for: [Object: dc]
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DC == "y") || (CONFIG_DC == "m")), sourceFile -> miscutils/dc.c, generated -> false, objectFile -> dc, listName -> lib)
2012-01-09 17:34:56,657 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DC == "y") || (CONFIG_DC == "m")), sourceFile -> miscutils/dc.c, generated -> false, objectFile -> dc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,657 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,657 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/dc.c: ((CONFIG_DC == "y") || (CONFIG_DC == "m"))
2012-01-09 17:34:56,658 DEBUG PCDerivation$ Trying to find path for: [Object: devfsd]
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m")), sourceFile -> miscutils/devfsd.c, generated -> false, objectFile -> devfsd, listName -> lib)
2012-01-09 17:34:56,658 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m")), sourceFile -> miscutils/devfsd.c, generated -> false, objectFile -> devfsd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,658 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/devfsd.c: ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))
2012-01-09 17:34:56,658 DEBUG PCDerivation$ Trying to find path for: [Object: devmem]
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m")), sourceFile -> miscutils/devmem.c, generated -> false, objectFile -> devmem, listName -> lib)
2012-01-09 17:34:56,658 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m")), sourceFile -> miscutils/devmem.c, generated -> false, objectFile -> devmem, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,658 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/devmem.c: ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m"))
2012-01-09 17:34:56,658 DEBUG PCDerivation$ Trying to find path for: [Object: eject]
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m")), sourceFile -> miscutils/eject.c, generated -> false, objectFile -> eject, listName -> lib)
2012-01-09 17:34:56,658 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m")), sourceFile -> miscutils/eject.c, generated -> false, objectFile -> eject, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,658 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/eject.c: ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m"))
2012-01-09 17:34:56,658 DEBUG PCDerivation$ Trying to find path for: [Object: fbsplash]
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m")), sourceFile -> miscutils/fbsplash.c, generated -> false, objectFile -> fbsplash, listName -> lib)
2012-01-09 17:34:56,658 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m")), sourceFile -> miscutils/fbsplash.c, generated -> false, objectFile -> fbsplash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,658 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,659 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/fbsplash.c: ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m"))
2012-01-09 17:34:56,659 DEBUG PCDerivation$ Trying to find path for: [Object: flashcp]
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m")), sourceFile -> miscutils/flashcp.c, generated -> false, objectFile -> flashcp, listName -> lib)
2012-01-09 17:34:56,659 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m")), sourceFile -> miscutils/flashcp.c, generated -> false, objectFile -> flashcp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,659 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flashcp.c: ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m"))
2012-01-09 17:34:56,659 DEBUG PCDerivation$ Trying to find path for: [Object: flash_eraseall]
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m")), sourceFile -> miscutils/flash_eraseall.c, generated -> false, objectFile -> flash_eraseall, listName -> lib)
2012-01-09 17:34:56,659 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m")), sourceFile -> miscutils/flash_eraseall.c, generated -> false, objectFile -> flash_eraseall, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,659 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flash_eraseall.c: ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m"))
2012-01-09 17:34:56,659 DEBUG PCDerivation$ Trying to find path for: [Object: flash_lock_unlock]
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m"))), sourceFile -> miscutils/flash_lock_unlock.c, generated -> false, objectFile -> flash_lock_unlock, listName -> lib)
2012-01-09 17:34:56,659 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m"))), sourceFile -> miscutils/flash_lock_unlock.c, generated -> false, objectFile -> flash_lock_unlock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,659 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flash_lock_unlock.c: (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m")))
2012-01-09 17:34:56,659 DEBUG PCDerivation$ Trying to find path for: [Object: ionice]
2012-01-09 17:34:56,659 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m")), sourceFile -> miscutils/ionice.c, generated -> false, objectFile -> ionice, listName -> lib)
2012-01-09 17:34:56,660 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m")), sourceFile -> miscutils/ionice.c, generated -> false, objectFile -> ionice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,660 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ionice.c: ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m"))
2012-01-09 17:34:56,660 DEBUG PCDerivation$ Trying to find path for: [Object: hdparm]
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m")), sourceFile -> miscutils/hdparm.c, generated -> false, objectFile -> hdparm, listName -> lib)
2012-01-09 17:34:56,660 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m")), sourceFile -> miscutils/hdparm.c, generated -> false, objectFile -> hdparm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,660 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/hdparm.c: ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m"))
2012-01-09 17:34:56,660 DEBUG PCDerivation$ Trying to find path for: [Object: inotifyd]
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m")), sourceFile -> miscutils/inotifyd.c, generated -> false, objectFile -> inotifyd, listName -> lib)
2012-01-09 17:34:56,660 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m")), sourceFile -> miscutils/inotifyd.c, generated -> false, objectFile -> inotifyd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,660 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/inotifyd.c: ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m"))
2012-01-09 17:34:56,660 DEBUG PCDerivation$ Trying to find path for: [Object: last]
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m")), sourceFile -> miscutils/last.c, generated -> false, objectFile -> last, listName -> lib)
2012-01-09 17:34:56,660 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m")), sourceFile -> miscutils/last.c, generated -> false, objectFile -> last, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,660 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,660 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/last.c: ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m"))
2012-01-09 17:34:56,660 DEBUG PCDerivation$ Trying to find path for: [Object: last_fancy]
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m")), sourceFile -> miscutils/last_fancy.c, generated -> false, objectFile -> last_fancy, listName -> lib)
2012-01-09 17:34:56,661 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m")), sourceFile -> miscutils/last_fancy.c, generated -> false, objectFile -> last_fancy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,661 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/last_fancy.c: ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m"))
2012-01-09 17:34:56,661 DEBUG PCDerivation$ Trying to find path for: [Object: less]
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LESS == "y") || (CONFIG_LESS == "m")), sourceFile -> miscutils/less.c, generated -> false, objectFile -> less, listName -> lib)
2012-01-09 17:34:56,661 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LESS == "y") || (CONFIG_LESS == "m")), sourceFile -> miscutils/less.c, generated -> false, objectFile -> less, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,661 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/less.c: ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))
2012-01-09 17:34:56,661 DEBUG PCDerivation$ Trying to find path for: [Object: makedevs]
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m")), sourceFile -> miscutils/makedevs.c, generated -> false, objectFile -> makedevs, listName -> lib)
2012-01-09 17:34:56,661 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m")), sourceFile -> miscutils/makedevs.c, generated -> false, objectFile -> makedevs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,661 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/makedevs.c: ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m"))
2012-01-09 17:34:56,661 DEBUG PCDerivation$ Trying to find path for: [Object: man]
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAN == "y") || (CONFIG_MAN == "m")), sourceFile -> miscutils/man.c, generated -> false, objectFile -> man, listName -> lib)
2012-01-09 17:34:56,661 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAN == "y") || (CONFIG_MAN == "m")), sourceFile -> miscutils/man.c, generated -> false, objectFile -> man, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,661 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,662 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/man.c: ((CONFIG_MAN == "y") || (CONFIG_MAN == "m"))
2012-01-09 17:34:56,662 DEBUG PCDerivation$ Trying to find path for: [Object: microcom]
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m")), sourceFile -> miscutils/microcom.c, generated -> false, objectFile -> microcom, listName -> lib)
2012-01-09 17:34:56,662 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m")), sourceFile -> miscutils/microcom.c, generated -> false, objectFile -> microcom, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,662 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/microcom.c: ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m"))
2012-01-09 17:34:56,662 DEBUG PCDerivation$ Trying to find path for: [Object: mountpoint]
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m")), sourceFile -> miscutils/mountpoint.c, generated -> false, objectFile -> mountpoint, listName -> lib)
2012-01-09 17:34:56,662 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m")), sourceFile -> miscutils/mountpoint.c, generated -> false, objectFile -> mountpoint, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,662 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/mountpoint.c: ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m"))
2012-01-09 17:34:56,662 DEBUG PCDerivation$ Trying to find path for: [Object: mt]
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MT == "y") || (CONFIG_MT == "m")), sourceFile -> miscutils/mt.c, generated -> false, objectFile -> mt, listName -> lib)
2012-01-09 17:34:56,662 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MT == "y") || (CONFIG_MT == "m")), sourceFile -> miscutils/mt.c, generated -> false, objectFile -> mt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,662 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/mt.c: ((CONFIG_MT == "y") || (CONFIG_MT == "m"))
2012-01-09 17:34:56,662 DEBUG PCDerivation$ Trying to find path for: [Object: raidautorun]
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m")), sourceFile -> miscutils/raidautorun.c, generated -> false, objectFile -> raidautorun, listName -> lib)
2012-01-09 17:34:56,662 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m")), sourceFile -> miscutils/raidautorun.c, generated -> false, objectFile -> raidautorun, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,662 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,663 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,663 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/raidautorun.c: ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m"))
2012-01-09 17:34:56,663 DEBUG PCDerivation$ Trying to find path for: [Object: readahead]
2012-01-09 17:34:56,663 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m")), sourceFile -> miscutils/readahead.c, generated -> false, objectFile -> readahead, listName -> lib)
2012-01-09 17:34:56,663 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m")), sourceFile -> miscutils/readahead.c, generated -> false, objectFile -> readahead, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,663 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,663 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,663 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/readahead.c: ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m"))
2012-01-09 17:34:56,663 DEBUG PCDerivation$ Trying to find path for: [Object: rfkill]
2012-01-09 17:34:56,663 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m")), sourceFile -> miscutils/rfkill.c, generated -> false, objectFile -> rfkill, listName -> lib)
2012-01-09 17:34:56,663 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m")), sourceFile -> miscutils/rfkill.c, generated -> false, objectFile -> rfkill, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,663 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,663 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,663 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/rfkill.c: ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m"))
2012-01-09 17:34:56,663 DEBUG PCDerivation$ Trying to find path for: [Object: runlevel]
2012-01-09 17:34:56,663 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m")), sourceFile -> miscutils/runlevel.c, generated -> false, objectFile -> runlevel, listName -> lib)
2012-01-09 17:34:56,673 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m")), sourceFile -> miscutils/runlevel.c, generated -> false, objectFile -> runlevel, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,673 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,673 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,673 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/runlevel.c: ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m"))
2012-01-09 17:34:56,673 DEBUG PCDerivation$ Trying to find path for: [Object: rx]
2012-01-09 17:34:56,673 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RX == "y") || (CONFIG_RX == "m")), sourceFile -> miscutils/rx.c, generated -> false, objectFile -> rx, listName -> lib)
2012-01-09 17:34:56,673 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RX == "y") || (CONFIG_RX == "m")), sourceFile -> miscutils/rx.c, generated -> false, objectFile -> rx, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,674 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/rx.c: ((CONFIG_RX == "y") || (CONFIG_RX == "m"))
2012-01-09 17:34:56,674 DEBUG PCDerivation$ Trying to find path for: [Object: setsid]
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m")), sourceFile -> miscutils/setsid.c, generated -> false, objectFile -> setsid, listName -> lib)
2012-01-09 17:34:56,674 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m")), sourceFile -> miscutils/setsid.c, generated -> false, objectFile -> setsid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,674 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/setsid.c: ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m"))
2012-01-09 17:34:56,674 DEBUG PCDerivation$ Trying to find path for: [Object: strings]
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m")), sourceFile -> miscutils/strings.c, generated -> false, objectFile -> strings, listName -> lib)
2012-01-09 17:34:56,674 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m")), sourceFile -> miscutils/strings.c, generated -> false, objectFile -> strings, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,674 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/strings.c: ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m"))
2012-01-09 17:34:56,674 DEBUG PCDerivation$ Trying to find path for: [Object: taskset]
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m")), sourceFile -> miscutils/taskset.c, generated -> false, objectFile -> taskset, listName -> lib)
2012-01-09 17:34:56,674 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m")), sourceFile -> miscutils/taskset.c, generated -> false, objectFile -> taskset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,674 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/taskset.c: ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m"))
2012-01-09 17:34:56,674 DEBUG PCDerivation$ Trying to find path for: [Object: time]
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIME == "y") || (CONFIG_TIME == "m")), sourceFile -> miscutils/time.c, generated -> false, objectFile -> time, listName -> lib)
2012-01-09 17:34:56,674 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIME == "y") || (CONFIG_TIME == "m")), sourceFile -> miscutils/time.c, generated -> false, objectFile -> time, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,674 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,675 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/time.c: ((CONFIG_TIME == "y") || (CONFIG_TIME == "m"))
2012-01-09 17:34:56,675 DEBUG PCDerivation$ Trying to find path for: [Object: timeout]
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m")), sourceFile -> miscutils/timeout.c, generated -> false, objectFile -> timeout, listName -> lib)
2012-01-09 17:34:56,675 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m")), sourceFile -> miscutils/timeout.c, generated -> false, objectFile -> timeout, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,675 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/timeout.c: ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m"))
2012-01-09 17:34:56,675 DEBUG PCDerivation$ Trying to find path for: [Object: ttysize]
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m")), sourceFile -> miscutils/ttysize.c, generated -> false, objectFile -> ttysize, listName -> lib)
2012-01-09 17:34:56,675 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m")), sourceFile -> miscutils/ttysize.c, generated -> false, objectFile -> ttysize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,675 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ttysize.c: ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m"))
2012-01-09 17:34:56,675 DEBUG PCDerivation$ Trying to find path for: [Object: volname]
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m")), sourceFile -> miscutils/volname.c, generated -> false, objectFile -> volname, listName -> lib)
2012-01-09 17:34:56,675 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m")), sourceFile -> miscutils/volname.c, generated -> false, objectFile -> volname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,675 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/volname.c: ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m"))
2012-01-09 17:34:56,675 DEBUG PCDerivation$ Trying to find path for: [Object: wall]
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WALL == "y") || (CONFIG_WALL == "m")), sourceFile -> miscutils/wall.c, generated -> false, objectFile -> wall, listName -> lib)
2012-01-09 17:34:56,675 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WALL == "y") || (CONFIG_WALL == "m")), sourceFile -> miscutils/wall.c, generated -> false, objectFile -> wall, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,675 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,676 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/wall.c: ((CONFIG_WALL == "y") || (CONFIG_WALL == "m"))
2012-01-09 17:34:56,676 DEBUG PCDerivation$ Trying to find path for: [Object: watchdog]
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m")), sourceFile -> miscutils/watchdog.c, generated -> false, objectFile -> watchdog, listName -> lib)
2012-01-09 17:34:56,676 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m")), sourceFile -> miscutils/watchdog.c, generated -> false, objectFile -> watchdog, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,676 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/watchdog.c: ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m"))
2012-01-09 17:34:56,676 DEBUG PCDerivation$ Trying to find path for: [Object: modinfo]
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")), sourceFile -> modutils/modinfo.c, generated -> false, objectFile -> modinfo, listName -> lib)
2012-01-09 17:34:56,676 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")), sourceFile -> modutils/modinfo.c, generated -> false, objectFile -> modinfo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,676 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,676 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modinfo.c: ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m"))
2012-01-09 17:34:56,676 DEBUG PCDerivation$ Trying to find path for: [Object: modutils]
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))), sourceFile -> modutils/modutils.c, generated -> false, objectFile -> modutils, listName -> lib)
2012-01-09 17:34:56,676 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))), sourceFile -> modutils/modutils.c, generated -> false, objectFile -> modutils, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,676 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modutils.c: (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")))
2012-01-09 17:34:56,676 DEBUG PCDerivation$ Trying to find path for: [Object: modprobe-small]
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m")), sourceFile -> modutils/modprobe-small.c, generated -> false, objectFile -> modprobe-small, listName -> lib)
2012-01-09 17:34:56,676 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m")), sourceFile -> modutils/modprobe-small.c, generated -> false, objectFile -> modprobe-small, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,676 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modprobe-small.c: ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m"))
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Trying to find path for: [Object: depmod]
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m")), sourceFile -> modutils/depmod.c, generated -> false, objectFile -> depmod, listName -> lib)
2012-01-09 17:34:56,677 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m")), sourceFile -> modutils/depmod.c, generated -> false, objectFile -> depmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Expression of path for object occurrence modutils/depmod.c: ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Trying to find path for: [Object: insmod]
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m")), sourceFile -> modutils/insmod.c, generated -> false, objectFile -> insmod, listName -> lib)
2012-01-09 17:34:56,677 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m")), sourceFile -> modutils/insmod.c, generated -> false, objectFile -> insmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Expression of path for object occurrence modutils/insmod.c: ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Trying to find path for: [Object: lsmod]
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m")), sourceFile -> modutils/lsmod.c, generated -> false, objectFile -> lsmod, listName -> lib)
2012-01-09 17:34:56,677 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m")), sourceFile -> modutils/lsmod.c, generated -> false, objectFile -> lsmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Expression of path for object occurrence modutils/lsmod.c: ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Trying to find path for: [Object: modprobe]
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m")), sourceFile -> modutils/modprobe.c, generated -> false, objectFile -> modprobe, listName -> lib)
2012-01-09 17:34:56,677 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m")), sourceFile -> modutils/modprobe.c, generated -> false, objectFile -> modprobe, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modprobe.c: ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))
2012-01-09 17:34:56,677 DEBUG PCDerivation$ Trying to find path for: [Object: rmmod]
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")), sourceFile -> modutils/rmmod.c, generated -> false, objectFile -> rmmod, listName -> lib)
2012-01-09 17:34:56,677 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")), sourceFile -> modutils/rmmod.c, generated -> false, objectFile -> rmmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,677 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Expression of path for object occurrence modutils/rmmod.c: ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Trying to find path for: [Object: modutils-24]
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m")), sourceFile -> modutils/modutils-24.c, generated -> false, objectFile -> modutils-24, listName -> lib)
2012-01-09 17:34:56,678 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m")), sourceFile -> modutils/modutils-24.c, generated -> false, objectFile -> modutils-24, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modutils-24.c: ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m"))
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Trying to find path for: [Object: nbd-client]
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m")), sourceFile -> networking/nbd-client.c, generated -> false, objectFile -> nbd-client, listName -> lib)
2012-01-09 17:34:56,678 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m")), sourceFile -> networking/nbd-client.c, generated -> false, objectFile -> nbd-client, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,678 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Expression of path for object occurrence networking/nbd-client.c: ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m"))
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Trying to find path for: [Object: ping]
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m"))), sourceFile -> networking/ping.c, generated -> false, objectFile -> ping, listName -> lib)
2012-01-09 17:34:56,678 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m"))), sourceFile -> networking/ping.c, generated -> false, objectFile -> ping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Expression of path for object occurrence networking/ping.c: (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m")))
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Trying to find path for: [Object: whois]
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m")), sourceFile -> networking/whois.c, generated -> false, objectFile -> whois, listName -> lib)
2012-01-09 17:34:56,678 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m")), sourceFile -> networking/whois.c, generated -> false, objectFile -> whois, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Expression of path for object occurrence networking/whois.c: ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m"))
2012-01-09 17:34:56,678 DEBUG PCDerivation$ Trying to find path for: [Object: arp]
2012-01-09 17:34:56,678 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARP == "y") || (CONFIG_ARP == "m")), sourceFile -> networking/arp.c, generated -> false, objectFile -> arp, listName -> lib)
2012-01-09 17:34:56,679 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARP == "y") || (CONFIG_ARP == "m")), sourceFile -> networking/arp.c, generated -> false, objectFile -> arp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Expression of path for object occurrence networking/arp.c: ((CONFIG_ARP == "y") || (CONFIG_ARP == "m"))
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Trying to find path for: [Object: interface]
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))), sourceFile -> networking/interface.c, generated -> false, objectFile -> interface, listName -> lib)
2012-01-09 17:34:56,679 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))), sourceFile -> networking/interface.c, generated -> false, objectFile -> interface, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Expression of path for object occurrence networking/interface.c: ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")))
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Trying to find path for: [Object: arping]
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m")), sourceFile -> networking/arping.c, generated -> false, objectFile -> arping, listName -> lib)
2012-01-09 17:34:56,679 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m")), sourceFile -> networking/arping.c, generated -> false, objectFile -> arping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Expression of path for object occurrence networking/arping.c: ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m"))
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Trying to find path for: [Object: brctl]
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m")), sourceFile -> networking/brctl.c, generated -> false, objectFile -> brctl, listName -> lib)
2012-01-09 17:34:56,679 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m")), sourceFile -> networking/brctl.c, generated -> false, objectFile -> brctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Expression of path for object occurrence networking/brctl.c: ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m"))
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Trying to find path for: [Object: dnsd]
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m")), sourceFile -> networking/dnsd.c, generated -> false, objectFile -> dnsd, listName -> lib)
2012-01-09 17:34:56,679 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m")), sourceFile -> networking/dnsd.c, generated -> false, objectFile -> dnsd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,679 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Expression of path for object occurrence networking/dnsd.c: ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))
2012-01-09 17:34:56,679 DEBUG PCDerivation$ Trying to find path for: [Object: ether-wake]
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m")), sourceFile -> networking/ether-wake.c, generated -> false, objectFile -> ether-wake, listName -> lib)
2012-01-09 17:34:56,680 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m")), sourceFile -> networking/ether-wake.c, generated -> false, objectFile -> ether-wake, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Expression of path for object occurrence networking/ether-wake.c: ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m"))
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Trying to find path for: [Object: isrv_identd]
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv_identd.c, generated -> false, objectFile -> isrv_identd, listName -> lib)
2012-01-09 17:34:56,680 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv_identd.c, generated -> false, objectFile -> isrv_identd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Expression of path for object occurrence networking/isrv_identd.c: ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m"))
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Trying to find path for: [Object: isrv]
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv.c, generated -> false, objectFile -> isrv, listName -> lib)
2012-01-09 17:34:56,680 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv.c, generated -> false, objectFile -> isrv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Expression of path for object occurrence networking/isrv.c: ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m"))
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Trying to find path for: [Object: ftpd]
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")), sourceFile -> networking/ftpd.c, generated -> false, objectFile -> ftpd, listName -> lib)
2012-01-09 17:34:56,680 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")), sourceFile -> networking/ftpd.c, generated -> false, objectFile -> ftpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Expression of path for object occurrence networking/ftpd.c: ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Trying to find path for: [Object: ftpgetput]
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m"))), sourceFile -> networking/ftpgetput.c, generated -> false, objectFile -> ftpgetput, listName -> lib)
2012-01-09 17:34:56,680 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m"))), sourceFile -> networking/ftpgetput.c, generated -> false, objectFile -> ftpgetput, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,680 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Expression of path for object occurrence networking/ftpgetput.c: (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m")))
2012-01-09 17:34:56,680 DEBUG PCDerivation$ Trying to find path for: [Object: hostname]
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m")), sourceFile -> networking/hostname.c, generated -> false, objectFile -> hostname, listName -> lib)
2012-01-09 17:34:56,681 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m")), sourceFile -> networking/hostname.c, generated -> false, objectFile -> hostname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Expression of path for object occurrence networking/hostname.c: ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m"))
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Trying to find path for: [Object: httpd]
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m")), sourceFile -> networking/httpd.c, generated -> false, objectFile -> httpd, listName -> lib)
2012-01-09 17:34:56,681 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m")), sourceFile -> networking/httpd.c, generated -> false, objectFile -> httpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Expression of path for object occurrence networking/httpd.c: ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m"))
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Trying to find path for: [Object: ifconfig]
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m")), sourceFile -> networking/ifconfig.c, generated -> false, objectFile -> ifconfig, listName -> lib)
2012-01-09 17:34:56,681 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m")), sourceFile -> networking/ifconfig.c, generated -> false, objectFile -> ifconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifconfig.c: ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Trying to find path for: [Object: ifenslave]
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")), sourceFile -> networking/ifenslave.c, generated -> false, objectFile -> ifenslave, listName -> lib)
2012-01-09 17:34:56,681 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")), sourceFile -> networking/ifenslave.c, generated -> false, objectFile -> ifenslave, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifenslave.c: ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Trying to find path for: [Object: ifplugd]
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m")), sourceFile -> networking/ifplugd.c, generated -> false, objectFile -> ifplugd, listName -> lib)
2012-01-09 17:34:56,681 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m")), sourceFile -> networking/ifplugd.c, generated -> false, objectFile -> ifplugd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,681 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifplugd.c: ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m"))
2012-01-09 17:34:56,681 DEBUG PCDerivation$ Trying to find path for: [Object: ifupdown]
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m")), sourceFile -> networking/ifupdown.c, generated -> false, objectFile -> ifupdown, listName -> lib)
2012-01-09 17:34:56,682 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m")), sourceFile -> networking/ifupdown.c, generated -> false, objectFile -> ifupdown, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifupdown.c: ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m"))
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Trying to find path for: [Object: inetd]
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INETD == "y") || (CONFIG_INETD == "m")), sourceFile -> networking/inetd.c, generated -> false, objectFile -> inetd, listName -> lib)
2012-01-09 17:34:56,682 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INETD == "y") || (CONFIG_INETD == "m")), sourceFile -> networking/inetd.c, generated -> false, objectFile -> inetd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Expression of path for object occurrence networking/inetd.c: ((CONFIG_INETD == "y") || (CONFIG_INETD == "m"))
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Trying to find path for: [Object: ip]
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/ip.c, generated -> false, objectFile -> ip, listName -> lib)
2012-01-09 17:34:56,682 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/ip.c, generated -> false, objectFile -> ip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Expression of path for object occurrence networking/ip.c: ((CONFIG_IP == "y") || (CONFIG_IP == "m"))
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Trying to find path for: [Object: ipcalc]
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m")), sourceFile -> networking/ipcalc.c, generated -> false, objectFile -> ipcalc, listName -> lib)
2012-01-09 17:34:56,682 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m")), sourceFile -> networking/ipcalc.c, generated -> false, objectFile -> ipcalc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Expression of path for object occurrence networking/ipcalc.c: ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m"))
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Trying to find path for: [Object: nameif]
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m")), sourceFile -> networking/nameif.c, generated -> false, objectFile -> nameif, listName -> lib)
2012-01-09 17:34:56,682 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m")), sourceFile -> networking/nameif.c, generated -> false, objectFile -> nameif, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,682 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Expression of path for object occurrence networking/nameif.c: ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m"))
2012-01-09 17:34:56,682 DEBUG PCDerivation$ Trying to find path for: [Object: nc]
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NC == "y") || (CONFIG_NC == "m")), sourceFile -> networking/nc.c, generated -> false, objectFile -> nc, listName -> lib)
2012-01-09 17:34:56,683 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NC == "y") || (CONFIG_NC == "m")), sourceFile -> networking/nc.c, generated -> false, objectFile -> nc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,683 DEBUG PCDerivation$ Expression of path for object occurrence networking/nc.c: ((CONFIG_NC == "y") || (CONFIG_NC == "m"))
2012-01-09 17:34:56,683 DEBUG PCDerivation$ Trying to find path for: [Object: netstat]
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m")), sourceFile -> networking/netstat.c, generated -> false, objectFile -> netstat, listName -> lib)
2012-01-09 17:34:56,683 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m")), sourceFile -> networking/netstat.c, generated -> false, objectFile -> netstat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,683 DEBUG PCDerivation$ Expression of path for object occurrence networking/netstat.c: ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m"))
2012-01-09 17:34:56,683 DEBUG PCDerivation$ Trying to find path for: [Object: nslookup]
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m")), sourceFile -> networking/nslookup.c, generated -> false, objectFile -> nslookup, listName -> lib)
2012-01-09 17:34:56,683 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m")), sourceFile -> networking/nslookup.c, generated -> false, objectFile -> nslookup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,683 DEBUG PCDerivation$ Expression of path for object occurrence networking/nslookup.c: ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m"))
2012-01-09 17:34:56,683 DEBUG PCDerivation$ Trying to find path for: [Object: ntpd]
2012-01-09 17:34:56,683 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m")), sourceFile -> networking/ntpd.c, generated -> false, objectFile -> ntpd, listName -> lib)
2012-01-09 17:34:56,693 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m")), sourceFile -> networking/ntpd.c, generated -> false, objectFile -> ntpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,693 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,693 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,694 DEBUG PCDerivation$ Expression of path for object occurrence networking/ntpd.c: ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))
2012-01-09 17:34:56,694 DEBUG PCDerivation$ Trying to find path for: [Object: pscan]
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m")), sourceFile -> networking/pscan.c, generated -> false, objectFile -> pscan, listName -> lib)
2012-01-09 17:34:56,694 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m")), sourceFile -> networking/pscan.c, generated -> false, objectFile -> pscan, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,694 DEBUG PCDerivation$ Expression of path for object occurrence networking/pscan.c: ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m"))
2012-01-09 17:34:56,694 DEBUG PCDerivation$ Trying to find path for: [Object: route]
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m")), sourceFile -> networking/route.c, generated -> false, objectFile -> route, listName -> lib)
2012-01-09 17:34:56,694 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m")), sourceFile -> networking/route.c, generated -> false, objectFile -> route, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,694 DEBUG PCDerivation$ Expression of path for object occurrence networking/route.c: ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m"))
2012-01-09 17:34:56,694 DEBUG PCDerivation$ Trying to find path for: [Object: slattach]
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")), sourceFile -> networking/slattach.c, generated -> false, objectFile -> slattach, listName -> lib)
2012-01-09 17:34:56,694 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")), sourceFile -> networking/slattach.c, generated -> false, objectFile -> slattach, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,694 DEBUG PCDerivation$ Expression of path for object occurrence networking/slattach.c: ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m"))
2012-01-09 17:34:56,694 DEBUG PCDerivation$ Trying to find path for: [Object: tc]
2012-01-09 17:34:56,694 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TC == "y") || (CONFIG_TC == "m")), sourceFile -> networking/tc.c, generated -> false, objectFile -> tc, listName -> lib)
2012-01-09 17:34:56,694 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TC == "y") || (CONFIG_TC == "m")), sourceFile -> networking/tc.c, generated -> false, objectFile -> tc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Expression of path for object occurrence networking/tc.c: ((CONFIG_TC == "y") || (CONFIG_TC == "m"))
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Trying to find path for: [Object: telnet]
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m")), sourceFile -> networking/telnet.c, generated -> false, objectFile -> telnet, listName -> lib)
2012-01-09 17:34:56,695 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m")), sourceFile -> networking/telnet.c, generated -> false, objectFile -> telnet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Expression of path for object occurrence networking/telnet.c: ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m"))
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Trying to find path for: [Object: telnetd]
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m")), sourceFile -> networking/telnetd.c, generated -> false, objectFile -> telnetd, listName -> lib)
2012-01-09 17:34:56,695 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m")), sourceFile -> networking/telnetd.c, generated -> false, objectFile -> telnetd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Expression of path for object occurrence networking/telnetd.c: ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m"))
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Trying to find path for: [Object: tftp]
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))), sourceFile -> networking/tftp.c, generated -> false, objectFile -> tftp, listName -> lib)
2012-01-09 17:34:56,695 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))), sourceFile -> networking/tftp.c, generated -> false, objectFile -> tftp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Expression of path for object occurrence networking/tftp.c: (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m")))
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Trying to find path for: [Object: traceroute]
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")), sourceFile -> networking/traceroute.c, generated -> false, objectFile -> traceroute, listName -> lib)
2012-01-09 17:34:56,695 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")), sourceFile -> networking/traceroute.c, generated -> false, objectFile -> traceroute, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Expression of path for object occurrence networking/traceroute.c: ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))
2012-01-09 17:34:56,695 DEBUG PCDerivation$ Trying to find path for: [Object: tunctl]
2012-01-09 17:34:56,695 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m")), sourceFile -> networking/tunctl.c, generated -> false, objectFile -> tunctl, listName -> lib)
2012-01-09 17:34:56,696 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m")), sourceFile -> networking/tunctl.c, generated -> false, objectFile -> tunctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Expression of path for object occurrence networking/tunctl.c: ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m"))
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Trying to find path for: [Object: vconfig]
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m")), sourceFile -> networking/vconfig.c, generated -> false, objectFile -> vconfig, listName -> lib)
2012-01-09 17:34:56,696 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m")), sourceFile -> networking/vconfig.c, generated -> false, objectFile -> vconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Expression of path for object occurrence networking/vconfig.c: ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m"))
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Trying to find path for: [Object: wget]
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WGET == "y") || (CONFIG_WGET == "m")), sourceFile -> networking/wget.c, generated -> false, objectFile -> wget, listName -> lib)
2012-01-09 17:34:56,696 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WGET == "y") || (CONFIG_WGET == "m")), sourceFile -> networking/wget.c, generated -> false, objectFile -> wget, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Expression of path for object occurrence networking/wget.c: ((CONFIG_WGET == "y") || (CONFIG_WGET == "m"))
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Trying to find path for: [Object: zcip]
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m")), sourceFile -> networking/zcip.c, generated -> false, objectFile -> zcip, listName -> lib)
2012-01-09 17:34:56,696 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m")), sourceFile -> networking/zcip.c, generated -> false, objectFile -> zcip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Expression of path for object occurrence networking/zcip.c: ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m"))
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Trying to find path for: [Object: tcpudp]
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp.c, generated -> false, objectFile -> tcpudp, listName -> lib)
2012-01-09 17:34:56,696 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp.c, generated -> false, objectFile -> tcpudp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,696 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Expression of path for object occurrence networking/tcpudp.c: (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m")))
2012-01-09 17:34:56,696 DEBUG PCDerivation$ Trying to find path for: [Object: tcpudp_perhost]
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp_perhost.c, generated -> false, objectFile -> tcpudp_perhost, listName -> lib)
2012-01-09 17:34:56,697 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp_perhost.c, generated -> false, objectFile -> tcpudp_perhost, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,697 DEBUG PCDerivation$ Expression of path for object occurrence networking/tcpudp_perhost.c: (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m")))
2012-01-09 17:34:56,697 DEBUG PCDerivation$ Trying to find path for: [Object: utils]
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/utils.c, generated -> false, objectFile -> utils, listName -> lib)
2012-01-09 17:34:56,697 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/utils.c, generated -> false, objectFile -> utils, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,697 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,697 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/utils.c: ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-09 17:34:56,697 DEBUG PCDerivation$ Trying to find path for: [Object: ip_parse_common_args]
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/ip_parse_common_args.c, generated -> false, objectFile -> ip_parse_common_args, listName -> lib)
2012-01-09 17:34:56,697 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/ip_parse_common_args.c, generated -> false, objectFile -> ip_parse_common_args, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,697 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ip_parse_common_args.c: (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-09 17:34:56,697 DEBUG PCDerivation$ Trying to find path for: [Object: libnetlink]
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/libnetlink.c, generated -> false, objectFile -> libnetlink, listName -> lib)
2012-01-09 17:34:56,697 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/libnetlink.c, generated -> false, objectFile -> libnetlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,697 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/libnetlink.c: (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-09 17:34:56,697 DEBUG PCDerivation$ Trying to find path for: [Object: ll_addr]
2012-01-09 17:34:56,697 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_addr.c, generated -> false, objectFile -> ll_addr, listName -> lib)
2012-01-09 17:34:56,698 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_addr.c, generated -> false, objectFile -> ll_addr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,698 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_addr.c: ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-09 17:34:56,698 DEBUG PCDerivation$ Trying to find path for: [Object: ll_map]
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/ll_map.c, generated -> false, objectFile -> ll_map, listName -> lib)
2012-01-09 17:34:56,698 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/ll_map.c, generated -> false, objectFile -> ll_map, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,698 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_map.c: (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-09 17:34:56,698 DEBUG PCDerivation$ Trying to find path for: [Object: ll_proto]
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/libiproute/ll_proto.c, generated -> false, objectFile -> ll_proto, listName -> lib)
2012-01-09 17:34:56,698 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/libiproute/ll_proto.c, generated -> false, objectFile -> ll_proto, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,698 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_proto.c: ((CONFIG_IP == "y") || (CONFIG_IP == "m"))
2012-01-09 17:34:56,698 DEBUG PCDerivation$ Trying to find path for: [Object: ll_types]
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_types.c, generated -> false, objectFile -> ll_types, listName -> lib)
2012-01-09 17:34:56,698 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_types.c, generated -> false, objectFile -> ll_types, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,698 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_types.c: ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-09 17:34:56,698 DEBUG PCDerivation$ Trying to find path for: [Object: rt_names]
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/rt_names.c, generated -> false, objectFile -> rt_names, listName -> lib)
2012-01-09 17:34:56,698 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/rt_names.c, generated -> false, objectFile -> rt_names, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,698 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/rt_names.c: (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Trying to find path for: [Object: rtm_map]
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/rtm_map.c, generated -> false, objectFile -> rtm_map, listName -> lib)
2012-01-09 17:34:56,699 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/rtm_map.c, generated -> false, objectFile -> rtm_map, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/rtm_map.c: (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Trying to find path for: [Object: ipaddress]
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ipaddress.c, generated -> false, objectFile -> ipaddress, listName -> lib)
2012-01-09 17:34:56,699 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ipaddress.c, generated -> false, objectFile -> ipaddress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ipaddress.c: (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Trying to find path for: [Object: iplink]
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")), sourceFile -> networking/libiproute/iplink.c, generated -> false, objectFile -> iplink, listName -> lib)
2012-01-09 17:34:56,699 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")), sourceFile -> networking/libiproute/iplink.c, generated -> false, objectFile -> iplink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iplink.c: ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Trying to find path for: [Object: iproute]
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")), sourceFile -> networking/libiproute/iproute.c, generated -> false, objectFile -> iproute, listName -> lib)
2012-01-09 17:34:56,699 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")), sourceFile -> networking/libiproute/iproute.c, generated -> false, objectFile -> iproute, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iproute.c: ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))
2012-01-09 17:34:56,699 DEBUG PCDerivation$ Trying to find path for: [Object: iptunnel]
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m")), sourceFile -> networking/libiproute/iptunnel.c, generated -> false, objectFile -> iptunnel, listName -> lib)
2012-01-09 17:34:56,699 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m")), sourceFile -> networking/libiproute/iptunnel.c, generated -> false, objectFile -> iptunnel, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,699 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iptunnel.c: ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Trying to find path for: [Object: iprule]
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")), sourceFile -> networking/libiproute/iprule.c, generated -> false, objectFile -> iprule, listName -> lib)
2012-01-09 17:34:56,700 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")), sourceFile -> networking/libiproute/iprule.c, generated -> false, objectFile -> iprule, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iprule.c: ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Trying to find path for: [Object: d6_dhcpc]
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_dhcpc.c, generated -> false, objectFile -> d6_dhcpc, listName -> lib)
2012-01-09 17:34:56,700 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_dhcpc.c, generated -> false, objectFile -> d6_dhcpc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,700 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_dhcpc.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Trying to find path for: [Object: d6_packet]
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_packet.c, generated -> false, objectFile -> d6_packet, listName -> lib)
2012-01-09 17:34:56,700 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_packet.c, generated -> false, objectFile -> d6_packet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_packet.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Trying to find path for: [Object: d6_socket]
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_socket.c, generated -> false, objectFile -> d6_socket, listName -> lib)
2012-01-09 17:34:56,700 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_socket.c, generated -> false, objectFile -> d6_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_socket.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-09 17:34:56,700 DEBUG PCDerivation$ Trying to find path for: [Object: common]
2012-01-09 17:34:56,700 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/common.c, generated -> false, objectFile -> common, listName -> lib)
2012-01-09 17:34:56,701 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/common.c, generated -> false, objectFile -> common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/common.c: ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Trying to find path for: [Object: packet]
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/packet.c, generated -> false, objectFile -> packet, listName -> lib)
2012-01-09 17:34:56,701 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/packet.c, generated -> false, objectFile -> packet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/packet.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Trying to find path for: [Object: signalpipe]
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/signalpipe.c, generated -> false, objectFile -> signalpipe, listName -> lib)
2012-01-09 17:34:56,701 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/signalpipe.c, generated -> false, objectFile -> signalpipe, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/signalpipe.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Trying to find path for: [Object: socket]
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/socket.c, generated -> false, objectFile -> socket, listName -> lib)
2012-01-09 17:34:56,701 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/socket.c, generated -> false, objectFile -> socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/socket.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Trying to find path for: [Object: dhcpc]
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")), sourceFile -> networking/udhcp/dhcpc.c, generated -> false, objectFile -> dhcpc, listName -> lib)
2012-01-09 17:34:56,701 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")), sourceFile -> networking/udhcp/dhcpc.c, generated -> false, objectFile -> dhcpc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcpc.c: ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))
2012-01-09 17:34:56,701 DEBUG PCDerivation$ Trying to find path for: [Object: dhcpd]
2012-01-09 17:34:56,701 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/dhcpd.c, generated -> false, objectFile -> dhcpd, listName -> lib)
2012-01-09 17:34:56,702 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/dhcpd.c, generated -> false, objectFile -> dhcpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,702 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,702 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,702 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcpd.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-09 17:34:56,702 DEBUG PCDerivation$ Trying to find path for: [Object: arpping]
2012-01-09 17:34:56,702 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m"))), sourceFile -> networking/udhcp/arpping.c, generated -> false, objectFile -> arpping, listName -> lib)
2012-01-09 17:34:56,702 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m"))), sourceFile -> networking/udhcp/arpping.c, generated -> false, objectFile -> arpping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,702 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,702 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,714 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/arpping.c: (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m")))
2012-01-09 17:34:56,714 DEBUG PCDerivation$ Trying to find path for: [Object: files]
2012-01-09 17:34:56,715 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/files.c, generated -> false, objectFile -> files, listName -> lib)
2012-01-09 17:34:56,715 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/files.c, generated -> false, objectFile -> files, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,715 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,715 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,715 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/files.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-09 17:34:56,715 DEBUG PCDerivation$ Trying to find path for: [Object: leases]
2012-01-09 17:34:56,715 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/leases.c, generated -> false, objectFile -> leases, listName -> lib)
2012-01-09 17:34:56,715 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/leases.c, generated -> false, objectFile -> leases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,715 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,715 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,715 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/leases.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-09 17:34:56,715 DEBUG PCDerivation$ Trying to find path for: [Object: static_leases]
2012-01-09 17:34:56,715 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/static_leases.c, generated -> false, objectFile -> static_leases, listName -> lib)
2012-01-09 17:34:56,715 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/static_leases.c, generated -> false, objectFile -> static_leases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,715 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,715 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/static_leases.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Trying to find path for: [Object: dumpleases]
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m")), sourceFile -> networking/udhcp/dumpleases.c, generated -> false, objectFile -> dumpleases, listName -> lib)
2012-01-09 17:34:56,716 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m")), sourceFile -> networking/udhcp/dumpleases.c, generated -> false, objectFile -> dumpleases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dumpleases.c: ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m"))
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Trying to find path for: [Object: dhcprelay]
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m")), sourceFile -> networking/udhcp/dhcprelay.c, generated -> false, objectFile -> dhcprelay, listName -> lib)
2012-01-09 17:34:56,716 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m")), sourceFile -> networking/udhcp/dhcprelay.c, generated -> false, objectFile -> dhcprelay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcprelay.c: ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m"))
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Trying to find path for: [Object: domain_codec]
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m")), sourceFile -> networking/udhcp/domain_codec.c, generated -> false, objectFile -> domain_codec, listName -> lib)
2012-01-09 17:34:56,716 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m")), sourceFile -> networking/udhcp/domain_codec.c, generated -> false, objectFile -> domain_codec, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/domain_codec.c: ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m"))
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Trying to find path for: [Object: lpd]
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LPD == "y") || (CONFIG_LPD == "m")), sourceFile -> printutils/lpd.c, generated -> false, objectFile -> lpd, listName -> lib)
2012-01-09 17:34:56,716 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LPD == "y") || (CONFIG_LPD == "m")), sourceFile -> printutils/lpd.c, generated -> false, objectFile -> lpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-09 17:34:56,716 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Expression of path for object occurrence printutils/lpd.c: ((CONFIG_LPD == "y") || (CONFIG_LPD == "m"))
2012-01-09 17:34:56,716 DEBUG PCDerivation$ Trying to find path for: [Object: lpr]
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m"))), sourceFile -> printutils/lpr.c, generated -> false, objectFile -> lpr, listName -> lib)
2012-01-09 17:34:56,716 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m"))), sourceFile -> printutils/lpr.c, generated -> false, objectFile -> lpr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-09 17:34:56,716 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Expression of path for object occurrence printutils/lpr.c: (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m")))
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Trying to find path for: [Object: iostat]
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")), sourceFile -> procps/iostat.c, generated -> false, objectFile -> iostat, listName -> lib)
2012-01-09 17:34:56,717 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")), sourceFile -> procps/iostat.c, generated -> false, objectFile -> iostat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Expression of path for object occurrence procps/iostat.c: ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m"))
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Trying to find path for: [Object: mpstat]
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m")), sourceFile -> procps/mpstat.c, generated -> false, objectFile -> mpstat, listName -> lib)
2012-01-09 17:34:56,717 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m")), sourceFile -> procps/mpstat.c, generated -> false, objectFile -> mpstat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Expression of path for object occurrence procps/mpstat.c: ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Trying to find path for: [Object: nmeter]
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m")), sourceFile -> procps/nmeter.c, generated -> false, objectFile -> nmeter, listName -> lib)
2012-01-09 17:34:56,717 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m")), sourceFile -> procps/nmeter.c, generated -> false, objectFile -> nmeter, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Expression of path for object occurrence procps/nmeter.c: ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m"))
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Trying to find path for: [Object: pmap]
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m")), sourceFile -> procps/pmap.c, generated -> false, objectFile -> pmap, listName -> lib)
2012-01-09 17:34:56,717 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m")), sourceFile -> procps/pmap.c, generated -> false, objectFile -> pmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Expression of path for object occurrence procps/pmap.c: ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m"))
2012-01-09 17:34:56,717 DEBUG PCDerivation$ Trying to find path for: [Object: powertop]
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")), sourceFile -> procps/powertop.c, generated -> false, objectFile -> powertop, listName -> lib)
2012-01-09 17:34:56,717 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")), sourceFile -> procps/powertop.c, generated -> false, objectFile -> powertop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,717 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Expression of path for object occurrence procps/powertop.c: ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Trying to find path for: [Object: pstree]
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m")), sourceFile -> procps/pstree.c, generated -> false, objectFile -> pstree, listName -> lib)
2012-01-09 17:34:56,718 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m")), sourceFile -> procps/pstree.c, generated -> false, objectFile -> pstree, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Expression of path for object occurrence procps/pstree.c: ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m"))
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Trying to find path for: [Object: pwdx]
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m")), sourceFile -> procps/pwdx.c, generated -> false, objectFile -> pwdx, listName -> lib)
2012-01-09 17:34:56,718 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m")), sourceFile -> procps/pwdx.c, generated -> false, objectFile -> pwdx, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Expression of path for object occurrence procps/pwdx.c: ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m"))
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Trying to find path for: [Object: smemcap]
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m")), sourceFile -> procps/smemcap.c, generated -> false, objectFile -> smemcap, listName -> lib)
2012-01-09 17:34:56,718 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m")), sourceFile -> procps/smemcap.c, generated -> false, objectFile -> smemcap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Expression of path for object occurrence procps/smemcap.c: ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m"))
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Trying to find path for: [Object: free]
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FREE == "y") || (CONFIG_FREE == "m")), sourceFile -> procps/free.c, generated -> false, objectFile -> free, listName -> lib)
2012-01-09 17:34:56,718 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FREE == "y") || (CONFIG_FREE == "m")), sourceFile -> procps/free.c, generated -> false, objectFile -> free, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Expression of path for object occurrence procps/free.c: ((CONFIG_FREE == "y") || (CONFIG_FREE == "m"))
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Trying to find path for: [Object: fuser]
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m")), sourceFile -> procps/fuser.c, generated -> false, objectFile -> fuser, listName -> lib)
2012-01-09 17:34:56,718 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m")), sourceFile -> procps/fuser.c, generated -> false, objectFile -> fuser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Expression of path for object occurrence procps/fuser.c: ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m"))
2012-01-09 17:34:56,718 DEBUG PCDerivation$ Trying to find path for: [Object: kill]
2012-01-09 17:34:56,718 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))), sourceFile -> procps/kill.c, generated -> false, objectFile -> kill, listName -> lib)
2012-01-09 17:34:56,719 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))), sourceFile -> procps/kill.c, generated -> false, objectFile -> kill, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Expression of path for object occurrence procps/kill.c: (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")))
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Trying to find path for: [Object: pgrep]
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))), sourceFile -> procps/pgrep.c, generated -> false, objectFile -> pgrep, listName -> lib)
2012-01-09 17:34:56,719 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))), sourceFile -> procps/pgrep.c, generated -> false, objectFile -> pgrep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Expression of path for object occurrence procps/pgrep.c: (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m")))
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Trying to find path for: [Object: pidof]
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m")), sourceFile -> procps/pidof.c, generated -> false, objectFile -> pidof, listName -> lib)
2012-01-09 17:34:56,719 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m")), sourceFile -> procps/pidof.c, generated -> false, objectFile -> pidof, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Expression of path for object occurrence procps/pidof.c: ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m"))
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Trying to find path for: [Object: ps]
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PS == "y") || (CONFIG_PS == "m")), sourceFile -> procps/ps.c, generated -> false, objectFile -> ps, listName -> lib)
2012-01-09 17:34:56,719 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PS == "y") || (CONFIG_PS == "m")), sourceFile -> procps/ps.c, generated -> false, objectFile -> ps, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Expression of path for object occurrence procps/ps.c: ((CONFIG_PS == "y") || (CONFIG_PS == "m"))
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Trying to find path for: [Object: renice]
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m")), sourceFile -> procps/renice.c, generated -> false, objectFile -> renice, listName -> lib)
2012-01-09 17:34:56,719 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m")), sourceFile -> procps/renice.c, generated -> false, objectFile -> renice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Expression of path for object occurrence procps/renice.c: ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m"))
2012-01-09 17:34:56,719 DEBUG PCDerivation$ Trying to find path for: [Object: sysctl]
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m")), sourceFile -> procps/sysctl.c, generated -> false, objectFile -> sysctl, listName -> lib)
2012-01-09 17:34:56,719 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m")), sourceFile -> procps/sysctl.c, generated -> false, objectFile -> sysctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,719 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Expression of path for object occurrence procps/sysctl.c: ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m"))
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Trying to find path for: [Object: top]
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOP == "y") || (CONFIG_TOP == "m")), sourceFile -> procps/top.c, generated -> false, objectFile -> top, listName -> lib)
2012-01-09 17:34:56,720 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOP == "y") || (CONFIG_TOP == "m")), sourceFile -> procps/top.c, generated -> false, objectFile -> top, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Expression of path for object occurrence procps/top.c: ((CONFIG_TOP == "y") || (CONFIG_TOP == "m"))
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Trying to find path for: [Object: uptime]
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m")), sourceFile -> procps/uptime.c, generated -> false, objectFile -> uptime, listName -> lib)
2012-01-09 17:34:56,720 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m")), sourceFile -> procps/uptime.c, generated -> false, objectFile -> uptime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Expression of path for object occurrence procps/uptime.c: ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m"))
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Trying to find path for: [Object: watch]
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m")), sourceFile -> procps/watch.c, generated -> false, objectFile -> watch, listName -> lib)
2012-01-09 17:34:56,720 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m")), sourceFile -> procps/watch.c, generated -> false, objectFile -> watch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Expression of path for object occurrence procps/watch.c: ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m"))
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Trying to find path for: [Object: runsv]
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m")), sourceFile -> runit/runsv.c, generated -> false, objectFile -> runsv, listName -> lib)
2012-01-09 17:34:56,720 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m")), sourceFile -> runit/runsv.c, generated -> false, objectFile -> runsv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Expression of path for object occurrence runit/runsv.c: ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m"))
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Trying to find path for: [Object: runsvdir]
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m")), sourceFile -> runit/runsvdir.c, generated -> false, objectFile -> runsvdir, listName -> lib)
2012-01-09 17:34:56,720 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m")), sourceFile -> runit/runsvdir.c, generated -> false, objectFile -> runsvdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,720 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,720 DEBUG PCDerivation$ Expression of path for object occurrence runit/runsvdir.c: ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m"))
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Trying to find path for: [Object: sv]
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SV == "y") || (CONFIG_SV == "m")), sourceFile -> runit/sv.c, generated -> false, objectFile -> sv, listName -> lib)
2012-01-09 17:34:56,721 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SV == "y") || (CONFIG_SV == "m")), sourceFile -> runit/sv.c, generated -> false, objectFile -> sv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Expression of path for object occurrence runit/sv.c: ((CONFIG_SV == "y") || (CONFIG_SV == "m"))
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Trying to find path for: [Object: svlogd]
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m")), sourceFile -> runit/svlogd.c, generated -> false, objectFile -> svlogd, listName -> lib)
2012-01-09 17:34:56,721 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m")), sourceFile -> runit/svlogd.c, generated -> false, objectFile -> svlogd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Expression of path for object occurrence runit/svlogd.c: ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m"))
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Trying to find path for: [Object: chpst]
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m"))), sourceFile -> runit/chpst.c, generated -> false, objectFile -> chpst, listName -> lib)
2012-01-09 17:34:56,721 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m"))), sourceFile -> runit/chpst.c, generated -> false, objectFile -> chpst, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Expression of path for object occurrence runit/chpst.c: ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m")))
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Trying to find path for: [Object: chcon]
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m")), sourceFile -> selinux/chcon.c, generated -> false, objectFile -> chcon, listName -> lib)
2012-01-09 17:34:56,721 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m")), sourceFile -> selinux/chcon.c, generated -> false, objectFile -> chcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Expression of path for object occurrence selinux/chcon.c: ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m"))
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Trying to find path for: [Object: getenforce]
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m")), sourceFile -> selinux/getenforce.c, generated -> false, objectFile -> getenforce, listName -> lib)
2012-01-09 17:34:56,721 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m")), sourceFile -> selinux/getenforce.c, generated -> false, objectFile -> getenforce, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,721 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Expression of path for object occurrence selinux/getenforce.c: ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m"))
2012-01-09 17:34:56,721 DEBUG PCDerivation$ Trying to find path for: [Object: getsebool]
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m")), sourceFile -> selinux/getsebool.c, generated -> false, objectFile -> getsebool, listName -> lib)
2012-01-09 17:34:56,722 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m")), sourceFile -> selinux/getsebool.c, generated -> false, objectFile -> getsebool, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Expression of path for object occurrence selinux/getsebool.c: ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m"))
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Trying to find path for: [Object: load_policy]
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m")), sourceFile -> selinux/load_policy.c, generated -> false, objectFile -> load_policy, listName -> lib)
2012-01-09 17:34:56,722 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m")), sourceFile -> selinux/load_policy.c, generated -> false, objectFile -> load_policy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Expression of path for object occurrence selinux/load_policy.c: ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m"))
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Trying to find path for: [Object: matchpathcon]
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m")), sourceFile -> selinux/matchpathcon.c, generated -> false, objectFile -> matchpathcon, listName -> lib)
2012-01-09 17:34:56,722 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m")), sourceFile -> selinux/matchpathcon.c, generated -> false, objectFile -> matchpathcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Expression of path for object occurrence selinux/matchpathcon.c: ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m"))
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Trying to find path for: [Object: runcon]
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m")), sourceFile -> selinux/runcon.c, generated -> false, objectFile -> runcon, listName -> lib)
2012-01-09 17:34:56,722 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m")), sourceFile -> selinux/runcon.c, generated -> false, objectFile -> runcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Expression of path for object occurrence selinux/runcon.c: ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m"))
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Trying to find path for: [Object: selinuxenabled]
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUXENABLED == "y") || (CONFIG_SELINUXENABLED == "m")), sourceFile -> selinux/selinuxenabled.c, generated -> false, objectFile -> selinuxenabled, listName -> lib)
2012-01-09 17:34:56,722 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUXENABLED == "y") || (CONFIG_SELINUXENABLED == "m")), sourceFile -> selinux/selinuxenabled.c, generated -> false, objectFile -> selinuxenabled, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Expression of path for object occurrence selinux/selinuxenabled.c: ((CONFIG_SELINUXENABLED == "y") || (CONFIG_SELINUXENABLED == "m"))
2012-01-09 17:34:56,722 DEBUG PCDerivation$ Trying to find path for: [Object: setenforce]
2012-01-09 17:34:56,722 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETENFORCE == "y") || (CONFIG_SETENFORCE == "m")), sourceFile -> selinux/setenforce.c, generated -> false, objectFile -> setenforce, listName -> lib)
2012-01-09 17:34:56,722 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETENFORCE == "y") || (CONFIG_SETENFORCE == "m")), sourceFile -> selinux/setenforce.c, generated -> false, objectFile -> setenforce, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Expression of path for object occurrence selinux/setenforce.c: ((CONFIG_SETENFORCE == "y") || (CONFIG_SETENFORCE == "m"))
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Trying to find path for: [Object: setfiles]
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_SETFILES == "y") || (CONFIG_SETFILES == "m")) || ((CONFIG_RESTORECON == "y") || (CONFIG_RESTORECON == "m"))), sourceFile -> selinux/setfiles.c, generated -> false, objectFile -> setfiles, listName -> lib)
2012-01-09 17:34:56,723 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_SETFILES == "y") || (CONFIG_SETFILES == "m")) || ((CONFIG_RESTORECON == "y") || (CONFIG_RESTORECON == "m"))), sourceFile -> selinux/setfiles.c, generated -> false, objectFile -> setfiles, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Expression of path for object occurrence selinux/setfiles.c: (((CONFIG_SETFILES == "y") || (CONFIG_SETFILES == "m")) || ((CONFIG_RESTORECON == "y") || (CONFIG_RESTORECON == "m")))
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Trying to find path for: [Object: setsebool]
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSEBOOL == "y") || (CONFIG_SETSEBOOL == "m")), sourceFile -> selinux/setsebool.c, generated -> false, objectFile -> setsebool, listName -> lib)
2012-01-09 17:34:56,723 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSEBOOL == "y") || (CONFIG_SETSEBOOL == "m")), sourceFile -> selinux/setsebool.c, generated -> false, objectFile -> setsebool, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Expression of path for object occurrence selinux/setsebool.c: ((CONFIG_SETSEBOOL == "y") || (CONFIG_SETSEBOOL == "m"))
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Trying to find path for: [Object: sestatus]
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SESTATUS == "y") || (CONFIG_SESTATUS == "m")), sourceFile -> selinux/sestatus.c, generated -> false, objectFile -> sestatus, listName -> lib)
2012-01-09 17:34:56,723 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SESTATUS == "y") || (CONFIG_SESTATUS == "m")), sourceFile -> selinux/sestatus.c, generated -> false, objectFile -> sestatus, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Expression of path for object occurrence selinux/sestatus.c: ((CONFIG_SESTATUS == "y") || (CONFIG_SESTATUS == "m"))
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Trying to find path for: [Object: ash]
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash.c, generated -> false, objectFile -> ash, listName -> lib)
2012-01-09 17:34:56,723 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash.c, generated -> false, objectFile -> ash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Expression of path for object occurrence shell/ash.c: ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))
2012-01-09 17:34:56,723 DEBUG PCDerivation$ Trying to find path for: [Object: ash_ptr_hack]
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash_ptr_hack.c, generated -> false, objectFile -> ash_ptr_hack, listName -> lib)
2012-01-09 17:34:56,723 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash_ptr_hack.c, generated -> false, objectFile -> ash_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,723 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Expression of path for object occurrence shell/ash_ptr_hack.c: ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Trying to find path for: [Object: shell_common]
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH == "y") || (CONFIG_ASH == "m")) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> shell/shell_common.c, generated -> false, objectFile -> shell_common, listName -> lib)
2012-01-09 17:34:56,724 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH == "y") || (CONFIG_ASH == "m")) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> shell/shell_common.c, generated -> false, objectFile -> shell_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Expression of path for object occurrence shell/shell_common.c: (((CONFIG_ASH == "y") || (CONFIG_ASH == "m")) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Trying to find path for: [Object: random]
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH_RANDOM_SUPPORT == "y") || (CONFIG_ASH_RANDOM_SUPPORT == "m")) || ((CONFIG_HUSH_RANDOM_SUPPORT == "y") || (CONFIG_HUSH_RANDOM_SUPPORT == "m"))), sourceFile -> shell/random.c, generated -> false, objectFile -> random, listName -> lib)
2012-01-09 17:34:56,724 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH_RANDOM_SUPPORT == "y") || (CONFIG_ASH_RANDOM_SUPPORT == "m")) || ((CONFIG_HUSH_RANDOM_SUPPORT == "y") || (CONFIG_HUSH_RANDOM_SUPPORT == "m"))), sourceFile -> shell/random.c, generated -> false, objectFile -> random, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Expression of path for object occurrence shell/random.c: (((CONFIG_ASH_RANDOM_SUPPORT == "y") || (CONFIG_ASH_RANDOM_SUPPORT == "m")) || ((CONFIG_HUSH_RANDOM_SUPPORT == "y") || (CONFIG_HUSH_RANDOM_SUPPORT == "m")))
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Trying to find path for: [Object: cttyhack]
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CTTYHACK == "y") || (CONFIG_CTTYHACK == "m")), sourceFile -> shell/cttyhack.c, generated -> false, objectFile -> cttyhack, listName -> lib)
2012-01-09 17:34:56,724 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CTTYHACK == "y") || (CONFIG_CTTYHACK == "m")), sourceFile -> shell/cttyhack.c, generated -> false, objectFile -> cttyhack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Expression of path for object occurrence shell/cttyhack.c: ((CONFIG_CTTYHACK == "y") || (CONFIG_CTTYHACK == "m"))
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Trying to find path for: [Object: hush]
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/hush.c, generated -> false, objectFile -> hush, listName -> lib)
2012-01-09 17:34:56,724 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/hush.c, generated -> false, objectFile -> hush, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Expression of path for object occurrence shell/hush.c: ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Trying to find path for: [Object: match]
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/match.c, generated -> false, objectFile -> match, listName -> lib)
2012-01-09 17:34:56,724 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/match.c, generated -> false, objectFile -> match, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,724 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Expression of path for object occurrence shell/match.c: ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))
2012-01-09 17:34:56,724 DEBUG PCDerivation$ Trying to find path for: [Object: math]
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SH_MATH_SUPPORT == "y") || (CONFIG_SH_MATH_SUPPORT == "m")), sourceFile -> shell/math.c, generated -> false, objectFile -> math, listName -> lib)
2012-01-09 17:34:56,725 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SH_MATH_SUPPORT == "y") || (CONFIG_SH_MATH_SUPPORT == "m")), sourceFile -> shell/math.c, generated -> false, objectFile -> math, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Expression of path for object occurrence shell/math.c: ((CONFIG_SH_MATH_SUPPORT == "y") || (CONFIG_SH_MATH_SUPPORT == "m"))
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Trying to find path for: [Object: klogd]
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KLOGD == "y") || (CONFIG_KLOGD == "m")), sourceFile -> sysklogd/klogd.c, generated -> false, objectFile -> klogd, listName -> lib)
2012-01-09 17:34:56,725 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KLOGD == "y") || (CONFIG_KLOGD == "m")), sourceFile -> sysklogd/klogd.c, generated -> false, objectFile -> klogd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Expression of path for object occurrence sysklogd/klogd.c: ((CONFIG_KLOGD == "y") || (CONFIG_KLOGD == "m"))
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Trying to find path for: [Object: syslogd_and_logger]
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOGGER == "y") || (CONFIG_LOGGER == "m")) || ((CONFIG_SYSLOGD == "y") || (CONFIG_SYSLOGD == "m"))), sourceFile -> sysklogd/syslogd_and_logger.c, generated -> false, objectFile -> syslogd_and_logger, listName -> lib)
2012-01-09 17:34:56,725 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOGGER == "y") || (CONFIG_LOGGER == "m")) || ((CONFIG_SYSLOGD == "y") || (CONFIG_SYSLOGD == "m"))), sourceFile -> sysklogd/syslogd_and_logger.c, generated -> false, objectFile -> syslogd_and_logger, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Expression of path for object occurrence sysklogd/syslogd_and_logger.c: (((CONFIG_LOGGER == "y") || (CONFIG_LOGGER == "m")) || ((CONFIG_SYSLOGD == "y") || (CONFIG_SYSLOGD == "m")))
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Trying to find path for: [Object: logread]
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGREAD == "y") || (CONFIG_LOGREAD == "m")), sourceFile -> sysklogd/logread.c, generated -> false, objectFile -> logread, listName -> lib)
2012-01-09 17:34:56,725 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGREAD == "y") || (CONFIG_LOGREAD == "m")), sourceFile -> sysklogd/logread.c, generated -> false, objectFile -> logread, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Expression of path for object occurrence sysklogd/logread.c: ((CONFIG_LOGREAD == "y") || (CONFIG_LOGREAD == "m"))
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Trying to find path for: [Object: blockdev]
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLOCKDEV == "y") || (CONFIG_BLOCKDEV == "m")), sourceFile -> util-linux/blockdev.c, generated -> false, objectFile -> blockdev, listName -> lib)
2012-01-09 17:34:56,725 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLOCKDEV == "y") || (CONFIG_BLOCKDEV == "m")), sourceFile -> util-linux/blockdev.c, generated -> false, objectFile -> blockdev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,725 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,725 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/blockdev.c: ((CONFIG_BLOCKDEV == "y") || (CONFIG_BLOCKDEV == "m"))
2012-01-09 17:34:56,725 DEBUG PCDerivation$ Trying to find path for: [Object: mdev]
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m")), sourceFile -> util-linux/mdev.c, generated -> false, objectFile -> mdev, listName -> lib)
2012-01-09 17:34:56,726 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m")), sourceFile -> util-linux/mdev.c, generated -> false, objectFile -> mdev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mdev.c: ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Trying to find path for: [Object: rev]
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REV == "y") || (CONFIG_REV == "m")), sourceFile -> util-linux/rev.c, generated -> false, objectFile -> rev, listName -> lib)
2012-01-09 17:34:56,726 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REV == "y") || (CONFIG_REV == "m")), sourceFile -> util-linux/rev.c, generated -> false, objectFile -> rev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rev.c: ((CONFIG_REV == "y") || (CONFIG_REV == "m"))
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Trying to find path for: [Object: acpid]
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ACPID == "y") || (CONFIG_ACPID == "m")), sourceFile -> util-linux/acpid.c, generated -> false, objectFile -> acpid, listName -> lib)
2012-01-09 17:34:56,726 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ACPID == "y") || (CONFIG_ACPID == "m")), sourceFile -> util-linux/acpid.c, generated -> false, objectFile -> acpid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/acpid.c: ((CONFIG_ACPID == "y") || (CONFIG_ACPID == "m"))
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Trying to find path for: [Object: blkid]
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")), sourceFile -> util-linux/blkid.c, generated -> false, objectFile -> blkid, listName -> lib)
2012-01-09 17:34:56,726 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")), sourceFile -> util-linux/blkid.c, generated -> false, objectFile -> blkid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/blkid.c: ((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m"))
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Trying to find path for: [Object: dmesg]
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DMESG == "y") || (CONFIG_DMESG == "m")), sourceFile -> util-linux/dmesg.c, generated -> false, objectFile -> dmesg, listName -> lib)
2012-01-09 17:34:56,726 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DMESG == "y") || (CONFIG_DMESG == "m")), sourceFile -> util-linux/dmesg.c, generated -> false, objectFile -> dmesg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/dmesg.c: ((CONFIG_DMESG == "y") || (CONFIG_DMESG == "m"))
2012-01-09 17:34:56,726 DEBUG PCDerivation$ Trying to find path for: [Object: fbset]
2012-01-09 17:34:56,726 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSET == "y") || (CONFIG_FBSET == "m")), sourceFile -> util-linux/fbset.c, generated -> false, objectFile -> fbset, listName -> lib)
2012-01-09 17:34:56,726 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSET == "y") || (CONFIG_FBSET == "m")), sourceFile -> util-linux/fbset.c, generated -> false, objectFile -> fbset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fbset.c: ((CONFIG_FBSET == "y") || (CONFIG_FBSET == "m"))
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Trying to find path for: [Object: freeramdisk]
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FDFLUSH == "y") || (CONFIG_FDFLUSH == "m")) || ((CONFIG_FREERAMDISK == "y") || (CONFIG_FREERAMDISK == "m"))), sourceFile -> util-linux/freeramdisk.c, generated -> false, objectFile -> freeramdisk, listName -> lib)
2012-01-09 17:34:56,727 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FDFLUSH == "y") || (CONFIG_FDFLUSH == "m")) || ((CONFIG_FREERAMDISK == "y") || (CONFIG_FREERAMDISK == "m"))), sourceFile -> util-linux/freeramdisk.c, generated -> false, objectFile -> freeramdisk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/freeramdisk.c: (((CONFIG_FDFLUSH == "y") || (CONFIG_FDFLUSH == "m")) || ((CONFIG_FREERAMDISK == "y") || (CONFIG_FREERAMDISK == "m")))
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Trying to find path for: [Object: fdformat]
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDFORMAT == "y") || (CONFIG_FDFORMAT == "m")), sourceFile -> util-linux/fdformat.c, generated -> false, objectFile -> fdformat, listName -> lib)
2012-01-09 17:34:56,727 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDFORMAT == "y") || (CONFIG_FDFORMAT == "m")), sourceFile -> util-linux/fdformat.c, generated -> false, objectFile -> fdformat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fdformat.c: ((CONFIG_FDFORMAT == "y") || (CONFIG_FDFORMAT == "m"))
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Trying to find path for: [Object: fdisk]
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDISK == "y") || (CONFIG_FDISK == "m")), sourceFile -> util-linux/fdisk.c, generated -> false, objectFile -> fdisk, listName -> lib)
2012-01-09 17:34:56,727 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDISK == "y") || (CONFIG_FDISK == "m")), sourceFile -> util-linux/fdisk.c, generated -> false, objectFile -> fdisk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fdisk.c: ((CONFIG_FDISK == "y") || (CONFIG_FDISK == "m"))
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Trying to find path for: [Object: findfs]
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m")), sourceFile -> util-linux/findfs.c, generated -> false, objectFile -> findfs, listName -> lib)
2012-01-09 17:34:56,727 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m")), sourceFile -> util-linux/findfs.c, generated -> false, objectFile -> findfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/findfs.c: ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))
2012-01-09 17:34:56,727 DEBUG PCDerivation$ Trying to find path for: [Object: flock]
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLOCK == "y") || (CONFIG_FLOCK == "m")), sourceFile -> util-linux/flock.c, generated -> false, objectFile -> flock, listName -> lib)
2012-01-09 17:34:56,727 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLOCK == "y") || (CONFIG_FLOCK == "m")), sourceFile -> util-linux/flock.c, generated -> false, objectFile -> flock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,727 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/flock.c: ((CONFIG_FLOCK == "y") || (CONFIG_FLOCK == "m"))
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Trying to find path for: [Object: fsck_minix]
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m")), sourceFile -> util-linux/fsck_minix.c, generated -> false, objectFile -> fsck_minix, listName -> lib)
2012-01-09 17:34:56,728 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m")), sourceFile -> util-linux/fsck_minix.c, generated -> false, objectFile -> fsck_minix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fsck_minix.c: ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Trying to find path for: [Object: getopt]
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETOPT == "y") || (CONFIG_GETOPT == "m")), sourceFile -> util-linux/getopt.c, generated -> false, objectFile -> getopt, listName -> lib)
2012-01-09 17:34:56,728 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETOPT == "y") || (CONFIG_GETOPT == "m")), sourceFile -> util-linux/getopt.c, generated -> false, objectFile -> getopt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/getopt.c: ((CONFIG_GETOPT == "y") || (CONFIG_GETOPT == "m"))
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Trying to find path for: [Object: hexdump]
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEXDUMP == "y") || (CONFIG_HEXDUMP == "m")), sourceFile -> util-linux/hexdump.c, generated -> false, objectFile -> hexdump, listName -> lib)
2012-01-09 17:34:56,728 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEXDUMP == "y") || (CONFIG_HEXDUMP == "m")), sourceFile -> util-linux/hexdump.c, generated -> false, objectFile -> hexdump, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/hexdump.c: ((CONFIG_HEXDUMP == "y") || (CONFIG_HEXDUMP == "m"))
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Trying to find path for: [Object: hwclock]
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")), sourceFile -> util-linux/hwclock.c, generated -> false, objectFile -> hwclock, listName -> lib)
2012-01-09 17:34:56,728 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")), sourceFile -> util-linux/hwclock.c, generated -> false, objectFile -> hwclock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/hwclock.c: ((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m"))
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Trying to find path for: [Object: ipcrm]
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCRM == "y") || (CONFIG_IPCRM == "m")), sourceFile -> util-linux/ipcrm.c, generated -> false, objectFile -> ipcrm, listName -> lib)
2012-01-09 17:34:56,728 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCRM == "y") || (CONFIG_IPCRM == "m")), sourceFile -> util-linux/ipcrm.c, generated -> false, objectFile -> ipcrm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,728 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/ipcrm.c: ((CONFIG_IPCRM == "y") || (CONFIG_IPCRM == "m"))
2012-01-09 17:34:56,728 DEBUG PCDerivation$ Trying to find path for: [Object: ipcs]
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCS == "y") || (CONFIG_IPCS == "m")), sourceFile -> util-linux/ipcs.c, generated -> false, objectFile -> ipcs, listName -> lib)
2012-01-09 17:34:56,729 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCS == "y") || (CONFIG_IPCS == "m")), sourceFile -> util-linux/ipcs.c, generated -> false, objectFile -> ipcs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/ipcs.c: ((CONFIG_IPCS == "y") || (CONFIG_IPCS == "m"))
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Trying to find path for: [Object: losetup]
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")), sourceFile -> util-linux/losetup.c, generated -> false, objectFile -> losetup, listName -> lib)
2012-01-09 17:34:56,729 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")), sourceFile -> util-linux/losetup.c, generated -> false, objectFile -> losetup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/losetup.c: ((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m"))
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Trying to find path for: [Object: lspci]
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSPCI == "y") || (CONFIG_LSPCI == "m")), sourceFile -> util-linux/lspci.c, generated -> false, objectFile -> lspci, listName -> lib)
2012-01-09 17:34:56,729 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSPCI == "y") || (CONFIG_LSPCI == "m")), sourceFile -> util-linux/lspci.c, generated -> false, objectFile -> lspci, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/lspci.c: ((CONFIG_LSPCI == "y") || (CONFIG_LSPCI == "m"))
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Trying to find path for: [Object: lsusb]
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSUSB == "y") || (CONFIG_LSUSB == "m")), sourceFile -> util-linux/lsusb.c, generated -> false, objectFile -> lsusb, listName -> lib)
2012-01-09 17:34:56,729 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSUSB == "y") || (CONFIG_LSUSB == "m")), sourceFile -> util-linux/lsusb.c, generated -> false, objectFile -> lsusb, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/lsusb.c: ((CONFIG_LSUSB == "y") || (CONFIG_LSUSB == "m"))
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_ext2]
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m")), sourceFile -> util-linux/mkfs_ext2.c, generated -> false, objectFile -> mkfs_ext2, listName -> lib)
2012-01-09 17:34:56,729 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m")), sourceFile -> util-linux/mkfs_ext2.c, generated -> false, objectFile -> mkfs_ext2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_ext2.c: ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))
2012-01-09 17:34:56,729 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_minix]
2012-01-09 17:34:56,729 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m")), sourceFile -> util-linux/mkfs_minix.c, generated -> false, objectFile -> mkfs_minix, listName -> lib)
2012-01-09 17:34:56,729 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m")), sourceFile -> util-linux/mkfs_minix.c, generated -> false, objectFile -> mkfs_minix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_minix.c: ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_reiser]
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m")), sourceFile -> util-linux/mkfs_reiser.c, generated -> false, objectFile -> mkfs_reiser, listName -> lib)
2012-01-09 17:34:56,730 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m")), sourceFile -> util-linux/mkfs_reiser.c, generated -> false, objectFile -> mkfs_reiser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_reiser.c: ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_vfat]
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_VFAT == "y") || (CONFIG_MKFS_VFAT == "m")), sourceFile -> util-linux/mkfs_vfat.c, generated -> false, objectFile -> mkfs_vfat, listName -> lib)
2012-01-09 17:34:56,730 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_VFAT == "y") || (CONFIG_MKFS_VFAT == "m")), sourceFile -> util-linux/mkfs_vfat.c, generated -> false, objectFile -> mkfs_vfat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_vfat.c: ((CONFIG_MKFS_VFAT == "y") || (CONFIG_MKFS_VFAT == "m"))
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Trying to find path for: [Object: mkswap]
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKSWAP == "y") || (CONFIG_MKSWAP == "m")), sourceFile -> util-linux/mkswap.c, generated -> false, objectFile -> mkswap, listName -> lib)
2012-01-09 17:34:56,730 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKSWAP == "y") || (CONFIG_MKSWAP == "m")), sourceFile -> util-linux/mkswap.c, generated -> false, objectFile -> mkswap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkswap.c: ((CONFIG_MKSWAP == "y") || (CONFIG_MKSWAP == "m"))
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Trying to find path for: [Object: more]
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MORE == "y") || (CONFIG_MORE == "m")), sourceFile -> util-linux/more.c, generated -> false, objectFile -> more, listName -> lib)
2012-01-09 17:34:56,730 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MORE == "y") || (CONFIG_MORE == "m")), sourceFile -> util-linux/more.c, generated -> false, objectFile -> more, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/more.c: ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))
2012-01-09 17:34:56,730 DEBUG PCDerivation$ Trying to find path for: [Object: mount]
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")), sourceFile -> util-linux/mount.c, generated -> false, objectFile -> mount, listName -> lib)
2012-01-09 17:34:56,730 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")), sourceFile -> util-linux/mount.c, generated -> false, objectFile -> mount, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,730 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mount.c: ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Trying to find path for: [Object: pivot_root]
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIVOT_ROOT == "y") || (CONFIG_PIVOT_ROOT == "m")), sourceFile -> util-linux/pivot_root.c, generated -> false, objectFile -> pivot_root, listName -> lib)
2012-01-09 17:34:56,731 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIVOT_ROOT == "y") || (CONFIG_PIVOT_ROOT == "m")), sourceFile -> util-linux/pivot_root.c, generated -> false, objectFile -> pivot_root, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/pivot_root.c: ((CONFIG_PIVOT_ROOT == "y") || (CONFIG_PIVOT_ROOT == "m"))
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Trying to find path for: [Object: rdate]
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDATE == "y") || (CONFIG_RDATE == "m")), sourceFile -> util-linux/rdate.c, generated -> false, objectFile -> rdate, listName -> lib)
2012-01-09 17:34:56,731 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDATE == "y") || (CONFIG_RDATE == "m")), sourceFile -> util-linux/rdate.c, generated -> false, objectFile -> rdate, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rdate.c: ((CONFIG_RDATE == "y") || (CONFIG_RDATE == "m"))
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Trying to find path for: [Object: rdev]
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDEV == "y") || (CONFIG_RDEV == "m")), sourceFile -> util-linux/rdev.c, generated -> false, objectFile -> rdev, listName -> lib)
2012-01-09 17:34:56,731 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDEV == "y") || (CONFIG_RDEV == "m")), sourceFile -> util-linux/rdev.c, generated -> false, objectFile -> rdev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rdev.c: ((CONFIG_RDEV == "y") || (CONFIG_RDEV == "m"))
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Trying to find path for: [Object: readprofile]
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READPROFILE == "y") || (CONFIG_READPROFILE == "m")), sourceFile -> util-linux/readprofile.c, generated -> false, objectFile -> readprofile, listName -> lib)
2012-01-09 17:34:56,731 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READPROFILE == "y") || (CONFIG_READPROFILE == "m")), sourceFile -> util-linux/readprofile.c, generated -> false, objectFile -> readprofile, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/readprofile.c: ((CONFIG_READPROFILE == "y") || (CONFIG_READPROFILE == "m"))
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Trying to find path for: [Object: rtcwake]
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")), sourceFile -> util-linux/rtcwake.c, generated -> false, objectFile -> rtcwake, listName -> lib)
2012-01-09 17:34:56,731 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")), sourceFile -> util-linux/rtcwake.c, generated -> false, objectFile -> rtcwake, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rtcwake.c: ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))
2012-01-09 17:34:56,731 DEBUG PCDerivation$ Trying to find path for: [Object: script]
2012-01-09 17:34:56,731 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPT == "y") || (CONFIG_SCRIPT == "m")), sourceFile -> util-linux/script.c, generated -> false, objectFile -> script, listName -> lib)
2012-01-09 17:34:56,732 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPT == "y") || (CONFIG_SCRIPT == "m")), sourceFile -> util-linux/script.c, generated -> false, objectFile -> script, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/script.c: ((CONFIG_SCRIPT == "y") || (CONFIG_SCRIPT == "m"))
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Trying to find path for: [Object: scriptreplay]
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPTREPLAY == "y") || (CONFIG_SCRIPTREPLAY == "m")), sourceFile -> util-linux/scriptreplay.c, generated -> false, objectFile -> scriptreplay, listName -> lib)
2012-01-09 17:34:56,732 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPTREPLAY == "y") || (CONFIG_SCRIPTREPLAY == "m")), sourceFile -> util-linux/scriptreplay.c, generated -> false, objectFile -> scriptreplay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/scriptreplay.c: ((CONFIG_SCRIPTREPLAY == "y") || (CONFIG_SCRIPTREPLAY == "m"))
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Trying to find path for: [Object: setarch]
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETARCH == "y") || (CONFIG_SETARCH == "m")), sourceFile -> util-linux/setarch.c, generated -> false, objectFile -> setarch, listName -> lib)
2012-01-09 17:34:56,732 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETARCH == "y") || (CONFIG_SETARCH == "m")), sourceFile -> util-linux/setarch.c, generated -> false, objectFile -> setarch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/setarch.c: ((CONFIG_SETARCH == "y") || (CONFIG_SETARCH == "m"))
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Trying to find path for: [Object: swaponoff]
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWAPONOFF == "y") || (CONFIG_SWAPONOFF == "m")), sourceFile -> util-linux/swaponoff.c, generated -> false, objectFile -> swaponoff, listName -> lib)
2012-01-09 17:34:56,732 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWAPONOFF == "y") || (CONFIG_SWAPONOFF == "m")), sourceFile -> util-linux/swaponoff.c, generated -> false, objectFile -> swaponoff, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/swaponoff.c: ((CONFIG_SWAPONOFF == "y") || (CONFIG_SWAPONOFF == "m"))
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Trying to find path for: [Object: switch_root]
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWITCH_ROOT == "y") || (CONFIG_SWITCH_ROOT == "m")), sourceFile -> util-linux/switch_root.c, generated -> false, objectFile -> switch_root, listName -> lib)
2012-01-09 17:34:56,732 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWITCH_ROOT == "y") || (CONFIG_SWITCH_ROOT == "m")), sourceFile -> util-linux/switch_root.c, generated -> false, objectFile -> switch_root, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/switch_root.c: ((CONFIG_SWITCH_ROOT == "y") || (CONFIG_SWITCH_ROOT == "m"))
2012-01-09 17:34:56,732 DEBUG PCDerivation$ Trying to find path for: [Object: umount]
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UMOUNT == "y") || (CONFIG_UMOUNT == "m")), sourceFile -> util-linux/umount.c, generated -> false, objectFile -> umount, listName -> lib)
2012-01-09 17:34:56,732 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UMOUNT == "y") || (CONFIG_UMOUNT == "m")), sourceFile -> util-linux/umount.c, generated -> false, objectFile -> umount, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,732 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/umount.c: ((CONFIG_UMOUNT == "y") || (CONFIG_UMOUNT == "m"))
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Trying to find path for: [Object: get_devname]
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")) || ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))) || ((CONFIG_FEATURE_MOUNT_LABEL == "y") || (CONFIG_FEATURE_MOUNT_LABEL == "m"))), sourceFile -> util-linux/volume_id/get_devname.c, generated -> false, objectFile -> get_devname, listName -> lib)
2012-01-09 17:34:56,733 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")) || ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))) || ((CONFIG_FEATURE_MOUNT_LABEL == "y") || (CONFIG_FEATURE_MOUNT_LABEL == "m"))), sourceFile -> util-linux/volume_id/get_devname.c, generated -> false, objectFile -> get_devname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild) is: RootNode --> Map()
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/get_devname.c: ((((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")) || ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))) || ((CONFIG_FEATURE_MOUNT_LABEL == "y") || (CONFIG_FEATURE_MOUNT_LABEL == "m")))
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Trying to find path for: [Object: volume_id]
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/volume_id.c, generated -> false, objectFile -> volume_id, listName -> lib)
2012-01-09 17:34:56,733 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/volume_id.c, generated -> false, objectFile -> volume_id, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/volume_id.c: ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m"))
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Trying to find path for: [Object: util]
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/util.c, generated -> false, objectFile -> util, listName -> lib)
2012-01-09 17:34:56,733 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/util.c, generated -> false, objectFile -> util, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/util.c: ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m"))
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Trying to find path for: [Object: btrfs]
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_BTRFS == "y") || (CONFIG_FEATURE_VOLUMEID_BTRFS == "m")), sourceFile -> util-linux/volume_id/btrfs.c, generated -> false, objectFile -> btrfs, listName -> lib)
2012-01-09 17:34:56,733 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_BTRFS == "y") || (CONFIG_FEATURE_VOLUMEID_BTRFS == "m")), sourceFile -> util-linux/volume_id/btrfs.c, generated -> false, objectFile -> btrfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/btrfs.c: ((CONFIG_FEATURE_VOLUMEID_BTRFS == "y") || (CONFIG_FEATURE_VOLUMEID_BTRFS == "m"))
2012-01-09 17:34:56,733 DEBUG PCDerivation$ Trying to find path for: [Object: ext]
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_EXT == "y") || (CONFIG_FEATURE_VOLUMEID_EXT == "m")), sourceFile -> util-linux/volume_id/ext.c, generated -> false, objectFile -> ext, listName -> lib)
2012-01-09 17:34:56,733 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_EXT == "y") || (CONFIG_FEATURE_VOLUMEID_EXT == "m")), sourceFile -> util-linux/volume_id/ext.c, generated -> false, objectFile -> ext, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,733 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/ext.c: ((CONFIG_FEATURE_VOLUMEID_EXT == "y") || (CONFIG_FEATURE_VOLUMEID_EXT == "m"))
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Trying to find path for: [Object: fat]
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_FAT == "y") || (CONFIG_FEATURE_VOLUMEID_FAT == "m")), sourceFile -> util-linux/volume_id/fat.c, generated -> false, objectFile -> fat, listName -> lib)
2012-01-09 17:34:56,734 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_FAT == "y") || (CONFIG_FEATURE_VOLUMEID_FAT == "m")), sourceFile -> util-linux/volume_id/fat.c, generated -> false, objectFile -> fat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/fat.c: ((CONFIG_FEATURE_VOLUMEID_FAT == "y") || (CONFIG_FEATURE_VOLUMEID_FAT == "m"))
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Trying to find path for: [Object: hfs]
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_HFS == "y") || (CONFIG_FEATURE_VOLUMEID_HFS == "m")), sourceFile -> util-linux/volume_id/hfs.c, generated -> false, objectFile -> hfs, listName -> lib)
2012-01-09 17:34:56,734 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_HFS == "y") || (CONFIG_FEATURE_VOLUMEID_HFS == "m")), sourceFile -> util-linux/volume_id/hfs.c, generated -> false, objectFile -> hfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/hfs.c: ((CONFIG_FEATURE_VOLUMEID_HFS == "y") || (CONFIG_FEATURE_VOLUMEID_HFS == "m"))
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Trying to find path for: [Object: iso9660]
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ISO9660 == "y") || (CONFIG_FEATURE_VOLUMEID_ISO9660 == "m")), sourceFile -> util-linux/volume_id/iso9660.c, generated -> false, objectFile -> iso9660, listName -> lib)
2012-01-09 17:34:56,734 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ISO9660 == "y") || (CONFIG_FEATURE_VOLUMEID_ISO9660 == "m")), sourceFile -> util-linux/volume_id/iso9660.c, generated -> false, objectFile -> iso9660, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/iso9660.c: ((CONFIG_FEATURE_VOLUMEID_ISO9660 == "y") || (CONFIG_FEATURE_VOLUMEID_ISO9660 == "m"))
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Trying to find path for: [Object: jfs]
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_JFS == "y") || (CONFIG_FEATURE_VOLUMEID_JFS == "m")), sourceFile -> util-linux/volume_id/jfs.c, generated -> false, objectFile -> jfs, listName -> lib)
2012-01-09 17:34:56,734 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_JFS == "y") || (CONFIG_FEATURE_VOLUMEID_JFS == "m")), sourceFile -> util-linux/volume_id/jfs.c, generated -> false, objectFile -> jfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/jfs.c: ((CONFIG_FEATURE_VOLUMEID_JFS == "y") || (CONFIG_FEATURE_VOLUMEID_JFS == "m"))
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Trying to find path for: [Object: linux_raid]
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXRAID == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXRAID == "m")), sourceFile -> util-linux/volume_id/linux_raid.c, generated -> false, objectFile -> linux_raid, listName -> lib)
2012-01-09 17:34:56,734 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXRAID == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXRAID == "m")), sourceFile -> util-linux/volume_id/linux_raid.c, generated -> false, objectFile -> linux_raid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,734 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/linux_raid.c: ((CONFIG_FEATURE_VOLUMEID_LINUXRAID == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXRAID == "m"))
2012-01-09 17:34:56,734 DEBUG PCDerivation$ Trying to find path for: [Object: linux_swap]
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "m")), sourceFile -> util-linux/volume_id/linux_swap.c, generated -> false, objectFile -> linux_swap, listName -> lib)
2012-01-09 17:34:56,735 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "m")), sourceFile -> util-linux/volume_id/linux_swap.c, generated -> false, objectFile -> linux_swap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/linux_swap.c: ((CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "m"))
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Trying to find path for: [Object: ntfs]
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_NTFS == "y") || (CONFIG_FEATURE_VOLUMEID_NTFS == "m")), sourceFile -> util-linux/volume_id/ntfs.c, generated -> false, objectFile -> ntfs, listName -> lib)
2012-01-09 17:34:56,735 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_NTFS == "y") || (CONFIG_FEATURE_VOLUMEID_NTFS == "m")), sourceFile -> util-linux/volume_id/ntfs.c, generated -> false, objectFile -> ntfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/ntfs.c: ((CONFIG_FEATURE_VOLUMEID_NTFS == "y") || (CONFIG_FEATURE_VOLUMEID_NTFS == "m"))
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Trying to find path for: [Object: reiserfs]
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_REISERFS == "y") || (CONFIG_FEATURE_VOLUMEID_REISERFS == "m")), sourceFile -> util-linux/volume_id/reiserfs.c, generated -> false, objectFile -> reiserfs, listName -> lib)
2012-01-09 17:34:56,735 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_REISERFS == "y") || (CONFIG_FEATURE_VOLUMEID_REISERFS == "m")), sourceFile -> util-linux/volume_id/reiserfs.c, generated -> false, objectFile -> reiserfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/reiserfs.c: ((CONFIG_FEATURE_VOLUMEID_REISERFS == "y") || (CONFIG_FEATURE_VOLUMEID_REISERFS == "m"))
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Trying to find path for: [Object: udf]
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_UDF == "y") || (CONFIG_FEATURE_VOLUMEID_UDF == "m")), sourceFile -> util-linux/volume_id/udf.c, generated -> false, objectFile -> udf, listName -> lib)
2012-01-09 17:34:56,735 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_UDF == "y") || (CONFIG_FEATURE_VOLUMEID_UDF == "m")), sourceFile -> util-linux/volume_id/udf.c, generated -> false, objectFile -> udf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/udf.c: ((CONFIG_FEATURE_VOLUMEID_UDF == "y") || (CONFIG_FEATURE_VOLUMEID_UDF == "m"))
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Trying to find path for: [Object: xfs]
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_XFS == "y") || (CONFIG_FEATURE_VOLUMEID_XFS == "m")), sourceFile -> util-linux/volume_id/xfs.c, generated -> false, objectFile -> xfs, listName -> lib)
2012-01-09 17:34:56,735 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_XFS == "y") || (CONFIG_FEATURE_VOLUMEID_XFS == "m")), sourceFile -> util-linux/volume_id/xfs.c, generated -> false, objectFile -> xfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/xfs.c: ((CONFIG_FEATURE_VOLUMEID_XFS == "y") || (CONFIG_FEATURE_VOLUMEID_XFS == "m"))
2012-01-09 17:34:56,735 DEBUG PCDerivation$ Trying to find path for: [Object: cramfs]
2012-01-09 17:34:56,735 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_CRAMFS == "y") || (CONFIG_FEATURE_VOLUMEID_CRAMFS == "m")), sourceFile -> util-linux/volume_id/cramfs.c, generated -> false, objectFile -> cramfs, listName -> lib)
2012-01-09 17:34:56,736 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_CRAMFS == "y") || (CONFIG_FEATURE_VOLUMEID_CRAMFS == "m")), sourceFile -> util-linux/volume_id/cramfs.c, generated -> false, objectFile -> cramfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,736 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/cramfs.c: ((CONFIG_FEATURE_VOLUMEID_CRAMFS == "y") || (CONFIG_FEATURE_VOLUMEID_CRAMFS == "m"))
2012-01-09 17:34:56,736 DEBUG PCDerivation$ Trying to find path for: [Object: romfs]
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ROMFS == "y") || (CONFIG_FEATURE_VOLUMEID_ROMFS == "m")), sourceFile -> util-linux/volume_id/romfs.c, generated -> false, objectFile -> romfs, listName -> lib)
2012-01-09 17:34:56,736 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ROMFS == "y") || (CONFIG_FEATURE_VOLUMEID_ROMFS == "m")), sourceFile -> util-linux/volume_id/romfs.c, generated -> false, objectFile -> romfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,736 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/romfs.c: ((CONFIG_FEATURE_VOLUMEID_ROMFS == "y") || (CONFIG_FEATURE_VOLUMEID_ROMFS == "m"))
2012-01-09 17:34:56,736 DEBUG PCDerivation$ Trying to find path for: [Object: sysv]
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_SYSV == "y") || (CONFIG_FEATURE_VOLUMEID_SYSV == "m")), sourceFile -> util-linux/volume_id/sysv.c, generated -> false, objectFile -> sysv, listName -> lib)
2012-01-09 17:34:56,736 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_SYSV == "y") || (CONFIG_FEATURE_VOLUMEID_SYSV == "m")), sourceFile -> util-linux/volume_id/sysv.c, generated -> false, objectFile -> sysv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,736 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/sysv.c: ((CONFIG_FEATURE_VOLUMEID_SYSV == "y") || (CONFIG_FEATURE_VOLUMEID_SYSV == "m"))
2012-01-09 17:34:56,736 DEBUG PCDerivation$ Trying to find path for: [Object: luks]
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LUKS == "y") || (CONFIG_FEATURE_VOLUMEID_LUKS == "m")), sourceFile -> util-linux/volume_id/luks.c, generated -> false, objectFile -> luks, listName -> lib)
2012-01-09 17:34:56,736 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LUKS == "y") || (CONFIG_FEATURE_VOLUMEID_LUKS == "m")), sourceFile -> util-linux/volume_id/luks.c, generated -> false, objectFile -> luks, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,736 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/luks.c: ((CONFIG_FEATURE_VOLUMEID_LUKS == "y") || (CONFIG_FEATURE_VOLUMEID_LUKS == "m"))
2012-01-09 17:34:56,736 DEBUG PCDerivation$ Trying to find path for: [Object: ocfs2]
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_OCFS2 == "y") || (CONFIG_FEATURE_VOLUMEID_OCFS2 == "m")), sourceFile -> util-linux/volume_id/ocfs2.c, generated -> false, objectFile -> ocfs2, listName -> lib)
2012-01-09 17:34:56,736 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_OCFS2 == "y") || (CONFIG_FEATURE_VOLUMEID_OCFS2 == "m")), sourceFile -> util-linux/volume_id/ocfs2.c, generated -> false, objectFile -> ocfs2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-09 17:34:56,736 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-09 17:34:56,736 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/ocfs2.c: ((CONFIG_FEATURE_VOLUMEID_OCFS2 == "y") || (CONFIG_FEATURE_VOLUMEID_OCFS2 == "m"))
2012-01-09 17:34:56,772 INFO KBuildMinerMain$ Saving PCs to: pc.txt
2012-01-09 17:34:56,795 INFO KBuildMinerMain$ Extracting additional C flags...
2012-01-10 11:50:07,627 INFO KBuildMinerMain$ Starting KBuildMiner...
2012-01-10 11:50:07,739 INFO KBuildMinerMain$ === PreProcessing applets/Kbuild
2012-01-10 11:50:07,742 INFO KBuildMinerMain$ === Processing applets/Kbuild
2012-01-10 11:50:07,811 TRACE ModelFactory addObject
2012-01-10 11:50:07,817 TRACE ModelFactory  addVariableAssignment: always, value: $(hostprogs-y)
2012-01-10 11:50:07,820 TRACE ModelFactory pushIf
2012-01-10 11:50:07,824 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@7c49cdc8,Hole(List(gsd.buildanalysis.linux.model.BNode@7233374e, [Object: applets]),NodeLoc([Makefile: applets/Kbuild],Top),List()))
2012-01-10 11:50:07,828 TRACE ModelFactory pushElse
2012-01-10 11:50:07,829 TRACE ModelFactory  addVariableAssignment: srctree_slash, value: $(srctree)/
2012-01-10 11:50:07,831 TRACE ModelFactory popEndIf
2012-01-10 11:50:07,832 TRACE ModelFactory  addVariableAssignment: HOSTCFLAGS_usage.o, value: -I$(srctree_slash)include -Iinclude
2012-01-10 11:50:07,832 TRACE ModelFactory  addVariableAssignment: HOSTCFLAGS_usage_pod.o, value: -I$(srctree_slash)include -Iinclude
2012-01-10 11:50:07,844 TRACE ModelFactory  addVariableAssignment: quiet_cmd_gen_usage_compressed, value: GEN     include/usage_compressed.h
2012-01-10 11:50:07,845 TRACE ModelFactory  addVariableAssignment: cmd_gen_usage_compressed, value: $(srctree_slash)applets/usage_compressed include/usage_compressed.h applets
2012-01-10 11:50:07,851 TRACE ModelFactory  addVariableAssignment: quiet_cmd_gen_applet_tables, value: GEN     include/applet_tables.h
2012-01-10 11:50:07,852 TRACE ModelFactory  addVariableAssignment: cmd_gen_applet_tables, value: applets/applet_tables include/applet_tables.h include/NUM_APPLETS.h
2012-01-10 11:50:07,863 INFO KBuildMinerMain$ === PostProcessing applets/Kbuild
2012-01-10 11:50:07,944 INFO KBuildMinerMain$ === PreProcessing archival/Kbuild
2012-01-10 11:50:07,945 INFO KBuildMinerMain$ === Processing archival/Kbuild
2012-01-10 11:50:07,949 TRACE ModelFactory addMakefile
2012-01-10 11:50:07,954 TRACE ModelFactory addObject
2012-01-10 11:50:07,955 TRACE ModelFactory addObject
2012-01-10 11:50:07,955 TRACE ModelFactory addObject
2012-01-10 11:50:07,956 TRACE ModelFactory addObject
2012-01-10 11:50:07,956 TRACE ModelFactory addObject
2012-01-10 11:50:07,956 TRACE ModelFactory addObject
2012-01-10 11:50:07,957 TRACE ModelFactory addObject
2012-01-10 11:50:07,958 TRACE ModelFactory addObject
2012-01-10 11:50:07,958 TRACE ModelFactory addObject
2012-01-10 11:50:07,958 TRACE ModelFactory addObject
2012-01-10 11:50:07,958 TRACE ModelFactory addObject
2012-01-10 11:50:07,959 TRACE ModelFactory addObject
2012-01-10 11:50:07,959 TRACE ModelFactory addObject
2012-01-10 11:50:07,959 TRACE ModelFactory addObject
2012-01-10 11:50:07,960 TRACE ModelFactory addObject
2012-01-10 11:50:07,960 TRACE ModelFactory addObject
2012-01-10 11:50:07,961 TRACE ModelFactory addObject
2012-01-10 11:50:07,961 TRACE ModelFactory addObject
2012-01-10 11:50:07,962 TRACE ModelFactory addObject
2012-01-10 11:50:07,962 INFO KBuildMinerMain$ === PostProcessing archival/Kbuild
2012-01-10 11:50:07,999 INFO KBuildMinerMain$ === PreProcessing archival/libarchive/Kbuild
2012-01-10 11:50:07,999 INFO KBuildMinerMain$ === Processing archival/libarchive/Kbuild
2012-01-10 11:50:08,003 TRACE ModelFactory pushListVariable: COMMON_FILES
2012-01-10 11:50:08,005 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:50:08,007 TRACE ModelFactory addObjectToList: data_skip
2012-01-10 11:50:08,007 TRACE ModelFactory addObjectToList: data_extract_all
2012-01-10 11:50:08,007 TRACE ModelFactory addObjectToList: data_extract_to_stdout
2012-01-10 11:50:08,007 TRACE ModelFactory addObjectToList: filter_accept_all
2012-01-10 11:50:08,007 TRACE ModelFactory addObjectToList: filter_accept_list
2012-01-10 11:50:08,007 TRACE ModelFactory addObjectToList: filter_accept_reject_list
2012-01-10 11:50:08,007 TRACE ModelFactory addObjectToList: header_skip
2012-01-10 11:50:08,007 TRACE ModelFactory addObjectToList: header_list
2012-01-10 11:50:08,008 TRACE ModelFactory addObjectToList: header_verbose_list
2012-01-10 11:50:08,008 TRACE ModelFactory addObjectToList: seek_by_read
2012-01-10 11:50:08,008 TRACE ModelFactory addObjectToList: seek_by_jump
2012-01-10 11:50:08,008 TRACE ModelFactory addObjectToList: data_align
2012-01-10 11:50:08,008 TRACE ModelFactory addObjectToList: find_list_entry
2012-01-10 11:50:08,008 TRACE ModelFactory addObjectToList: init_handle
2012-01-10 11:50:08,010 TRACE ModelFactory popListVariable
2012-01-10 11:50:08,010 TRACE ModelFactory  addVariableAssignment: COMMON_FILES, value: data_skip.o \
	data_extract_all.o \
	data_extract_to_stdout.o \
\
	filter_accept_all.o \
	filter_accept_list.o \
	filter_accept_reject_list.o \
\
	header_skip.o \
	header_list.o \
	header_verbose_list.o \
\
	seek_by_read.o \
	seek_by_jump.o \
\
	data_align.o \
	find_list_entry.o \
	init_handle.o
2012-01-10 11:50:08,010 TRACE ModelFactory pushListVariable: DPKG_FILES
2012-01-10 11:50:08,010 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:50:08,010 TRACE ModelFactory addObjectToList: get_header_ar
2012-01-10 11:50:08,010 TRACE ModelFactory addObjectToList: unpack_ar_archive
2012-01-10 11:50:08,011 TRACE ModelFactory addObjectToList: get_header_tar
2012-01-10 11:50:08,011 TRACE ModelFactory addObjectToList: filter_accept_list_reassign
2012-01-10 11:50:08,011 TRACE ModelFactory popListVariable
2012-01-10 11:50:08,011 TRACE ModelFactory  addVariableAssignment: DPKG_FILES, value: get_header_ar.o \
	unpack_ar_archive.o \
	get_header_tar.o \
	filter_accept_list_reassign.o
2012-01-10 11:50:08,011 TRACE ModelFactory addObject
2012-01-10 11:50:08,012 TRACE ModelFactory addObject
2012-01-10 11:50:08,012 TRACE ModelFactory addObject
2012-01-10 11:50:08,012 TRACE ModelFactory addObject
2012-01-10 11:50:08,013 TRACE ModelFactory addObject
2012-01-10 11:50:08,014 TRACE ModelFactory addObject
2012-01-10 11:50:08,016 TRACE ModelFactory addVariableReference
2012-01-10 11:50:08,016 TRACE ModelFactory addVariableReference
2012-01-10 11:50:08,017 TRACE ModelFactory addObject
2012-01-10 11:50:08,017 TRACE ModelFactory addObject
2012-01-10 11:50:08,017 TRACE ModelFactory addObject
2012-01-10 11:50:08,018 TRACE ModelFactory addObject
2012-01-10 11:50:08,018 TRACE ModelFactory addObject
2012-01-10 11:50:08,018 TRACE ModelFactory addObject
2012-01-10 11:50:08,019 TRACE ModelFactory addObject
2012-01-10 11:50:08,019 TRACE ModelFactory addObject
2012-01-10 11:50:08,020 TRACE ModelFactory addObject
2012-01-10 11:50:08,021 TRACE ModelFactory addObject
2012-01-10 11:50:08,021 TRACE ModelFactory addObject
2012-01-10 11:50:08,021 TRACE ModelFactory addObject
2012-01-10 11:50:08,021 TRACE ModelFactory addObject
2012-01-10 11:50:08,022 TRACE ModelFactory addObject
2012-01-10 11:50:08,022 TRACE ModelFactory addObject
2012-01-10 11:50:08,023 TRACE ModelFactory addObject
2012-01-10 11:50:08,024 TRACE ModelFactory addObject
2012-01-10 11:50:08,024 TRACE ModelFactory addObject
2012-01-10 11:50:08,024 TRACE ModelFactory addObject
2012-01-10 11:50:08,025 TRACE ModelFactory addObject
2012-01-10 11:50:08,025 TRACE ModelFactory addObject
2012-01-10 11:50:08,025 TRACE ModelFactory addObject
2012-01-10 11:50:08,026 TRACE ModelFactory addObject
2012-01-10 11:50:08,026 TRACE ModelFactory addObject
2012-01-10 11:50:08,027 TRACE ModelFactory addObject
2012-01-10 11:50:08,028 TRACE ModelFactory addObject
2012-01-10 11:50:08,029 TRACE ModelFactory addObject
2012-01-10 11:50:08,029 TRACE ModelFactory addObject
2012-01-10 11:50:08,030 TRACE ModelFactory addObject
2012-01-10 11:50:08,031 TRACE ModelFactory pushIf
2012-01-10 11:50:08,031 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@fbc0d0f2,Hole(List([Object: data_extract_to_command], [Object: decompress_bunzip2], [Object: decompress_bunzip2], [Object: decompress_unxz], [Object: open_transformer], [Object: get_header_tar_lzma], [Object: decompress_unlzma], [Object: open_transformer], [Object: get_header_tar_bz2], [Object: decompress_bunzip2], [Object: open_transformer], [Object: get_header_tar_gz], [Object: decompress_unzip], [Object: open_transformer], [Object: decompress_uncompress], [Object: open_transformer], [Object: lzo1x_9x], [Object: lzo1x_d], [Object: lzo1x_1o], [Object: lzo1x_1], [Object: decompress_unzip], [Object: decompress_uncompress], [Object: get_header_tar], [Object: get_header_cpio], [Object: decompress_unzip], [Object: open_transformer], [Object: get_header_cpio], [Object: decompress_unzip], [Object: decompress_unzip], [VariableReference: DPKG_FILES], [VariableReference: DPKG_FILES], [Object: get_header_cpio], [Object: decompress_unxz], [Object: decompress_unlzma], [Object: decompress_bunzip2], [Object: unpack_ar_archive], [Object: get_header_ar], gsd.buildanalysis.linux.model.BNode@6b0b455d, [VariableDefinition: DPKG_FILES], gsd.buildanalysis.linux.model.BNode@d001331, [VariableDefinition: COMMON_FILES]),NodeLoc([Makefile: archival/libarchive/Kbuild],Top),List()))
2012-01-10 11:50:08,031 TRACE ModelFactory addVariableReference
2012-01-10 11:50:08,032 TRACE ModelFactory popEndIf
2012-01-10 11:50:08,032 INFO KBuildMinerMain$ === PostProcessing archival/libarchive/Kbuild
2012-01-10 11:50:08,097 INFO KBuildMinerMain$ === PreProcessing archival/libarchive/Kbuild
2012-01-10 11:50:08,097 INFO KBuildMinerMain$ === Processing archival/libarchive/Kbuild
2012-01-10 11:50:08,099 TRACE ModelFactory pushListVariable: COMMON_FILES
2012-01-10 11:50:08,099 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: data_skip
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: data_extract_all
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: data_extract_to_stdout
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: filter_accept_all
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: filter_accept_list
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: filter_accept_reject_list
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: header_skip
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: header_list
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: header_verbose_list
2012-01-10 11:50:08,099 TRACE ModelFactory addObjectToList: seek_by_read
2012-01-10 11:50:08,100 TRACE ModelFactory addObjectToList: seek_by_jump
2012-01-10 11:50:08,100 TRACE ModelFactory addObjectToList: data_align
2012-01-10 11:50:08,100 TRACE ModelFactory addObjectToList: find_list_entry
2012-01-10 11:50:08,100 TRACE ModelFactory addObjectToList: init_handle
2012-01-10 11:50:08,100 TRACE ModelFactory popListVariable
2012-01-10 11:50:08,100 TRACE ModelFactory  addVariableAssignment: COMMON_FILES, value: data_skip.o \
	data_extract_all.o \
	data_extract_to_stdout.o \
\
	filter_accept_all.o \
	filter_accept_list.o \
	filter_accept_reject_list.o \
\
	header_skip.o \
	header_list.o \
	header_verbose_list.o \
\
	seek_by_read.o \
	seek_by_jump.o \
\
	data_align.o \
	find_list_entry.o \
	init_handle.o
2012-01-10 11:50:08,100 TRACE ModelFactory pushListVariable: DPKG_FILES
2012-01-10 11:50:08,100 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:50:08,100 TRACE ModelFactory addObjectToList: get_header_ar
2012-01-10 11:50:08,100 TRACE ModelFactory addObjectToList: unpack_ar_archive
2012-01-10 11:50:08,101 TRACE ModelFactory addObjectToList: get_header_tar
2012-01-10 11:50:08,101 TRACE ModelFactory addObjectToList: filter_accept_list_reassign
2012-01-10 11:50:08,101 TRACE ModelFactory popListVariable
2012-01-10 11:50:08,101 TRACE ModelFactory  addVariableAssignment: DPKG_FILES, value: get_header_ar.o \
	unpack_ar_archive.o \
	get_header_tar.o \
	filter_accept_list_reassign.o
2012-01-10 11:50:08,101 TRACE ModelFactory addObject
2012-01-10 11:50:08,101 TRACE ModelFactory addObject
2012-01-10 11:50:08,102 TRACE ModelFactory addObject
2012-01-10 11:50:08,102 TRACE ModelFactory addObject
2012-01-10 11:50:08,102 TRACE ModelFactory addObject
2012-01-10 11:50:08,103 TRACE ModelFactory addObject
2012-01-10 11:50:08,103 TRACE ModelFactory addVariableReference
2012-01-10 11:50:08,103 TRACE ModelFactory addVariableReference
2012-01-10 11:50:08,104 TRACE ModelFactory addObject
2012-01-10 11:50:08,104 TRACE ModelFactory addObject
2012-01-10 11:50:08,104 TRACE ModelFactory addObject
2012-01-10 11:50:08,104 TRACE ModelFactory addObject
2012-01-10 11:50:08,105 TRACE ModelFactory addObject
2012-01-10 11:50:08,105 TRACE ModelFactory addObject
2012-01-10 11:50:08,105 TRACE ModelFactory addObject
2012-01-10 11:50:08,105 TRACE ModelFactory addObject
2012-01-10 11:50:08,106 TRACE ModelFactory addObject
2012-01-10 11:50:08,106 TRACE ModelFactory addObject
2012-01-10 11:50:08,106 TRACE ModelFactory addObject
2012-01-10 11:50:08,106 TRACE ModelFactory addObject
2012-01-10 11:50:08,107 TRACE ModelFactory addObject
2012-01-10 11:50:08,107 TRACE ModelFactory addObject
2012-01-10 11:50:08,107 TRACE ModelFactory addObject
2012-01-10 11:50:08,107 TRACE ModelFactory addObject
2012-01-10 11:50:08,108 TRACE ModelFactory addObject
2012-01-10 11:50:08,108 TRACE ModelFactory addObject
2012-01-10 11:50:08,108 TRACE ModelFactory addObject
2012-01-10 11:50:08,108 TRACE ModelFactory addObject
2012-01-10 11:50:08,109 TRACE ModelFactory addObject
2012-01-10 11:50:08,109 TRACE ModelFactory addObject
2012-01-10 11:50:08,109 TRACE ModelFactory addObject
2012-01-10 11:50:08,109 TRACE ModelFactory addObject
2012-01-10 11:50:08,110 TRACE ModelFactory addObject
2012-01-10 11:50:08,110 TRACE ModelFactory addObject
2012-01-10 11:50:08,110 TRACE ModelFactory addObject
2012-01-10 11:50:08,111 TRACE ModelFactory addObject
2012-01-10 11:50:08,111 TRACE ModelFactory addObject
2012-01-10 11:50:08,111 TRACE ModelFactory pushIf
2012-01-10 11:50:08,112 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@fbc0d0f2,Hole(List([Object: data_extract_to_command], [Object: decompress_bunzip2], [Object: decompress_bunzip2], [Object: decompress_unxz], [Object: open_transformer], [Object: get_header_tar_lzma], [Object: decompress_unlzma], [Object: open_transformer], [Object: get_header_tar_bz2], [Object: decompress_bunzip2], [Object: open_transformer], [Object: get_header_tar_gz], [Object: decompress_unzip], [Object: open_transformer], [Object: decompress_uncompress], [Object: open_transformer], [Object: lzo1x_9x], [Object: lzo1x_d], [Object: lzo1x_1o], [Object: lzo1x_1], [Object: decompress_unzip], [Object: decompress_uncompress], [Object: get_header_tar], [Object: get_header_cpio], [Object: decompress_unzip], [Object: open_transformer], [Object: get_header_cpio], [Object: decompress_unzip], [Object: decompress_unzip], [VariableReference: DPKG_FILES], [VariableReference: DPKG_FILES], [Object: get_header_cpio], [Object: decompress_unxz], [Object: decompress_unlzma], [Object: decompress_bunzip2], [Object: unpack_ar_archive], [Object: get_header_ar], gsd.buildanalysis.linux.model.BNode@6b0b455d, [VariableDefinition: DPKG_FILES], gsd.buildanalysis.linux.model.BNode@d001331, [VariableDefinition: COMMON_FILES]),NodeLoc([Makefile: archival/libarchive/Kbuild],Top),List()))
2012-01-10 11:50:08,112 TRACE ModelFactory addVariableReference
2012-01-10 11:50:08,112 TRACE ModelFactory popEndIf
2012-01-10 11:50:08,113 INFO KBuildMinerMain$ === PostProcessing archival/libarchive/Kbuild
2012-01-10 11:50:08,160 INFO KBuildMinerMain$ === PreProcessing console-tools/Kbuild
2012-01-10 11:50:08,160 INFO KBuildMinerMain$ === Processing console-tools/Kbuild
2012-01-10 11:50:08,162 TRACE ModelFactory addObject
2012-01-10 11:50:08,163 TRACE ModelFactory addObject
2012-01-10 11:50:08,163 TRACE ModelFactory addObject
2012-01-10 11:50:08,164 TRACE ModelFactory addObject
2012-01-10 11:50:08,165 TRACE ModelFactory addObject
2012-01-10 11:50:08,165 TRACE ModelFactory addObject
2012-01-10 11:50:08,166 TRACE ModelFactory addObject
2012-01-10 11:50:08,167 TRACE ModelFactory addObject
2012-01-10 11:50:08,167 TRACE ModelFactory addObject
2012-01-10 11:50:08,168 TRACE ModelFactory addObject
2012-01-10 11:50:08,168 TRACE ModelFactory addObject
2012-01-10 11:50:08,169 TRACE ModelFactory addObject
2012-01-10 11:50:08,170 TRACE ModelFactory addObject
2012-01-10 11:50:08,170 TRACE ModelFactory addObject
2012-01-10 11:50:08,171 TRACE ModelFactory addObject
2012-01-10 11:50:08,171 TRACE ModelFactory addObject
2012-01-10 11:50:08,171 INFO KBuildMinerMain$ === PostProcessing console-tools/Kbuild
2012-01-10 11:50:08,184 INFO KBuildMinerMain$ === PreProcessing coreutils/Kbuild
2012-01-10 11:50:08,184 INFO KBuildMinerMain$ === Processing coreutils/Kbuild
2012-01-10 11:50:08,186 TRACE ModelFactory addMakefile
2012-01-10 11:50:08,188 TRACE ModelFactory addObject
2012-01-10 11:50:08,188 TRACE ModelFactory addObject
2012-01-10 11:50:08,189 TRACE ModelFactory addObject
2012-01-10 11:50:08,189 TRACE ModelFactory addObject
2012-01-10 11:50:08,189 TRACE ModelFactory addObject
2012-01-10 11:50:08,190 TRACE ModelFactory addObject
2012-01-10 11:50:08,190 TRACE ModelFactory addObject
2012-01-10 11:50:08,190 TRACE ModelFactory addObject
2012-01-10 11:50:08,191 TRACE ModelFactory addObject
2012-01-10 11:50:08,191 TRACE ModelFactory addObject
2012-01-10 11:50:08,191 TRACE ModelFactory addObject
2012-01-10 11:50:08,192 TRACE ModelFactory addObject
2012-01-10 11:50:08,192 TRACE ModelFactory addObject
2012-01-10 11:50:08,192 TRACE ModelFactory addObject
2012-01-10 11:50:08,192 TRACE ModelFactory addObject
2012-01-10 11:50:08,193 TRACE ModelFactory addObject
2012-01-10 11:50:08,193 TRACE ModelFactory addObject
2012-01-10 11:50:08,194 TRACE ModelFactory addObject
2012-01-10 11:50:08,194 TRACE ModelFactory addObject
2012-01-10 11:50:08,194 TRACE ModelFactory addObject
2012-01-10 11:50:08,195 TRACE ModelFactory addObject
2012-01-10 11:50:08,195 TRACE ModelFactory addObject
2012-01-10 11:50:08,196 TRACE ModelFactory addObject
2012-01-10 11:50:08,196 TRACE ModelFactory addObject
2012-01-10 11:50:08,196 TRACE ModelFactory addObject
2012-01-10 11:50:08,197 TRACE ModelFactory addObject
2012-01-10 11:50:08,197 TRACE ModelFactory addObject
2012-01-10 11:50:08,197 TRACE ModelFactory addObject
2012-01-10 11:50:08,198 TRACE ModelFactory addObject
2012-01-10 11:50:08,198 TRACE ModelFactory addObject
2012-01-10 11:50:08,199 TRACE ModelFactory addObject
2012-01-10 11:50:08,199 TRACE ModelFactory addObject
2012-01-10 11:50:08,200 TRACE ModelFactory addObject
2012-01-10 11:50:08,200 TRACE ModelFactory addObject
2012-01-10 11:50:08,200 TRACE ModelFactory addObject
2012-01-10 11:50:08,201 TRACE ModelFactory addObject
2012-01-10 11:50:08,201 TRACE ModelFactory addObject
2012-01-10 11:50:08,202 TRACE ModelFactory addObject
2012-01-10 11:50:08,202 TRACE ModelFactory addObject
2012-01-10 11:50:08,202 TRACE ModelFactory addObject
2012-01-10 11:50:08,203 TRACE ModelFactory addObject
2012-01-10 11:50:08,203 TRACE ModelFactory addObject
2012-01-10 11:50:08,203 TRACE ModelFactory addObject
2012-01-10 11:50:08,204 TRACE ModelFactory addObject
2012-01-10 11:50:08,204 TRACE ModelFactory addObject
2012-01-10 11:50:08,205 TRACE ModelFactory addObject
2012-01-10 11:50:08,205 TRACE ModelFactory addObject
2012-01-10 11:50:08,205 TRACE ModelFactory addObject
2012-01-10 11:50:08,206 TRACE ModelFactory addObject
2012-01-10 11:50:08,206 TRACE ModelFactory addObject
2012-01-10 11:50:08,207 TRACE ModelFactory addObject
2012-01-10 11:50:08,207 TRACE ModelFactory addObject
2012-01-10 11:50:08,207 TRACE ModelFactory addObject
2012-01-10 11:50:08,208 TRACE ModelFactory addObject
2012-01-10 11:50:08,208 TRACE ModelFactory addObject
2012-01-10 11:50:08,209 TRACE ModelFactory addObject
2012-01-10 11:50:08,209 TRACE ModelFactory addObject
2012-01-10 11:50:08,209 TRACE ModelFactory addObject
2012-01-10 11:50:08,210 TRACE ModelFactory addObject
2012-01-10 11:50:08,210 TRACE ModelFactory addObject
2012-01-10 11:50:08,211 TRACE ModelFactory addObject
2012-01-10 11:50:08,211 TRACE ModelFactory addObject
2012-01-10 11:50:08,211 TRACE ModelFactory addObject
2012-01-10 11:50:08,212 TRACE ModelFactory addObject
2012-01-10 11:50:08,212 TRACE ModelFactory addObject
2012-01-10 11:50:08,212 TRACE ModelFactory addObject
2012-01-10 11:50:08,213 TRACE ModelFactory addObject
2012-01-10 11:50:08,213 TRACE ModelFactory addObject
2012-01-10 11:50:08,214 TRACE ModelFactory addObject
2012-01-10 11:50:08,214 TRACE ModelFactory addObject
2012-01-10 11:50:08,214 TRACE ModelFactory addObject
2012-01-10 11:50:08,215 TRACE ModelFactory addObject
2012-01-10 11:50:08,215 TRACE ModelFactory addObject
2012-01-10 11:50:08,216 TRACE ModelFactory addObject
2012-01-10 11:50:08,216 TRACE ModelFactory addObject
2012-01-10 11:50:08,216 TRACE ModelFactory addObject
2012-01-10 11:50:08,217 TRACE ModelFactory addObject
2012-01-10 11:50:08,217 TRACE ModelFactory addObject
2012-01-10 11:50:08,218 TRACE ModelFactory addObject
2012-01-10 11:50:08,218 TRACE ModelFactory addObject
2012-01-10 11:50:08,219 TRACE ModelFactory addObject
2012-01-10 11:50:08,219 TRACE ModelFactory addObject
2012-01-10 11:50:08,219 TRACE ModelFactory addObject
2012-01-10 11:50:08,220 TRACE ModelFactory addObject
2012-01-10 11:50:08,220 TRACE ModelFactory addObject
2012-01-10 11:50:08,221 TRACE ModelFactory addObject
2012-01-10 11:50:08,221 TRACE ModelFactory addObject
2012-01-10 11:50:08,222 TRACE ModelFactory addObject
2012-01-10 11:50:08,222 TRACE ModelFactory addObject
2012-01-10 11:50:08,222 TRACE ModelFactory addObject
2012-01-10 11:50:08,223 TRACE ModelFactory addObject
2012-01-10 11:50:08,223 TRACE ModelFactory addObject
2012-01-10 11:50:08,223 TRACE ModelFactory addObject
2012-01-10 11:50:08,224 TRACE ModelFactory addObject
2012-01-10 11:50:08,224 INFO KBuildMinerMain$ === PostProcessing coreutils/Kbuild
2012-01-10 11:50:08,276 INFO KBuildMinerMain$ === PreProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:50:08,277 INFO KBuildMinerMain$ === Processing coreutils/libcoreutils/Kbuild
2012-01-10 11:50:08,279 TRACE ModelFactory addObject
2012-01-10 11:50:08,279 TRACE ModelFactory addObject
2012-01-10 11:50:08,280 TRACE ModelFactory addObject
2012-01-10 11:50:08,281 TRACE ModelFactory addObject
2012-01-10 11:50:08,282 TRACE ModelFactory addObject
2012-01-10 11:50:08,282 INFO KBuildMinerMain$ === PostProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:50:08,289 INFO KBuildMinerMain$ === PreProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:50:08,290 INFO KBuildMinerMain$ === Processing coreutils/libcoreutils/Kbuild
2012-01-10 11:50:08,291 TRACE ModelFactory addObject
2012-01-10 11:50:08,292 TRACE ModelFactory addObject
2012-01-10 11:50:08,292 TRACE ModelFactory addObject
2012-01-10 11:50:08,292 TRACE ModelFactory addObject
2012-01-10 11:50:08,293 TRACE ModelFactory addObject
2012-01-10 11:50:08,293 INFO KBuildMinerMain$ === PostProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:50:08,295 INFO KBuildMinerMain$ === PreProcessing debianutils/Kbuild
2012-01-10 11:50:08,295 INFO KBuildMinerMain$ === Processing debianutils/Kbuild
2012-01-10 11:50:08,297 TRACE ModelFactory addObject
2012-01-10 11:50:08,297 TRACE ModelFactory addObject
2012-01-10 11:50:08,298 TRACE ModelFactory addObject
2012-01-10 11:50:08,298 TRACE ModelFactory addObject
2012-01-10 11:50:08,299 TRACE ModelFactory addObject
2012-01-10 11:50:08,299 INFO KBuildMinerMain$ === PostProcessing debianutils/Kbuild
2012-01-10 11:50:08,303 INFO KBuildMinerMain$ === PreProcessing e2fsprogs/Kbuild
2012-01-10 11:50:08,303 INFO KBuildMinerMain$ === Processing e2fsprogs/Kbuild
2012-01-10 11:50:08,305 TRACE ModelFactory addObject
2012-01-10 11:50:08,305 TRACE ModelFactory addObject
2012-01-10 11:50:08,305 TRACE ModelFactory addObject
2012-01-10 11:50:08,305 TRACE ModelFactory addObject
2012-01-10 11:50:08,306 TRACE ModelFactory addObject
2012-01-10 11:50:08,306 TRACE ModelFactory addObject
2012-01-10 11:50:08,306 INFO KBuildMinerMain$ === PostProcessing e2fsprogs/Kbuild
2012-01-10 11:50:08,315 INFO KBuildMinerMain$ === PreProcessing editors/Kbuild
2012-01-10 11:50:08,315 INFO KBuildMinerMain$ === Processing editors/Kbuild
2012-01-10 11:50:08,317 TRACE ModelFactory addObject
2012-01-10 11:50:08,318 TRACE ModelFactory addObject
2012-01-10 11:50:08,318 TRACE ModelFactory addObject
2012-01-10 11:50:08,319 TRACE ModelFactory addObject
2012-01-10 11:50:08,319 TRACE ModelFactory addObject
2012-01-10 11:50:08,320 TRACE ModelFactory addObject
2012-01-10 11:50:08,320 TRACE ModelFactory addObject
2012-01-10 11:50:08,320 INFO KBuildMinerMain$ === PostProcessing editors/Kbuild
2012-01-10 11:50:08,326 INFO KBuildMinerMain$ === PreProcessing findutils/Kbuild
2012-01-10 11:50:08,326 INFO KBuildMinerMain$ === Processing findutils/Kbuild
2012-01-10 11:50:08,328 TRACE ModelFactory addObject
2012-01-10 11:50:08,329 TRACE ModelFactory addObject
2012-01-10 11:50:08,329 TRACE ModelFactory addObject
2012-01-10 11:50:08,329 INFO KBuildMinerMain$ === PostProcessing findutils/Kbuild
2012-01-10 11:50:08,332 INFO KBuildMinerMain$ === PreProcessing init/Kbuild
2012-01-10 11:50:08,332 INFO KBuildMinerMain$ === Processing init/Kbuild
2012-01-10 11:50:08,334 TRACE ModelFactory addObject
2012-01-10 11:50:08,334 TRACE ModelFactory addObject
2012-01-10 11:50:08,334 TRACE ModelFactory addObject
2012-01-10 11:50:08,335 TRACE ModelFactory addObject
2012-01-10 11:50:08,335 INFO KBuildMinerMain$ === PostProcessing init/Kbuild
2012-01-10 11:50:08,338 INFO KBuildMinerMain$ === PreProcessing libbb/Kbuild
2012-01-10 11:50:08,338 INFO KBuildMinerMain$ === Processing libbb/Kbuild
2012-01-10 11:50:08,341 TRACE ModelFactory addObject
2012-01-10 11:50:08,341 TRACE ModelFactory addObject
2012-01-10 11:50:08,341 TRACE ModelFactory addObject
2012-01-10 11:50:08,342 TRACE ModelFactory addObject
2012-01-10 11:50:08,342 TRACE ModelFactory addObject
2012-01-10 11:50:08,342 TRACE ModelFactory addObject
2012-01-10 11:50:08,342 TRACE ModelFactory addObject
2012-01-10 11:50:08,343 TRACE ModelFactory addObject
2012-01-10 11:50:08,343 TRACE ModelFactory addObject
2012-01-10 11:50:08,343 TRACE ModelFactory addObject
2012-01-10 11:50:08,344 TRACE ModelFactory addObject
2012-01-10 11:50:08,344 TRACE ModelFactory addObject
2012-01-10 11:50:08,344 TRACE ModelFactory addObject
2012-01-10 11:50:08,344 TRACE ModelFactory addObject
2012-01-10 11:50:08,345 TRACE ModelFactory addObject
2012-01-10 11:50:08,345 TRACE ModelFactory addObject
2012-01-10 11:50:08,345 TRACE ModelFactory addObject
2012-01-10 11:50:08,346 TRACE ModelFactory addObject
2012-01-10 11:50:08,346 TRACE ModelFactory addObject
2012-01-10 11:50:08,346 TRACE ModelFactory addObject
2012-01-10 11:50:08,347 TRACE ModelFactory addObject
2012-01-10 11:50:08,347 TRACE ModelFactory addObject
2012-01-10 11:50:08,347 TRACE ModelFactory addObject
2012-01-10 11:50:08,347 TRACE ModelFactory addObject
2012-01-10 11:50:08,348 TRACE ModelFactory addObject
2012-01-10 11:50:08,348 TRACE ModelFactory addObject
2012-01-10 11:50:08,348 TRACE ModelFactory addObject
2012-01-10 11:50:08,349 TRACE ModelFactory addObject
2012-01-10 11:50:08,349 TRACE ModelFactory addObject
2012-01-10 11:50:08,349 TRACE ModelFactory addObject
2012-01-10 11:50:08,349 TRACE ModelFactory addObject
2012-01-10 11:50:08,350 TRACE ModelFactory addObject
2012-01-10 11:50:08,350 TRACE ModelFactory addObject
2012-01-10 11:50:08,350 TRACE ModelFactory addObject
2012-01-10 11:50:08,351 TRACE ModelFactory addObject
2012-01-10 11:50:08,351 TRACE ModelFactory addObject
2012-01-10 11:50:08,351 TRACE ModelFactory addObject
2012-01-10 11:50:08,352 TRACE ModelFactory addObject
2012-01-10 11:50:08,352 TRACE ModelFactory addObject
2012-01-10 11:50:08,352 TRACE ModelFactory addObject
2012-01-10 11:50:08,352 TRACE ModelFactory addObject
2012-01-10 11:50:08,353 TRACE ModelFactory addObject
2012-01-10 11:50:08,353 TRACE ModelFactory addObject
2012-01-10 11:50:08,353 TRACE ModelFactory addObject
2012-01-10 11:50:08,354 TRACE ModelFactory addObject
2012-01-10 11:50:08,354 TRACE ModelFactory addObject
2012-01-10 11:50:08,354 TRACE ModelFactory addObject
2012-01-10 11:50:08,355 TRACE ModelFactory addObject
2012-01-10 11:50:08,355 TRACE ModelFactory addObject
2012-01-10 11:50:08,355 TRACE ModelFactory addObject
2012-01-10 11:50:08,355 TRACE ModelFactory addObject
2012-01-10 11:50:08,356 TRACE ModelFactory addObject
2012-01-10 11:50:08,356 TRACE ModelFactory addObject
2012-01-10 11:50:08,356 TRACE ModelFactory addObject
2012-01-10 11:50:08,357 TRACE ModelFactory addObject
2012-01-10 11:50:08,357 TRACE ModelFactory addObject
2012-01-10 11:50:08,357 TRACE ModelFactory addObject
2012-01-10 11:50:08,358 TRACE ModelFactory addObject
2012-01-10 11:50:08,358 TRACE ModelFactory addObject
2012-01-10 11:50:08,358 TRACE ModelFactory addObject
2012-01-10 11:50:08,359 TRACE ModelFactory addObject
2012-01-10 11:50:08,359 TRACE ModelFactory addObject
2012-01-10 11:50:08,359 TRACE ModelFactory addObject
2012-01-10 11:50:08,360 TRACE ModelFactory addObject
2012-01-10 11:50:08,360 TRACE ModelFactory addObject
2012-01-10 11:50:08,360 TRACE ModelFactory addObject
2012-01-10 11:50:08,361 TRACE ModelFactory addObject
2012-01-10 11:50:08,361 TRACE ModelFactory addObject
2012-01-10 11:50:08,361 TRACE ModelFactory addObject
2012-01-10 11:50:08,362 TRACE ModelFactory addObject
2012-01-10 11:50:08,362 TRACE ModelFactory addObject
2012-01-10 11:50:08,362 TRACE ModelFactory addObject
2012-01-10 11:50:08,363 TRACE ModelFactory addObject
2012-01-10 11:50:08,363 TRACE ModelFactory addObject
2012-01-10 11:50:08,363 TRACE ModelFactory addObject
2012-01-10 11:50:08,363 TRACE ModelFactory addObject
2012-01-10 11:50:08,364 TRACE ModelFactory addObject
2012-01-10 11:50:08,364 TRACE ModelFactory addObject
2012-01-10 11:50:08,364 TRACE ModelFactory addObject
2012-01-10 11:50:08,364 TRACE ModelFactory addObject
2012-01-10 11:50:08,365 TRACE ModelFactory addObject
2012-01-10 11:50:08,365 TRACE ModelFactory addObject
2012-01-10 11:50:08,365 TRACE ModelFactory addObject
2012-01-10 11:50:08,366 TRACE ModelFactory addObject
2012-01-10 11:50:08,366 TRACE ModelFactory addObject
2012-01-10 11:50:08,366 TRACE ModelFactory addObject
2012-01-10 11:50:08,366 TRACE ModelFactory addObject
2012-01-10 11:50:08,367 TRACE ModelFactory addObject
2012-01-10 11:50:08,367 TRACE ModelFactory addObject
2012-01-10 11:50:08,367 TRACE ModelFactory addObject
2012-01-10 11:50:08,368 TRACE ModelFactory addObject
2012-01-10 11:50:08,368 TRACE ModelFactory addObject
2012-01-10 11:50:08,368 TRACE ModelFactory addObject
2012-01-10 11:50:08,368 TRACE ModelFactory addObject
2012-01-10 11:50:08,369 TRACE ModelFactory addObject
2012-01-10 11:50:08,369 TRACE ModelFactory addObject
2012-01-10 11:50:08,369 TRACE ModelFactory addObject
2012-01-10 11:50:08,370 TRACE ModelFactory addObject
2012-01-10 11:50:08,370 TRACE ModelFactory addObject
2012-01-10 11:50:08,370 TRACE ModelFactory addObject
2012-01-10 11:50:08,370 TRACE ModelFactory addObject
2012-01-10 11:50:08,371 TRACE ModelFactory addObject
2012-01-10 11:50:08,371 TRACE ModelFactory addObject
2012-01-10 11:50:08,371 TRACE ModelFactory addObject
2012-01-10 11:50:08,372 TRACE ModelFactory addObject
2012-01-10 11:50:08,372 TRACE ModelFactory addObject
2012-01-10 11:50:08,372 TRACE ModelFactory addObject
2012-01-10 11:50:08,372 TRACE ModelFactory addObject
2012-01-10 11:50:08,373 TRACE ModelFactory addObject
2012-01-10 11:50:08,373 TRACE ModelFactory addObject
2012-01-10 11:50:08,373 TRACE ModelFactory addObject
2012-01-10 11:50:08,374 TRACE ModelFactory addObject
2012-01-10 11:50:08,374 TRACE ModelFactory addObject
2012-01-10 11:50:08,374 TRACE ModelFactory addObject
2012-01-10 11:50:08,375 TRACE ModelFactory addObject
2012-01-10 11:50:08,375 TRACE ModelFactory addObject
2012-01-10 11:50:08,375 TRACE ModelFactory addObject
2012-01-10 11:50:08,376 TRACE ModelFactory addObject
2012-01-10 11:50:08,376 TRACE ModelFactory addObject
2012-01-10 11:50:08,376 TRACE ModelFactory addObject
2012-01-10 11:50:08,376 TRACE ModelFactory addObject
2012-01-10 11:50:08,377 TRACE ModelFactory addObject
2012-01-10 11:50:08,377 TRACE ModelFactory addObject
2012-01-10 11:50:08,377 TRACE ModelFactory addObject
2012-01-10 11:50:08,378 TRACE ModelFactory addObject
2012-01-10 11:50:08,378 TRACE ModelFactory addObject
2012-01-10 11:50:08,378 TRACE ModelFactory addObject
2012-01-10 11:50:08,379 TRACE ModelFactory addObject
2012-01-10 11:50:08,379 TRACE ModelFactory addObject
2012-01-10 11:50:08,379 TRACE ModelFactory addObject
2012-01-10 11:50:08,379 TRACE ModelFactory addObject
2012-01-10 11:50:08,379 TRACE ModelFactory addObject
2012-01-10 11:50:08,380 TRACE ModelFactory addObject
2012-01-10 11:50:08,380 TRACE ModelFactory addObject
2012-01-10 11:50:08,380 TRACE ModelFactory addObject
2012-01-10 11:50:08,380 TRACE ModelFactory addObject
2012-01-10 11:50:08,381 TRACE ModelFactory addObject
2012-01-10 11:50:08,381 TRACE ModelFactory addObject
2012-01-10 11:50:08,381 TRACE ModelFactory addObject
2012-01-10 11:50:08,381 TRACE ModelFactory addObject
2012-01-10 11:50:08,381 TRACE ModelFactory addObject
2012-01-10 11:50:08,382 TRACE ModelFactory addObject
2012-01-10 11:50:08,382 TRACE ModelFactory addObject
2012-01-10 11:50:08,382 TRACE ModelFactory addObject
2012-01-10 11:50:08,383 TRACE ModelFactory addObject
2012-01-10 11:50:08,383 TRACE ModelFactory addObject
2012-01-10 11:50:08,383 TRACE ModelFactory addObject
2012-01-10 11:50:08,383 TRACE ModelFactory addObject
2012-01-10 11:50:08,384 TRACE ModelFactory addObject
2012-01-10 11:50:08,384 TRACE ModelFactory addObject
2012-01-10 11:50:08,384 TRACE ModelFactory addObject
2012-01-10 11:50:08,384 TRACE ModelFactory addObject
2012-01-10 11:50:08,385 TRACE ModelFactory addObject
2012-01-10 11:50:08,385 TRACE ModelFactory addObject
2012-01-10 11:50:08,385 TRACE ModelFactory addObject
2012-01-10 11:50:08,386 TRACE ModelFactory addObject
2012-01-10 11:50:08,386 TRACE ModelFactory addObject
2012-01-10 11:50:08,386 TRACE ModelFactory addObject
2012-01-10 11:50:08,386 TRACE ModelFactory addObject
2012-01-10 11:50:08,387 TRACE ModelFactory addObject
2012-01-10 11:50:08,387 TRACE ModelFactory addObject
2012-01-10 11:50:08,387 TRACE ModelFactory addObject
2012-01-10 11:50:08,387 TRACE ModelFactory addObject
2012-01-10 11:50:08,388 TRACE ModelFactory addObject
2012-01-10 11:50:08,388 TRACE ModelFactory addObject
2012-01-10 11:50:08,388 TRACE ModelFactory addObject
2012-01-10 11:50:08,388 INFO KBuildMinerMain$ === PostProcessing libbb/Kbuild
2012-01-10 11:50:08,461 INFO KBuildMinerMain$ === PreProcessing libpwdgrp/Kbuild
2012-01-10 11:50:08,461 INFO KBuildMinerMain$ === Processing libpwdgrp/Kbuild
2012-01-10 11:50:08,463 TRACE ModelFactory addObject
2012-01-10 11:50:08,464 TRACE ModelFactory addObject
2012-01-10 11:50:08,464 INFO KBuildMinerMain$ === PostProcessing libpwdgrp/Kbuild
2012-01-10 11:50:08,467 INFO KBuildMinerMain$ === PreProcessing loginutils/Kbuild
2012-01-10 11:50:08,468 INFO KBuildMinerMain$ === Processing loginutils/Kbuild
2012-01-10 11:50:08,470 TRACE ModelFactory addObject
2012-01-10 11:50:08,471 TRACE ModelFactory addObject
2012-01-10 11:50:08,472 TRACE ModelFactory addObject
2012-01-10 11:50:08,473 TRACE ModelFactory addObject
2012-01-10 11:50:08,473 TRACE ModelFactory addObject
2012-01-10 11:50:08,474 TRACE ModelFactory addObject
2012-01-10 11:50:08,474 TRACE ModelFactory addObject
2012-01-10 11:50:08,475 TRACE ModelFactory addObject
2012-01-10 11:50:08,476 TRACE ModelFactory addObject
2012-01-10 11:50:08,476 TRACE ModelFactory addObject
2012-01-10 11:50:08,477 TRACE ModelFactory addObject
2012-01-10 11:50:08,477 TRACE ModelFactory addObject
2012-01-10 11:50:08,478 TRACE ModelFactory addObject
2012-01-10 11:50:08,478 TRACE ModelFactory addObject
2012-01-10 11:50:08,478 INFO KBuildMinerMain$ === PostProcessing loginutils/Kbuild
2012-01-10 11:50:08,486 INFO KBuildMinerMain$ === PreProcessing mailutils/Kbuild
2012-01-10 11:50:08,487 INFO KBuildMinerMain$ === Processing mailutils/Kbuild
2012-01-10 11:50:08,488 TRACE ModelFactory addObject
2012-01-10 11:50:08,488 TRACE ModelFactory addObject
2012-01-10 11:50:08,489 TRACE ModelFactory addObject
2012-01-10 11:50:08,489 TRACE ModelFactory addObject
2012-01-10 11:50:08,489 TRACE ModelFactory addObject
2012-01-10 11:50:08,489 TRACE ModelFactory addObject
2012-01-10 11:50:08,490 TRACE ModelFactory addObject
2012-01-10 11:50:08,490 TRACE ModelFactory addObject
2012-01-10 11:50:08,490 INFO KBuildMinerMain$ === PostProcessing mailutils/Kbuild
2012-01-10 11:50:08,494 INFO KBuildMinerMain$ === PreProcessing miscutils/Kbuild
2012-01-10 11:50:08,494 INFO KBuildMinerMain$ === Processing miscutils/Kbuild
2012-01-10 11:50:08,496 TRACE ModelFactory addObject
2012-01-10 11:50:08,497 TRACE ModelFactory addObject
2012-01-10 11:50:08,497 TRACE ModelFactory addObject
2012-01-10 11:50:08,497 TRACE ModelFactory addObject
2012-01-10 11:50:08,498 TRACE ModelFactory addObject
2012-01-10 11:50:08,498 TRACE ModelFactory addObject
2012-01-10 11:50:08,498 TRACE ModelFactory addObject
2012-01-10 11:50:08,498 TRACE ModelFactory addObject
2012-01-10 11:50:08,499 TRACE ModelFactory addObject
2012-01-10 11:50:08,499 TRACE ModelFactory addObject
2012-01-10 11:50:08,499 TRACE ModelFactory addObject
2012-01-10 11:50:08,499 TRACE ModelFactory addObject
2012-01-10 11:50:08,499 TRACE ModelFactory addObject
2012-01-10 11:50:08,500 TRACE ModelFactory addObject
2012-01-10 11:50:08,500 TRACE ModelFactory addObject
2012-01-10 11:50:08,500 TRACE ModelFactory addObject
2012-01-10 11:50:08,500 TRACE ModelFactory addObject
2012-01-10 11:50:08,500 TRACE ModelFactory addObject
2012-01-10 11:50:08,501 TRACE ModelFactory addObject
2012-01-10 11:50:08,501 TRACE ModelFactory addObject
2012-01-10 11:50:08,501 TRACE ModelFactory addObject
2012-01-10 11:50:08,501 TRACE ModelFactory addObject
2012-01-10 11:50:08,502 TRACE ModelFactory addObject
2012-01-10 11:50:08,502 TRACE ModelFactory addObject
2012-01-10 11:50:08,502 TRACE ModelFactory addObject
2012-01-10 11:50:08,503 TRACE ModelFactory addObject
2012-01-10 11:50:08,503 TRACE ModelFactory addObject
2012-01-10 11:50:08,503 TRACE ModelFactory addObject
2012-01-10 11:50:08,504 TRACE ModelFactory addObject
2012-01-10 11:50:08,504 TRACE ModelFactory addObject
2012-01-10 11:50:08,504 TRACE ModelFactory addObject
2012-01-10 11:50:08,505 TRACE ModelFactory addObject
2012-01-10 11:50:08,505 TRACE ModelFactory addObject
2012-01-10 11:50:08,505 TRACE ModelFactory addObject
2012-01-10 11:50:08,505 TRACE ModelFactory addObject
2012-01-10 11:50:08,506 TRACE ModelFactory addObject
2012-01-10 11:50:08,506 TRACE ModelFactory addObject
2012-01-10 11:50:08,506 TRACE ModelFactory addObject
2012-01-10 11:50:08,506 TRACE ModelFactory addObject
2012-01-10 11:50:08,507 TRACE ModelFactory addObject
2012-01-10 11:50:08,507 TRACE ModelFactory addObject
2012-01-10 11:50:08,507 TRACE ModelFactory addObject
2012-01-10 11:50:08,507 TRACE ModelFactory addObject
2012-01-10 11:50:08,507 TRACE ModelFactory addObject
2012-01-10 11:50:08,508 TRACE ModelFactory addObject
2012-01-10 11:50:08,508 TRACE ModelFactory addObject
2012-01-10 11:50:08,508 TRACE ModelFactory addObject
2012-01-10 11:50:08,508 TRACE ModelFactory addObject
2012-01-10 11:50:08,508 TRACE ModelFactory addObject
2012-01-10 11:50:08,508 TRACE ModelFactory addObject
2012-01-10 11:50:08,509 TRACE ModelFactory addObject
2012-01-10 11:50:08,509 INFO KBuildMinerMain$ === PostProcessing miscutils/Kbuild
2012-01-10 11:50:08,535 INFO KBuildMinerMain$ === PreProcessing modutils/Kbuild
2012-01-10 11:50:08,535 INFO KBuildMinerMain$ === Processing modutils/Kbuild
2012-01-10 11:50:08,537 TRACE ModelFactory addObject
2012-01-10 11:50:08,538 TRACE ModelFactory addObject
2012-01-10 11:50:08,538 TRACE ModelFactory addObject
2012-01-10 11:50:08,538 TRACE ModelFactory addObject
2012-01-10 11:50:08,538 TRACE ModelFactory addObject
2012-01-10 11:50:08,539 TRACE ModelFactory addObject
2012-01-10 11:50:08,539 TRACE ModelFactory addObject
2012-01-10 11:50:08,539 TRACE ModelFactory addObject
2012-01-10 11:50:08,539 TRACE ModelFactory addObject
2012-01-10 11:50:08,540 TRACE ModelFactory addObject
2012-01-10 11:50:08,540 TRACE ModelFactory addObject
2012-01-10 11:50:08,540 TRACE ModelFactory addObject
2012-01-10 11:50:08,540 TRACE ModelFactory addObject
2012-01-10 11:50:08,541 TRACE ModelFactory addObject
2012-01-10 11:50:08,541 INFO KBuildMinerMain$ === PostProcessing modutils/Kbuild
2012-01-10 11:50:08,547 INFO KBuildMinerMain$ === PreProcessing networking/Kbuild
2012-01-10 11:50:08,547 INFO KBuildMinerMain$ === Processing networking/Kbuild
2012-01-10 11:50:08,549 TRACE ModelFactory addObject
2012-01-10 11:50:08,549 TRACE ModelFactory addObject
2012-01-10 11:50:08,549 TRACE ModelFactory addObject
2012-01-10 11:50:08,550 TRACE ModelFactory addObject
2012-01-10 11:50:08,550 TRACE ModelFactory addObject
2012-01-10 11:50:08,550 TRACE ModelFactory addObject
2012-01-10 11:50:08,550 TRACE ModelFactory addObject
2012-01-10 11:50:08,550 TRACE ModelFactory addObject
2012-01-10 11:50:08,551 TRACE ModelFactory addObject
2012-01-10 11:50:08,551 TRACE ModelFactory addObject
2012-01-10 11:50:08,551 TRACE ModelFactory addObject
2012-01-10 11:50:08,551 TRACE ModelFactory addObject
2012-01-10 11:50:08,551 TRACE ModelFactory addObject
2012-01-10 11:50:08,552 TRACE ModelFactory addObject
2012-01-10 11:50:08,552 TRACE ModelFactory addObject
2012-01-10 11:50:08,552 TRACE ModelFactory addObject
2012-01-10 11:50:08,552 TRACE ModelFactory addObject
2012-01-10 11:50:08,553 TRACE ModelFactory addObject
2012-01-10 11:50:08,553 TRACE ModelFactory addObject
2012-01-10 11:50:08,553 TRACE ModelFactory addObject
2012-01-10 11:50:08,553 TRACE ModelFactory addObject
2012-01-10 11:50:08,553 TRACE ModelFactory addObject
2012-01-10 11:50:08,553 TRACE ModelFactory addObject
2012-01-10 11:50:08,554 TRACE ModelFactory addObject
2012-01-10 11:50:08,554 TRACE ModelFactory addObject
2012-01-10 11:50:08,554 TRACE ModelFactory addObject
2012-01-10 11:50:08,554 TRACE ModelFactory addObject
2012-01-10 11:50:08,554 TRACE ModelFactory addObject
2012-01-10 11:50:08,555 TRACE ModelFactory addObject
2012-01-10 11:50:08,555 TRACE ModelFactory addObject
2012-01-10 11:50:08,555 TRACE ModelFactory addObject
2012-01-10 11:50:08,555 TRACE ModelFactory addObject
2012-01-10 11:50:08,555 TRACE ModelFactory addObject
2012-01-10 11:50:08,556 TRACE ModelFactory addObject
2012-01-10 11:50:08,556 TRACE ModelFactory addObject
2012-01-10 11:50:08,556 TRACE ModelFactory addObject
2012-01-10 11:50:08,556 TRACE ModelFactory addObject
2012-01-10 11:50:08,557 TRACE ModelFactory addObject
2012-01-10 11:50:08,557 TRACE ModelFactory addObject
2012-01-10 11:50:08,557 TRACE ModelFactory addObject
2012-01-10 11:50:08,557 TRACE ModelFactory addObject
2012-01-10 11:50:08,557 TRACE ModelFactory addObject
2012-01-10 11:50:08,558 TRACE ModelFactory addObject
2012-01-10 11:50:08,558 TRACE ModelFactory addObject
2012-01-10 11:50:08,558 TRACE ModelFactory addObject
2012-01-10 11:50:08,558 TRACE ModelFactory addObject
2012-01-10 11:50:08,558 TRACE ModelFactory addObject
2012-01-10 11:50:08,558 TRACE ModelFactory addObject
2012-01-10 11:50:08,558 INFO KBuildMinerMain$ === PostProcessing networking/Kbuild
2012-01-10 11:50:08,581 INFO KBuildMinerMain$ === PreProcessing networking/libiproute/Kbuild
2012-01-10 11:50:08,582 INFO KBuildMinerMain$ === Processing networking/libiproute/Kbuild
2012-01-10 11:50:08,584 TRACE ModelFactory addObject
2012-01-10 11:50:08,585 TRACE ModelFactory addObject
2012-01-10 11:50:08,585 TRACE ModelFactory addObject
2012-01-10 11:50:08,585 TRACE ModelFactory addObject
2012-01-10 11:50:08,585 TRACE ModelFactory addObject
2012-01-10 11:50:08,585 TRACE ModelFactory addObject
2012-01-10 11:50:08,585 TRACE ModelFactory addObject
2012-01-10 11:50:08,585 TRACE ModelFactory addObject
2012-01-10 11:50:08,585 TRACE ModelFactory addObject
2012-01-10 11:50:08,585 TRACE ModelFactory addObject
2012-01-10 11:50:08,586 TRACE ModelFactory addObject
2012-01-10 11:50:08,586 TRACE ModelFactory addObject
2012-01-10 11:50:08,586 TRACE ModelFactory addObject
2012-01-10 11:50:08,586 TRACE ModelFactory addObject
2012-01-10 11:50:08,587 TRACE ModelFactory addObject
2012-01-10 11:50:08,587 TRACE ModelFactory addObject
2012-01-10 11:50:08,587 TRACE ModelFactory addObject
2012-01-10 11:50:08,587 TRACE ModelFactory addObject
2012-01-10 11:50:08,588 TRACE ModelFactory addObject
2012-01-10 11:50:08,588 TRACE ModelFactory addObject
2012-01-10 11:50:08,588 TRACE ModelFactory addObject
2012-01-10 11:50:08,588 TRACE ModelFactory addObject
2012-01-10 11:50:08,588 TRACE ModelFactory addObject
2012-01-10 11:50:08,588 TRACE ModelFactory addObject
2012-01-10 11:50:08,588 TRACE ModelFactory addObject
2012-01-10 11:50:08,588 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,589 TRACE ModelFactory addObject
2012-01-10 11:50:08,590 TRACE ModelFactory addObject
2012-01-10 11:50:08,590 TRACE ModelFactory addObject
2012-01-10 11:50:08,590 TRACE ModelFactory addObject
2012-01-10 11:50:08,590 TRACE ModelFactory addObject
2012-01-10 11:50:08,590 INFO KBuildMinerMain$ === PostProcessing networking/libiproute/Kbuild
2012-01-10 11:50:08,600 INFO KBuildMinerMain$ === PreProcessing networking/udhcp/Kbuild
2012-01-10 11:50:08,600 INFO KBuildMinerMain$ === Processing networking/udhcp/Kbuild
2012-01-10 11:50:08,602 TRACE ModelFactory addObject
2012-01-10 11:50:08,602 TRACE ModelFactory addObject
2012-01-10 11:50:08,602 TRACE ModelFactory addObject
2012-01-10 11:50:08,602 TRACE ModelFactory addObject
2012-01-10 11:50:08,602 TRACE ModelFactory addObject
2012-01-10 11:50:08,602 TRACE ModelFactory addObject
2012-01-10 11:50:08,602 TRACE ModelFactory addObject
2012-01-10 11:50:08,602 TRACE ModelFactory addObject
2012-01-10 11:50:08,603 TRACE ModelFactory addObject
2012-01-10 11:50:08,603 TRACE ModelFactory addObject
2012-01-10 11:50:08,603 TRACE ModelFactory addObject
2012-01-10 11:50:08,603 TRACE ModelFactory addObject
2012-01-10 11:50:08,603 TRACE ModelFactory addObject
2012-01-10 11:50:08,603 TRACE ModelFactory addObject
2012-01-10 11:50:08,604 TRACE ModelFactory addObject
2012-01-10 11:50:08,604 TRACE ModelFactory addObject
2012-01-10 11:50:08,604 TRACE ModelFactory addObject
2012-01-10 11:50:08,604 TRACE ModelFactory addObject
2012-01-10 11:50:08,604 TRACE ModelFactory addObject
2012-01-10 11:50:08,604 TRACE ModelFactory addObject
2012-01-10 11:50:08,605 TRACE ModelFactory addObject
2012-01-10 11:50:08,605 TRACE ModelFactory addObject
2012-01-10 11:50:08,605 INFO KBuildMinerMain$ === PostProcessing networking/udhcp/Kbuild
2012-01-10 11:50:08,618 INFO KBuildMinerMain$ === PreProcessing printutils/Kbuild
2012-01-10 11:50:08,619 INFO KBuildMinerMain$ === Processing printutils/Kbuild
2012-01-10 11:50:08,621 TRACE ModelFactory addObject
2012-01-10 11:50:08,622 TRACE ModelFactory addObject
2012-01-10 11:50:08,622 TRACE ModelFactory addObject
2012-01-10 11:50:08,623 INFO KBuildMinerMain$ === PostProcessing printutils/Kbuild
2012-01-10 11:50:08,625 INFO KBuildMinerMain$ === PreProcessing procps/Kbuild
2012-01-10 11:50:08,626 INFO KBuildMinerMain$ === Processing procps/Kbuild
2012-01-10 11:50:08,628 TRACE ModelFactory addObject
2012-01-10 11:50:08,628 TRACE ModelFactory addObject
2012-01-10 11:50:08,629 TRACE ModelFactory addObject
2012-01-10 11:50:08,629 TRACE ModelFactory addObject
2012-01-10 11:50:08,629 TRACE ModelFactory addObject
2012-01-10 11:50:08,629 TRACE ModelFactory addObject
2012-01-10 11:50:08,629 TRACE ModelFactory addObject
2012-01-10 11:50:08,630 TRACE ModelFactory addObject
2012-01-10 11:50:08,630 TRACE ModelFactory addObject
2012-01-10 11:50:08,630 TRACE ModelFactory addObject
2012-01-10 11:50:08,630 TRACE ModelFactory addObject
2012-01-10 11:50:08,630 TRACE ModelFactory addObject
2012-01-10 11:50:08,630 TRACE ModelFactory addObject
2012-01-10 11:50:08,630 TRACE ModelFactory addObject
2012-01-10 11:50:08,631 TRACE ModelFactory addObject
2012-01-10 11:50:08,631 TRACE ModelFactory addObject
2012-01-10 11:50:08,631 TRACE ModelFactory addObject
2012-01-10 11:50:08,631 TRACE ModelFactory addObject
2012-01-10 11:50:08,632 TRACE ModelFactory addObject
2012-01-10 11:50:08,632 TRACE ModelFactory addObject
2012-01-10 11:50:08,632 TRACE ModelFactory addObject
2012-01-10 11:50:08,632 INFO KBuildMinerMain$ === PostProcessing procps/Kbuild
2012-01-10 11:50:08,643 INFO KBuildMinerMain$ === PreProcessing runit/Kbuild
2012-01-10 11:50:08,644 INFO KBuildMinerMain$ === Processing runit/Kbuild
2012-01-10 11:50:08,646 TRACE ModelFactory addObject
2012-01-10 11:50:08,646 TRACE ModelFactory addObject
2012-01-10 11:50:08,646 TRACE ModelFactory addObject
2012-01-10 11:50:08,647 TRACE ModelFactory addObject
2012-01-10 11:50:08,647 TRACE ModelFactory addObject
2012-01-10 11:50:08,647 TRACE ModelFactory addObject
2012-01-10 11:50:08,648 TRACE ModelFactory addObject
2012-01-10 11:50:08,648 TRACE ModelFactory addObject
2012-01-10 11:50:08,648 TRACE ModelFactory addObject
2012-01-10 11:50:08,648 INFO KBuildMinerMain$ === PostProcessing runit/Kbuild
2012-01-10 11:50:08,652 INFO KBuildMinerMain$ === PreProcessing selinux/Kbuild
2012-01-10 11:50:08,652 INFO KBuildMinerMain$ === Processing selinux/Kbuild
2012-01-10 11:50:08,654 TRACE ModelFactory addObject
2012-01-10 11:50:08,654 TRACE ModelFactory addObject
2012-01-10 11:50:08,655 TRACE ModelFactory addObject
2012-01-10 11:50:08,655 TRACE ModelFactory addObject
2012-01-10 11:50:08,655 TRACE ModelFactory addObject
2012-01-10 11:50:08,656 TRACE ModelFactory addObject
2012-01-10 11:50:08,656 TRACE ModelFactory addObject
2012-01-10 11:50:08,656 TRACE ModelFactory addObject
2012-01-10 11:50:08,656 TRACE ModelFactory addObject
2012-01-10 11:50:08,657 TRACE ModelFactory addObject
2012-01-10 11:50:08,657 TRACE ModelFactory addObject
2012-01-10 11:50:08,657 TRACE ModelFactory addObject
2012-01-10 11:50:08,657 INFO KBuildMinerMain$ === PostProcessing selinux/Kbuild
2012-01-10 11:50:08,664 INFO KBuildMinerMain$ === PreProcessing shell/Kbuild
2012-01-10 11:50:08,664 INFO KBuildMinerMain$ === Processing shell/Kbuild
2012-01-10 11:50:08,666 TRACE ModelFactory addObject
2012-01-10 11:50:08,666 TRACE ModelFactory addObject
2012-01-10 11:50:08,666 TRACE ModelFactory addObject
2012-01-10 11:50:08,666 TRACE ModelFactory addObject
2012-01-10 11:50:08,666 TRACE ModelFactory addObject
2012-01-10 11:50:08,667 TRACE ModelFactory addObject
2012-01-10 11:50:08,667 TRACE ModelFactory addObject
2012-01-10 11:50:08,667 TRACE ModelFactory addObject
2012-01-10 11:50:08,667 TRACE ModelFactory addObject
2012-01-10 11:50:08,668 TRACE ModelFactory addObject
2012-01-10 11:50:08,668 INFO KBuildMinerMain$ === PostProcessing shell/Kbuild
2012-01-10 11:50:08,673 INFO KBuildMinerMain$ === PreProcessing sysklogd/Kbuild
2012-01-10 11:50:08,673 INFO KBuildMinerMain$ === Processing sysklogd/Kbuild
2012-01-10 11:50:08,675 TRACE ModelFactory addObject
2012-01-10 11:50:08,676 TRACE ModelFactory addObject
2012-01-10 11:50:08,676 TRACE ModelFactory addObject
2012-01-10 11:50:08,676 TRACE ModelFactory addObject
2012-01-10 11:50:08,676 INFO KBuildMinerMain$ === PostProcessing sysklogd/Kbuild
2012-01-10 11:50:08,679 INFO KBuildMinerMain$ === PreProcessing util-linux/Kbuild
2012-01-10 11:50:08,679 INFO KBuildMinerMain$ === Processing util-linux/Kbuild
2012-01-10 11:50:08,681 TRACE ModelFactory addObject
2012-01-10 11:50:08,681 TRACE ModelFactory addObject
2012-01-10 11:50:08,682 TRACE ModelFactory addObject
2012-01-10 11:50:08,682 TRACE ModelFactory addObject
2012-01-10 11:50:08,682 TRACE ModelFactory addObject
2012-01-10 11:50:08,683 TRACE ModelFactory addObject
2012-01-10 11:50:08,683 TRACE ModelFactory addObject
2012-01-10 11:50:08,683 TRACE ModelFactory addObject
2012-01-10 11:50:08,684 TRACE ModelFactory addObject
2012-01-10 11:50:08,684 TRACE ModelFactory addObject
2012-01-10 11:50:08,685 TRACE ModelFactory addObject
2012-01-10 11:50:08,685 TRACE ModelFactory addObject
2012-01-10 11:50:08,685 TRACE ModelFactory addObject
2012-01-10 11:50:08,685 TRACE ModelFactory addObject
2012-01-10 11:50:08,686 TRACE ModelFactory addObject
2012-01-10 11:50:08,686 TRACE ModelFactory addObject
2012-01-10 11:50:08,686 TRACE ModelFactory addObject
2012-01-10 11:50:08,687 TRACE ModelFactory addObject
2012-01-10 11:50:08,687 TRACE ModelFactory addObject
2012-01-10 11:50:08,687 TRACE ModelFactory addObject
2012-01-10 11:50:08,688 TRACE ModelFactory addObject
2012-01-10 11:50:08,688 TRACE ModelFactory addObject
2012-01-10 11:50:08,688 TRACE ModelFactory addObject
2012-01-10 11:50:08,689 TRACE ModelFactory addObject
2012-01-10 11:50:08,689 TRACE ModelFactory addObject
2012-01-10 11:50:08,689 TRACE ModelFactory addObject
2012-01-10 11:50:08,689 TRACE ModelFactory addObject
2012-01-10 11:50:08,689 TRACE ModelFactory addObject
2012-01-10 11:50:08,690 TRACE ModelFactory addObject
2012-01-10 11:50:08,690 TRACE ModelFactory addObject
2012-01-10 11:50:08,690 TRACE ModelFactory addObject
2012-01-10 11:50:08,690 TRACE ModelFactory addObject
2012-01-10 11:50:08,690 TRACE ModelFactory addObject
2012-01-10 11:50:08,691 TRACE ModelFactory addObject
2012-01-10 11:50:08,691 TRACE ModelFactory addObject
2012-01-10 11:50:08,691 TRACE ModelFactory addObject
2012-01-10 11:50:08,691 TRACE ModelFactory addObject
2012-01-10 11:50:08,691 TRACE ModelFactory addObject
2012-01-10 11:50:08,692 TRACE ModelFactory addObject
2012-01-10 11:50:08,692 TRACE ModelFactory addObject
2012-01-10 11:50:08,692 INFO KBuildMinerMain$ === PostProcessing util-linux/Kbuild
2012-01-10 11:50:08,714 INFO KBuildMinerMain$ === PreProcessing util-linux/volume_id/Kbuild
2012-01-10 11:50:08,714 INFO KBuildMinerMain$ === Processing util-linux/volume_id/Kbuild
2012-01-10 11:50:08,717 TRACE ModelFactory addObject
2012-01-10 11:50:08,718 TRACE ModelFactory addObject
2012-01-10 11:50:08,719 TRACE ModelFactory addObject
2012-01-10 11:50:08,719 TRACE ModelFactory addObject
2012-01-10 11:50:08,720 TRACE ModelFactory addObject
2012-01-10 11:50:08,720 TRACE ModelFactory addObject
2012-01-10 11:50:08,721 TRACE ModelFactory addObject
2012-01-10 11:50:08,722 TRACE ModelFactory addObject
2012-01-10 11:50:08,723 TRACE ModelFactory addObject
2012-01-10 11:50:08,724 TRACE ModelFactory addObject
2012-01-10 11:50:08,725 TRACE ModelFactory addObject
2012-01-10 11:50:08,725 TRACE ModelFactory addObject
2012-01-10 11:50:08,726 TRACE ModelFactory addObject
2012-01-10 11:50:08,727 TRACE ModelFactory addObject
2012-01-10 11:50:08,728 TRACE ModelFactory addObject
2012-01-10 11:50:08,729 TRACE ModelFactory addObject
2012-01-10 11:50:08,729 TRACE ModelFactory addObject
2012-01-10 11:50:08,730 TRACE ModelFactory addObject
2012-01-10 11:50:08,730 TRACE ModelFactory addObject
2012-01-10 11:50:08,731 TRACE ModelFactory addObject
2012-01-10 11:50:08,731 TRACE ModelFactory addObject
2012-01-10 11:50:08,731 TRACE ModelFactory addObject
2012-01-10 11:50:08,732 INFO KBuildMinerMain$ === PostProcessing util-linux/volume_id/Kbuild
2012-01-10 11:50:08,759 INFO PersistenceManager$ Saving Build AST to: ast.xml
2012-01-10 11:50:09,616 INFO KBuildMinerMain$ Deriving file presence conditions...
2012-01-10 11:50:10,805 DEBUG PCDerivation$ Trying to find path for: [Object: applets]
2012-01-10 11:50:10,810 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> applets/applets.c, builtAs -> y, generated -> false, objectFile -> applets, listName -> obj)
2012-01-10 11:50:10,812 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> applets/applets.c, builtAs -> y, generated -> false, objectFile -> applets, listName -> obj) is: MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild)
2012-01-10 11:50:10,812 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild)
2012-01-10 11:50:10,812 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:10,812 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,823 DEBUG PCDerivation$ Expression of path for object occurrence applets/applets.c: [TRUE]
2012-01-10 11:50:10,823 DEBUG PCDerivation$ Trying to find path for: [Object: data_skip]
2012-01-10 11:50:10,823 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES)
2012-01-10 11:50:10,823 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,823 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,825 TRACE PCDerivation$ trying to find variable reference, var: COMMON_FILES
2012-01-10 11:50:10,829 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:50:10,850 TRACE PCDerivation$    # collecting: [VariableReference: COMMON_FILES]
2012-01-10 11:50:10,850 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,851 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES) is: IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,851 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,851 TRACE PCDerivation$ parent of IfBNode --> Map(expr -> Unknown(!(lib-y == ""))) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,851 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,851 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,853 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,854 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:10,854 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,858 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,858 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_all]
2012-01-10 11:50:10,858 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES)
2012-01-10 11:50:10,858 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,858 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,858 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,858 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,858 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,859 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,859 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,859 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,859 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_stdout]
2012-01-10 11:50:10,859 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES)
2012-01-10 11:50:10,859 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,859 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,860 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,860 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,860 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,860 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,860 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,861 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_stdout.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,861 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_all]
2012-01-10 11:50:10,861 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES)
2012-01-10 11:50:10,861 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,861 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,861 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,861 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,861 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,861 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,862 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,862 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,862 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list]
2012-01-10 11:50:10,862 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES)
2012-01-10 11:50:10,862 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,862 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,862 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,862 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,862 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,863 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,863 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,863 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,863 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_reject_list]
2012-01-10 11:50:10,863 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES)
2012-01-10 11:50:10,863 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,864 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,864 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,864 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,864 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,864 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,864 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,865 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_reject_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,865 DEBUG PCDerivation$ Trying to find path for: [Object: header_skip]
2012-01-10 11:50:10,865 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES)
2012-01-10 11:50:10,865 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,865 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,865 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,865 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,865 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,865 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,866 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,866 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,866 DEBUG PCDerivation$ Trying to find path for: [Object: header_list]
2012-01-10 11:50:10,866 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES)
2012-01-10 11:50:10,866 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,866 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,866 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,866 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,866 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,867 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,867 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,867 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,867 DEBUG PCDerivation$ Trying to find path for: [Object: header_verbose_list]
2012-01-10 11:50:10,867 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES)
2012-01-10 11:50:10,867 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,867 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,867 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,868 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,868 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,868 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,868 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,868 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_verbose_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,869 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_read]
2012-01-10 11:50:10,869 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES)
2012-01-10 11:50:10,869 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,869 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,869 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,869 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,869 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,869 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,870 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,870 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_read.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,870 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_jump]
2012-01-10 11:50:10,870 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES)
2012-01-10 11:50:10,870 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,870 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,870 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,870 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,870 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,871 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,871 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,871 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_jump.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,871 DEBUG PCDerivation$ Trying to find path for: [Object: data_align]
2012-01-10 11:50:10,871 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES)
2012-01-10 11:50:10,871 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,871 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,871 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,871 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,871 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,872 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,872 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,872 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_align.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,872 DEBUG PCDerivation$ Trying to find path for: [Object: find_list_entry]
2012-01-10 11:50:10,872 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES)
2012-01-10 11:50:10,873 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,873 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,873 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,873 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,873 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,873 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,874 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,874 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/find_list_entry.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,874 DEBUG PCDerivation$ Trying to find path for: [Object: init_handle]
2012-01-10 11:50:10,874 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES)
2012-01-10 11:50:10,874 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,874 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,874 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,874 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,874 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,875 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,875 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,875 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/init_handle.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,875 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:50:10,875 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES)
2012-01-10 11:50:10,875 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,875 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,875 TRACE PCDerivation$ trying to find variable reference, var: DPKG_FILES
2012-01-10 11:50:10,875 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:50:10,880 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:50:10,880 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:50:10,887 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,887 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,887 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,887 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,888 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,888 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,888 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,888 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,888 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,889 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,889 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:50:10,889 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:50:10,889 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES)
2012-01-10 11:50:10,889 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,889 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,889 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,889 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,889 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,890 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,890 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,890 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,890 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,891 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,891 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:50:10,891 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:50:10,891 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES)
2012-01-10 11:50:10,891 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,891 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,892 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,892 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,892 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,892 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,892 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,892 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,893 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,893 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,893 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:50:10,893 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list_reassign]
2012-01-10 11:50:10,893 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES)
2012-01-10 11:50:10,893 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,893 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,894 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,894 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,894 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,894 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,894 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,894 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,895 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,895 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,895 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list_reassign.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:50:10,895 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:50:10,895 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib)
2012-01-10 11:50:10,895 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,896 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,896 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,896 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,896 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:50:10,896 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:50:10,896 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib)
2012-01-10 11:50:10,896 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,896 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,896 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,896 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,897 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:50:10,897 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_bunzip2]
2012-01-10 11:50:10,897 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib)
2012-01-10 11:50:10,897 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,897 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,897 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,897 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,897 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_bunzip2.c: (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m")))
2012-01-10 11:50:10,897 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unlzma]
2012-01-10 11:50:10,897 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib)
2012-01-10 11:50:10,897 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,897 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,897 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,898 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,898 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unlzma.c: (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")))
2012-01-10 11:50:10,898 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unxz]
2012-01-10 11:50:10,898 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib)
2012-01-10 11:50:10,898 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,898 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,898 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,898 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,898 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unxz.c: (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:50:10,898 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_cpio]
2012-01-10 11:50:10,898 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib)
2012-01-10 11:50:10,898 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,898 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,899 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,899 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,899 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_cpio.c: ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")))
2012-01-10 11:50:10,899 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unzip]
2012-01-10 11:50:10,899 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib)
2012-01-10 11:50:10,899 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,899 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,899 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,899 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,899 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unzip.c: ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")))
2012-01-10 11:50:10,899 DEBUG PCDerivation$ Trying to find path for: [Object: open_transformer]
2012-01-10 11:50:10,899 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib)
2012-01-10 11:50:10,899 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,899 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,899 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,900 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,900 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/open_transformer.c: (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:50:10,900 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:50:10,900 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib)
2012-01-10 11:50:10,900 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,900 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,900 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,900 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,900 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-10 11:50:10,900 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_uncompress]
2012-01-10 11:50:10,900 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib)
2012-01-10 11:50:10,900 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,900 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,901 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,901 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,901 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_uncompress.c: (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m")))
2012-01-10 11:50:10,901 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1]
2012-01-10 11:50:10,901 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib)
2012-01-10 11:50:10,901 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,901 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,901 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,901 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,901 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:50:10,901 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1o]
2012-01-10 11:50:10,901 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib)
2012-01-10 11:50:10,901 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,901 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,901 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,902 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,902 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1o.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:50:10,902 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_d]
2012-01-10 11:50:10,902 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib)
2012-01-10 11:50:10,902 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,902 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,902 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,902 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,902 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_d.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:50:10,902 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_9x]
2012-01-10 11:50:10,902 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib)
2012-01-10 11:50:10,902 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,902 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,902 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,903 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,903 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_9x.c: ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m"))
2012-01-10 11:50:10,903 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_gz]
2012-01-10 11:50:10,903 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib)
2012-01-10 11:50:10,903 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,903 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,903 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,903 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,903 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_gz.c: ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))
2012-01-10 11:50:10,903 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_bz2]
2012-01-10 11:50:10,903 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib)
2012-01-10 11:50:10,903 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,903 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,903 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,903 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,904 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_bz2.c: ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))
2012-01-10 11:50:10,904 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_lzma]
2012-01-10 11:50:10,904 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib)
2012-01-10 11:50:10,904 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,904 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,904 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,904 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,904 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_lzma.c: ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))
2012-01-10 11:50:10,904 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_command]
2012-01-10 11:50:10,904 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib)
2012-01-10 11:50:10,904 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,904 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,904 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,904 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,905 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_command.c: ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m"))
2012-01-10 11:50:10,905 DEBUG PCDerivation$ Trying to find path for: [Object: ar]
2012-01-10 11:50:10,905 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/ar.c, generated -> false, objectFile -> ar, listName -> lib)
2012-01-10 11:50:10,905 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/ar.c, generated -> false, objectFile -> ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,905 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,905 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,905 DEBUG PCDerivation$ Expression of path for object occurrence archival/ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:50:10,905 DEBUG PCDerivation$ Trying to find path for: [Object: cpio]
2012-01-10 11:50:10,905 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")), sourceFile -> archival/cpio.c, generated -> false, objectFile -> cpio, listName -> lib)
2012-01-10 11:50:10,905 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")), sourceFile -> archival/cpio.c, generated -> false, objectFile -> cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,905 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,905 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,905 DEBUG PCDerivation$ Expression of path for object occurrence archival/cpio.c: ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m"))
2012-01-10 11:50:10,905 DEBUG PCDerivation$ Trying to find path for: [Object: dpkg]
2012-01-10 11:50:10,905 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), sourceFile -> archival/dpkg.c, generated -> false, objectFile -> dpkg, listName -> lib)
2012-01-10 11:50:10,906 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), sourceFile -> archival/dpkg.c, generated -> false, objectFile -> dpkg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,906 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,906 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,906 DEBUG PCDerivation$ Expression of path for object occurrence archival/dpkg.c: ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m"))
2012-01-10 11:50:10,906 DEBUG PCDerivation$ Trying to find path for: [Object: dpkg_deb]
2012-01-10 11:50:10,906 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), sourceFile -> archival/dpkg_deb.c, generated -> false, objectFile -> dpkg_deb, listName -> lib)
2012-01-10 11:50:10,906 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), sourceFile -> archival/dpkg_deb.c, generated -> false, objectFile -> dpkg_deb, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,906 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,906 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,906 DEBUG PCDerivation$ Expression of path for object occurrence archival/dpkg_deb.c: ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m"))
2012-01-10 11:50:10,906 DEBUG PCDerivation$ Trying to find path for: [Object: rpm2cpio]
2012-01-10 11:50:10,906 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m")), sourceFile -> archival/rpm2cpio.c, generated -> false, objectFile -> rpm2cpio, listName -> lib)
2012-01-10 11:50:10,906 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m")), sourceFile -> archival/rpm2cpio.c, generated -> false, objectFile -> rpm2cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,906 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,906 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,907 DEBUG PCDerivation$ Expression of path for object occurrence archival/rpm2cpio.c: ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))
2012-01-10 11:50:10,907 DEBUG PCDerivation$ Trying to find path for: [Object: rpm]
2012-01-10 11:50:10,907 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")), sourceFile -> archival/rpm.c, generated -> false, objectFile -> rpm, listName -> lib)
2012-01-10 11:50:10,907 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")), sourceFile -> archival/rpm.c, generated -> false, objectFile -> rpm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,907 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,907 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,907 DEBUG PCDerivation$ Expression of path for object occurrence archival/rpm.c: ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))
2012-01-10 11:50:10,907 DEBUG PCDerivation$ Trying to find path for: [Object: tar]
2012-01-10 11:50:10,907 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/tar.c, generated -> false, objectFile -> tar, listName -> lib)
2012-01-10 11:50:10,907 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/tar.c, generated -> false, objectFile -> tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,907 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,907 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,907 DEBUG PCDerivation$ Expression of path for object occurrence archival/tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-10 11:50:10,907 DEBUG PCDerivation$ Trying to find path for: [Object: unzip]
2012-01-10 11:50:10,907 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m")), sourceFile -> archival/unzip.c, generated -> false, objectFile -> unzip, listName -> lib)
2012-01-10 11:50:10,908 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m")), sourceFile -> archival/unzip.c, generated -> false, objectFile -> unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,908 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,908 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,908 DEBUG PCDerivation$ Expression of path for object occurrence archival/unzip.c: ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))
2012-01-10 11:50:10,908 DEBUG PCDerivation$ Trying to find path for: [Object: lzop]
2012-01-10 11:50:10,908 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/lzop.c, generated -> false, objectFile -> lzop, listName -> lib)
2012-01-10 11:50:10,908 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/lzop.c, generated -> false, objectFile -> lzop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,908 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,908 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,908 DEBUG PCDerivation$ Expression of path for object occurrence archival/lzop.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:50:10,908 DEBUG PCDerivation$ Trying to find path for: [Object: bbunzip]
2012-01-10 11:50:10,908 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m"))), sourceFile -> archival/bbunzip.c, generated -> false, objectFile -> bbunzip, listName -> lib)
2012-01-10 11:50:10,908 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m"))), sourceFile -> archival/bbunzip.c, generated -> false, objectFile -> bbunzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,909 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,909 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,909 DEBUG PCDerivation$ Expression of path for object occurrence archival/bbunzip.c: (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")))
2012-01-10 11:50:10,909 DEBUG PCDerivation$ Trying to find path for: [Object: gzip]
2012-01-10 11:50:10,909 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m")), sourceFile -> archival/gzip.c, generated -> false, objectFile -> gzip, listName -> lib)
2012-01-10 11:50:10,909 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m")), sourceFile -> archival/gzip.c, generated -> false, objectFile -> gzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,909 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,909 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,909 DEBUG PCDerivation$ Expression of path for object occurrence archival/gzip.c: ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))
2012-01-10 11:50:10,909 DEBUG PCDerivation$ Trying to find path for: [Object: bzip2]
2012-01-10 11:50:10,909 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m")), sourceFile -> archival/bzip2.c, generated -> false, objectFile -> bzip2, listName -> lib)
2012-01-10 11:50:10,909 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m")), sourceFile -> archival/bzip2.c, generated -> false, objectFile -> bzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,909 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:50:10,909 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,909 DEBUG PCDerivation$ Expression of path for object occurrence archival/bzip2.c: ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))
2012-01-10 11:50:10,909 DEBUG PCDerivation$ Trying to find path for: [Object: data_skip]
2012-01-10 11:50:10,910 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES)
2012-01-10 11:50:10,910 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,910 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,910 TRACE PCDerivation$ trying to find variable reference, var: COMMON_FILES
2012-01-10 11:50:10,910 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:50:10,920 TRACE PCDerivation$    # collecting: [VariableReference: COMMON_FILES]
2012-01-10 11:50:10,920 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,920 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES) is: IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,920 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,920 TRACE PCDerivation$ parent of IfBNode --> Map(expr -> Unknown(!(lib-y == ""))) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,920 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,920 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:10,921 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,921 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,921 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_all]
2012-01-10 11:50:10,921 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES)
2012-01-10 11:50:10,921 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,921 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,921 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,921 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,921 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,922 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,922 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,922 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_stdout]
2012-01-10 11:50:10,922 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES)
2012-01-10 11:50:10,922 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,922 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,922 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,922 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,922 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,923 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,923 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_stdout.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,923 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_all]
2012-01-10 11:50:10,923 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES)
2012-01-10 11:50:10,923 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,923 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,923 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,923 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,923 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,924 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,924 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,924 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list]
2012-01-10 11:50:10,924 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES)
2012-01-10 11:50:10,924 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,924 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,924 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,924 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,924 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,925 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,925 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,925 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_reject_list]
2012-01-10 11:50:10,925 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES)
2012-01-10 11:50:10,925 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,925 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,925 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,925 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,925 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,926 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,926 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_reject_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,926 DEBUG PCDerivation$ Trying to find path for: [Object: header_skip]
2012-01-10 11:50:10,926 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES)
2012-01-10 11:50:10,926 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,926 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,926 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,926 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,926 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,926 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,927 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,927 DEBUG PCDerivation$ Trying to find path for: [Object: header_list]
2012-01-10 11:50:10,927 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES)
2012-01-10 11:50:10,927 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,927 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,927 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,927 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,927 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,927 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,927 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,927 DEBUG PCDerivation$ Trying to find path for: [Object: header_verbose_list]
2012-01-10 11:50:10,928 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES)
2012-01-10 11:50:10,928 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,928 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,928 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,928 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,928 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,928 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,928 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_verbose_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,928 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_read]
2012-01-10 11:50:10,928 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES)
2012-01-10 11:50:10,929 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,929 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,929 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,929 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,929 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,929 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,929 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_read.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,929 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_jump]
2012-01-10 11:50:10,929 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES)
2012-01-10 11:50:10,929 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,929 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,930 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,930 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,930 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,930 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,930 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_jump.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,930 DEBUG PCDerivation$ Trying to find path for: [Object: data_align]
2012-01-10 11:50:10,930 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES)
2012-01-10 11:50:10,930 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,930 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,930 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,931 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,931 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,931 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,931 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_align.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,931 DEBUG PCDerivation$ Trying to find path for: [Object: find_list_entry]
2012-01-10 11:50:10,931 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES)
2012-01-10 11:50:10,931 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,931 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,931 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,931 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,931 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,932 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,932 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/find_list_entry.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,932 DEBUG PCDerivation$ Trying to find path for: [Object: init_handle]
2012-01-10 11:50:10,932 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES)
2012-01-10 11:50:10,932 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,932 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:50:10,932 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:50:10,932 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:50:10,932 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,933 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,933 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/init_handle.c: Unknown(!(lib-y == ""))
2012-01-10 11:50:10,933 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:50:10,933 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES)
2012-01-10 11:50:10,933 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,933 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,933 TRACE PCDerivation$ trying to find variable reference, var: DPKG_FILES
2012-01-10 11:50:10,933 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:50:10,937 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:50:10,938 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:50:10,943 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,943 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,944 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,944 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:50:10,944 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES)
2012-01-10 11:50:10,944 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,944 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,945 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:50:10,945 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES)
2012-01-10 11:50:10,945 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,945 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,946 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:50:10,946 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list_reassign]
2012-01-10 11:50:10,946 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES)
2012-01-10 11:50:10,946 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,946 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:50:10,946 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,946 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,946 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,946 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:50:10,946 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,946 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,946 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list_reassign.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:50:10,946 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:50:10,946 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib)
2012-01-10 11:50:10,947 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,947 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,947 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,947 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:50:10,947 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:50:10,947 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib)
2012-01-10 11:50:10,947 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,947 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,947 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,947 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:50:10,947 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_bunzip2]
2012-01-10 11:50:10,947 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib)
2012-01-10 11:50:10,947 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,948 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,948 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,948 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_bunzip2.c: (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m")))
2012-01-10 11:50:10,948 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unlzma]
2012-01-10 11:50:10,948 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib)
2012-01-10 11:50:10,948 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,948 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,948 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,948 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unlzma.c: (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")))
2012-01-10 11:50:10,948 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unxz]
2012-01-10 11:50:10,948 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib)
2012-01-10 11:50:10,948 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,948 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,949 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,949 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unxz.c: (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:50:10,949 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_cpio]
2012-01-10 11:50:10,949 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib)
2012-01-10 11:50:10,949 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,949 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,949 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,949 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_cpio.c: ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")))
2012-01-10 11:50:10,949 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unzip]
2012-01-10 11:50:10,949 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib)
2012-01-10 11:50:10,949 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,950 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,950 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,950 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unzip.c: ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")))
2012-01-10 11:50:10,950 DEBUG PCDerivation$ Trying to find path for: [Object: open_transformer]
2012-01-10 11:50:10,950 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib)
2012-01-10 11:50:10,950 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,950 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,950 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,950 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/open_transformer.c: (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:50:10,950 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:50:10,950 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib)
2012-01-10 11:50:10,951 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,951 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,951 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,951 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-10 11:50:10,951 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_uncompress]
2012-01-10 11:50:10,951 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib)
2012-01-10 11:50:10,951 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,951 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,951 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,951 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_uncompress.c: (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m")))
2012-01-10 11:50:10,951 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1]
2012-01-10 11:50:10,951 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib)
2012-01-10 11:50:10,951 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,952 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,952 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,952 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:50:10,952 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1o]
2012-01-10 11:50:10,952 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib)
2012-01-10 11:50:10,952 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,952 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,952 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,952 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1o.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:50:10,952 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_d]
2012-01-10 11:50:10,952 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib)
2012-01-10 11:50:10,952 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,952 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,953 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,953 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_d.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:50:10,953 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_9x]
2012-01-10 11:50:10,953 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib)
2012-01-10 11:50:10,953 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,953 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,953 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,953 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_9x.c: ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m"))
2012-01-10 11:50:10,953 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_gz]
2012-01-10 11:50:10,953 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib)
2012-01-10 11:50:10,953 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,953 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,953 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,954 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_gz.c: ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))
2012-01-10 11:50:10,954 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_bz2]
2012-01-10 11:50:10,954 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib)
2012-01-10 11:50:10,954 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,954 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,954 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,954 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_bz2.c: ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))
2012-01-10 11:50:10,954 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_lzma]
2012-01-10 11:50:10,954 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib)
2012-01-10 11:50:10,954 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,954 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,954 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,955 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_lzma.c: ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))
2012-01-10 11:50:10,955 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_command]
2012-01-10 11:50:10,955 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib)
2012-01-10 11:50:10,955 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,955 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:50:10,955 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,955 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_command.c: ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m"))
2012-01-10 11:50:10,955 DEBUG PCDerivation$ Trying to find path for: [Object: chvt]
2012-01-10 11:50:10,955 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m")), sourceFile -> console-tools/chvt.c, generated -> false, objectFile -> chvt, listName -> lib)
2012-01-10 11:50:10,955 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m")), sourceFile -> console-tools/chvt.c, generated -> false, objectFile -> chvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,955 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,955 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:10,955 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,956 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/chvt.c: ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m"))
2012-01-10 11:50:10,956 DEBUG PCDerivation$ Trying to find path for: [Object: fgconsole]
2012-01-10 11:50:10,956 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m")), sourceFile -> console-tools/fgconsole.c, generated -> false, objectFile -> fgconsole, listName -> lib)
2012-01-10 11:50:10,956 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m")), sourceFile -> console-tools/fgconsole.c, generated -> false, objectFile -> fgconsole, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,956 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,956 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,956 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/fgconsole.c: ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m"))
2012-01-10 11:50:10,956 DEBUG PCDerivation$ Trying to find path for: [Object: clear]
2012-01-10 11:50:10,956 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m")), sourceFile -> console-tools/clear.c, generated -> false, objectFile -> clear, listName -> lib)
2012-01-10 11:50:10,956 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m")), sourceFile -> console-tools/clear.c, generated -> false, objectFile -> clear, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,956 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,956 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,957 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/clear.c: ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m"))
2012-01-10 11:50:10,957 DEBUG PCDerivation$ Trying to find path for: [Object: deallocvt]
2012-01-10 11:50:10,957 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m")), sourceFile -> console-tools/deallocvt.c, generated -> false, objectFile -> deallocvt, listName -> lib)
2012-01-10 11:50:10,957 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m")), sourceFile -> console-tools/deallocvt.c, generated -> false, objectFile -> deallocvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,957 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,957 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,957 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/deallocvt.c: ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m"))
2012-01-10 11:50:10,957 DEBUG PCDerivation$ Trying to find path for: [Object: dumpkmap]
2012-01-10 11:50:10,957 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m")), sourceFile -> console-tools/dumpkmap.c, generated -> false, objectFile -> dumpkmap, listName -> lib)
2012-01-10 11:50:10,957 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m")), sourceFile -> console-tools/dumpkmap.c, generated -> false, objectFile -> dumpkmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,957 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,957 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,958 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/dumpkmap.c: ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m"))
2012-01-10 11:50:10,958 DEBUG PCDerivation$ Trying to find path for: [Object: setconsole]
2012-01-10 11:50:10,958 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m")), sourceFile -> console-tools/setconsole.c, generated -> false, objectFile -> setconsole, listName -> lib)
2012-01-10 11:50:10,958 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m")), sourceFile -> console-tools/setconsole.c, generated -> false, objectFile -> setconsole, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,958 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,958 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,958 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setconsole.c: ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m"))
2012-01-10 11:50:10,958 DEBUG PCDerivation$ Trying to find path for: [Object: kbd_mode]
2012-01-10 11:50:10,958 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m")), sourceFile -> console-tools/kbd_mode.c, generated -> false, objectFile -> kbd_mode, listName -> lib)
2012-01-10 11:50:10,958 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m")), sourceFile -> console-tools/kbd_mode.c, generated -> false, objectFile -> kbd_mode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,958 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,958 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,959 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/kbd_mode.c: ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m"))
2012-01-10 11:50:10,959 DEBUG PCDerivation$ Trying to find path for: [Object: loadfont]
2012-01-10 11:50:10,959 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m"))), sourceFile -> console-tools/loadfont.c, generated -> false, objectFile -> loadfont, listName -> lib)
2012-01-10 11:50:10,959 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m"))), sourceFile -> console-tools/loadfont.c, generated -> false, objectFile -> loadfont, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,959 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,959 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,959 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/loadfont.c: (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m")))
2012-01-10 11:50:10,959 DEBUG PCDerivation$ Trying to find path for: [Object: loadkmap]
2012-01-10 11:50:10,959 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m")), sourceFile -> console-tools/loadkmap.c, generated -> false, objectFile -> loadkmap, listName -> lib)
2012-01-10 11:50:10,959 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m")), sourceFile -> console-tools/loadkmap.c, generated -> false, objectFile -> loadkmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,959 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,959 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,960 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/loadkmap.c: ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m"))
2012-01-10 11:50:10,960 DEBUG PCDerivation$ Trying to find path for: [Object: openvt]
2012-01-10 11:50:10,960 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m")), sourceFile -> console-tools/openvt.c, generated -> false, objectFile -> openvt, listName -> lib)
2012-01-10 11:50:10,960 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m")), sourceFile -> console-tools/openvt.c, generated -> false, objectFile -> openvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,960 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,960 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,960 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/openvt.c: ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m"))
2012-01-10 11:50:10,960 DEBUG PCDerivation$ Trying to find path for: [Object: reset]
2012-01-10 11:50:10,960 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESET == "y") || (CONFIG_RESET == "m")), sourceFile -> console-tools/reset.c, generated -> false, objectFile -> reset, listName -> lib)
2012-01-10 11:50:10,960 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESET == "y") || (CONFIG_RESET == "m")), sourceFile -> console-tools/reset.c, generated -> false, objectFile -> reset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,960 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,960 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,960 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/reset.c: ((CONFIG_RESET == "y") || (CONFIG_RESET == "m"))
2012-01-10 11:50:10,961 DEBUG PCDerivation$ Trying to find path for: [Object: resize]
2012-01-10 11:50:10,961 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m")), sourceFile -> console-tools/resize.c, generated -> false, objectFile -> resize, listName -> lib)
2012-01-10 11:50:10,961 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m")), sourceFile -> console-tools/resize.c, generated -> false, objectFile -> resize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,961 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,961 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,961 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/resize.c: ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m"))
2012-01-10 11:50:10,961 DEBUG PCDerivation$ Trying to find path for: [Object: setkeycodes]
2012-01-10 11:50:10,961 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m")), sourceFile -> console-tools/setkeycodes.c, generated -> false, objectFile -> setkeycodes, listName -> lib)
2012-01-10 11:50:10,961 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m")), sourceFile -> console-tools/setkeycodes.c, generated -> false, objectFile -> setkeycodes, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,961 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,961 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,961 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setkeycodes.c: ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m"))
2012-01-10 11:50:10,961 DEBUG PCDerivation$ Trying to find path for: [Object: setlogcons]
2012-01-10 11:50:10,962 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m")), sourceFile -> console-tools/setlogcons.c, generated -> false, objectFile -> setlogcons, listName -> lib)
2012-01-10 11:50:10,962 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m")), sourceFile -> console-tools/setlogcons.c, generated -> false, objectFile -> setlogcons, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,962 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,962 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,962 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setlogcons.c: ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m"))
2012-01-10 11:50:10,962 DEBUG PCDerivation$ Trying to find path for: [Object: showkey]
2012-01-10 11:50:10,962 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m")), sourceFile -> console-tools/showkey.c, generated -> false, objectFile -> showkey, listName -> lib)
2012-01-10 11:50:10,962 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m")), sourceFile -> console-tools/showkey.c, generated -> false, objectFile -> showkey, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,962 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:50:10,962 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,962 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/showkey.c: ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m"))
2012-01-10 11:50:10,962 DEBUG PCDerivation$ Trying to find path for: [Object: getopt_mk_fifo_nod]
2012-01-10 11:50:10,963 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib)
2012-01-10 11:50:10,963 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:50:10,963 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:50:10,963 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,963 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,963 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:10,963 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,963 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/getopt_mk_fifo_nod.c: (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")))
2012-01-10 11:50:10,963 DEBUG PCDerivation$ Trying to find path for: [Object: cp_mv_stat]
2012-01-10 11:50:10,963 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib)
2012-01-10 11:50:10,963 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:50:10,963 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:50:10,964 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,964 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,964 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/cp_mv_stat.c: ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m")))
2012-01-10 11:50:10,964 DEBUG PCDerivation$ Trying to find path for: [Object: basename]
2012-01-10 11:50:10,964 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m")), sourceFile -> coreutils/basename.c, generated -> false, objectFile -> basename, listName -> lib)
2012-01-10 11:50:10,964 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m")), sourceFile -> coreutils/basename.c, generated -> false, objectFile -> basename, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,964 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,964 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,964 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/basename.c: ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m"))
2012-01-10 11:50:10,964 DEBUG PCDerivation$ Trying to find path for: [Object: cat]
2012-01-10 11:50:10,964 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))), sourceFile -> coreutils/cat.c, generated -> false, objectFile -> cat, listName -> lib)
2012-01-10 11:50:10,964 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))), sourceFile -> coreutils/cat.c, generated -> false, objectFile -> cat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,965 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,965 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,965 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cat.c: (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")))
2012-01-10 11:50:10,965 DEBUG PCDerivation$ Trying to find path for: [Object: date]
2012-01-10 11:50:10,965 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DATE == "y") || (CONFIG_DATE == "m")), sourceFile -> coreutils/date.c, generated -> false, objectFile -> date, listName -> lib)
2012-01-10 11:50:10,965 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DATE == "y") || (CONFIG_DATE == "m")), sourceFile -> coreutils/date.c, generated -> false, objectFile -> date, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,965 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,965 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,965 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/date.c: ((CONFIG_DATE == "y") || (CONFIG_DATE == "m"))
2012-01-10 11:50:10,965 DEBUG PCDerivation$ Trying to find path for: [Object: hostid]
2012-01-10 11:50:10,965 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m")), sourceFile -> coreutils/hostid.c, generated -> false, objectFile -> hostid, listName -> lib)
2012-01-10 11:50:10,965 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m")), sourceFile -> coreutils/hostid.c, generated -> false, objectFile -> hostid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,966 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,966 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,966 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/hostid.c: ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m"))
2012-01-10 11:50:10,966 DEBUG PCDerivation$ Trying to find path for: [Object: id]
2012-01-10 11:50:10,966 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m"))), sourceFile -> coreutils/id.c, generated -> false, objectFile -> id, listName -> lib)
2012-01-10 11:50:10,966 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m"))), sourceFile -> coreutils/id.c, generated -> false, objectFile -> id, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,966 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,966 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,966 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/id.c: (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m")))
2012-01-10 11:50:10,966 DEBUG PCDerivation$ Trying to find path for: [Object: test]
2012-01-10 11:50:10,966 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test.c, generated -> false, objectFile -> test, listName -> lib)
2012-01-10 11:50:10,966 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test.c, generated -> false, objectFile -> test, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,966 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,967 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,967 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/test.c: ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:50:10,967 DEBUG PCDerivation$ Trying to find path for: [Object: test_ptr_hack]
2012-01-10 11:50:10,967 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test_ptr_hack.c, generated -> false, objectFile -> test_ptr_hack, listName -> lib)
2012-01-10 11:50:10,967 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test_ptr_hack.c, generated -> false, objectFile -> test_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,967 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,967 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,967 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/test_ptr_hack.c: ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:50:10,967 DEBUG PCDerivation$ Trying to find path for: [Object: touch]
2012-01-10 11:50:10,967 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m")), sourceFile -> coreutils/touch.c, generated -> false, objectFile -> touch, listName -> lib)
2012-01-10 11:50:10,967 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m")), sourceFile -> coreutils/touch.c, generated -> false, objectFile -> touch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,967 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,968 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,968 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/touch.c: ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m"))
2012-01-10 11:50:10,968 DEBUG PCDerivation$ Trying to find path for: [Object: tr]
2012-01-10 11:50:10,968 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TR == "y") || (CONFIG_TR == "m")), sourceFile -> coreutils/tr.c, generated -> false, objectFile -> tr, listName -> lib)
2012-01-10 11:50:10,968 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TR == "y") || (CONFIG_TR == "m")), sourceFile -> coreutils/tr.c, generated -> false, objectFile -> tr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,968 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,968 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,968 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tr.c: ((CONFIG_TR == "y") || (CONFIG_TR == "m"))
2012-01-10 11:50:10,968 DEBUG PCDerivation$ Trying to find path for: [Object: uudecode]
2012-01-10 11:50:10,968 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m"))), sourceFile -> coreutils/uudecode.c, generated -> false, objectFile -> uudecode, listName -> lib)
2012-01-10 11:50:10,968 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m"))), sourceFile -> coreutils/uudecode.c, generated -> false, objectFile -> uudecode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,968 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,969 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,969 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uudecode.c: (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m")))
2012-01-10 11:50:10,969 DEBUG PCDerivation$ Trying to find path for: [Object: who]
2012-01-10 11:50:10,969 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m"))), sourceFile -> coreutils/who.c, generated -> false, objectFile -> who, listName -> lib)
2012-01-10 11:50:10,969 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m"))), sourceFile -> coreutils/who.c, generated -> false, objectFile -> who, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,969 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,969 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,969 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/who.c: (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m")))
2012-01-10 11:50:10,969 DEBUG PCDerivation$ Trying to find path for: [Object: cal]
2012-01-10 11:50:10,969 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CAL == "y") || (CONFIG_CAL == "m")), sourceFile -> coreutils/cal.c, generated -> false, objectFile -> cal, listName -> lib)
2012-01-10 11:50:10,969 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CAL == "y") || (CONFIG_CAL == "m")), sourceFile -> coreutils/cal.c, generated -> false, objectFile -> cal, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,969 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,970 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,970 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cal.c: ((CONFIG_CAL == "y") || (CONFIG_CAL == "m"))
2012-01-10 11:50:10,970 DEBUG PCDerivation$ Trying to find path for: [Object: catv]
2012-01-10 11:50:10,970 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CATV == "y") || (CONFIG_CATV == "m")), sourceFile -> coreutils/catv.c, generated -> false, objectFile -> catv, listName -> lib)
2012-01-10 11:50:10,970 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CATV == "y") || (CONFIG_CATV == "m")), sourceFile -> coreutils/catv.c, generated -> false, objectFile -> catv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,970 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,970 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,970 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/catv.c: ((CONFIG_CATV == "y") || (CONFIG_CATV == "m"))
2012-01-10 11:50:10,970 DEBUG PCDerivation$ Trying to find path for: [Object: chgrp]
2012-01-10 11:50:10,970 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")), sourceFile -> coreutils/chgrp.c, generated -> false, objectFile -> chgrp, listName -> lib)
2012-01-10 11:50:10,970 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")), sourceFile -> coreutils/chgrp.c, generated -> false, objectFile -> chgrp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,970 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,970 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,971 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chgrp.c: ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m"))
2012-01-10 11:50:10,971 DEBUG PCDerivation$ Trying to find path for: [Object: chown]
2012-01-10 11:50:10,971 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))), sourceFile -> coreutils/chown.c, generated -> false, objectFile -> chown, listName -> lib)
2012-01-10 11:50:10,971 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))), sourceFile -> coreutils/chown.c, generated -> false, objectFile -> chown, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,971 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,971 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,971 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chown.c: (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")))
2012-01-10 11:50:10,971 DEBUG PCDerivation$ Trying to find path for: [Object: chmod]
2012-01-10 11:50:10,971 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m")), sourceFile -> coreutils/chmod.c, generated -> false, objectFile -> chmod, listName -> lib)
2012-01-10 11:50:10,971 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m")), sourceFile -> coreutils/chmod.c, generated -> false, objectFile -> chmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,971 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,971 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,972 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chmod.c: ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m"))
2012-01-10 11:50:10,972 DEBUG PCDerivation$ Trying to find path for: [Object: chroot]
2012-01-10 11:50:10,972 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m")), sourceFile -> coreutils/chroot.c, generated -> false, objectFile -> chroot, listName -> lib)
2012-01-10 11:50:10,972 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m")), sourceFile -> coreutils/chroot.c, generated -> false, objectFile -> chroot, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,972 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,972 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,972 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chroot.c: ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m"))
2012-01-10 11:50:10,972 DEBUG PCDerivation$ Trying to find path for: [Object: cksum]
2012-01-10 11:50:10,972 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m")), sourceFile -> coreutils/cksum.c, generated -> false, objectFile -> cksum, listName -> lib)
2012-01-10 11:50:10,972 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m")), sourceFile -> coreutils/cksum.c, generated -> false, objectFile -> cksum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,972 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,972 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,972 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cksum.c: ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m"))
2012-01-10 11:50:10,973 DEBUG PCDerivation$ Trying to find path for: [Object: comm]
2012-01-10 11:50:10,973 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_COMM == "y") || (CONFIG_COMM == "m")), sourceFile -> coreutils/comm.c, generated -> false, objectFile -> comm, listName -> lib)
2012-01-10 11:50:10,973 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_COMM == "y") || (CONFIG_COMM == "m")), sourceFile -> coreutils/comm.c, generated -> false, objectFile -> comm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,973 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,973 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,973 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/comm.c: ((CONFIG_COMM == "y") || (CONFIG_COMM == "m"))
2012-01-10 11:50:10,973 DEBUG PCDerivation$ Trying to find path for: [Object: cp]
2012-01-10 11:50:10,973 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CP == "y") || (CONFIG_CP == "m")), sourceFile -> coreutils/cp.c, generated -> false, objectFile -> cp, listName -> lib)
2012-01-10 11:50:10,973 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CP == "y") || (CONFIG_CP == "m")), sourceFile -> coreutils/cp.c, generated -> false, objectFile -> cp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,973 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,973 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,973 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cp.c: ((CONFIG_CP == "y") || (CONFIG_CP == "m"))
2012-01-10 11:50:10,973 DEBUG PCDerivation$ Trying to find path for: [Object: cut]
2012-01-10 11:50:10,974 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CUT == "y") || (CONFIG_CUT == "m")), sourceFile -> coreutils/cut.c, generated -> false, objectFile -> cut, listName -> lib)
2012-01-10 11:50:10,974 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CUT == "y") || (CONFIG_CUT == "m")), sourceFile -> coreutils/cut.c, generated -> false, objectFile -> cut, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,974 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,974 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,974 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cut.c: ((CONFIG_CUT == "y") || (CONFIG_CUT == "m"))
2012-01-10 11:50:10,974 DEBUG PCDerivation$ Trying to find path for: [Object: dd]
2012-01-10 11:50:10,974 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DD == "y") || (CONFIG_DD == "m")), sourceFile -> coreutils/dd.c, generated -> false, objectFile -> dd, listName -> lib)
2012-01-10 11:50:10,974 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DD == "y") || (CONFIG_DD == "m")), sourceFile -> coreutils/dd.c, generated -> false, objectFile -> dd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,974 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,974 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,974 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dd.c: ((CONFIG_DD == "y") || (CONFIG_DD == "m"))
2012-01-10 11:50:10,974 DEBUG PCDerivation$ Trying to find path for: [Object: df]
2012-01-10 11:50:10,974 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DF == "y") || (CONFIG_DF == "m")), sourceFile -> coreutils/df.c, generated -> false, objectFile -> df, listName -> lib)
2012-01-10 11:50:10,975 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DF == "y") || (CONFIG_DF == "m")), sourceFile -> coreutils/df.c, generated -> false, objectFile -> df, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,975 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,975 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,975 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/df.c: ((CONFIG_DF == "y") || (CONFIG_DF == "m"))
2012-01-10 11:50:10,975 DEBUG PCDerivation$ Trying to find path for: [Object: dirname]
2012-01-10 11:50:10,975 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m")), sourceFile -> coreutils/dirname.c, generated -> false, objectFile -> dirname, listName -> lib)
2012-01-10 11:50:10,975 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m")), sourceFile -> coreutils/dirname.c, generated -> false, objectFile -> dirname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,975 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,975 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,975 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dirname.c: ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m"))
2012-01-10 11:50:10,975 DEBUG PCDerivation$ Trying to find path for: [Object: dos2unix]
2012-01-10 11:50:10,975 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m")), sourceFile -> coreutils/dos2unix.c, generated -> false, objectFile -> dos2unix, listName -> lib)
2012-01-10 11:50:10,976 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m")), sourceFile -> coreutils/dos2unix.c, generated -> false, objectFile -> dos2unix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,976 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,976 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,976 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dos2unix.c: ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m"))
2012-01-10 11:50:10,976 DEBUG PCDerivation$ Trying to find path for: [Object: du]
2012-01-10 11:50:10,976 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DU == "y") || (CONFIG_DU == "m")), sourceFile -> coreutils/du.c, generated -> false, objectFile -> du, listName -> lib)
2012-01-10 11:50:10,976 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DU == "y") || (CONFIG_DU == "m")), sourceFile -> coreutils/du.c, generated -> false, objectFile -> du, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,976 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,976 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,976 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/du.c: ((CONFIG_DU == "y") || (CONFIG_DU == "m"))
2012-01-10 11:50:10,976 DEBUG PCDerivation$ Trying to find path for: [Object: echo]
2012-01-10 11:50:10,976 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/echo.c, generated -> false, objectFile -> echo, listName -> lib)
2012-01-10 11:50:10,977 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/echo.c, generated -> false, objectFile -> echo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,977 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,977 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,977 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/echo.c: ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:50:10,977 DEBUG PCDerivation$ Trying to find path for: [Object: env]
2012-01-10 11:50:10,977 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ENV == "y") || (CONFIG_ENV == "m")), sourceFile -> coreutils/env.c, generated -> false, objectFile -> env, listName -> lib)
2012-01-10 11:50:10,977 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ENV == "y") || (CONFIG_ENV == "m")), sourceFile -> coreutils/env.c, generated -> false, objectFile -> env, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,977 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,977 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,977 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/env.c: ((CONFIG_ENV == "y") || (CONFIG_ENV == "m"))
2012-01-10 11:50:10,977 DEBUG PCDerivation$ Trying to find path for: [Object: expr]
2012-01-10 11:50:10,977 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m")), sourceFile -> coreutils/expr.c, generated -> false, objectFile -> expr, listName -> lib)
2012-01-10 11:50:10,978 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m")), sourceFile -> coreutils/expr.c, generated -> false, objectFile -> expr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,978 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,978 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,978 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/expr.c: ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))
2012-01-10 11:50:10,978 DEBUG PCDerivation$ Trying to find path for: [Object: expand]
2012-01-10 11:50:10,978 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m"))), sourceFile -> coreutils/expand.c, generated -> false, objectFile -> expand, listName -> lib)
2012-01-10 11:50:10,978 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m"))), sourceFile -> coreutils/expand.c, generated -> false, objectFile -> expand, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,978 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,978 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,978 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/expand.c: (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m")))
2012-01-10 11:50:10,978 DEBUG PCDerivation$ Trying to find path for: [Object: false]
2012-01-10 11:50:10,978 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m")), sourceFile -> coreutils/false.c, generated -> false, objectFile -> false, listName -> lib)
2012-01-10 11:50:10,978 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m")), sourceFile -> coreutils/false.c, generated -> false, objectFile -> false, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,979 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,979 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,979 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/false.c: ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m"))
2012-01-10 11:50:10,979 DEBUG PCDerivation$ Trying to find path for: [Object: fold]
2012-01-10 11:50:10,979 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m")), sourceFile -> coreutils/fold.c, generated -> false, objectFile -> fold, listName -> lib)
2012-01-10 11:50:10,979 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m")), sourceFile -> coreutils/fold.c, generated -> false, objectFile -> fold, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,979 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,979 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,979 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/fold.c: ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m"))
2012-01-10 11:50:10,979 DEBUG PCDerivation$ Trying to find path for: [Object: fsync]
2012-01-10 11:50:10,979 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m")), sourceFile -> coreutils/fsync.c, generated -> false, objectFile -> fsync, listName -> lib)
2012-01-10 11:50:10,979 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m")), sourceFile -> coreutils/fsync.c, generated -> false, objectFile -> fsync, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,980 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,980 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,980 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/fsync.c: ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m"))
2012-01-10 11:50:10,980 DEBUG PCDerivation$ Trying to find path for: [Object: head]
2012-01-10 11:50:10,980 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m")), sourceFile -> coreutils/head.c, generated -> false, objectFile -> head, listName -> lib)
2012-01-10 11:50:10,980 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m")), sourceFile -> coreutils/head.c, generated -> false, objectFile -> head, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,980 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,980 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,980 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/head.c: ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m"))
2012-01-10 11:50:10,980 DEBUG PCDerivation$ Trying to find path for: [Object: install]
2012-01-10 11:50:10,980 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")), sourceFile -> coreutils/install.c, generated -> false, objectFile -> install, listName -> lib)
2012-01-10 11:50:10,980 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")), sourceFile -> coreutils/install.c, generated -> false, objectFile -> install, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,981 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,981 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,981 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/install.c: ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m"))
2012-01-10 11:50:10,981 DEBUG PCDerivation$ Trying to find path for: [Object: ln]
2012-01-10 11:50:10,981 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LN == "y") || (CONFIG_LN == "m")), sourceFile -> coreutils/ln.c, generated -> false, objectFile -> ln, listName -> lib)
2012-01-10 11:50:10,981 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LN == "y") || (CONFIG_LN == "m")), sourceFile -> coreutils/ln.c, generated -> false, objectFile -> ln, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,981 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,981 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,981 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/ln.c: ((CONFIG_LN == "y") || (CONFIG_LN == "m"))
2012-01-10 11:50:10,981 DEBUG PCDerivation$ Trying to find path for: [Object: logname]
2012-01-10 11:50:10,981 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m")), sourceFile -> coreutils/logname.c, generated -> false, objectFile -> logname, listName -> lib)
2012-01-10 11:50:10,981 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m")), sourceFile -> coreutils/logname.c, generated -> false, objectFile -> logname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,981 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,982 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,982 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/logname.c: ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m"))
2012-01-10 11:50:10,982 DEBUG PCDerivation$ Trying to find path for: [Object: ls]
2012-01-10 11:50:10,982 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))), sourceFile -> coreutils/ls.c, generated -> false, objectFile -> ls, listName -> lib)
2012-01-10 11:50:10,982 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))), sourceFile -> coreutils/ls.c, generated -> false, objectFile -> ls, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,982 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,982 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,982 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/ls.c: (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")))
2012-01-10 11:50:10,982 DEBUG PCDerivation$ Trying to find path for: [Object: md5_sha1_sum]
2012-01-10 11:50:10,982 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m"))), sourceFile -> coreutils/md5_sha1_sum.c, generated -> false, objectFile -> md5_sha1_sum, listName -> lib)
2012-01-10 11:50:10,982 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m"))), sourceFile -> coreutils/md5_sha1_sum.c, generated -> false, objectFile -> md5_sha1_sum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,982 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,983 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,983 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/md5_sha1_sum.c: (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m")))
2012-01-10 11:50:10,983 DEBUG PCDerivation$ Trying to find path for: [Object: mkdir]
2012-01-10 11:50:10,983 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m")), sourceFile -> coreutils/mkdir.c, generated -> false, objectFile -> mkdir, listName -> lib)
2012-01-10 11:50:10,983 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m")), sourceFile -> coreutils/mkdir.c, generated -> false, objectFile -> mkdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,983 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,983 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,983 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mkdir.c: ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m"))
2012-01-10 11:50:10,983 DEBUG PCDerivation$ Trying to find path for: [Object: mkfifo]
2012-01-10 11:50:10,983 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")), sourceFile -> coreutils/mkfifo.c, generated -> false, objectFile -> mkfifo, listName -> lib)
2012-01-10 11:50:10,983 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")), sourceFile -> coreutils/mkfifo.c, generated -> false, objectFile -> mkfifo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,983 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,983 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,984 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mkfifo.c: ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m"))
2012-01-10 11:50:10,984 DEBUG PCDerivation$ Trying to find path for: [Object: mknod]
2012-01-10 11:50:10,984 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")), sourceFile -> coreutils/mknod.c, generated -> false, objectFile -> mknod, listName -> lib)
2012-01-10 11:50:10,984 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")), sourceFile -> coreutils/mknod.c, generated -> false, objectFile -> mknod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,984 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,984 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,984 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mknod.c: ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))
2012-01-10 11:50:10,984 DEBUG PCDerivation$ Trying to find path for: [Object: mv]
2012-01-10 11:50:10,984 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MV == "y") || (CONFIG_MV == "m")), sourceFile -> coreutils/mv.c, generated -> false, objectFile -> mv, listName -> lib)
2012-01-10 11:50:10,984 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MV == "y") || (CONFIG_MV == "m")), sourceFile -> coreutils/mv.c, generated -> false, objectFile -> mv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,984 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,984 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,985 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mv.c: ((CONFIG_MV == "y") || (CONFIG_MV == "m"))
2012-01-10 11:50:10,985 DEBUG PCDerivation$ Trying to find path for: [Object: nice]
2012-01-10 11:50:10,985 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NICE == "y") || (CONFIG_NICE == "m")), sourceFile -> coreutils/nice.c, generated -> false, objectFile -> nice, listName -> lib)
2012-01-10 11:50:10,985 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NICE == "y") || (CONFIG_NICE == "m")), sourceFile -> coreutils/nice.c, generated -> false, objectFile -> nice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,985 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,985 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,985 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/nice.c: ((CONFIG_NICE == "y") || (CONFIG_NICE == "m"))
2012-01-10 11:50:10,985 DEBUG PCDerivation$ Trying to find path for: [Object: nohup]
2012-01-10 11:50:10,985 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m")), sourceFile -> coreutils/nohup.c, generated -> false, objectFile -> nohup, listName -> lib)
2012-01-10 11:50:10,985 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m")), sourceFile -> coreutils/nohup.c, generated -> false, objectFile -> nohup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,985 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,985 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,985 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/nohup.c: ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m"))
2012-01-10 11:50:10,985 DEBUG PCDerivation$ Trying to find path for: [Object: od]
2012-01-10 11:50:10,986 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OD == "y") || (CONFIG_OD == "m")), sourceFile -> coreutils/od.c, generated -> false, objectFile -> od, listName -> lib)
2012-01-10 11:50:10,986 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OD == "y") || (CONFIG_OD == "m")), sourceFile -> coreutils/od.c, generated -> false, objectFile -> od, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,986 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,986 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,986 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/od.c: ((CONFIG_OD == "y") || (CONFIG_OD == "m"))
2012-01-10 11:50:10,986 DEBUG PCDerivation$ Trying to find path for: [Object: printenv]
2012-01-10 11:50:10,986 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m")), sourceFile -> coreutils/printenv.c, generated -> false, objectFile -> printenv, listName -> lib)
2012-01-10 11:50:10,986 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m")), sourceFile -> coreutils/printenv.c, generated -> false, objectFile -> printenv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,986 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,986 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,986 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/printenv.c: ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m"))
2012-01-10 11:50:10,986 DEBUG PCDerivation$ Trying to find path for: [Object: printf]
2012-01-10 11:50:10,987 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m"))), sourceFile -> coreutils/printf.c, generated -> false, objectFile -> printf, listName -> lib)
2012-01-10 11:50:10,987 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m"))), sourceFile -> coreutils/printf.c, generated -> false, objectFile -> printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,987 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,987 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,987 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/printf.c: (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m")))
2012-01-10 11:50:10,987 DEBUG PCDerivation$ Trying to find path for: [Object: pwd]
2012-01-10 11:50:10,987 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWD == "y") || (CONFIG_PWD == "m")), sourceFile -> coreutils/pwd.c, generated -> false, objectFile -> pwd, listName -> lib)
2012-01-10 11:50:10,987 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWD == "y") || (CONFIG_PWD == "m")), sourceFile -> coreutils/pwd.c, generated -> false, objectFile -> pwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,987 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,987 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,987 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/pwd.c: ((CONFIG_PWD == "y") || (CONFIG_PWD == "m"))
2012-01-10 11:50:10,988 DEBUG PCDerivation$ Trying to find path for: [Object: readlink]
2012-01-10 11:50:10,988 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m")), sourceFile -> coreutils/readlink.c, generated -> false, objectFile -> readlink, listName -> lib)
2012-01-10 11:50:10,988 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m")), sourceFile -> coreutils/readlink.c, generated -> false, objectFile -> readlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,988 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,988 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,988 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/readlink.c: ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m"))
2012-01-10 11:50:10,988 DEBUG PCDerivation$ Trying to find path for: [Object: realpath]
2012-01-10 11:50:10,988 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m")), sourceFile -> coreutils/realpath.c, generated -> false, objectFile -> realpath, listName -> lib)
2012-01-10 11:50:10,988 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m")), sourceFile -> coreutils/realpath.c, generated -> false, objectFile -> realpath, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,988 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,988 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,989 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/realpath.c: ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m"))
2012-01-10 11:50:10,989 DEBUG PCDerivation$ Trying to find path for: [Object: rm]
2012-01-10 11:50:10,989 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RM == "y") || (CONFIG_RM == "m")), sourceFile -> coreutils/rm.c, generated -> false, objectFile -> rm, listName -> lib)
2012-01-10 11:50:10,989 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RM == "y") || (CONFIG_RM == "m")), sourceFile -> coreutils/rm.c, generated -> false, objectFile -> rm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,989 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,989 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,989 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/rm.c: ((CONFIG_RM == "y") || (CONFIG_RM == "m"))
2012-01-10 11:50:10,989 DEBUG PCDerivation$ Trying to find path for: [Object: rmdir]
2012-01-10 11:50:10,989 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m")), sourceFile -> coreutils/rmdir.c, generated -> false, objectFile -> rmdir, listName -> lib)
2012-01-10 11:50:10,989 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m")), sourceFile -> coreutils/rmdir.c, generated -> false, objectFile -> rmdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,989 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,990 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,990 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/rmdir.c: ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m"))
2012-01-10 11:50:10,990 DEBUG PCDerivation$ Trying to find path for: [Object: seq]
2012-01-10 11:50:10,990 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m")), sourceFile -> coreutils/seq.c, generated -> false, objectFile -> seq, listName -> lib)
2012-01-10 11:50:10,990 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m")), sourceFile -> coreutils/seq.c, generated -> false, objectFile -> seq, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,990 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,990 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,990 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/seq.c: ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m"))
2012-01-10 11:50:10,990 DEBUG PCDerivation$ Trying to find path for: [Object: sleep]
2012-01-10 11:50:10,990 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m")), sourceFile -> coreutils/sleep.c, generated -> false, objectFile -> sleep, listName -> lib)
2012-01-10 11:50:10,990 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m")), sourceFile -> coreutils/sleep.c, generated -> false, objectFile -> sleep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,990 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,991 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,991 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sleep.c: ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m"))
2012-01-10 11:50:10,991 DEBUG PCDerivation$ Trying to find path for: [Object: split]
2012-01-10 11:50:10,991 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m")), sourceFile -> coreutils/split.c, generated -> false, objectFile -> split, listName -> lib)
2012-01-10 11:50:10,991 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m")), sourceFile -> coreutils/split.c, generated -> false, objectFile -> split, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,991 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,991 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,991 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/split.c: ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m"))
2012-01-10 11:50:10,991 DEBUG PCDerivation$ Trying to find path for: [Object: sort]
2012-01-10 11:50:10,991 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SORT == "y") || (CONFIG_SORT == "m")), sourceFile -> coreutils/sort.c, generated -> false, objectFile -> sort, listName -> lib)
2012-01-10 11:50:10,991 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SORT == "y") || (CONFIG_SORT == "m")), sourceFile -> coreutils/sort.c, generated -> false, objectFile -> sort, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,991 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,992 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,992 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sort.c: ((CONFIG_SORT == "y") || (CONFIG_SORT == "m"))
2012-01-10 11:50:10,992 DEBUG PCDerivation$ Trying to find path for: [Object: stat]
2012-01-10 11:50:10,992 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STAT == "y") || (CONFIG_STAT == "m")), sourceFile -> coreutils/stat.c, generated -> false, objectFile -> stat, listName -> lib)
2012-01-10 11:50:10,992 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STAT == "y") || (CONFIG_STAT == "m")), sourceFile -> coreutils/stat.c, generated -> false, objectFile -> stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,992 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,992 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,992 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/stat.c: ((CONFIG_STAT == "y") || (CONFIG_STAT == "m"))
2012-01-10 11:50:10,992 DEBUG PCDerivation$ Trying to find path for: [Object: stty]
2012-01-10 11:50:10,992 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STTY == "y") || (CONFIG_STTY == "m")), sourceFile -> coreutils/stty.c, generated -> false, objectFile -> stty, listName -> lib)
2012-01-10 11:50:10,992 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STTY == "y") || (CONFIG_STTY == "m")), sourceFile -> coreutils/stty.c, generated -> false, objectFile -> stty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,992 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,992 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,993 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/stty.c: ((CONFIG_STTY == "y") || (CONFIG_STTY == "m"))
2012-01-10 11:50:10,993 DEBUG PCDerivation$ Trying to find path for: [Object: sum]
2012-01-10 11:50:10,993 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SUM == "y") || (CONFIG_SUM == "m")), sourceFile -> coreutils/sum.c, generated -> false, objectFile -> sum, listName -> lib)
2012-01-10 11:50:10,993 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SUM == "y") || (CONFIG_SUM == "m")), sourceFile -> coreutils/sum.c, generated -> false, objectFile -> sum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,993 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,993 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,993 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sum.c: ((CONFIG_SUM == "y") || (CONFIG_SUM == "m"))
2012-01-10 11:50:10,993 DEBUG PCDerivation$ Trying to find path for: [Object: sync]
2012-01-10 11:50:10,993 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m")), sourceFile -> coreutils/sync.c, generated -> false, objectFile -> sync, listName -> lib)
2012-01-10 11:50:10,993 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m")), sourceFile -> coreutils/sync.c, generated -> false, objectFile -> sync, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,993 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,993 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,994 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sync.c: ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m"))
2012-01-10 11:50:10,994 DEBUG PCDerivation$ Trying to find path for: [Object: tac]
2012-01-10 11:50:10,994 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAC == "y") || (CONFIG_TAC == "m")), sourceFile -> coreutils/tac.c, generated -> false, objectFile -> tac, listName -> lib)
2012-01-10 11:50:10,994 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAC == "y") || (CONFIG_TAC == "m")), sourceFile -> coreutils/tac.c, generated -> false, objectFile -> tac, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,994 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,994 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,994 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tac.c: ((CONFIG_TAC == "y") || (CONFIG_TAC == "m"))
2012-01-10 11:50:10,994 DEBUG PCDerivation$ Trying to find path for: [Object: tail]
2012-01-10 11:50:10,994 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m")), sourceFile -> coreutils/tail.c, generated -> false, objectFile -> tail, listName -> lib)
2012-01-10 11:50:10,994 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m")), sourceFile -> coreutils/tail.c, generated -> false, objectFile -> tail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,994 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,994 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,994 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tail.c: ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m"))
2012-01-10 11:50:10,995 DEBUG PCDerivation$ Trying to find path for: [Object: tee]
2012-01-10 11:50:10,995 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TEE == "y") || (CONFIG_TEE == "m")), sourceFile -> coreutils/tee.c, generated -> false, objectFile -> tee, listName -> lib)
2012-01-10 11:50:10,995 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TEE == "y") || (CONFIG_TEE == "m")), sourceFile -> coreutils/tee.c, generated -> false, objectFile -> tee, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,995 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,995 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,995 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tee.c: ((CONFIG_TEE == "y") || (CONFIG_TEE == "m"))
2012-01-10 11:50:10,995 DEBUG PCDerivation$ Trying to find path for: [Object: true]
2012-01-10 11:50:10,995 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m")), sourceFile -> coreutils/true.c, generated -> false, objectFile -> true, listName -> lib)
2012-01-10 11:50:10,995 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m")), sourceFile -> coreutils/true.c, generated -> false, objectFile -> true, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,995 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,995 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,995 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/true.c: ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m"))
2012-01-10 11:50:10,995 DEBUG PCDerivation$ Trying to find path for: [Object: tty]
2012-01-10 11:50:10,996 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTY == "y") || (CONFIG_TTY == "m")), sourceFile -> coreutils/tty.c, generated -> false, objectFile -> tty, listName -> lib)
2012-01-10 11:50:10,996 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTY == "y") || (CONFIG_TTY == "m")), sourceFile -> coreutils/tty.c, generated -> false, objectFile -> tty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,996 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,996 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,996 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tty.c: ((CONFIG_TTY == "y") || (CONFIG_TTY == "m"))
2012-01-10 11:50:10,996 DEBUG PCDerivation$ Trying to find path for: [Object: uname]
2012-01-10 11:50:10,996 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m")), sourceFile -> coreutils/uname.c, generated -> false, objectFile -> uname, listName -> lib)
2012-01-10 11:50:10,996 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m")), sourceFile -> coreutils/uname.c, generated -> false, objectFile -> uname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,996 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,996 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,996 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uname.c: ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m"))
2012-01-10 11:50:10,996 DEBUG PCDerivation$ Trying to find path for: [Object: uniq]
2012-01-10 11:50:10,996 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m")), sourceFile -> coreutils/uniq.c, generated -> false, objectFile -> uniq, listName -> lib)
2012-01-10 11:50:10,997 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m")), sourceFile -> coreutils/uniq.c, generated -> false, objectFile -> uniq, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,997 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,997 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,997 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uniq.c: ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m"))
2012-01-10 11:50:10,997 DEBUG PCDerivation$ Trying to find path for: [Object: usleep]
2012-01-10 11:50:10,997 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m")), sourceFile -> coreutils/usleep.c, generated -> false, objectFile -> usleep, listName -> lib)
2012-01-10 11:50:10,997 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m")), sourceFile -> coreutils/usleep.c, generated -> false, objectFile -> usleep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,997 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,997 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,997 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/usleep.c: ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m"))
2012-01-10 11:50:10,997 DEBUG PCDerivation$ Trying to find path for: [Object: uuencode]
2012-01-10 11:50:10,997 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m")), sourceFile -> coreutils/uuencode.c, generated -> false, objectFile -> uuencode, listName -> lib)
2012-01-10 11:50:10,998 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m")), sourceFile -> coreutils/uuencode.c, generated -> false, objectFile -> uuencode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,998 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,998 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,998 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uuencode.c: ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m"))
2012-01-10 11:50:10,998 DEBUG PCDerivation$ Trying to find path for: [Object: wc]
2012-01-10 11:50:10,998 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WC == "y") || (CONFIG_WC == "m")), sourceFile -> coreutils/wc.c, generated -> false, objectFile -> wc, listName -> lib)
2012-01-10 11:50:10,998 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WC == "y") || (CONFIG_WC == "m")), sourceFile -> coreutils/wc.c, generated -> false, objectFile -> wc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,998 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,998 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,998 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/wc.c: ((CONFIG_WC == "y") || (CONFIG_WC == "m"))
2012-01-10 11:50:10,998 DEBUG PCDerivation$ Trying to find path for: [Object: whoami]
2012-01-10 11:50:10,998 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m")), sourceFile -> coreutils/whoami.c, generated -> false, objectFile -> whoami, listName -> lib)
2012-01-10 11:50:10,999 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m")), sourceFile -> coreutils/whoami.c, generated -> false, objectFile -> whoami, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,999 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,999 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,999 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/whoami.c: ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m"))
2012-01-10 11:50:10,999 DEBUG PCDerivation$ Trying to find path for: [Object: yes]
2012-01-10 11:50:10,999 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_YES == "y") || (CONFIG_YES == "m")), sourceFile -> coreutils/yes.c, generated -> false, objectFile -> yes, listName -> lib)
2012-01-10 11:50:10,999 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_YES == "y") || (CONFIG_YES == "m")), sourceFile -> coreutils/yes.c, generated -> false, objectFile -> yes, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,999 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:50:10,999 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:10,999 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/yes.c: ((CONFIG_YES == "y") || (CONFIG_YES == "m"))
2012-01-10 11:50:10,999 DEBUG PCDerivation$ Trying to find path for: [Object: getopt_mk_fifo_nod]
2012-01-10 11:50:10,999 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib)
2012-01-10 11:50:10,999 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:50:11,000 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:50:11,000 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,000 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,000 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/getopt_mk_fifo_nod.c: (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")))
2012-01-10 11:50:11,000 DEBUG PCDerivation$ Trying to find path for: [Object: cp_mv_stat]
2012-01-10 11:50:11,000 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib)
2012-01-10 11:50:11,000 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:50:11,000 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:50:11,000 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,000 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/cp_mv_stat.c: ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m")))
2012-01-10 11:50:11,000 DEBUG PCDerivation$ Trying to find path for: [Object: mktemp]
2012-01-10 11:50:11,000 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m")), sourceFile -> debianutils/mktemp.c, generated -> false, objectFile -> mktemp, listName -> lib)
2012-01-10 11:50:11,001 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m")), sourceFile -> debianutils/mktemp.c, generated -> false, objectFile -> mktemp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,001 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,001 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,001 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,001 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/mktemp.c: ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m"))
2012-01-10 11:50:11,001 DEBUG PCDerivation$ Trying to find path for: [Object: pipe_progress]
2012-01-10 11:50:11,001 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m")), sourceFile -> debianutils/pipe_progress.c, generated -> false, objectFile -> pipe_progress, listName -> lib)
2012-01-10 11:50:11,001 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m")), sourceFile -> debianutils/pipe_progress.c, generated -> false, objectFile -> pipe_progress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,001 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,001 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,001 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/pipe_progress.c: ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m"))
2012-01-10 11:50:11,001 DEBUG PCDerivation$ Trying to find path for: [Object: run_parts]
2012-01-10 11:50:11,001 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m")), sourceFile -> debianutils/run_parts.c, generated -> false, objectFile -> run_parts, listName -> lib)
2012-01-10 11:50:11,002 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m")), sourceFile -> debianutils/run_parts.c, generated -> false, objectFile -> run_parts, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,002 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,002 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,002 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/run_parts.c: ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m"))
2012-01-10 11:50:11,002 DEBUG PCDerivation$ Trying to find path for: [Object: start_stop_daemon]
2012-01-10 11:50:11,002 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m")), sourceFile -> debianutils/start_stop_daemon.c, generated -> false, objectFile -> start_stop_daemon, listName -> lib)
2012-01-10 11:50:11,002 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m")), sourceFile -> debianutils/start_stop_daemon.c, generated -> false, objectFile -> start_stop_daemon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,002 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,002 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,002 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/start_stop_daemon.c: ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m"))
2012-01-10 11:50:11,002 DEBUG PCDerivation$ Trying to find path for: [Object: which]
2012-01-10 11:50:11,002 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m")), sourceFile -> debianutils/which.c, generated -> false, objectFile -> which, listName -> lib)
2012-01-10 11:50:11,002 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m")), sourceFile -> debianutils/which.c, generated -> false, objectFile -> which, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,003 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:50:11,003 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,003 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/which.c: ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m"))
2012-01-10 11:50:11,003 DEBUG PCDerivation$ Trying to find path for: [Object: chattr]
2012-01-10 11:50:11,003 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")), sourceFile -> e2fsprogs/chattr.c, generated -> false, objectFile -> chattr, listName -> lib)
2012-01-10 11:50:11,003 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")), sourceFile -> e2fsprogs/chattr.c, generated -> false, objectFile -> chattr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,003 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,003 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,003 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,003 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/chattr.c: ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m"))
2012-01-10 11:50:11,003 DEBUG PCDerivation$ Trying to find path for: [Object: e2fs_lib]
2012-01-10 11:50:11,003 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))), sourceFile -> e2fsprogs/e2fs_lib.c, generated -> false, objectFile -> e2fs_lib, listName -> lib)
2012-01-10 11:50:11,003 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))), sourceFile -> e2fsprogs/e2fs_lib.c, generated -> false, objectFile -> e2fs_lib, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,004 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,004 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,004 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/e2fs_lib.c: (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")))
2012-01-10 11:50:11,004 DEBUG PCDerivation$ Trying to find path for: [Object: lsattr]
2012-01-10 11:50:11,004 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")), sourceFile -> e2fsprogs/lsattr.c, generated -> false, objectFile -> lsattr, listName -> lib)
2012-01-10 11:50:11,004 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")), sourceFile -> e2fsprogs/lsattr.c, generated -> false, objectFile -> lsattr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,004 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,004 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,004 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/lsattr.c: ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))
2012-01-10 11:50:11,004 DEBUG PCDerivation$ Trying to find path for: [Object: fsck]
2012-01-10 11:50:11,004 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m")), sourceFile -> e2fsprogs/fsck.c, generated -> false, objectFile -> fsck, listName -> lib)
2012-01-10 11:50:11,004 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m")), sourceFile -> e2fsprogs/fsck.c, generated -> false, objectFile -> fsck, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,004 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,005 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,005 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/fsck.c: ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m"))
2012-01-10 11:50:11,005 DEBUG PCDerivation$ Trying to find path for: [Object: tune2fs]
2012-01-10 11:50:11,005 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m")), sourceFile -> e2fsprogs/tune2fs.c, generated -> false, objectFile -> tune2fs, listName -> lib)
2012-01-10 11:50:11,005 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m")), sourceFile -> e2fsprogs/tune2fs.c, generated -> false, objectFile -> tune2fs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,005 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:50:11,005 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,005 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/tune2fs.c: ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m"))
2012-01-10 11:50:11,005 DEBUG PCDerivation$ Trying to find path for: [Object: patch]
2012-01-10 11:50:11,005 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m")), sourceFile -> editors/patch.c, generated -> false, objectFile -> patch, listName -> lib)
2012-01-10 11:50:11,005 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m")), sourceFile -> editors/patch.c, generated -> false, objectFile -> patch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,005 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,006 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,006 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,006 DEBUG PCDerivation$ Expression of path for object occurrence editors/patch.c: ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m"))
2012-01-10 11:50:11,006 DEBUG PCDerivation$ Trying to find path for: [Object: vi]
2012-01-10 11:50:11,006 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VI == "y") || (CONFIG_VI == "m")), sourceFile -> editors/vi.c, generated -> false, objectFile -> vi, listName -> lib)
2012-01-10 11:50:11,006 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VI == "y") || (CONFIG_VI == "m")), sourceFile -> editors/vi.c, generated -> false, objectFile -> vi, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,006 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,006 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,006 DEBUG PCDerivation$ Expression of path for object occurrence editors/vi.c: ((CONFIG_VI == "y") || (CONFIG_VI == "m"))
2012-01-10 11:50:11,006 DEBUG PCDerivation$ Trying to find path for: [Object: awk]
2012-01-10 11:50:11,006 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AWK == "y") || (CONFIG_AWK == "m")), sourceFile -> editors/awk.c, generated -> false, objectFile -> awk, listName -> lib)
2012-01-10 11:50:11,006 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AWK == "y") || (CONFIG_AWK == "m")), sourceFile -> editors/awk.c, generated -> false, objectFile -> awk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,006 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,007 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,007 DEBUG PCDerivation$ Expression of path for object occurrence editors/awk.c: ((CONFIG_AWK == "y") || (CONFIG_AWK == "m"))
2012-01-10 11:50:11,007 DEBUG PCDerivation$ Trying to find path for: [Object: cmp]
2012-01-10 11:50:11,007 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CMP == "y") || (CONFIG_CMP == "m")), sourceFile -> editors/cmp.c, generated -> false, objectFile -> cmp, listName -> lib)
2012-01-10 11:50:11,007 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CMP == "y") || (CONFIG_CMP == "m")), sourceFile -> editors/cmp.c, generated -> false, objectFile -> cmp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,007 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,007 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,007 DEBUG PCDerivation$ Expression of path for object occurrence editors/cmp.c: ((CONFIG_CMP == "y") || (CONFIG_CMP == "m"))
2012-01-10 11:50:11,007 DEBUG PCDerivation$ Trying to find path for: [Object: diff]
2012-01-10 11:50:11,007 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m")), sourceFile -> editors/diff.c, generated -> false, objectFile -> diff, listName -> lib)
2012-01-10 11:50:11,007 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m")), sourceFile -> editors/diff.c, generated -> false, objectFile -> diff, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,007 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,007 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,008 DEBUG PCDerivation$ Expression of path for object occurrence editors/diff.c: ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m"))
2012-01-10 11:50:11,008 DEBUG PCDerivation$ Trying to find path for: [Object: ed]
2012-01-10 11:50:11,008 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ED == "y") || (CONFIG_ED == "m")), sourceFile -> editors/ed.c, generated -> false, objectFile -> ed, listName -> lib)
2012-01-10 11:50:11,008 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ED == "y") || (CONFIG_ED == "m")), sourceFile -> editors/ed.c, generated -> false, objectFile -> ed, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,008 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,008 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,008 DEBUG PCDerivation$ Expression of path for object occurrence editors/ed.c: ((CONFIG_ED == "y") || (CONFIG_ED == "m"))
2012-01-10 11:50:11,008 DEBUG PCDerivation$ Trying to find path for: [Object: sed]
2012-01-10 11:50:11,008 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SED == "y") || (CONFIG_SED == "m")), sourceFile -> editors/sed.c, generated -> false, objectFile -> sed, listName -> lib)
2012-01-10 11:50:11,008 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SED == "y") || (CONFIG_SED == "m")), sourceFile -> editors/sed.c, generated -> false, objectFile -> sed, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,008 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:50:11,008 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,009 DEBUG PCDerivation$ Expression of path for object occurrence editors/sed.c: ((CONFIG_SED == "y") || (CONFIG_SED == "m"))
2012-01-10 11:50:11,009 DEBUG PCDerivation$ Trying to find path for: [Object: find]
2012-01-10 11:50:11,009 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FIND == "y") || (CONFIG_FIND == "m")), sourceFile -> findutils/find.c, generated -> false, objectFile -> find, listName -> lib)
2012-01-10 11:50:11,009 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FIND == "y") || (CONFIG_FIND == "m")), sourceFile -> findutils/find.c, generated -> false, objectFile -> find, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:50:11,009 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:50:11,009 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,009 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,009 DEBUG PCDerivation$ Expression of path for object occurrence findutils/find.c: ((CONFIG_FIND == "y") || (CONFIG_FIND == "m"))
2012-01-10 11:50:11,009 DEBUG PCDerivation$ Trying to find path for: [Object: grep]
2012-01-10 11:50:11,009 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GREP == "y") || (CONFIG_GREP == "m")), sourceFile -> findutils/grep.c, generated -> false, objectFile -> grep, listName -> lib)
2012-01-10 11:50:11,009 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GREP == "y") || (CONFIG_GREP == "m")), sourceFile -> findutils/grep.c, generated -> false, objectFile -> grep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:50:11,009 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:50:11,010 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,010 DEBUG PCDerivation$ Expression of path for object occurrence findutils/grep.c: ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))
2012-01-10 11:50:11,010 DEBUG PCDerivation$ Trying to find path for: [Object: xargs]
2012-01-10 11:50:11,010 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m")), sourceFile -> findutils/xargs.c, generated -> false, objectFile -> xargs, listName -> lib)
2012-01-10 11:50:11,010 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m")), sourceFile -> findutils/xargs.c, generated -> false, objectFile -> xargs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:50:11,010 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:50:11,010 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,010 DEBUG PCDerivation$ Expression of path for object occurrence findutils/xargs.c: ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m"))
2012-01-10 11:50:11,010 DEBUG PCDerivation$ Trying to find path for: [Object: bootchartd]
2012-01-10 11:50:11,010 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m")), sourceFile -> init/bootchartd.c, generated -> false, objectFile -> bootchartd, listName -> lib)
2012-01-10 11:50:11,010 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m")), sourceFile -> init/bootchartd.c, generated -> false, objectFile -> bootchartd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:50:11,010 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:50:11,010 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,011 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,011 DEBUG PCDerivation$ Expression of path for object occurrence init/bootchartd.c: ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m"))
2012-01-10 11:50:11,011 DEBUG PCDerivation$ Trying to find path for: [Object: halt]
2012-01-10 11:50:11,011 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HALT == "y") || (CONFIG_HALT == "m")), sourceFile -> init/halt.c, generated -> false, objectFile -> halt, listName -> lib)
2012-01-10 11:50:11,011 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HALT == "y") || (CONFIG_HALT == "m")), sourceFile -> init/halt.c, generated -> false, objectFile -> halt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:50:11,011 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:50:11,011 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,011 DEBUG PCDerivation$ Expression of path for object occurrence init/halt.c: ((CONFIG_HALT == "y") || (CONFIG_HALT == "m"))
2012-01-10 11:50:11,011 DEBUG PCDerivation$ Trying to find path for: [Object: init]
2012-01-10 11:50:11,011 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INIT == "y") || (CONFIG_INIT == "m")), sourceFile -> init/init.c, generated -> false, objectFile -> init, listName -> lib)
2012-01-10 11:50:11,011 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INIT == "y") || (CONFIG_INIT == "m")), sourceFile -> init/init.c, generated -> false, objectFile -> init, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:50:11,011 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:50:11,012 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,012 DEBUG PCDerivation$ Expression of path for object occurrence init/init.c: ((CONFIG_INIT == "y") || (CONFIG_INIT == "m"))
2012-01-10 11:50:11,012 DEBUG PCDerivation$ Trying to find path for: [Object: mesg]
2012-01-10 11:50:11,012 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MESG == "y") || (CONFIG_MESG == "m")), sourceFile -> init/mesg.c, generated -> false, objectFile -> mesg, listName -> lib)
2012-01-10 11:50:11,012 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MESG == "y") || (CONFIG_MESG == "m")), sourceFile -> init/mesg.c, generated -> false, objectFile -> mesg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:50:11,012 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:50:11,012 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,012 DEBUG PCDerivation$ Expression of path for object occurrence init/mesg.c: ((CONFIG_MESG == "y") || (CONFIG_MESG == "m"))
2012-01-10 11:50:11,012 DEBUG PCDerivation$ Trying to find path for: [Object: get_shell_name]
2012-01-10 11:50:11,012 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_shell_name.c, builtAs -> y, generated -> false, objectFile -> get_shell_name, listName -> lib)
2012-01-10 11:50:11,012 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_shell_name.c, builtAs -> y, generated -> false, objectFile -> get_shell_name, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,012 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,012 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,013 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,013 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_shell_name.c: [TRUE]
2012-01-10 11:50:11,013 DEBUG PCDerivation$ Trying to find path for: [Object: parse_config]
2012-01-10 11:50:11,013 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_config.c, builtAs -> y, generated -> false, objectFile -> parse_config, listName -> lib)
2012-01-10 11:50:11,013 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_config.c, builtAs -> y, generated -> false, objectFile -> parse_config, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,013 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,013 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,013 DEBUG PCDerivation$ Expression of path for object occurrence libbb/parse_config.c: [TRUE]
2012-01-10 11:50:11,013 DEBUG PCDerivation$ Trying to find path for: [Object: percent_decode]
2012-01-10 11:50:11,013 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/percent_decode.c, builtAs -> y, generated -> false, objectFile -> percent_decode, listName -> lib)
2012-01-10 11:50:11,013 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/percent_decode.c, builtAs -> y, generated -> false, objectFile -> percent_decode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,013 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,013 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,014 DEBUG PCDerivation$ Expression of path for object occurrence libbb/percent_decode.c: [TRUE]
2012-01-10 11:50:11,014 DEBUG PCDerivation$ Trying to find path for: [Object: systemd_support]
2012-01-10 11:50:11,014 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m")), sourceFile -> libbb/systemd_support.c, generated -> false, objectFile -> systemd_support, listName -> lib)
2012-01-10 11:50:11,014 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m")), sourceFile -> libbb/systemd_support.c, generated -> false, objectFile -> systemd_support, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,014 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,014 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,014 DEBUG PCDerivation$ Expression of path for object occurrence libbb/systemd_support.c: ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m"))
2012-01-10 11:50:11,014 DEBUG PCDerivation$ Trying to find path for: [Object: appletlib]
2012-01-10 11:50:11,014 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/appletlib.c, builtAs -> y, generated -> false, objectFile -> appletlib, listName -> lib)
2012-01-10 11:50:11,014 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/appletlib.c, builtAs -> y, generated -> false, objectFile -> appletlib, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,014 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,014 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,015 DEBUG PCDerivation$ Expression of path for object occurrence libbb/appletlib.c: [TRUE]
2012-01-10 11:50:11,015 DEBUG PCDerivation$ Trying to find path for: [Object: ask_confirmation]
2012-01-10 11:50:11,015 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ask_confirmation.c, builtAs -> y, generated -> false, objectFile -> ask_confirmation, listName -> lib)
2012-01-10 11:50:11,015 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ask_confirmation.c, builtAs -> y, generated -> false, objectFile -> ask_confirmation, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,015 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,015 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,015 DEBUG PCDerivation$ Expression of path for object occurrence libbb/ask_confirmation.c: [TRUE]
2012-01-10 11:50:11,015 DEBUG PCDerivation$ Trying to find path for: [Object: bb_askpass]
2012-01-10 11:50:11,015 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_askpass.c, builtAs -> y, generated -> false, objectFile -> bb_askpass, listName -> lib)
2012-01-10 11:50:11,015 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_askpass.c, builtAs -> y, generated -> false, objectFile -> bb_askpass, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,015 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,015 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,015 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_askpass.c: [TRUE]
2012-01-10 11:50:11,016 DEBUG PCDerivation$ Trying to find path for: [Object: bb_bswap_64]
2012-01-10 11:50:11,016 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_bswap_64.c, builtAs -> y, generated -> false, objectFile -> bb_bswap_64, listName -> lib)
2012-01-10 11:50:11,016 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_bswap_64.c, builtAs -> y, generated -> false, objectFile -> bb_bswap_64, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,016 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,016 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,016 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_bswap_64.c: [TRUE]
2012-01-10 11:50:11,016 DEBUG PCDerivation$ Trying to find path for: [Object: bb_do_delay]
2012-01-10 11:50:11,016 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_do_delay.c, builtAs -> y, generated -> false, objectFile -> bb_do_delay, listName -> lib)
2012-01-10 11:50:11,016 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_do_delay.c, builtAs -> y, generated -> false, objectFile -> bb_do_delay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,016 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,016 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,016 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_do_delay.c: [TRUE]
2012-01-10 11:50:11,017 DEBUG PCDerivation$ Trying to find path for: [Object: bb_pwd]
2012-01-10 11:50:11,017 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_pwd.c, builtAs -> y, generated -> false, objectFile -> bb_pwd, listName -> lib)
2012-01-10 11:50:11,017 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_pwd.c, builtAs -> y, generated -> false, objectFile -> bb_pwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,017 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,017 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,017 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_pwd.c: [TRUE]
2012-01-10 11:50:11,017 DEBUG PCDerivation$ Trying to find path for: [Object: bb_qsort]
2012-01-10 11:50:11,017 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_qsort.c, builtAs -> y, generated -> false, objectFile -> bb_qsort, listName -> lib)
2012-01-10 11:50:11,017 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_qsort.c, builtAs -> y, generated -> false, objectFile -> bb_qsort, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,017 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,017 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,017 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_qsort.c: [TRUE]
2012-01-10 11:50:11,018 DEBUG PCDerivation$ Trying to find path for: [Object: bb_strtonum]
2012-01-10 11:50:11,018 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_strtonum.c, builtAs -> y, generated -> false, objectFile -> bb_strtonum, listName -> lib)
2012-01-10 11:50:11,018 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_strtonum.c, builtAs -> y, generated -> false, objectFile -> bb_strtonum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,018 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,018 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,018 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_strtonum.c: [TRUE]
2012-01-10 11:50:11,018 DEBUG PCDerivation$ Trying to find path for: [Object: change_identity]
2012-01-10 11:50:11,018 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/change_identity.c, builtAs -> y, generated -> false, objectFile -> change_identity, listName -> lib)
2012-01-10 11:50:11,018 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/change_identity.c, builtAs -> y, generated -> false, objectFile -> change_identity, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,018 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,018 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,018 DEBUG PCDerivation$ Expression of path for object occurrence libbb/change_identity.c: [TRUE]
2012-01-10 11:50:11,018 DEBUG PCDerivation$ Trying to find path for: [Object: chomp]
2012-01-10 11:50:11,019 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/chomp.c, builtAs -> y, generated -> false, objectFile -> chomp, listName -> lib)
2012-01-10 11:50:11,019 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/chomp.c, builtAs -> y, generated -> false, objectFile -> chomp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,019 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,019 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,019 DEBUG PCDerivation$ Expression of path for object occurrence libbb/chomp.c: [TRUE]
2012-01-10 11:50:11,019 DEBUG PCDerivation$ Trying to find path for: [Object: compare_string_array]
2012-01-10 11:50:11,019 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/compare_string_array.c, builtAs -> y, generated -> false, objectFile -> compare_string_array, listName -> lib)
2012-01-10 11:50:11,019 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/compare_string_array.c, builtAs -> y, generated -> false, objectFile -> compare_string_array, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,019 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,019 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,019 DEBUG PCDerivation$ Expression of path for object occurrence libbb/compare_string_array.c: [TRUE]
2012-01-10 11:50:11,019 DEBUG PCDerivation$ Trying to find path for: [Object: concat_path_file]
2012-01-10 11:50:11,020 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_path_file.c, builtAs -> y, generated -> false, objectFile -> concat_path_file, listName -> lib)
2012-01-10 11:50:11,020 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_path_file.c, builtAs -> y, generated -> false, objectFile -> concat_path_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,020 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,020 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,020 DEBUG PCDerivation$ Expression of path for object occurrence libbb/concat_path_file.c: [TRUE]
2012-01-10 11:50:11,020 DEBUG PCDerivation$ Trying to find path for: [Object: concat_subpath_file]
2012-01-10 11:50:11,020 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_subpath_file.c, builtAs -> y, generated -> false, objectFile -> concat_subpath_file, listName -> lib)
2012-01-10 11:50:11,020 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_subpath_file.c, builtAs -> y, generated -> false, objectFile -> concat_subpath_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,020 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,020 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,020 DEBUG PCDerivation$ Expression of path for object occurrence libbb/concat_subpath_file.c: [TRUE]
2012-01-10 11:50:11,020 DEBUG PCDerivation$ Trying to find path for: [Object: copy_file]
2012-01-10 11:50:11,020 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copy_file.c, builtAs -> y, generated -> false, objectFile -> copy_file, listName -> lib)
2012-01-10 11:50:11,021 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copy_file.c, builtAs -> y, generated -> false, objectFile -> copy_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,021 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,021 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,021 DEBUG PCDerivation$ Expression of path for object occurrence libbb/copy_file.c: [TRUE]
2012-01-10 11:50:11,021 DEBUG PCDerivation$ Trying to find path for: [Object: copyfd]
2012-01-10 11:50:11,021 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copyfd.c, builtAs -> y, generated -> false, objectFile -> copyfd, listName -> lib)
2012-01-10 11:50:11,021 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copyfd.c, builtAs -> y, generated -> false, objectFile -> copyfd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,021 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,021 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,021 DEBUG PCDerivation$ Expression of path for object occurrence libbb/copyfd.c: [TRUE]
2012-01-10 11:50:11,021 DEBUG PCDerivation$ Trying to find path for: [Object: crc32]
2012-01-10 11:50:11,021 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/crc32.c, builtAs -> y, generated -> false, objectFile -> crc32, listName -> lib)
2012-01-10 11:50:11,022 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/crc32.c, builtAs -> y, generated -> false, objectFile -> crc32, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,022 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,022 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,022 DEBUG PCDerivation$ Expression of path for object occurrence libbb/crc32.c: [TRUE]
2012-01-10 11:50:11,022 DEBUG PCDerivation$ Trying to find path for: [Object: create_icmp6_socket]
2012-01-10 11:50:11,022 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp6_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp6_socket, listName -> lib)
2012-01-10 11:50:11,022 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp6_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp6_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,022 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,022 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,022 DEBUG PCDerivation$ Expression of path for object occurrence libbb/create_icmp6_socket.c: [TRUE]
2012-01-10 11:50:11,022 DEBUG PCDerivation$ Trying to find path for: [Object: create_icmp_socket]
2012-01-10 11:50:11,022 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp_socket, listName -> lib)
2012-01-10 11:50:11,022 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,022 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,023 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,023 DEBUG PCDerivation$ Expression of path for object occurrence libbb/create_icmp_socket.c: [TRUE]
2012-01-10 11:50:11,023 DEBUG PCDerivation$ Trying to find path for: [Object: default_error_retval]
2012-01-10 11:50:11,023 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/default_error_retval.c, builtAs -> y, generated -> false, objectFile -> default_error_retval, listName -> lib)
2012-01-10 11:50:11,023 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/default_error_retval.c, builtAs -> y, generated -> false, objectFile -> default_error_retval, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,023 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,023 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,023 DEBUG PCDerivation$ Expression of path for object occurrence libbb/default_error_retval.c: [TRUE]
2012-01-10 11:50:11,023 DEBUG PCDerivation$ Trying to find path for: [Object: device_open]
2012-01-10 11:50:11,023 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/device_open.c, builtAs -> y, generated -> false, objectFile -> device_open, listName -> lib)
2012-01-10 11:50:11,023 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/device_open.c, builtAs -> y, generated -> false, objectFile -> device_open, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,023 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,023 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,023 DEBUG PCDerivation$ Expression of path for object occurrence libbb/device_open.c: [TRUE]
2012-01-10 11:50:11,024 DEBUG PCDerivation$ Trying to find path for: [Object: dump]
2012-01-10 11:50:11,024 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/dump.c, builtAs -> y, generated -> false, objectFile -> dump, listName -> lib)
2012-01-10 11:50:11,024 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/dump.c, builtAs -> y, generated -> false, objectFile -> dump, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,024 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,024 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,024 DEBUG PCDerivation$ Expression of path for object occurrence libbb/dump.c: [TRUE]
2012-01-10 11:50:11,024 DEBUG PCDerivation$ Trying to find path for: [Object: execable]
2012-01-10 11:50:11,024 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/execable.c, builtAs -> y, generated -> false, objectFile -> execable, listName -> lib)
2012-01-10 11:50:11,024 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/execable.c, builtAs -> y, generated -> false, objectFile -> execable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,024 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,024 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,024 DEBUG PCDerivation$ Expression of path for object occurrence libbb/execable.c: [TRUE]
2012-01-10 11:50:11,024 DEBUG PCDerivation$ Trying to find path for: [Object: fclose_nonstdin]
2012-01-10 11:50:11,025 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fclose_nonstdin.c, builtAs -> y, generated -> false, objectFile -> fclose_nonstdin, listName -> lib)
2012-01-10 11:50:11,025 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fclose_nonstdin.c, builtAs -> y, generated -> false, objectFile -> fclose_nonstdin, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,025 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,025 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,025 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fclose_nonstdin.c: [TRUE]
2012-01-10 11:50:11,025 DEBUG PCDerivation$ Trying to find path for: [Object: fflush_stdout_and_exit]
2012-01-10 11:50:11,025 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fflush_stdout_and_exit.c, builtAs -> y, generated -> false, objectFile -> fflush_stdout_and_exit, listName -> lib)
2012-01-10 11:50:11,025 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fflush_stdout_and_exit.c, builtAs -> y, generated -> false, objectFile -> fflush_stdout_and_exit, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,025 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,025 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,025 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fflush_stdout_and_exit.c: [TRUE]
2012-01-10 11:50:11,025 DEBUG PCDerivation$ Trying to find path for: [Object: fgets_str]
2012-01-10 11:50:11,025 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fgets_str.c, builtAs -> y, generated -> false, objectFile -> fgets_str, listName -> lib)
2012-01-10 11:50:11,026 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fgets_str.c, builtAs -> y, generated -> false, objectFile -> fgets_str, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,026 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,026 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,026 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fgets_str.c: [TRUE]
2012-01-10 11:50:11,026 DEBUG PCDerivation$ Trying to find path for: [Object: find_pid_by_name]
2012-01-10 11:50:11,026 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_pid_by_name.c, builtAs -> y, generated -> false, objectFile -> find_pid_by_name, listName -> lib)
2012-01-10 11:50:11,026 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_pid_by_name.c, builtAs -> y, generated -> false, objectFile -> find_pid_by_name, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,026 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,026 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,026 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_pid_by_name.c: [TRUE]
2012-01-10 11:50:11,026 DEBUG PCDerivation$ Trying to find path for: [Object: find_root_device]
2012-01-10 11:50:11,026 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_root_device.c, builtAs -> y, generated -> false, objectFile -> find_root_device, listName -> lib)
2012-01-10 11:50:11,026 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_root_device.c, builtAs -> y, generated -> false, objectFile -> find_root_device, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,026 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,027 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,027 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_root_device.c: [TRUE]
2012-01-10 11:50:11,027 DEBUG PCDerivation$ Trying to find path for: [Object: full_write]
2012-01-10 11:50:11,027 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/full_write.c, builtAs -> y, generated -> false, objectFile -> full_write, listName -> lib)
2012-01-10 11:50:11,027 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/full_write.c, builtAs -> y, generated -> false, objectFile -> full_write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,027 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,027 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,027 DEBUG PCDerivation$ Expression of path for object occurrence libbb/full_write.c: [TRUE]
2012-01-10 11:50:11,027 DEBUG PCDerivation$ Trying to find path for: [Object: get_console]
2012-01-10 11:50:11,027 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_console.c, builtAs -> y, generated -> false, objectFile -> get_console, listName -> lib)
2012-01-10 11:50:11,027 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_console.c, builtAs -> y, generated -> false, objectFile -> get_console, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,027 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,027 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,028 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_console.c: [TRUE]
2012-01-10 11:50:11,028 DEBUG PCDerivation$ Trying to find path for: [Object: get_last_path_component]
2012-01-10 11:50:11,028 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_last_path_component.c, builtAs -> y, generated -> false, objectFile -> get_last_path_component, listName -> lib)
2012-01-10 11:50:11,028 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_last_path_component.c, builtAs -> y, generated -> false, objectFile -> get_last_path_component, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,028 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,028 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,028 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_last_path_component.c: [TRUE]
2012-01-10 11:50:11,028 DEBUG PCDerivation$ Trying to find path for: [Object: get_line_from_file]
2012-01-10 11:50:11,028 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_line_from_file.c, builtAs -> y, generated -> false, objectFile -> get_line_from_file, listName -> lib)
2012-01-10 11:50:11,028 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_line_from_file.c, builtAs -> y, generated -> false, objectFile -> get_line_from_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,028 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,028 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,029 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_line_from_file.c: [TRUE]
2012-01-10 11:50:11,029 DEBUG PCDerivation$ Trying to find path for: [Object: getopt32]
2012-01-10 11:50:11,029 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getopt32.c, builtAs -> y, generated -> false, objectFile -> getopt32, listName -> lib)
2012-01-10 11:50:11,029 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getopt32.c, builtAs -> y, generated -> false, objectFile -> getopt32, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,029 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,029 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,029 DEBUG PCDerivation$ Expression of path for object occurrence libbb/getopt32.c: [TRUE]
2012-01-10 11:50:11,029 DEBUG PCDerivation$ Trying to find path for: [Object: getpty]
2012-01-10 11:50:11,029 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getpty.c, builtAs -> y, generated -> false, objectFile -> getpty, listName -> lib)
2012-01-10 11:50:11,029 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getpty.c, builtAs -> y, generated -> false, objectFile -> getpty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,029 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,029 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,029 DEBUG PCDerivation$ Expression of path for object occurrence libbb/getpty.c: [TRUE]
2012-01-10 11:50:11,029 DEBUG PCDerivation$ Trying to find path for: [Object: get_volsize]
2012-01-10 11:50:11,030 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_volsize.c, builtAs -> y, generated -> false, objectFile -> get_volsize, listName -> lib)
2012-01-10 11:50:11,030 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_volsize.c, builtAs -> y, generated -> false, objectFile -> get_volsize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,030 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,030 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,030 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_volsize.c: [TRUE]
2012-01-10 11:50:11,030 DEBUG PCDerivation$ Trying to find path for: [Object: herror_msg]
2012-01-10 11:50:11,030 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/herror_msg.c, builtAs -> y, generated -> false, objectFile -> herror_msg, listName -> lib)
2012-01-10 11:50:11,030 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/herror_msg.c, builtAs -> y, generated -> false, objectFile -> herror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,030 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,030 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,030 DEBUG PCDerivation$ Expression of path for object occurrence libbb/herror_msg.c: [TRUE]
2012-01-10 11:50:11,030 DEBUG PCDerivation$ Trying to find path for: [Object: human_readable]
2012-01-10 11:50:11,030 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/human_readable.c, builtAs -> y, generated -> false, objectFile -> human_readable, listName -> lib)
2012-01-10 11:50:11,031 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/human_readable.c, builtAs -> y, generated -> false, objectFile -> human_readable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,031 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,031 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,031 DEBUG PCDerivation$ Expression of path for object occurrence libbb/human_readable.c: [TRUE]
2012-01-10 11:50:11,031 DEBUG PCDerivation$ Trying to find path for: [Object: inet_common]
2012-01-10 11:50:11,031 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inet_common.c, builtAs -> y, generated -> false, objectFile -> inet_common, listName -> lib)
2012-01-10 11:50:11,031 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inet_common.c, builtAs -> y, generated -> false, objectFile -> inet_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,031 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,031 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,031 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inet_common.c: [TRUE]
2012-01-10 11:50:11,031 DEBUG PCDerivation$ Trying to find path for: [Object: info_msg]
2012-01-10 11:50:11,031 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/info_msg.c, builtAs -> y, generated -> false, objectFile -> info_msg, listName -> lib)
2012-01-10 11:50:11,031 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/info_msg.c, builtAs -> y, generated -> false, objectFile -> info_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,031 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,032 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,032 DEBUG PCDerivation$ Expression of path for object occurrence libbb/info_msg.c: [TRUE]
2012-01-10 11:50:11,032 DEBUG PCDerivation$ Trying to find path for: [Object: inode_hash]
2012-01-10 11:50:11,032 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inode_hash.c, builtAs -> y, generated -> false, objectFile -> inode_hash, listName -> lib)
2012-01-10 11:50:11,032 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inode_hash.c, builtAs -> y, generated -> false, objectFile -> inode_hash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,032 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,032 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,032 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inode_hash.c: [TRUE]
2012-01-10 11:50:11,032 DEBUG PCDerivation$ Trying to find path for: [Object: isdirectory]
2012-01-10 11:50:11,032 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/isdirectory.c, builtAs -> y, generated -> false, objectFile -> isdirectory, listName -> lib)
2012-01-10 11:50:11,032 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/isdirectory.c, builtAs -> y, generated -> false, objectFile -> isdirectory, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,032 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,032 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,032 DEBUG PCDerivation$ Expression of path for object occurrence libbb/isdirectory.c: [TRUE]
2012-01-10 11:50:11,033 DEBUG PCDerivation$ Trying to find path for: [Object: kernel_version]
2012-01-10 11:50:11,033 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/kernel_version.c, builtAs -> y, generated -> false, objectFile -> kernel_version, listName -> lib)
2012-01-10 11:50:11,033 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/kernel_version.c, builtAs -> y, generated -> false, objectFile -> kernel_version, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,033 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,033 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,033 DEBUG PCDerivation$ Expression of path for object occurrence libbb/kernel_version.c: [TRUE]
2012-01-10 11:50:11,033 DEBUG PCDerivation$ Trying to find path for: [Object: last_char_is]
2012-01-10 11:50:11,033 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/last_char_is.c, builtAs -> y, generated -> false, objectFile -> last_char_is, listName -> lib)
2012-01-10 11:50:11,033 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/last_char_is.c, builtAs -> y, generated -> false, objectFile -> last_char_is, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,033 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,033 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,033 DEBUG PCDerivation$ Expression of path for object occurrence libbb/last_char_is.c: [TRUE]
2012-01-10 11:50:11,033 DEBUG PCDerivation$ Trying to find path for: [Object: lineedit]
2012-01-10 11:50:11,033 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit.c, builtAs -> y, generated -> false, objectFile -> lineedit, listName -> lib)
2012-01-10 11:50:11,034 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit.c, builtAs -> y, generated -> false, objectFile -> lineedit, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,034 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,034 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,034 DEBUG PCDerivation$ Expression of path for object occurrence libbb/lineedit.c: [TRUE]
2012-01-10 11:50:11,034 DEBUG PCDerivation$ Trying to find path for: [Object: lineedit_ptr_hack]
2012-01-10 11:50:11,034 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit_ptr_hack.c, builtAs -> y, generated -> false, objectFile -> lineedit_ptr_hack, listName -> lib)
2012-01-10 11:50:11,034 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit_ptr_hack.c, builtAs -> y, generated -> false, objectFile -> lineedit_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,034 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,034 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,034 DEBUG PCDerivation$ Expression of path for object occurrence libbb/lineedit_ptr_hack.c: [TRUE]
2012-01-10 11:50:11,034 DEBUG PCDerivation$ Trying to find path for: [Object: llist]
2012-01-10 11:50:11,034 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/llist.c, builtAs -> y, generated -> false, objectFile -> llist, listName -> lib)
2012-01-10 11:50:11,034 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/llist.c, builtAs -> y, generated -> false, objectFile -> llist, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,034 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,035 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,035 DEBUG PCDerivation$ Expression of path for object occurrence libbb/llist.c: [TRUE]
2012-01-10 11:50:11,035 DEBUG PCDerivation$ Trying to find path for: [Object: login]
2012-01-10 11:50:11,035 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/login.c, builtAs -> y, generated -> false, objectFile -> login, listName -> lib)
2012-01-10 11:50:11,035 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/login.c, builtAs -> y, generated -> false, objectFile -> login, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,035 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,035 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,035 DEBUG PCDerivation$ Expression of path for object occurrence libbb/login.c: [TRUE]
2012-01-10 11:50:11,035 DEBUG PCDerivation$ Trying to find path for: [Object: make_directory]
2012-01-10 11:50:11,035 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/make_directory.c, builtAs -> y, generated -> false, objectFile -> make_directory, listName -> lib)
2012-01-10 11:50:11,035 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/make_directory.c, builtAs -> y, generated -> false, objectFile -> make_directory, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,035 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,035 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,035 DEBUG PCDerivation$ Expression of path for object occurrence libbb/make_directory.c: [TRUE]
2012-01-10 11:50:11,035 DEBUG PCDerivation$ Trying to find path for: [Object: makedev]
2012-01-10 11:50:11,035 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/makedev.c, builtAs -> y, generated -> false, objectFile -> makedev, listName -> lib)
2012-01-10 11:50:11,036 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/makedev.c, builtAs -> y, generated -> false, objectFile -> makedev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,036 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,036 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,036 DEBUG PCDerivation$ Expression of path for object occurrence libbb/makedev.c: [TRUE]
2012-01-10 11:50:11,036 DEBUG PCDerivation$ Trying to find path for: [Object: hash_md5_sha]
2012-01-10 11:50:11,036 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/hash_md5_sha.c, builtAs -> y, generated -> false, objectFile -> hash_md5_sha, listName -> lib)
2012-01-10 11:50:11,036 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/hash_md5_sha.c, builtAs -> y, generated -> false, objectFile -> hash_md5_sha, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,036 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,036 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,036 DEBUG PCDerivation$ Expression of path for object occurrence libbb/hash_md5_sha.c: [TRUE]
2012-01-10 11:50:11,036 DEBUG PCDerivation$ Trying to find path for: [Object: messages]
2012-01-10 11:50:11,036 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/messages.c, builtAs -> y, generated -> false, objectFile -> messages, listName -> lib)
2012-01-10 11:50:11,036 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/messages.c, builtAs -> y, generated -> false, objectFile -> messages, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,036 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,036 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,037 DEBUG PCDerivation$ Expression of path for object occurrence libbb/messages.c: [TRUE]
2012-01-10 11:50:11,037 DEBUG PCDerivation$ Trying to find path for: [Object: mode_string]
2012-01-10 11:50:11,037 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/mode_string.c, builtAs -> y, generated -> false, objectFile -> mode_string, listName -> lib)
2012-01-10 11:50:11,037 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/mode_string.c, builtAs -> y, generated -> false, objectFile -> mode_string, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,037 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,037 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,037 DEBUG PCDerivation$ Expression of path for object occurrence libbb/mode_string.c: [TRUE]
2012-01-10 11:50:11,037 DEBUG PCDerivation$ Trying to find path for: [Object: parse_mode]
2012-01-10 11:50:11,037 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_mode.c, builtAs -> y, generated -> false, objectFile -> parse_mode, listName -> lib)
2012-01-10 11:50:11,037 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_mode.c, builtAs -> y, generated -> false, objectFile -> parse_mode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,037 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,037 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,037 DEBUG PCDerivation$ Expression of path for object occurrence libbb/parse_mode.c: [TRUE]
2012-01-10 11:50:11,037 DEBUG PCDerivation$ Trying to find path for: [Object: perror_msg]
2012-01-10 11:50:11,037 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_msg.c, builtAs -> y, generated -> false, objectFile -> perror_msg, listName -> lib)
2012-01-10 11:50:11,037 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_msg.c, builtAs -> y, generated -> false, objectFile -> perror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,037 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,038 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,038 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_msg.c: [TRUE]
2012-01-10 11:50:11,038 DEBUG PCDerivation$ Trying to find path for: [Object: perror_nomsg]
2012-01-10 11:50:11,038 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg, listName -> lib)
2012-01-10 11:50:11,038 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,038 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,038 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,038 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_nomsg.c: [TRUE]
2012-01-10 11:50:11,038 DEBUG PCDerivation$ Trying to find path for: [Object: perror_nomsg_and_die]
2012-01-10 11:50:11,038 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg_and_die.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg_and_die, listName -> lib)
2012-01-10 11:50:11,038 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg_and_die.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg_and_die, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,038 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,038 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,038 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_nomsg_and_die.c: [TRUE]
2012-01-10 11:50:11,038 DEBUG PCDerivation$ Trying to find path for: [Object: pidfile]
2012-01-10 11:50:11,039 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/pidfile.c, builtAs -> y, generated -> false, objectFile -> pidfile, listName -> lib)
2012-01-10 11:50:11,039 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/pidfile.c, builtAs -> y, generated -> false, objectFile -> pidfile, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,039 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,039 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,039 DEBUG PCDerivation$ Expression of path for object occurrence libbb/pidfile.c: [TRUE]
2012-01-10 11:50:11,039 DEBUG PCDerivation$ Trying to find path for: [Object: platform]
2012-01-10 11:50:11,039 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/platform.c, builtAs -> y, generated -> false, objectFile -> platform, listName -> lib)
2012-01-10 11:50:11,039 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/platform.c, builtAs -> y, generated -> false, objectFile -> platform, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,039 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,039 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,039 DEBUG PCDerivation$ Expression of path for object occurrence libbb/platform.c: [TRUE]
2012-01-10 11:50:11,039 DEBUG PCDerivation$ Trying to find path for: [Object: printable]
2012-01-10 11:50:11,039 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable.c, builtAs -> y, generated -> false, objectFile -> printable, listName -> lib)
2012-01-10 11:50:11,039 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable.c, builtAs -> y, generated -> false, objectFile -> printable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,039 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,040 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,040 DEBUG PCDerivation$ Expression of path for object occurrence libbb/printable.c: [TRUE]
2012-01-10 11:50:11,040 DEBUG PCDerivation$ Trying to find path for: [Object: printable_string]
2012-01-10 11:50:11,040 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable_string.c, builtAs -> y, generated -> false, objectFile -> printable_string, listName -> lib)
2012-01-10 11:50:11,040 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable_string.c, builtAs -> y, generated -> false, objectFile -> printable_string, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,040 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,040 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,040 DEBUG PCDerivation$ Expression of path for object occurrence libbb/printable_string.c: [TRUE]
2012-01-10 11:50:11,040 DEBUG PCDerivation$ Trying to find path for: [Object: print_flags]
2012-01-10 11:50:11,040 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/print_flags.c, builtAs -> y, generated -> false, objectFile -> print_flags, listName -> lib)
2012-01-10 11:50:11,040 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/print_flags.c, builtAs -> y, generated -> false, objectFile -> print_flags, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,040 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,040 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,040 DEBUG PCDerivation$ Expression of path for object occurrence libbb/print_flags.c: [TRUE]
2012-01-10 11:50:11,040 DEBUG PCDerivation$ Trying to find path for: [Object: process_escape_sequence]
2012-01-10 11:50:11,041 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/process_escape_sequence.c, builtAs -> y, generated -> false, objectFile -> process_escape_sequence, listName -> lib)
2012-01-10 11:50:11,041 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/process_escape_sequence.c, builtAs -> y, generated -> false, objectFile -> process_escape_sequence, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,041 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,041 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,041 DEBUG PCDerivation$ Expression of path for object occurrence libbb/process_escape_sequence.c: [TRUE]
2012-01-10 11:50:11,041 DEBUG PCDerivation$ Trying to find path for: [Object: procps]
2012-01-10 11:50:11,041 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/procps.c, builtAs -> y, generated -> false, objectFile -> procps, listName -> lib)
2012-01-10 11:50:11,041 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/procps.c, builtAs -> y, generated -> false, objectFile -> procps, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,041 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,041 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,041 DEBUG PCDerivation$ Expression of path for object occurrence libbb/procps.c: [TRUE]
2012-01-10 11:50:11,041 DEBUG PCDerivation$ Trying to find path for: [Object: progress]
2012-01-10 11:50:11,041 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/progress.c, builtAs -> y, generated -> false, objectFile -> progress, listName -> lib)
2012-01-10 11:50:11,041 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/progress.c, builtAs -> y, generated -> false, objectFile -> progress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,041 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,042 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,042 DEBUG PCDerivation$ Expression of path for object occurrence libbb/progress.c: [TRUE]
2012-01-10 11:50:11,042 DEBUG PCDerivation$ Trying to find path for: [Object: ptr_to_globals]
2012-01-10 11:50:11,042 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ptr_to_globals.c, builtAs -> y, generated -> false, objectFile -> ptr_to_globals, listName -> lib)
2012-01-10 11:50:11,042 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ptr_to_globals.c, builtAs -> y, generated -> false, objectFile -> ptr_to_globals, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,042 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,042 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,042 DEBUG PCDerivation$ Expression of path for object occurrence libbb/ptr_to_globals.c: [TRUE]
2012-01-10 11:50:11,042 DEBUG PCDerivation$ Trying to find path for: [Object: read]
2012-01-10 11:50:11,042 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read.c, builtAs -> y, generated -> false, objectFile -> read, listName -> lib)
2012-01-10 11:50:11,042 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read.c, builtAs -> y, generated -> false, objectFile -> read, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,042 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,042 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,042 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read.c: [TRUE]
2012-01-10 11:50:11,042 DEBUG PCDerivation$ Trying to find path for: [Object: read_printf]
2012-01-10 11:50:11,042 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_printf.c, builtAs -> y, generated -> false, objectFile -> read_printf, listName -> lib)
2012-01-10 11:50:11,043 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_printf.c, builtAs -> y, generated -> false, objectFile -> read_printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,043 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,043 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,043 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read_printf.c: [TRUE]
2012-01-10 11:50:11,043 DEBUG PCDerivation$ Trying to find path for: [Object: read_key]
2012-01-10 11:50:11,043 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_key.c, builtAs -> y, generated -> false, objectFile -> read_key, listName -> lib)
2012-01-10 11:50:11,043 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_key.c, builtAs -> y, generated -> false, objectFile -> read_key, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,043 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,043 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,043 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read_key.c: [TRUE]
2012-01-10 11:50:11,043 DEBUG PCDerivation$ Trying to find path for: [Object: recursive_action]
2012-01-10 11:50:11,043 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/recursive_action.c, builtAs -> y, generated -> false, objectFile -> recursive_action, listName -> lib)
2012-01-10 11:50:11,043 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/recursive_action.c, builtAs -> y, generated -> false, objectFile -> recursive_action, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,043 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,043 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,043 DEBUG PCDerivation$ Expression of path for object occurrence libbb/recursive_action.c: [TRUE]
2012-01-10 11:50:11,044 DEBUG PCDerivation$ Trying to find path for: [Object: remove_file]
2012-01-10 11:50:11,044 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/remove_file.c, builtAs -> y, generated -> false, objectFile -> remove_file, listName -> lib)
2012-01-10 11:50:11,044 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/remove_file.c, builtAs -> y, generated -> false, objectFile -> remove_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,044 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,044 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,044 DEBUG PCDerivation$ Expression of path for object occurrence libbb/remove_file.c: [TRUE]
2012-01-10 11:50:11,044 DEBUG PCDerivation$ Trying to find path for: [Object: run_shell]
2012-01-10 11:50:11,044 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/run_shell.c, builtAs -> y, generated -> false, objectFile -> run_shell, listName -> lib)
2012-01-10 11:50:11,044 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/run_shell.c, builtAs -> y, generated -> false, objectFile -> run_shell, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,044 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,044 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,044 DEBUG PCDerivation$ Expression of path for object occurrence libbb/run_shell.c: [TRUE]
2012-01-10 11:50:11,044 DEBUG PCDerivation$ Trying to find path for: [Object: safe_gethostname]
2012-01-10 11:50:11,044 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_gethostname.c, builtAs -> y, generated -> false, objectFile -> safe_gethostname, listName -> lib)
2012-01-10 11:50:11,044 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_gethostname.c, builtAs -> y, generated -> false, objectFile -> safe_gethostname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,045 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,045 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,045 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_gethostname.c: [TRUE]
2012-01-10 11:50:11,045 DEBUG PCDerivation$ Trying to find path for: [Object: safe_poll]
2012-01-10 11:50:11,045 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_poll.c, builtAs -> y, generated -> false, objectFile -> safe_poll, listName -> lib)
2012-01-10 11:50:11,045 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_poll.c, builtAs -> y, generated -> false, objectFile -> safe_poll, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,045 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,045 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,045 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_poll.c: [TRUE]
2012-01-10 11:50:11,045 DEBUG PCDerivation$ Trying to find path for: [Object: safe_strncpy]
2012-01-10 11:50:11,045 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_strncpy.c, builtAs -> y, generated -> false, objectFile -> safe_strncpy, listName -> lib)
2012-01-10 11:50:11,045 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_strncpy.c, builtAs -> y, generated -> false, objectFile -> safe_strncpy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,045 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,045 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,045 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_strncpy.c: [TRUE]
2012-01-10 11:50:11,045 DEBUG PCDerivation$ Trying to find path for: [Object: safe_write]
2012-01-10 11:50:11,045 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_write.c, builtAs -> y, generated -> false, objectFile -> safe_write, listName -> lib)
2012-01-10 11:50:11,046 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_write.c, builtAs -> y, generated -> false, objectFile -> safe_write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,046 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,046 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,046 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_write.c: [TRUE]
2012-01-10 11:50:11,046 DEBUG PCDerivation$ Trying to find path for: [Object: setup_environment]
2012-01-10 11:50:11,046 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/setup_environment.c, builtAs -> y, generated -> false, objectFile -> setup_environment, listName -> lib)
2012-01-10 11:50:11,046 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/setup_environment.c, builtAs -> y, generated -> false, objectFile -> setup_environment, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,046 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,046 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,046 DEBUG PCDerivation$ Expression of path for object occurrence libbb/setup_environment.c: [TRUE]
2012-01-10 11:50:11,046 DEBUG PCDerivation$ Trying to find path for: [Object: signals]
2012-01-10 11:50:11,046 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/signals.c, builtAs -> y, generated -> false, objectFile -> signals, listName -> lib)
2012-01-10 11:50:11,046 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/signals.c, builtAs -> y, generated -> false, objectFile -> signals, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,046 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,046 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,046 DEBUG PCDerivation$ Expression of path for object occurrence libbb/signals.c: [TRUE]
2012-01-10 11:50:11,046 DEBUG PCDerivation$ Trying to find path for: [Object: simplify_path]
2012-01-10 11:50:11,046 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/simplify_path.c, builtAs -> y, generated -> false, objectFile -> simplify_path, listName -> lib)
2012-01-10 11:50:11,047 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/simplify_path.c, builtAs -> y, generated -> false, objectFile -> simplify_path, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,047 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,047 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,047 DEBUG PCDerivation$ Expression of path for object occurrence libbb/simplify_path.c: [TRUE]
2012-01-10 11:50:11,047 DEBUG PCDerivation$ Trying to find path for: [Object: single_argv]
2012-01-10 11:50:11,047 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/single_argv.c, builtAs -> y, generated -> false, objectFile -> single_argv, listName -> lib)
2012-01-10 11:50:11,047 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/single_argv.c, builtAs -> y, generated -> false, objectFile -> single_argv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,047 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,047 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,047 DEBUG PCDerivation$ Expression of path for object occurrence libbb/single_argv.c: [TRUE]
2012-01-10 11:50:11,047 DEBUG PCDerivation$ Trying to find path for: [Object: skip_whitespace]
2012-01-10 11:50:11,047 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/skip_whitespace.c, builtAs -> y, generated -> false, objectFile -> skip_whitespace, listName -> lib)
2012-01-10 11:50:11,047 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/skip_whitespace.c, builtAs -> y, generated -> false, objectFile -> skip_whitespace, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,047 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,047 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,047 DEBUG PCDerivation$ Expression of path for object occurrence libbb/skip_whitespace.c: [TRUE]
2012-01-10 11:50:11,047 DEBUG PCDerivation$ Trying to find path for: [Object: speed_table]
2012-01-10 11:50:11,047 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/speed_table.c, builtAs -> y, generated -> false, objectFile -> speed_table, listName -> lib)
2012-01-10 11:50:11,047 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/speed_table.c, builtAs -> y, generated -> false, objectFile -> speed_table, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,048 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,048 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,048 DEBUG PCDerivation$ Expression of path for object occurrence libbb/speed_table.c: [TRUE]
2012-01-10 11:50:11,048 DEBUG PCDerivation$ Trying to find path for: [Object: str_tolower]
2012-01-10 11:50:11,048 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/str_tolower.c, builtAs -> y, generated -> false, objectFile -> str_tolower, listName -> lib)
2012-01-10 11:50:11,048 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/str_tolower.c, builtAs -> y, generated -> false, objectFile -> str_tolower, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,048 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,048 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,048 DEBUG PCDerivation$ Expression of path for object occurrence libbb/str_tolower.c: [TRUE]
2012-01-10 11:50:11,048 DEBUG PCDerivation$ Trying to find path for: [Object: strrstr]
2012-01-10 11:50:11,048 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/strrstr.c, builtAs -> y, generated -> false, objectFile -> strrstr, listName -> lib)
2012-01-10 11:50:11,048 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/strrstr.c, builtAs -> y, generated -> false, objectFile -> strrstr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,048 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,048 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,048 DEBUG PCDerivation$ Expression of path for object occurrence libbb/strrstr.c: [TRUE]
2012-01-10 11:50:11,048 DEBUG PCDerivation$ Trying to find path for: [Object: time]
2012-01-10 11:50:11,048 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/time.c, builtAs -> y, generated -> false, objectFile -> time, listName -> lib)
2012-01-10 11:50:11,048 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/time.c, builtAs -> y, generated -> false, objectFile -> time, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,049 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,049 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,049 DEBUG PCDerivation$ Expression of path for object occurrence libbb/time.c: [TRUE]
2012-01-10 11:50:11,049 DEBUG PCDerivation$ Trying to find path for: [Object: trim]
2012-01-10 11:50:11,049 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/trim.c, builtAs -> y, generated -> false, objectFile -> trim, listName -> lib)
2012-01-10 11:50:11,049 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/trim.c, builtAs -> y, generated -> false, objectFile -> trim, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,049 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,049 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,049 DEBUG PCDerivation$ Expression of path for object occurrence libbb/trim.c: [TRUE]
2012-01-10 11:50:11,049 DEBUG PCDerivation$ Trying to find path for: [Object: u_signal_names]
2012-01-10 11:50:11,049 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/u_signal_names.c, builtAs -> y, generated -> false, objectFile -> u_signal_names, listName -> lib)
2012-01-10 11:50:11,049 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/u_signal_names.c, builtAs -> y, generated -> false, objectFile -> u_signal_names, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,049 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,049 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,049 DEBUG PCDerivation$ Expression of path for object occurrence libbb/u_signal_names.c: [TRUE]
2012-01-10 11:50:11,049 DEBUG PCDerivation$ Trying to find path for: [Object: uuencode]
2012-01-10 11:50:11,049 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/uuencode.c, builtAs -> y, generated -> false, objectFile -> uuencode, listName -> lib)
2012-01-10 11:50:11,049 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/uuencode.c, builtAs -> y, generated -> false, objectFile -> uuencode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,050 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,050 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,050 DEBUG PCDerivation$ Expression of path for object occurrence libbb/uuencode.c: [TRUE]
2012-01-10 11:50:11,050 DEBUG PCDerivation$ Trying to find path for: [Object: vdprintf]
2012-01-10 11:50:11,050 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vdprintf.c, builtAs -> y, generated -> false, objectFile -> vdprintf, listName -> lib)
2012-01-10 11:50:11,050 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vdprintf.c, builtAs -> y, generated -> false, objectFile -> vdprintf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,050 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,050 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,050 DEBUG PCDerivation$ Expression of path for object occurrence libbb/vdprintf.c: [TRUE]
2012-01-10 11:50:11,050 DEBUG PCDerivation$ Trying to find path for: [Object: verror_msg]
2012-01-10 11:50:11,050 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/verror_msg.c, builtAs -> y, generated -> false, objectFile -> verror_msg, listName -> lib)
2012-01-10 11:50:11,050 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/verror_msg.c, builtAs -> y, generated -> false, objectFile -> verror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,050 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,050 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,050 DEBUG PCDerivation$ Expression of path for object occurrence libbb/verror_msg.c: [TRUE]
2012-01-10 11:50:11,050 DEBUG PCDerivation$ Trying to find path for: [Object: vfork_daemon_rexec]
2012-01-10 11:50:11,050 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vfork_daemon_rexec.c, builtAs -> y, generated -> false, objectFile -> vfork_daemon_rexec, listName -> lib)
2012-01-10 11:50:11,050 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vfork_daemon_rexec.c, builtAs -> y, generated -> false, objectFile -> vfork_daemon_rexec, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,051 DEBUG PCDerivation$ Expression of path for object occurrence libbb/vfork_daemon_rexec.c: [TRUE]
2012-01-10 11:50:11,051 DEBUG PCDerivation$ Trying to find path for: [Object: warn_ignoring_args]
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/warn_ignoring_args.c, builtAs -> y, generated -> false, objectFile -> warn_ignoring_args, listName -> lib)
2012-01-10 11:50:11,051 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/warn_ignoring_args.c, builtAs -> y, generated -> false, objectFile -> warn_ignoring_args, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,051 DEBUG PCDerivation$ Expression of path for object occurrence libbb/warn_ignoring_args.c: [TRUE]
2012-01-10 11:50:11,051 DEBUG PCDerivation$ Trying to find path for: [Object: wfopen]
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen.c, builtAs -> y, generated -> false, objectFile -> wfopen, listName -> lib)
2012-01-10 11:50:11,051 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen.c, builtAs -> y, generated -> false, objectFile -> wfopen, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,051 DEBUG PCDerivation$ Expression of path for object occurrence libbb/wfopen.c: [TRUE]
2012-01-10 11:50:11,051 DEBUG PCDerivation$ Trying to find path for: [Object: wfopen_input]
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen_input.c, builtAs -> y, generated -> false, objectFile -> wfopen_input, listName -> lib)
2012-01-10 11:50:11,051 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen_input.c, builtAs -> y, generated -> false, objectFile -> wfopen_input, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,051 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,052 DEBUG PCDerivation$ Expression of path for object occurrence libbb/wfopen_input.c: [TRUE]
2012-01-10 11:50:11,052 DEBUG PCDerivation$ Trying to find path for: [Object: write]
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/write.c, builtAs -> y, generated -> false, objectFile -> write, listName -> lib)
2012-01-10 11:50:11,052 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/write.c, builtAs -> y, generated -> false, objectFile -> write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,052 DEBUG PCDerivation$ Expression of path for object occurrence libbb/write.c: [TRUE]
2012-01-10 11:50:11,052 DEBUG PCDerivation$ Trying to find path for: [Object: xatonum]
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xatonum.c, builtAs -> y, generated -> false, objectFile -> xatonum, listName -> lib)
2012-01-10 11:50:11,052 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xatonum.c, builtAs -> y, generated -> false, objectFile -> xatonum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,052 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xatonum.c: [TRUE]
2012-01-10 11:50:11,052 DEBUG PCDerivation$ Trying to find path for: [Object: xconnect]
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xconnect.c, builtAs -> y, generated -> false, objectFile -> xconnect, listName -> lib)
2012-01-10 11:50:11,052 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xconnect.c, builtAs -> y, generated -> false, objectFile -> xconnect, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,052 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,053 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xconnect.c: [TRUE]
2012-01-10 11:50:11,053 DEBUG PCDerivation$ Trying to find path for: [Object: xfuncs]
2012-01-10 11:50:11,053 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs.c, builtAs -> y, generated -> false, objectFile -> xfuncs, listName -> lib)
2012-01-10 11:50:11,053 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs.c, builtAs -> y, generated -> false, objectFile -> xfuncs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,053 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,053 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,053 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfuncs.c: [TRUE]
2012-01-10 11:50:11,053 DEBUG PCDerivation$ Trying to find path for: [Object: xfuncs_printf]
2012-01-10 11:50:11,053 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs_printf.c, builtAs -> y, generated -> false, objectFile -> xfuncs_printf, listName -> lib)
2012-01-10 11:50:11,053 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs_printf.c, builtAs -> y, generated -> false, objectFile -> xfuncs_printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,053 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,053 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,053 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfuncs_printf.c: [TRUE]
2012-01-10 11:50:11,053 DEBUG PCDerivation$ Trying to find path for: [Object: xfunc_die]
2012-01-10 11:50:11,053 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfunc_die.c, builtAs -> y, generated -> false, objectFile -> xfunc_die, listName -> lib)
2012-01-10 11:50:11,053 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfunc_die.c, builtAs -> y, generated -> false, objectFile -> xfunc_die, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,053 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,053 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,054 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfunc_die.c: [TRUE]
2012-01-10 11:50:11,054 DEBUG PCDerivation$ Trying to find path for: [Object: xgetcwd]
2012-01-10 11:50:11,054 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgetcwd.c, builtAs -> y, generated -> false, objectFile -> xgetcwd, listName -> lib)
2012-01-10 11:50:11,054 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgetcwd.c, builtAs -> y, generated -> false, objectFile -> xgetcwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,054 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,054 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,054 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xgetcwd.c: [TRUE]
2012-01-10 11:50:11,054 DEBUG PCDerivation$ Trying to find path for: [Object: xgethostbyname]
2012-01-10 11:50:11,054 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgethostbyname.c, builtAs -> y, generated -> false, objectFile -> xgethostbyname, listName -> lib)
2012-01-10 11:50:11,054 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgethostbyname.c, builtAs -> y, generated -> false, objectFile -> xgethostbyname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,054 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,054 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,054 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xgethostbyname.c: [TRUE]
2012-01-10 11:50:11,054 DEBUG PCDerivation$ Trying to find path for: [Object: xreadlink]
2012-01-10 11:50:11,054 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xreadlink.c, builtAs -> y, generated -> false, objectFile -> xreadlink, listName -> lib)
2012-01-10 11:50:11,054 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xreadlink.c, builtAs -> y, generated -> false, objectFile -> xreadlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,054 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,054 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,054 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xreadlink.c: [TRUE]
2012-01-10 11:50:11,055 DEBUG PCDerivation$ Trying to find path for: [Object: xrealloc_vector]
2012-01-10 11:50:11,055 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xrealloc_vector.c, builtAs -> y, generated -> false, objectFile -> xrealloc_vector, listName -> lib)
2012-01-10 11:50:11,055 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xrealloc_vector.c, builtAs -> y, generated -> false, objectFile -> xrealloc_vector, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,055 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,055 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,055 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xrealloc_vector.c: [TRUE]
2012-01-10 11:50:11,055 DEBUG PCDerivation$ Trying to find path for: [Object: match_fstype]
2012-01-10 11:50:11,055 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m")), sourceFile -> libbb/match_fstype.c, generated -> false, objectFile -> match_fstype, listName -> lib)
2012-01-10 11:50:11,055 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m")), sourceFile -> libbb/match_fstype.c, generated -> false, objectFile -> match_fstype, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,055 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,055 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,055 DEBUG PCDerivation$ Expression of path for object occurrence libbb/match_fstype.c: ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m"))
2012-01-10 11:50:11,055 DEBUG PCDerivation$ Trying to find path for: [Object: utmp]
2012-01-10 11:50:11,055 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m")), sourceFile -> libbb/utmp.c, generated -> false, objectFile -> utmp, listName -> lib)
2012-01-10 11:50:11,055 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m")), sourceFile -> libbb/utmp.c, generated -> false, objectFile -> utmp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,055 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,055 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,055 DEBUG PCDerivation$ Expression of path for object occurrence libbb/utmp.c: ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m"))
2012-01-10 11:50:11,055 DEBUG PCDerivation$ Trying to find path for: [Object: selinux_common]
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m")), sourceFile -> libbb/selinux_common.c, generated -> false, objectFile -> selinux_common, listName -> lib)
2012-01-10 11:50:11,056 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m")), sourceFile -> libbb/selinux_common.c, generated -> false, objectFile -> selinux_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,056 DEBUG PCDerivation$ Expression of path for object occurrence libbb/selinux_common.c: ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m"))
2012-01-10 11:50:11,056 DEBUG PCDerivation$ Trying to find path for: [Object: mtab]
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m")), sourceFile -> libbb/mtab.c, generated -> false, objectFile -> mtab, listName -> lib)
2012-01-10 11:50:11,056 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m")), sourceFile -> libbb/mtab.c, generated -> false, objectFile -> mtab, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,056 DEBUG PCDerivation$ Expression of path for object occurrence libbb/mtab.c: ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m"))
2012-01-10 11:50:11,056 DEBUG PCDerivation$ Trying to find path for: [Object: unicode]
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m")), sourceFile -> libbb/unicode.c, generated -> false, objectFile -> unicode, listName -> lib)
2012-01-10 11:50:11,056 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m")), sourceFile -> libbb/unicode.c, generated -> false, objectFile -> unicode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,056 DEBUG PCDerivation$ Expression of path for object occurrence libbb/unicode.c: ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m"))
2012-01-10 11:50:11,056 DEBUG PCDerivation$ Trying to find path for: [Object: die_if_bad_username]
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m")), sourceFile -> libbb/die_if_bad_username.c, generated -> false, objectFile -> die_if_bad_username, listName -> lib)
2012-01-10 11:50:11,056 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m")), sourceFile -> libbb/die_if_bad_username.c, generated -> false, objectFile -> die_if_bad_username, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,056 DEBUG PCDerivation$ Expression of path for object occurrence libbb/die_if_bad_username.c: ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m"))
2012-01-10 11:50:11,056 DEBUG PCDerivation$ Trying to find path for: [Object: udp_io]
2012-01-10 11:50:11,056 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))), sourceFile -> libbb/udp_io.c, generated -> false, objectFile -> udp_io, listName -> lib)
2012-01-10 11:50:11,056 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))), sourceFile -> libbb/udp_io.c, generated -> false, objectFile -> udp_io, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,057 DEBUG PCDerivation$ Expression of path for object occurrence libbb/udp_io.c: (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")))
2012-01-10 11:50:11,057 DEBUG PCDerivation$ Trying to find path for: [Object: loop]
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m"))), sourceFile -> libbb/loop.c, generated -> false, objectFile -> loop, listName -> lib)
2012-01-10 11:50:11,057 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m"))), sourceFile -> libbb/loop.c, generated -> false, objectFile -> loop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,057 DEBUG PCDerivation$ Expression of path for object occurrence libbb/loop.c: (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m")))
2012-01-10 11:50:11,057 DEBUG PCDerivation$ Trying to find path for: [Object: update_passwd]
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))), sourceFile -> libbb/update_passwd.c, generated -> false, objectFile -> update_passwd, listName -> lib)
2012-01-10 11:50:11,057 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))), sourceFile -> libbb/update_passwd.c, generated -> false, objectFile -> update_passwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,057 DEBUG PCDerivation$ Expression of path for object occurrence libbb/update_passwd.c: (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")))
2012-01-10 11:50:11,057 DEBUG PCDerivation$ Trying to find path for: [Object: pw_encrypt]
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m"))), sourceFile -> libbb/pw_encrypt.c, generated -> false, objectFile -> pw_encrypt, listName -> lib)
2012-01-10 11:50:11,057 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m"))), sourceFile -> libbb/pw_encrypt.c, generated -> false, objectFile -> pw_encrypt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,057 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,057 DEBUG PCDerivation$ Expression of path for object occurrence libbb/pw_encrypt.c: (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m")))
2012-01-10 11:50:11,057 DEBUG PCDerivation$ Trying to find path for: [Object: obscure]
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> libbb/obscure.c, generated -> false, objectFile -> obscure, listName -> lib)
2012-01-10 11:50:11,058 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> libbb/obscure.c, generated -> false, objectFile -> obscure, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,058 DEBUG PCDerivation$ Expression of path for object occurrence libbb/obscure.c: ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))
2012-01-10 11:50:11,058 DEBUG PCDerivation$ Trying to find path for: [Object: correct_password]
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))), sourceFile -> libbb/correct_password.c, generated -> false, objectFile -> correct_password, listName -> lib)
2012-01-10 11:50:11,058 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))), sourceFile -> libbb/correct_password.c, generated -> false, objectFile -> correct_password, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,058 DEBUG PCDerivation$ Expression of path for object occurrence libbb/correct_password.c: ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")))
2012-01-10 11:50:11,058 DEBUG PCDerivation$ Trying to find path for: [Object: find_mount_point]
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))), sourceFile -> libbb/find_mount_point.c, generated -> false, objectFile -> find_mount_point, listName -> lib)
2012-01-10 11:50:11,058 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))), sourceFile -> libbb/find_mount_point.c, generated -> false, objectFile -> find_mount_point, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,058 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_mount_point.c: (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")))
2012-01-10 11:50:11,058 DEBUG PCDerivation$ Trying to find path for: [Object: rtc]
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))), sourceFile -> libbb/rtc.c, generated -> false, objectFile -> rtc, listName -> lib)
2012-01-10 11:50:11,058 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))), sourceFile -> libbb/rtc.c, generated -> false, objectFile -> rtc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,058 DEBUG PCDerivation$ Expression of path for object occurrence libbb/rtc.c: (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")))
2012-01-10 11:50:11,058 DEBUG PCDerivation$ Trying to find path for: [Object: get_cpu_count]
2012-01-10 11:50:11,058 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))), sourceFile -> libbb/get_cpu_count.c, generated -> false, objectFile -> get_cpu_count, listName -> lib)
2012-01-10 11:50:11,059 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))), sourceFile -> libbb/get_cpu_count.c, generated -> false, objectFile -> get_cpu_count, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,059 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_cpu_count.c: ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")))
2012-01-10 11:50:11,059 DEBUG PCDerivation$ Trying to find path for: [Object: inet_cksum]
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> libbb/inet_cksum.c, generated -> false, objectFile -> inet_cksum, listName -> lib)
2012-01-10 11:50:11,059 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> libbb/inet_cksum.c, generated -> false, objectFile -> inet_cksum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,059 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inet_cksum.c: ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:50:11,059 DEBUG PCDerivation$ Trying to find path for: [Object: xregcomp]
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m"))), sourceFile -> libbb/xregcomp.c, generated -> false, objectFile -> xregcomp, listName -> lib)
2012-01-10 11:50:11,059 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m"))), sourceFile -> libbb/xregcomp.c, generated -> false, objectFile -> xregcomp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,059 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xregcomp.c: (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m")))
2012-01-10 11:50:11,059 DEBUG PCDerivation$ Trying to find path for: [Object: uidgid_get]
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libpwdgrp/uidgid_get.c, builtAs -> y, generated -> false, objectFile -> uidgid_get, listName -> lib)
2012-01-10 11:50:11,059 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libpwdgrp/uidgid_get.c, builtAs -> y, generated -> false, objectFile -> uidgid_get, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:50:11,059 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,059 DEBUG PCDerivation$ Expression of path for object occurrence libpwdgrp/uidgid_get.c: [TRUE]
2012-01-10 11:50:11,059 DEBUG PCDerivation$ Trying to find path for: [Object: pwd_grp]
2012-01-10 11:50:11,059 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m")), sourceFile -> libpwdgrp/pwd_grp.c, generated -> false, objectFile -> pwd_grp, listName -> lib)
2012-01-10 11:50:11,059 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m")), sourceFile -> libpwdgrp/pwd_grp.c, generated -> false, objectFile -> pwd_grp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,060 DEBUG PCDerivation$ Expression of path for object occurrence libpwdgrp/pwd_grp.c: ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m"))
2012-01-10 11:50:11,060 DEBUG PCDerivation$ Trying to find path for: [Object: add-remove-shell]
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m"))), sourceFile -> loginutils/add-remove-shell.c, generated -> false, objectFile -> add-remove-shell, listName -> lib)
2012-01-10 11:50:11,060 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m"))), sourceFile -> loginutils/add-remove-shell.c, generated -> false, objectFile -> add-remove-shell, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,060 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/add-remove-shell.c: (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m")))
2012-01-10 11:50:11,060 DEBUG PCDerivation$ Trying to find path for: [Object: addgroup]
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")), sourceFile -> loginutils/addgroup.c, generated -> false, objectFile -> addgroup, listName -> lib)
2012-01-10 11:50:11,060 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")), sourceFile -> loginutils/addgroup.c, generated -> false, objectFile -> addgroup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,060 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/addgroup.c: ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))
2012-01-10 11:50:11,060 DEBUG PCDerivation$ Trying to find path for: [Object: adduser]
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m")), sourceFile -> loginutils/adduser.c, generated -> false, objectFile -> adduser, listName -> lib)
2012-01-10 11:50:11,060 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m")), sourceFile -> loginutils/adduser.c, generated -> false, objectFile -> adduser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,060 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/adduser.c: ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))
2012-01-10 11:50:11,060 DEBUG PCDerivation$ Trying to find path for: [Object: cryptpw]
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m")), sourceFile -> loginutils/cryptpw.c, generated -> false, objectFile -> cryptpw, listName -> lib)
2012-01-10 11:50:11,060 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m")), sourceFile -> loginutils/cryptpw.c, generated -> false, objectFile -> cryptpw, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,060 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/cryptpw.c: ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Trying to find path for: [Object: chpasswd]
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")), sourceFile -> loginutils/chpasswd.c, generated -> false, objectFile -> chpasswd, listName -> lib)
2012-01-10 11:50:11,061 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")), sourceFile -> loginutils/chpasswd.c, generated -> false, objectFile -> chpasswd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/chpasswd.c: ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Trying to find path for: [Object: getty]
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m")), sourceFile -> loginutils/getty.c, generated -> false, objectFile -> getty, listName -> lib)
2012-01-10 11:50:11,061 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m")), sourceFile -> loginutils/getty.c, generated -> false, objectFile -> getty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/getty.c: ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m"))
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Trying to find path for: [Object: login]
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")), sourceFile -> loginutils/login.c, generated -> false, objectFile -> login, listName -> lib)
2012-01-10 11:50:11,061 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")), sourceFile -> loginutils/login.c, generated -> false, objectFile -> login, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/login.c: ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Trying to find path for: [Object: passwd]
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> loginutils/passwd.c, generated -> false, objectFile -> passwd, listName -> lib)
2012-01-10 11:50:11,061 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> loginutils/passwd.c, generated -> false, objectFile -> passwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/passwd.c: ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))
2012-01-10 11:50:11,061 DEBUG PCDerivation$ Trying to find path for: [Object: su]
2012-01-10 11:50:11,061 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SU == "y") || (CONFIG_SU == "m")), sourceFile -> loginutils/su.c, generated -> false, objectFile -> su, listName -> lib)
2012-01-10 11:50:11,061 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SU == "y") || (CONFIG_SU == "m")), sourceFile -> loginutils/su.c, generated -> false, objectFile -> su, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/su.c: ((CONFIG_SU == "y") || (CONFIG_SU == "m"))
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Trying to find path for: [Object: sulogin]
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m")), sourceFile -> loginutils/sulogin.c, generated -> false, objectFile -> sulogin, listName -> lib)
2012-01-10 11:50:11,062 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m")), sourceFile -> loginutils/sulogin.c, generated -> false, objectFile -> sulogin, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/sulogin.c: ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Trying to find path for: [Object: vlock]
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")), sourceFile -> loginutils/vlock.c, generated -> false, objectFile -> vlock, listName -> lib)
2012-01-10 11:50:11,062 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")), sourceFile -> loginutils/vlock.c, generated -> false, objectFile -> vlock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/vlock.c: ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Trying to find path for: [Object: deluser]
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))), sourceFile -> loginutils/deluser.c, generated -> false, objectFile -> deluser, listName -> lib)
2012-01-10 11:50:11,062 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))), sourceFile -> loginutils/deluser.c, generated -> false, objectFile -> deluser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/deluser.c: (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m")))
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Trying to find path for: [Object: makemime]
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")), sourceFile -> mailutils/makemime.c, generated -> false, objectFile -> makemime, listName -> lib)
2012-01-10 11:50:11,062 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")), sourceFile -> mailutils/makemime.c, generated -> false, objectFile -> makemime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,062 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,062 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/makemime.c: ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m"))
2012-01-10 11:50:11,062 DEBUG PCDerivation$ Trying to find path for: [Object: mail]
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))), sourceFile -> mailutils/mail.c, generated -> false, objectFile -> mail, listName -> lib)
2012-01-10 11:50:11,063 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))), sourceFile -> mailutils/mail.c, generated -> false, objectFile -> mail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,063 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/mail.c: (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")))
2012-01-10 11:50:11,063 DEBUG PCDerivation$ Trying to find path for: [Object: popmaildir]
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m")), sourceFile -> mailutils/popmaildir.c, generated -> false, objectFile -> popmaildir, listName -> lib)
2012-01-10 11:50:11,063 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m")), sourceFile -> mailutils/popmaildir.c, generated -> false, objectFile -> popmaildir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,063 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/popmaildir.c: ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))
2012-01-10 11:50:11,063 DEBUG PCDerivation$ Trying to find path for: [Object: reformime]
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m")), sourceFile -> mailutils/reformime.c, generated -> false, objectFile -> reformime, listName -> lib)
2012-01-10 11:50:11,063 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m")), sourceFile -> mailutils/reformime.c, generated -> false, objectFile -> reformime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,063 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/reformime.c: ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))
2012-01-10 11:50:11,063 DEBUG PCDerivation$ Trying to find path for: [Object: sendmail]
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")), sourceFile -> mailutils/sendmail.c, generated -> false, objectFile -> sendmail, listName -> lib)
2012-01-10 11:50:11,063 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")), sourceFile -> mailutils/sendmail.c, generated -> false, objectFile -> sendmail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,063 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/sendmail.c: ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))
2012-01-10 11:50:11,063 DEBUG PCDerivation$ Trying to find path for: [Object: conspy]
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m")), sourceFile -> miscutils/conspy.c, generated -> false, objectFile -> conspy, listName -> lib)
2012-01-10 11:50:11,063 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m")), sourceFile -> miscutils/conspy.c, generated -> false, objectFile -> conspy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,063 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,064 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,064 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/conspy.c: ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m"))
2012-01-10 11:50:11,064 DEBUG PCDerivation$ Trying to find path for: [Object: nandwrite]
2012-01-10 11:50:11,064 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m"))), sourceFile -> miscutils/nandwrite.c, generated -> false, objectFile -> nandwrite, listName -> lib)
2012-01-10 11:50:11,064 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m"))), sourceFile -> miscutils/nandwrite.c, generated -> false, objectFile -> nandwrite, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,064 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,064 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,064 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/nandwrite.c: (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m")))
2012-01-10 11:50:11,064 DEBUG PCDerivation$ Trying to find path for: [Object: setserial]
2012-01-10 11:50:11,064 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m")), sourceFile -> miscutils/setserial.c, generated -> false, objectFile -> setserial, listName -> lib)
2012-01-10 11:50:11,064 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m")), sourceFile -> miscutils/setserial.c, generated -> false, objectFile -> setserial, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,064 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,064 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,064 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/setserial.c: ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m"))
2012-01-10 11:50:11,064 DEBUG PCDerivation$ Trying to find path for: [Object: ubi_tools]
2012-01-10 11:50:11,064 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m"))), sourceFile -> miscutils/ubi_tools.c, generated -> false, objectFile -> ubi_tools, listName -> lib)
2012-01-10 11:50:11,066 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m"))), sourceFile -> miscutils/ubi_tools.c, generated -> false, objectFile -> ubi_tools, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,066 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,067 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,067 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ubi_tools.c: (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m")))
2012-01-10 11:50:11,067 DEBUG PCDerivation$ Trying to find path for: [Object: adjtimex]
2012-01-10 11:50:11,067 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m")), sourceFile -> miscutils/adjtimex.c, generated -> false, objectFile -> adjtimex, listName -> lib)
2012-01-10 11:50:11,067 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m")), sourceFile -> miscutils/adjtimex.c, generated -> false, objectFile -> adjtimex, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,068 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/adjtimex.c: ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m"))
2012-01-10 11:50:11,068 DEBUG PCDerivation$ Trying to find path for: [Object: bbconfig]
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m")), sourceFile -> miscutils/bbconfig.c, generated -> false, objectFile -> bbconfig, listName -> lib)
2012-01-10 11:50:11,068 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m")), sourceFile -> miscutils/bbconfig.c, generated -> false, objectFile -> bbconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,068 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/bbconfig.c: ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m"))
2012-01-10 11:50:11,068 DEBUG PCDerivation$ Trying to find path for: [Object: beep]
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m")), sourceFile -> miscutils/beep.c, generated -> false, objectFile -> beep, listName -> lib)
2012-01-10 11:50:11,068 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m")), sourceFile -> miscutils/beep.c, generated -> false, objectFile -> beep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,068 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/beep.c: ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m"))
2012-01-10 11:50:11,068 DEBUG PCDerivation$ Trying to find path for: [Object: chat]
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m")), sourceFile -> miscutils/chat.c, generated -> false, objectFile -> chat, listName -> lib)
2012-01-10 11:50:11,068 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m")), sourceFile -> miscutils/chat.c, generated -> false, objectFile -> chat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,068 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,069 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/chat.c: ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m"))
2012-01-10 11:50:11,069 DEBUG PCDerivation$ Trying to find path for: [Object: chrt]
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m")), sourceFile -> miscutils/chrt.c, generated -> false, objectFile -> chrt, listName -> lib)
2012-01-10 11:50:11,069 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m")), sourceFile -> miscutils/chrt.c, generated -> false, objectFile -> chrt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,069 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/chrt.c: ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m"))
2012-01-10 11:50:11,069 DEBUG PCDerivation$ Trying to find path for: [Object: crond]
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CROND == "y") || (CONFIG_CROND == "m")), sourceFile -> miscutils/crond.c, generated -> false, objectFile -> crond, listName -> lib)
2012-01-10 11:50:11,069 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CROND == "y") || (CONFIG_CROND == "m")), sourceFile -> miscutils/crond.c, generated -> false, objectFile -> crond, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,069 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/crond.c: ((CONFIG_CROND == "y") || (CONFIG_CROND == "m"))
2012-01-10 11:50:11,069 DEBUG PCDerivation$ Trying to find path for: [Object: crontab]
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")), sourceFile -> miscutils/crontab.c, generated -> false, objectFile -> crontab, listName -> lib)
2012-01-10 11:50:11,069 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")), sourceFile -> miscutils/crontab.c, generated -> false, objectFile -> crontab, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,069 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/crontab.c: ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))
2012-01-10 11:50:11,069 DEBUG PCDerivation$ Trying to find path for: [Object: dc]
2012-01-10 11:50:11,069 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DC == "y") || (CONFIG_DC == "m")), sourceFile -> miscutils/dc.c, generated -> false, objectFile -> dc, listName -> lib)
2012-01-10 11:50:11,069 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DC == "y") || (CONFIG_DC == "m")), sourceFile -> miscutils/dc.c, generated -> false, objectFile -> dc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,070 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/dc.c: ((CONFIG_DC == "y") || (CONFIG_DC == "m"))
2012-01-10 11:50:11,070 DEBUG PCDerivation$ Trying to find path for: [Object: devfsd]
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m")), sourceFile -> miscutils/devfsd.c, generated -> false, objectFile -> devfsd, listName -> lib)
2012-01-10 11:50:11,070 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m")), sourceFile -> miscutils/devfsd.c, generated -> false, objectFile -> devfsd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,070 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/devfsd.c: ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))
2012-01-10 11:50:11,070 DEBUG PCDerivation$ Trying to find path for: [Object: devmem]
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m")), sourceFile -> miscutils/devmem.c, generated -> false, objectFile -> devmem, listName -> lib)
2012-01-10 11:50:11,070 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m")), sourceFile -> miscutils/devmem.c, generated -> false, objectFile -> devmem, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,070 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/devmem.c: ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m"))
2012-01-10 11:50:11,070 DEBUG PCDerivation$ Trying to find path for: [Object: eject]
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m")), sourceFile -> miscutils/eject.c, generated -> false, objectFile -> eject, listName -> lib)
2012-01-10 11:50:11,070 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m")), sourceFile -> miscutils/eject.c, generated -> false, objectFile -> eject, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,070 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/eject.c: ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m"))
2012-01-10 11:50:11,070 DEBUG PCDerivation$ Trying to find path for: [Object: fbsplash]
2012-01-10 11:50:11,070 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m")), sourceFile -> miscutils/fbsplash.c, generated -> false, objectFile -> fbsplash, listName -> lib)
2012-01-10 11:50:11,070 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m")), sourceFile -> miscutils/fbsplash.c, generated -> false, objectFile -> fbsplash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,071 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/fbsplash.c: ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m"))
2012-01-10 11:50:11,071 DEBUG PCDerivation$ Trying to find path for: [Object: flashcp]
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m")), sourceFile -> miscutils/flashcp.c, generated -> false, objectFile -> flashcp, listName -> lib)
2012-01-10 11:50:11,071 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m")), sourceFile -> miscutils/flashcp.c, generated -> false, objectFile -> flashcp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,071 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flashcp.c: ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m"))
2012-01-10 11:50:11,071 DEBUG PCDerivation$ Trying to find path for: [Object: flash_eraseall]
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m")), sourceFile -> miscutils/flash_eraseall.c, generated -> false, objectFile -> flash_eraseall, listName -> lib)
2012-01-10 11:50:11,071 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m")), sourceFile -> miscutils/flash_eraseall.c, generated -> false, objectFile -> flash_eraseall, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,071 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flash_eraseall.c: ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m"))
2012-01-10 11:50:11,071 DEBUG PCDerivation$ Trying to find path for: [Object: flash_lock_unlock]
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m"))), sourceFile -> miscutils/flash_lock_unlock.c, generated -> false, objectFile -> flash_lock_unlock, listName -> lib)
2012-01-10 11:50:11,071 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m"))), sourceFile -> miscutils/flash_lock_unlock.c, generated -> false, objectFile -> flash_lock_unlock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,071 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flash_lock_unlock.c: (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m")))
2012-01-10 11:50:11,071 DEBUG PCDerivation$ Trying to find path for: [Object: ionice]
2012-01-10 11:50:11,071 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m")), sourceFile -> miscutils/ionice.c, generated -> false, objectFile -> ionice, listName -> lib)
2012-01-10 11:50:11,072 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m")), sourceFile -> miscutils/ionice.c, generated -> false, objectFile -> ionice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,072 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,072 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,072 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ionice.c: ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m"))
2012-01-10 11:50:11,072 DEBUG PCDerivation$ Trying to find path for: [Object: hdparm]
2012-01-10 11:50:11,072 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m")), sourceFile -> miscutils/hdparm.c, generated -> false, objectFile -> hdparm, listName -> lib)
2012-01-10 11:50:11,072 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m")), sourceFile -> miscutils/hdparm.c, generated -> false, objectFile -> hdparm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,072 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,072 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,072 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/hdparm.c: ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m"))
2012-01-10 11:50:11,072 DEBUG PCDerivation$ Trying to find path for: [Object: inotifyd]
2012-01-10 11:50:11,072 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m")), sourceFile -> miscutils/inotifyd.c, generated -> false, objectFile -> inotifyd, listName -> lib)
2012-01-10 11:50:11,072 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m")), sourceFile -> miscutils/inotifyd.c, generated -> false, objectFile -> inotifyd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,072 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,072 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,072 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/inotifyd.c: ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m"))
2012-01-10 11:50:11,072 DEBUG PCDerivation$ Trying to find path for: [Object: last]
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m")), sourceFile -> miscutils/last.c, generated -> false, objectFile -> last, listName -> lib)
2012-01-10 11:50:11,073 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m")), sourceFile -> miscutils/last.c, generated -> false, objectFile -> last, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,073 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/last.c: ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m"))
2012-01-10 11:50:11,073 DEBUG PCDerivation$ Trying to find path for: [Object: last_fancy]
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m")), sourceFile -> miscutils/last_fancy.c, generated -> false, objectFile -> last_fancy, listName -> lib)
2012-01-10 11:50:11,073 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m")), sourceFile -> miscutils/last_fancy.c, generated -> false, objectFile -> last_fancy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,073 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/last_fancy.c: ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m"))
2012-01-10 11:50:11,073 DEBUG PCDerivation$ Trying to find path for: [Object: less]
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LESS == "y") || (CONFIG_LESS == "m")), sourceFile -> miscutils/less.c, generated -> false, objectFile -> less, listName -> lib)
2012-01-10 11:50:11,073 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LESS == "y") || (CONFIG_LESS == "m")), sourceFile -> miscutils/less.c, generated -> false, objectFile -> less, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,073 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/less.c: ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))
2012-01-10 11:50:11,073 DEBUG PCDerivation$ Trying to find path for: [Object: makedevs]
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m")), sourceFile -> miscutils/makedevs.c, generated -> false, objectFile -> makedevs, listName -> lib)
2012-01-10 11:50:11,073 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m")), sourceFile -> miscutils/makedevs.c, generated -> false, objectFile -> makedevs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,073 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,074 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/makedevs.c: ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m"))
2012-01-10 11:50:11,074 DEBUG PCDerivation$ Trying to find path for: [Object: man]
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAN == "y") || (CONFIG_MAN == "m")), sourceFile -> miscutils/man.c, generated -> false, objectFile -> man, listName -> lib)
2012-01-10 11:50:11,074 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAN == "y") || (CONFIG_MAN == "m")), sourceFile -> miscutils/man.c, generated -> false, objectFile -> man, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,074 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/man.c: ((CONFIG_MAN == "y") || (CONFIG_MAN == "m"))
2012-01-10 11:50:11,074 DEBUG PCDerivation$ Trying to find path for: [Object: microcom]
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m")), sourceFile -> miscutils/microcom.c, generated -> false, objectFile -> microcom, listName -> lib)
2012-01-10 11:50:11,074 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m")), sourceFile -> miscutils/microcom.c, generated -> false, objectFile -> microcom, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,074 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/microcom.c: ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m"))
2012-01-10 11:50:11,074 DEBUG PCDerivation$ Trying to find path for: [Object: mountpoint]
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m")), sourceFile -> miscutils/mountpoint.c, generated -> false, objectFile -> mountpoint, listName -> lib)
2012-01-10 11:50:11,074 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m")), sourceFile -> miscutils/mountpoint.c, generated -> false, objectFile -> mountpoint, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,074 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/mountpoint.c: ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m"))
2012-01-10 11:50:11,074 DEBUG PCDerivation$ Trying to find path for: [Object: mt]
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MT == "y") || (CONFIG_MT == "m")), sourceFile -> miscutils/mt.c, generated -> false, objectFile -> mt, listName -> lib)
2012-01-10 11:50:11,074 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MT == "y") || (CONFIG_MT == "m")), sourceFile -> miscutils/mt.c, generated -> false, objectFile -> mt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,074 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,075 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/mt.c: ((CONFIG_MT == "y") || (CONFIG_MT == "m"))
2012-01-10 11:50:11,075 DEBUG PCDerivation$ Trying to find path for: [Object: raidautorun]
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m")), sourceFile -> miscutils/raidautorun.c, generated -> false, objectFile -> raidautorun, listName -> lib)
2012-01-10 11:50:11,075 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m")), sourceFile -> miscutils/raidautorun.c, generated -> false, objectFile -> raidautorun, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,075 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/raidautorun.c: ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m"))
2012-01-10 11:50:11,075 DEBUG PCDerivation$ Trying to find path for: [Object: readahead]
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m")), sourceFile -> miscutils/readahead.c, generated -> false, objectFile -> readahead, listName -> lib)
2012-01-10 11:50:11,075 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m")), sourceFile -> miscutils/readahead.c, generated -> false, objectFile -> readahead, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,075 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/readahead.c: ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m"))
2012-01-10 11:50:11,075 DEBUG PCDerivation$ Trying to find path for: [Object: rfkill]
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m")), sourceFile -> miscutils/rfkill.c, generated -> false, objectFile -> rfkill, listName -> lib)
2012-01-10 11:50:11,075 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m")), sourceFile -> miscutils/rfkill.c, generated -> false, objectFile -> rfkill, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,075 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/rfkill.c: ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m"))
2012-01-10 11:50:11,075 DEBUG PCDerivation$ Trying to find path for: [Object: runlevel]
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m")), sourceFile -> miscutils/runlevel.c, generated -> false, objectFile -> runlevel, listName -> lib)
2012-01-10 11:50:11,075 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m")), sourceFile -> miscutils/runlevel.c, generated -> false, objectFile -> runlevel, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,075 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,076 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/runlevel.c: ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m"))
2012-01-10 11:50:11,076 DEBUG PCDerivation$ Trying to find path for: [Object: rx]
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RX == "y") || (CONFIG_RX == "m")), sourceFile -> miscutils/rx.c, generated -> false, objectFile -> rx, listName -> lib)
2012-01-10 11:50:11,076 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RX == "y") || (CONFIG_RX == "m")), sourceFile -> miscutils/rx.c, generated -> false, objectFile -> rx, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,076 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/rx.c: ((CONFIG_RX == "y") || (CONFIG_RX == "m"))
2012-01-10 11:50:11,076 DEBUG PCDerivation$ Trying to find path for: [Object: setsid]
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m")), sourceFile -> miscutils/setsid.c, generated -> false, objectFile -> setsid, listName -> lib)
2012-01-10 11:50:11,076 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m")), sourceFile -> miscutils/setsid.c, generated -> false, objectFile -> setsid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,076 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/setsid.c: ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m"))
2012-01-10 11:50:11,076 DEBUG PCDerivation$ Trying to find path for: [Object: strings]
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m")), sourceFile -> miscutils/strings.c, generated -> false, objectFile -> strings, listName -> lib)
2012-01-10 11:50:11,076 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m")), sourceFile -> miscutils/strings.c, generated -> false, objectFile -> strings, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,076 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,076 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/strings.c: ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m"))
2012-01-10 11:50:11,077 DEBUG PCDerivation$ Trying to find path for: [Object: taskset]
2012-01-10 11:50:11,077 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m")), sourceFile -> miscutils/taskset.c, generated -> false, objectFile -> taskset, listName -> lib)
2012-01-10 11:50:11,077 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m")), sourceFile -> miscutils/taskset.c, generated -> false, objectFile -> taskset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,077 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,077 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,077 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/taskset.c: ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m"))
2012-01-10 11:50:11,077 DEBUG PCDerivation$ Trying to find path for: [Object: time]
2012-01-10 11:50:11,077 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIME == "y") || (CONFIG_TIME == "m")), sourceFile -> miscutils/time.c, generated -> false, objectFile -> time, listName -> lib)
2012-01-10 11:50:11,077 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIME == "y") || (CONFIG_TIME == "m")), sourceFile -> miscutils/time.c, generated -> false, objectFile -> time, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,077 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,077 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,077 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/time.c: ((CONFIG_TIME == "y") || (CONFIG_TIME == "m"))
2012-01-10 11:50:11,077 DEBUG PCDerivation$ Trying to find path for: [Object: timeout]
2012-01-10 11:50:11,077 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m")), sourceFile -> miscutils/timeout.c, generated -> false, objectFile -> timeout, listName -> lib)
2012-01-10 11:50:11,077 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m")), sourceFile -> miscutils/timeout.c, generated -> false, objectFile -> timeout, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,077 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,078 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,078 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/timeout.c: ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m"))
2012-01-10 11:50:11,078 DEBUG PCDerivation$ Trying to find path for: [Object: ttysize]
2012-01-10 11:50:11,078 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m")), sourceFile -> miscutils/ttysize.c, generated -> false, objectFile -> ttysize, listName -> lib)
2012-01-10 11:50:11,078 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m")), sourceFile -> miscutils/ttysize.c, generated -> false, objectFile -> ttysize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,078 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,078 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,078 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ttysize.c: ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m"))
2012-01-10 11:50:11,078 DEBUG PCDerivation$ Trying to find path for: [Object: volname]
2012-01-10 11:50:11,078 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m")), sourceFile -> miscutils/volname.c, generated -> false, objectFile -> volname, listName -> lib)
2012-01-10 11:50:11,078 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m")), sourceFile -> miscutils/volname.c, generated -> false, objectFile -> volname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,078 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,078 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,078 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/volname.c: ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m"))
2012-01-10 11:50:11,078 DEBUG PCDerivation$ Trying to find path for: [Object: wall]
2012-01-10 11:50:11,078 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WALL == "y") || (CONFIG_WALL == "m")), sourceFile -> miscutils/wall.c, generated -> false, objectFile -> wall, listName -> lib)
2012-01-10 11:50:11,079 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WALL == "y") || (CONFIG_WALL == "m")), sourceFile -> miscutils/wall.c, generated -> false, objectFile -> wall, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,079 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,079 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,079 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/wall.c: ((CONFIG_WALL == "y") || (CONFIG_WALL == "m"))
2012-01-10 11:50:11,079 DEBUG PCDerivation$ Trying to find path for: [Object: watchdog]
2012-01-10 11:50:11,079 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m")), sourceFile -> miscutils/watchdog.c, generated -> false, objectFile -> watchdog, listName -> lib)
2012-01-10 11:50:11,079 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m")), sourceFile -> miscutils/watchdog.c, generated -> false, objectFile -> watchdog, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,079 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:50:11,079 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,079 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/watchdog.c: ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m"))
2012-01-10 11:50:11,079 DEBUG PCDerivation$ Trying to find path for: [Object: modinfo]
2012-01-10 11:50:11,079 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")), sourceFile -> modutils/modinfo.c, generated -> false, objectFile -> modinfo, listName -> lib)
2012-01-10 11:50:11,079 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")), sourceFile -> modutils/modinfo.c, generated -> false, objectFile -> modinfo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,079 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,079 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,079 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,079 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modinfo.c: ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m"))
2012-01-10 11:50:11,079 DEBUG PCDerivation$ Trying to find path for: [Object: modutils]
2012-01-10 11:50:11,079 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))), sourceFile -> modutils/modutils.c, generated -> false, objectFile -> modutils, listName -> lib)
2012-01-10 11:50:11,080 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))), sourceFile -> modutils/modutils.c, generated -> false, objectFile -> modutils, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,080 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,080 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,080 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modutils.c: (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")))
2012-01-10 11:50:11,080 DEBUG PCDerivation$ Trying to find path for: [Object: modprobe-small]
2012-01-10 11:50:11,080 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m")), sourceFile -> modutils/modprobe-small.c, generated -> false, objectFile -> modprobe-small, listName -> lib)
2012-01-10 11:50:11,080 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m")), sourceFile -> modutils/modprobe-small.c, generated -> false, objectFile -> modprobe-small, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,080 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,080 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,080 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modprobe-small.c: ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m"))
2012-01-10 11:50:11,080 DEBUG PCDerivation$ Trying to find path for: [Object: depmod]
2012-01-10 11:50:11,080 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m")), sourceFile -> modutils/depmod.c, generated -> false, objectFile -> depmod, listName -> lib)
2012-01-10 11:50:11,080 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m")), sourceFile -> modutils/depmod.c, generated -> false, objectFile -> depmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,080 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,080 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,080 DEBUG PCDerivation$ Expression of path for object occurrence modutils/depmod.c: ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))
2012-01-10 11:50:11,080 DEBUG PCDerivation$ Trying to find path for: [Object: insmod]
2012-01-10 11:50:11,080 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m")), sourceFile -> modutils/insmod.c, generated -> false, objectFile -> insmod, listName -> lib)
2012-01-10 11:50:11,080 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m")), sourceFile -> modutils/insmod.c, generated -> false, objectFile -> insmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,081 DEBUG PCDerivation$ Expression of path for object occurrence modutils/insmod.c: ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))
2012-01-10 11:50:11,081 DEBUG PCDerivation$ Trying to find path for: [Object: lsmod]
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m")), sourceFile -> modutils/lsmod.c, generated -> false, objectFile -> lsmod, listName -> lib)
2012-01-10 11:50:11,081 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m")), sourceFile -> modutils/lsmod.c, generated -> false, objectFile -> lsmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,081 DEBUG PCDerivation$ Expression of path for object occurrence modutils/lsmod.c: ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))
2012-01-10 11:50:11,081 DEBUG PCDerivation$ Trying to find path for: [Object: modprobe]
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m")), sourceFile -> modutils/modprobe.c, generated -> false, objectFile -> modprobe, listName -> lib)
2012-01-10 11:50:11,081 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m")), sourceFile -> modutils/modprobe.c, generated -> false, objectFile -> modprobe, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,081 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modprobe.c: ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))
2012-01-10 11:50:11,081 DEBUG PCDerivation$ Trying to find path for: [Object: rmmod]
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")), sourceFile -> modutils/rmmod.c, generated -> false, objectFile -> rmmod, listName -> lib)
2012-01-10 11:50:11,081 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")), sourceFile -> modutils/rmmod.c, generated -> false, objectFile -> rmmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,081 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,082 DEBUG PCDerivation$ Expression of path for object occurrence modutils/rmmod.c: ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))
2012-01-10 11:50:11,082 DEBUG PCDerivation$ Trying to find path for: [Object: modutils-24]
2012-01-10 11:50:11,082 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m")), sourceFile -> modutils/modutils-24.c, generated -> false, objectFile -> modutils-24, listName -> lib)
2012-01-10 11:50:11,082 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m")), sourceFile -> modutils/modutils-24.c, generated -> false, objectFile -> modutils-24, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,082 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:50:11,082 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,082 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modutils-24.c: ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m"))
2012-01-10 11:50:11,082 DEBUG PCDerivation$ Trying to find path for: [Object: nbd-client]
2012-01-10 11:50:11,082 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m")), sourceFile -> networking/nbd-client.c, generated -> false, objectFile -> nbd-client, listName -> lib)
2012-01-10 11:50:11,082 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m")), sourceFile -> networking/nbd-client.c, generated -> false, objectFile -> nbd-client, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,082 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,082 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,082 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,082 DEBUG PCDerivation$ Expression of path for object occurrence networking/nbd-client.c: ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m"))
2012-01-10 11:50:11,082 DEBUG PCDerivation$ Trying to find path for: [Object: ping]
2012-01-10 11:50:11,082 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m"))), sourceFile -> networking/ping.c, generated -> false, objectFile -> ping, listName -> lib)
2012-01-10 11:50:11,082 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m"))), sourceFile -> networking/ping.c, generated -> false, objectFile -> ping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,082 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,082 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,083 DEBUG PCDerivation$ Expression of path for object occurrence networking/ping.c: (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m")))
2012-01-10 11:50:11,083 DEBUG PCDerivation$ Trying to find path for: [Object: whois]
2012-01-10 11:50:11,083 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m")), sourceFile -> networking/whois.c, generated -> false, objectFile -> whois, listName -> lib)
2012-01-10 11:50:11,083 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m")), sourceFile -> networking/whois.c, generated -> false, objectFile -> whois, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,083 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,083 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,083 DEBUG PCDerivation$ Expression of path for object occurrence networking/whois.c: ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m"))
2012-01-10 11:50:11,083 DEBUG PCDerivation$ Trying to find path for: [Object: arp]
2012-01-10 11:50:11,083 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARP == "y") || (CONFIG_ARP == "m")), sourceFile -> networking/arp.c, generated -> false, objectFile -> arp, listName -> lib)
2012-01-10 11:50:11,083 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARP == "y") || (CONFIG_ARP == "m")), sourceFile -> networking/arp.c, generated -> false, objectFile -> arp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,083 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,083 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,083 DEBUG PCDerivation$ Expression of path for object occurrence networking/arp.c: ((CONFIG_ARP == "y") || (CONFIG_ARP == "m"))
2012-01-10 11:50:11,083 DEBUG PCDerivation$ Trying to find path for: [Object: interface]
2012-01-10 11:50:11,083 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))), sourceFile -> networking/interface.c, generated -> false, objectFile -> interface, listName -> lib)
2012-01-10 11:50:11,083 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))), sourceFile -> networking/interface.c, generated -> false, objectFile -> interface, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,083 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,083 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,083 DEBUG PCDerivation$ Expression of path for object occurrence networking/interface.c: ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")))
2012-01-10 11:50:11,083 DEBUG PCDerivation$ Trying to find path for: [Object: arping]
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m")), sourceFile -> networking/arping.c, generated -> false, objectFile -> arping, listName -> lib)
2012-01-10 11:50:11,084 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m")), sourceFile -> networking/arping.c, generated -> false, objectFile -> arping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,084 DEBUG PCDerivation$ Expression of path for object occurrence networking/arping.c: ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m"))
2012-01-10 11:50:11,084 DEBUG PCDerivation$ Trying to find path for: [Object: brctl]
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m")), sourceFile -> networking/brctl.c, generated -> false, objectFile -> brctl, listName -> lib)
2012-01-10 11:50:11,084 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m")), sourceFile -> networking/brctl.c, generated -> false, objectFile -> brctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,084 DEBUG PCDerivation$ Expression of path for object occurrence networking/brctl.c: ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m"))
2012-01-10 11:50:11,084 DEBUG PCDerivation$ Trying to find path for: [Object: dnsd]
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m")), sourceFile -> networking/dnsd.c, generated -> false, objectFile -> dnsd, listName -> lib)
2012-01-10 11:50:11,084 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m")), sourceFile -> networking/dnsd.c, generated -> false, objectFile -> dnsd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,084 DEBUG PCDerivation$ Expression of path for object occurrence networking/dnsd.c: ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))
2012-01-10 11:50:11,084 DEBUG PCDerivation$ Trying to find path for: [Object: ether-wake]
2012-01-10 11:50:11,084 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m")), sourceFile -> networking/ether-wake.c, generated -> false, objectFile -> ether-wake, listName -> lib)
2012-01-10 11:50:11,085 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m")), sourceFile -> networking/ether-wake.c, generated -> false, objectFile -> ether-wake, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,085 DEBUG PCDerivation$ Expression of path for object occurrence networking/ether-wake.c: ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m"))
2012-01-10 11:50:11,085 DEBUG PCDerivation$ Trying to find path for: [Object: isrv_identd]
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv_identd.c, generated -> false, objectFile -> isrv_identd, listName -> lib)
2012-01-10 11:50:11,085 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv_identd.c, generated -> false, objectFile -> isrv_identd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,085 DEBUG PCDerivation$ Expression of path for object occurrence networking/isrv_identd.c: ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m"))
2012-01-10 11:50:11,085 DEBUG PCDerivation$ Trying to find path for: [Object: isrv]
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv.c, generated -> false, objectFile -> isrv, listName -> lib)
2012-01-10 11:50:11,085 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv.c, generated -> false, objectFile -> isrv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,085 DEBUG PCDerivation$ Expression of path for object occurrence networking/isrv.c: ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m"))
2012-01-10 11:50:11,085 DEBUG PCDerivation$ Trying to find path for: [Object: ftpd]
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")), sourceFile -> networking/ftpd.c, generated -> false, objectFile -> ftpd, listName -> lib)
2012-01-10 11:50:11,085 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")), sourceFile -> networking/ftpd.c, generated -> false, objectFile -> ftpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,085 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,086 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,086 DEBUG PCDerivation$ Expression of path for object occurrence networking/ftpd.c: ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))
2012-01-10 11:50:11,086 DEBUG PCDerivation$ Trying to find path for: [Object: ftpgetput]
2012-01-10 11:50:11,086 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m"))), sourceFile -> networking/ftpgetput.c, generated -> false, objectFile -> ftpgetput, listName -> lib)
2012-01-10 11:50:11,086 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m"))), sourceFile -> networking/ftpgetput.c, generated -> false, objectFile -> ftpgetput, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,086 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,086 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,086 DEBUG PCDerivation$ Expression of path for object occurrence networking/ftpgetput.c: (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m")))
2012-01-10 11:50:11,086 DEBUG PCDerivation$ Trying to find path for: [Object: hostname]
2012-01-10 11:50:11,086 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m")), sourceFile -> networking/hostname.c, generated -> false, objectFile -> hostname, listName -> lib)
2012-01-10 11:50:11,086 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m")), sourceFile -> networking/hostname.c, generated -> false, objectFile -> hostname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,086 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,086 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,086 DEBUG PCDerivation$ Expression of path for object occurrence networking/hostname.c: ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m"))
2012-01-10 11:50:11,086 DEBUG PCDerivation$ Trying to find path for: [Object: httpd]
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m")), sourceFile -> networking/httpd.c, generated -> false, objectFile -> httpd, listName -> lib)
2012-01-10 11:50:11,087 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m")), sourceFile -> networking/httpd.c, generated -> false, objectFile -> httpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,087 DEBUG PCDerivation$ Expression of path for object occurrence networking/httpd.c: ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m"))
2012-01-10 11:50:11,087 DEBUG PCDerivation$ Trying to find path for: [Object: ifconfig]
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m")), sourceFile -> networking/ifconfig.c, generated -> false, objectFile -> ifconfig, listName -> lib)
2012-01-10 11:50:11,087 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m")), sourceFile -> networking/ifconfig.c, generated -> false, objectFile -> ifconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,087 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifconfig.c: ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))
2012-01-10 11:50:11,087 DEBUG PCDerivation$ Trying to find path for: [Object: ifenslave]
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")), sourceFile -> networking/ifenslave.c, generated -> false, objectFile -> ifenslave, listName -> lib)
2012-01-10 11:50:11,087 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")), sourceFile -> networking/ifenslave.c, generated -> false, objectFile -> ifenslave, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,087 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifenslave.c: ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))
2012-01-10 11:50:11,087 DEBUG PCDerivation$ Trying to find path for: [Object: ifplugd]
2012-01-10 11:50:11,087 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m")), sourceFile -> networking/ifplugd.c, generated -> false, objectFile -> ifplugd, listName -> lib)
2012-01-10 11:50:11,088 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m")), sourceFile -> networking/ifplugd.c, generated -> false, objectFile -> ifplugd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,088 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifplugd.c: ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m"))
2012-01-10 11:50:11,088 DEBUG PCDerivation$ Trying to find path for: [Object: ifupdown]
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m")), sourceFile -> networking/ifupdown.c, generated -> false, objectFile -> ifupdown, listName -> lib)
2012-01-10 11:50:11,088 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m")), sourceFile -> networking/ifupdown.c, generated -> false, objectFile -> ifupdown, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,088 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifupdown.c: ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m"))
2012-01-10 11:50:11,088 DEBUG PCDerivation$ Trying to find path for: [Object: inetd]
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INETD == "y") || (CONFIG_INETD == "m")), sourceFile -> networking/inetd.c, generated -> false, objectFile -> inetd, listName -> lib)
2012-01-10 11:50:11,088 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INETD == "y") || (CONFIG_INETD == "m")), sourceFile -> networking/inetd.c, generated -> false, objectFile -> inetd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,088 DEBUG PCDerivation$ Expression of path for object occurrence networking/inetd.c: ((CONFIG_INETD == "y") || (CONFIG_INETD == "m"))
2012-01-10 11:50:11,088 DEBUG PCDerivation$ Trying to find path for: [Object: ip]
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/ip.c, generated -> false, objectFile -> ip, listName -> lib)
2012-01-10 11:50:11,088 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/ip.c, generated -> false, objectFile -> ip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,088 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,088 DEBUG PCDerivation$ Expression of path for object occurrence networking/ip.c: ((CONFIG_IP == "y") || (CONFIG_IP == "m"))
2012-01-10 11:50:11,089 DEBUG PCDerivation$ Trying to find path for: [Object: ipcalc]
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m")), sourceFile -> networking/ipcalc.c, generated -> false, objectFile -> ipcalc, listName -> lib)
2012-01-10 11:50:11,089 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m")), sourceFile -> networking/ipcalc.c, generated -> false, objectFile -> ipcalc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,089 DEBUG PCDerivation$ Expression of path for object occurrence networking/ipcalc.c: ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m"))
2012-01-10 11:50:11,089 DEBUG PCDerivation$ Trying to find path for: [Object: nameif]
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m")), sourceFile -> networking/nameif.c, generated -> false, objectFile -> nameif, listName -> lib)
2012-01-10 11:50:11,089 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m")), sourceFile -> networking/nameif.c, generated -> false, objectFile -> nameif, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,089 DEBUG PCDerivation$ Expression of path for object occurrence networking/nameif.c: ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m"))
2012-01-10 11:50:11,089 DEBUG PCDerivation$ Trying to find path for: [Object: nc]
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NC == "y") || (CONFIG_NC == "m")), sourceFile -> networking/nc.c, generated -> false, objectFile -> nc, listName -> lib)
2012-01-10 11:50:11,089 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NC == "y") || (CONFIG_NC == "m")), sourceFile -> networking/nc.c, generated -> false, objectFile -> nc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,089 DEBUG PCDerivation$ Expression of path for object occurrence networking/nc.c: ((CONFIG_NC == "y") || (CONFIG_NC == "m"))
2012-01-10 11:50:11,089 DEBUG PCDerivation$ Trying to find path for: [Object: netstat]
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m")), sourceFile -> networking/netstat.c, generated -> false, objectFile -> netstat, listName -> lib)
2012-01-10 11:50:11,089 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m")), sourceFile -> networking/netstat.c, generated -> false, objectFile -> netstat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,089 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,089 DEBUG PCDerivation$ Expression of path for object occurrence networking/netstat.c: ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m"))
2012-01-10 11:50:11,089 DEBUG PCDerivation$ Trying to find path for: [Object: nslookup]
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m")), sourceFile -> networking/nslookup.c, generated -> false, objectFile -> nslookup, listName -> lib)
2012-01-10 11:50:11,090 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m")), sourceFile -> networking/nslookup.c, generated -> false, objectFile -> nslookup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,090 DEBUG PCDerivation$ Expression of path for object occurrence networking/nslookup.c: ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m"))
2012-01-10 11:50:11,090 DEBUG PCDerivation$ Trying to find path for: [Object: ntpd]
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m")), sourceFile -> networking/ntpd.c, generated -> false, objectFile -> ntpd, listName -> lib)
2012-01-10 11:50:11,090 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m")), sourceFile -> networking/ntpd.c, generated -> false, objectFile -> ntpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,090 DEBUG PCDerivation$ Expression of path for object occurrence networking/ntpd.c: ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))
2012-01-10 11:50:11,090 DEBUG PCDerivation$ Trying to find path for: [Object: pscan]
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m")), sourceFile -> networking/pscan.c, generated -> false, objectFile -> pscan, listName -> lib)
2012-01-10 11:50:11,090 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m")), sourceFile -> networking/pscan.c, generated -> false, objectFile -> pscan, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,090 DEBUG PCDerivation$ Expression of path for object occurrence networking/pscan.c: ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m"))
2012-01-10 11:50:11,090 DEBUG PCDerivation$ Trying to find path for: [Object: route]
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m")), sourceFile -> networking/route.c, generated -> false, objectFile -> route, listName -> lib)
2012-01-10 11:50:11,090 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m")), sourceFile -> networking/route.c, generated -> false, objectFile -> route, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,090 DEBUG PCDerivation$ Expression of path for object occurrence networking/route.c: ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m"))
2012-01-10 11:50:11,090 DEBUG PCDerivation$ Trying to find path for: [Object: slattach]
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")), sourceFile -> networking/slattach.c, generated -> false, objectFile -> slattach, listName -> lib)
2012-01-10 11:50:11,090 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")), sourceFile -> networking/slattach.c, generated -> false, objectFile -> slattach, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,090 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,091 DEBUG PCDerivation$ Expression of path for object occurrence networking/slattach.c: ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m"))
2012-01-10 11:50:11,091 DEBUG PCDerivation$ Trying to find path for: [Object: tc]
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TC == "y") || (CONFIG_TC == "m")), sourceFile -> networking/tc.c, generated -> false, objectFile -> tc, listName -> lib)
2012-01-10 11:50:11,091 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TC == "y") || (CONFIG_TC == "m")), sourceFile -> networking/tc.c, generated -> false, objectFile -> tc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,091 DEBUG PCDerivation$ Expression of path for object occurrence networking/tc.c: ((CONFIG_TC == "y") || (CONFIG_TC == "m"))
2012-01-10 11:50:11,091 DEBUG PCDerivation$ Trying to find path for: [Object: telnet]
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m")), sourceFile -> networking/telnet.c, generated -> false, objectFile -> telnet, listName -> lib)
2012-01-10 11:50:11,091 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m")), sourceFile -> networking/telnet.c, generated -> false, objectFile -> telnet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,091 DEBUG PCDerivation$ Expression of path for object occurrence networking/telnet.c: ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m"))
2012-01-10 11:50:11,091 DEBUG PCDerivation$ Trying to find path for: [Object: telnetd]
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m")), sourceFile -> networking/telnetd.c, generated -> false, objectFile -> telnetd, listName -> lib)
2012-01-10 11:50:11,091 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m")), sourceFile -> networking/telnetd.c, generated -> false, objectFile -> telnetd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,091 DEBUG PCDerivation$ Expression of path for object occurrence networking/telnetd.c: ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m"))
2012-01-10 11:50:11,091 DEBUG PCDerivation$ Trying to find path for: [Object: tftp]
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))), sourceFile -> networking/tftp.c, generated -> false, objectFile -> tftp, listName -> lib)
2012-01-10 11:50:11,091 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))), sourceFile -> networking/tftp.c, generated -> false, objectFile -> tftp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,091 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,091 DEBUG PCDerivation$ Expression of path for object occurrence networking/tftp.c: (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m")))
2012-01-10 11:50:11,092 DEBUG PCDerivation$ Trying to find path for: [Object: traceroute]
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")), sourceFile -> networking/traceroute.c, generated -> false, objectFile -> traceroute, listName -> lib)
2012-01-10 11:50:11,092 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")), sourceFile -> networking/traceroute.c, generated -> false, objectFile -> traceroute, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,092 DEBUG PCDerivation$ Expression of path for object occurrence networking/traceroute.c: ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))
2012-01-10 11:50:11,092 DEBUG PCDerivation$ Trying to find path for: [Object: tunctl]
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m")), sourceFile -> networking/tunctl.c, generated -> false, objectFile -> tunctl, listName -> lib)
2012-01-10 11:50:11,092 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m")), sourceFile -> networking/tunctl.c, generated -> false, objectFile -> tunctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,092 DEBUG PCDerivation$ Expression of path for object occurrence networking/tunctl.c: ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m"))
2012-01-10 11:50:11,092 DEBUG PCDerivation$ Trying to find path for: [Object: vconfig]
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m")), sourceFile -> networking/vconfig.c, generated -> false, objectFile -> vconfig, listName -> lib)
2012-01-10 11:50:11,092 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m")), sourceFile -> networking/vconfig.c, generated -> false, objectFile -> vconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,092 DEBUG PCDerivation$ Expression of path for object occurrence networking/vconfig.c: ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m"))
2012-01-10 11:50:11,092 DEBUG PCDerivation$ Trying to find path for: [Object: wget]
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WGET == "y") || (CONFIG_WGET == "m")), sourceFile -> networking/wget.c, generated -> false, objectFile -> wget, listName -> lib)
2012-01-10 11:50:11,092 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WGET == "y") || (CONFIG_WGET == "m")), sourceFile -> networking/wget.c, generated -> false, objectFile -> wget, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,092 DEBUG PCDerivation$ Expression of path for object occurrence networking/wget.c: ((CONFIG_WGET == "y") || (CONFIG_WGET == "m"))
2012-01-10 11:50:11,092 DEBUG PCDerivation$ Trying to find path for: [Object: zcip]
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m")), sourceFile -> networking/zcip.c, generated -> false, objectFile -> zcip, listName -> lib)
2012-01-10 11:50:11,092 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m")), sourceFile -> networking/zcip.c, generated -> false, objectFile -> zcip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,092 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,093 DEBUG PCDerivation$ Expression of path for object occurrence networking/zcip.c: ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m"))
2012-01-10 11:50:11,093 DEBUG PCDerivation$ Trying to find path for: [Object: tcpudp]
2012-01-10 11:50:11,093 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp.c, generated -> false, objectFile -> tcpudp, listName -> lib)
2012-01-10 11:50:11,093 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp.c, generated -> false, objectFile -> tcpudp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,093 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,093 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,093 DEBUG PCDerivation$ Expression of path for object occurrence networking/tcpudp.c: (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m")))
2012-01-10 11:50:11,093 DEBUG PCDerivation$ Trying to find path for: [Object: tcpudp_perhost]
2012-01-10 11:50:11,093 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp_perhost.c, generated -> false, objectFile -> tcpudp_perhost, listName -> lib)
2012-01-10 11:50:11,093 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp_perhost.c, generated -> false, objectFile -> tcpudp_perhost, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,093 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:50:11,093 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,093 DEBUG PCDerivation$ Expression of path for object occurrence networking/tcpudp_perhost.c: (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m")))
2012-01-10 11:50:11,093 DEBUG PCDerivation$ Trying to find path for: [Object: utils]
2012-01-10 11:50:11,093 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/utils.c, generated -> false, objectFile -> utils, listName -> lib)
2012-01-10 11:50:11,093 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/utils.c, generated -> false, objectFile -> utils, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,093 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,093 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,094 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,094 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/utils.c: ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-10 11:50:11,094 DEBUG PCDerivation$ Trying to find path for: [Object: ip_parse_common_args]
2012-01-10 11:50:11,094 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/ip_parse_common_args.c, generated -> false, objectFile -> ip_parse_common_args, listName -> lib)
2012-01-10 11:50:11,094 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/ip_parse_common_args.c, generated -> false, objectFile -> ip_parse_common_args, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,094 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,094 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,094 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ip_parse_common_args.c: (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-10 11:50:11,094 DEBUG PCDerivation$ Trying to find path for: [Object: libnetlink]
2012-01-10 11:50:11,094 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/libnetlink.c, generated -> false, objectFile -> libnetlink, listName -> lib)
2012-01-10 11:50:11,094 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/libnetlink.c, generated -> false, objectFile -> libnetlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,094 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,094 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,094 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/libnetlink.c: (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-10 11:50:11,094 DEBUG PCDerivation$ Trying to find path for: [Object: ll_addr]
2012-01-10 11:50:11,094 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_addr.c, generated -> false, objectFile -> ll_addr, listName -> lib)
2012-01-10 11:50:11,094 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_addr.c, generated -> false, objectFile -> ll_addr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,095 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,095 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,095 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_addr.c: ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-10 11:50:11,095 DEBUG PCDerivation$ Trying to find path for: [Object: ll_map]
2012-01-10 11:50:11,095 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/ll_map.c, generated -> false, objectFile -> ll_map, listName -> lib)
2012-01-10 11:50:11,095 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/ll_map.c, generated -> false, objectFile -> ll_map, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,095 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,095 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,095 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_map.c: (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-10 11:50:11,095 DEBUG PCDerivation$ Trying to find path for: [Object: ll_proto]
2012-01-10 11:50:11,095 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/libiproute/ll_proto.c, generated -> false, objectFile -> ll_proto, listName -> lib)
2012-01-10 11:50:11,095 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/libiproute/ll_proto.c, generated -> false, objectFile -> ll_proto, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,095 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,095 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,095 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_proto.c: ((CONFIG_IP == "y") || (CONFIG_IP == "m"))
2012-01-10 11:50:11,095 DEBUG PCDerivation$ Trying to find path for: [Object: ll_types]
2012-01-10 11:50:11,095 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_types.c, generated -> false, objectFile -> ll_types, listName -> lib)
2012-01-10 11:50:11,096 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_types.c, generated -> false, objectFile -> ll_types, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,096 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,096 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,096 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_types.c: ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-10 11:50:11,096 DEBUG PCDerivation$ Trying to find path for: [Object: rt_names]
2012-01-10 11:50:11,096 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/rt_names.c, generated -> false, objectFile -> rt_names, listName -> lib)
2012-01-10 11:50:11,096 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/rt_names.c, generated -> false, objectFile -> rt_names, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,096 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,096 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,096 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/rt_names.c: (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-10 11:50:11,096 DEBUG PCDerivation$ Trying to find path for: [Object: rtm_map]
2012-01-10 11:50:11,096 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/rtm_map.c, generated -> false, objectFile -> rtm_map, listName -> lib)
2012-01-10 11:50:11,096 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/rtm_map.c, generated -> false, objectFile -> rtm_map, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,096 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,096 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,096 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/rtm_map.c: (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-10 11:50:11,096 DEBUG PCDerivation$ Trying to find path for: [Object: ipaddress]
2012-01-10 11:50:11,096 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ipaddress.c, generated -> false, objectFile -> ipaddress, listName -> lib)
2012-01-10 11:50:11,097 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ipaddress.c, generated -> false, objectFile -> ipaddress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,097 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,097 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,097 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ipaddress.c: (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-10 11:50:11,097 DEBUG PCDerivation$ Trying to find path for: [Object: iplink]
2012-01-10 11:50:11,097 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")), sourceFile -> networking/libiproute/iplink.c, generated -> false, objectFile -> iplink, listName -> lib)
2012-01-10 11:50:11,097 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")), sourceFile -> networking/libiproute/iplink.c, generated -> false, objectFile -> iplink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,097 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,097 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,097 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iplink.c: ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))
2012-01-10 11:50:11,097 DEBUG PCDerivation$ Trying to find path for: [Object: iproute]
2012-01-10 11:50:11,097 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")), sourceFile -> networking/libiproute/iproute.c, generated -> false, objectFile -> iproute, listName -> lib)
2012-01-10 11:50:11,097 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")), sourceFile -> networking/libiproute/iproute.c, generated -> false, objectFile -> iproute, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,097 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,097 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,097 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iproute.c: ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))
2012-01-10 11:50:11,097 DEBUG PCDerivation$ Trying to find path for: [Object: iptunnel]
2012-01-10 11:50:11,097 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m")), sourceFile -> networking/libiproute/iptunnel.c, generated -> false, objectFile -> iptunnel, listName -> lib)
2012-01-10 11:50:11,098 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m")), sourceFile -> networking/libiproute/iptunnel.c, generated -> false, objectFile -> iptunnel, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,098 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,098 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,098 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iptunnel.c: ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))
2012-01-10 11:50:11,098 DEBUG PCDerivation$ Trying to find path for: [Object: iprule]
2012-01-10 11:50:11,098 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")), sourceFile -> networking/libiproute/iprule.c, generated -> false, objectFile -> iprule, listName -> lib)
2012-01-10 11:50:11,098 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")), sourceFile -> networking/libiproute/iprule.c, generated -> false, objectFile -> iprule, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,098 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:50:11,098 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,098 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iprule.c: ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))
2012-01-10 11:50:11,098 DEBUG PCDerivation$ Trying to find path for: [Object: d6_dhcpc]
2012-01-10 11:50:11,098 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_dhcpc.c, generated -> false, objectFile -> d6_dhcpc, listName -> lib)
2012-01-10 11:50:11,098 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_dhcpc.c, generated -> false, objectFile -> d6_dhcpc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,098 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,098 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,098 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,098 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_dhcpc.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-10 11:50:11,098 DEBUG PCDerivation$ Trying to find path for: [Object: d6_packet]
2012-01-10 11:50:11,098 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_packet.c, generated -> false, objectFile -> d6_packet, listName -> lib)
2012-01-10 11:50:11,099 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_packet.c, generated -> false, objectFile -> d6_packet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,099 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,099 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,099 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_packet.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-10 11:50:11,099 DEBUG PCDerivation$ Trying to find path for: [Object: d6_socket]
2012-01-10 11:50:11,099 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_socket.c, generated -> false, objectFile -> d6_socket, listName -> lib)
2012-01-10 11:50:11,099 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_socket.c, generated -> false, objectFile -> d6_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,099 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,099 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,099 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_socket.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-10 11:50:11,099 DEBUG PCDerivation$ Trying to find path for: [Object: common]
2012-01-10 11:50:11,099 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/common.c, generated -> false, objectFile -> common, listName -> lib)
2012-01-10 11:50:11,099 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/common.c, generated -> false, objectFile -> common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,099 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,099 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,099 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/common.c: ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:50:11,099 DEBUG PCDerivation$ Trying to find path for: [Object: packet]
2012-01-10 11:50:11,099 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/packet.c, generated -> false, objectFile -> packet, listName -> lib)
2012-01-10 11:50:11,100 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/packet.c, generated -> false, objectFile -> packet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,100 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,100 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,100 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/packet.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:50:11,100 DEBUG PCDerivation$ Trying to find path for: [Object: signalpipe]
2012-01-10 11:50:11,100 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/signalpipe.c, generated -> false, objectFile -> signalpipe, listName -> lib)
2012-01-10 11:50:11,100 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/signalpipe.c, generated -> false, objectFile -> signalpipe, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,100 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,100 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,100 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/signalpipe.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:50:11,100 DEBUG PCDerivation$ Trying to find path for: [Object: socket]
2012-01-10 11:50:11,100 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/socket.c, generated -> false, objectFile -> socket, listName -> lib)
2012-01-10 11:50:11,100 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/socket.c, generated -> false, objectFile -> socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,100 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,100 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,100 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/socket.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:50:11,100 DEBUG PCDerivation$ Trying to find path for: [Object: dhcpc]
2012-01-10 11:50:11,100 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")), sourceFile -> networking/udhcp/dhcpc.c, generated -> false, objectFile -> dhcpc, listName -> lib)
2012-01-10 11:50:11,101 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")), sourceFile -> networking/udhcp/dhcpc.c, generated -> false, objectFile -> dhcpc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,101 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,101 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,101 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcpc.c: ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))
2012-01-10 11:50:11,101 DEBUG PCDerivation$ Trying to find path for: [Object: dhcpd]
2012-01-10 11:50:11,101 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/dhcpd.c, generated -> false, objectFile -> dhcpd, listName -> lib)
2012-01-10 11:50:11,101 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/dhcpd.c, generated -> false, objectFile -> dhcpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,101 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,101 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,101 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcpd.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:50:11,101 DEBUG PCDerivation$ Trying to find path for: [Object: arpping]
2012-01-10 11:50:11,101 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m"))), sourceFile -> networking/udhcp/arpping.c, generated -> false, objectFile -> arpping, listName -> lib)
2012-01-10 11:50:11,101 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m"))), sourceFile -> networking/udhcp/arpping.c, generated -> false, objectFile -> arpping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,101 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,101 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,101 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/arpping.c: (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m")))
2012-01-10 11:50:11,101 DEBUG PCDerivation$ Trying to find path for: [Object: files]
2012-01-10 11:50:11,101 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/files.c, generated -> false, objectFile -> files, listName -> lib)
2012-01-10 11:50:11,102 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/files.c, generated -> false, objectFile -> files, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,102 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,102 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,102 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/files.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:50:11,102 DEBUG PCDerivation$ Trying to find path for: [Object: leases]
2012-01-10 11:50:11,102 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/leases.c, generated -> false, objectFile -> leases, listName -> lib)
2012-01-10 11:50:11,102 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/leases.c, generated -> false, objectFile -> leases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,102 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,102 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,102 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/leases.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:50:11,102 DEBUG PCDerivation$ Trying to find path for: [Object: static_leases]
2012-01-10 11:50:11,102 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/static_leases.c, generated -> false, objectFile -> static_leases, listName -> lib)
2012-01-10 11:50:11,102 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/static_leases.c, generated -> false, objectFile -> static_leases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,102 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,102 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,102 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/static_leases.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:50:11,102 DEBUG PCDerivation$ Trying to find path for: [Object: dumpleases]
2012-01-10 11:50:11,102 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m")), sourceFile -> networking/udhcp/dumpleases.c, generated -> false, objectFile -> dumpleases, listName -> lib)
2012-01-10 11:50:11,102 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m")), sourceFile -> networking/udhcp/dumpleases.c, generated -> false, objectFile -> dumpleases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,103 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dumpleases.c: ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m"))
2012-01-10 11:50:11,103 DEBUG PCDerivation$ Trying to find path for: [Object: dhcprelay]
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m")), sourceFile -> networking/udhcp/dhcprelay.c, generated -> false, objectFile -> dhcprelay, listName -> lib)
2012-01-10 11:50:11,103 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m")), sourceFile -> networking/udhcp/dhcprelay.c, generated -> false, objectFile -> dhcprelay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,103 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcprelay.c: ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m"))
2012-01-10 11:50:11,103 DEBUG PCDerivation$ Trying to find path for: [Object: domain_codec]
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m")), sourceFile -> networking/udhcp/domain_codec.c, generated -> false, objectFile -> domain_codec, listName -> lib)
2012-01-10 11:50:11,103 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m")), sourceFile -> networking/udhcp/domain_codec.c, generated -> false, objectFile -> domain_codec, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,103 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/domain_codec.c: ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m"))
2012-01-10 11:50:11,103 DEBUG PCDerivation$ Trying to find path for: [Object: lpd]
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LPD == "y") || (CONFIG_LPD == "m")), sourceFile -> printutils/lpd.c, generated -> false, objectFile -> lpd, listName -> lib)
2012-01-10 11:50:11,103 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LPD == "y") || (CONFIG_LPD == "m")), sourceFile -> printutils/lpd.c, generated -> false, objectFile -> lpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:50:11,103 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:50:11,104 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,104 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,104 DEBUG PCDerivation$ Expression of path for object occurrence printutils/lpd.c: ((CONFIG_LPD == "y") || (CONFIG_LPD == "m"))
2012-01-10 11:50:11,104 DEBUG PCDerivation$ Trying to find path for: [Object: lpr]
2012-01-10 11:50:11,104 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m"))), sourceFile -> printutils/lpr.c, generated -> false, objectFile -> lpr, listName -> lib)
2012-01-10 11:50:11,104 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m"))), sourceFile -> printutils/lpr.c, generated -> false, objectFile -> lpr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:50:11,104 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:50:11,104 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,104 DEBUG PCDerivation$ Expression of path for object occurrence printutils/lpr.c: (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m")))
2012-01-10 11:50:11,104 DEBUG PCDerivation$ Trying to find path for: [Object: iostat]
2012-01-10 11:50:11,104 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")), sourceFile -> procps/iostat.c, generated -> false, objectFile -> iostat, listName -> lib)
2012-01-10 11:50:11,104 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")), sourceFile -> procps/iostat.c, generated -> false, objectFile -> iostat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,104 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,104 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,104 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,104 DEBUG PCDerivation$ Expression of path for object occurrence procps/iostat.c: ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m"))
2012-01-10 11:50:11,104 DEBUG PCDerivation$ Trying to find path for: [Object: mpstat]
2012-01-10 11:50:11,104 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m")), sourceFile -> procps/mpstat.c, generated -> false, objectFile -> mpstat, listName -> lib)
2012-01-10 11:50:11,104 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m")), sourceFile -> procps/mpstat.c, generated -> false, objectFile -> mpstat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,104 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,105 DEBUG PCDerivation$ Expression of path for object occurrence procps/mpstat.c: ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))
2012-01-10 11:50:11,105 DEBUG PCDerivation$ Trying to find path for: [Object: nmeter]
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m")), sourceFile -> procps/nmeter.c, generated -> false, objectFile -> nmeter, listName -> lib)
2012-01-10 11:50:11,105 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m")), sourceFile -> procps/nmeter.c, generated -> false, objectFile -> nmeter, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,105 DEBUG PCDerivation$ Expression of path for object occurrence procps/nmeter.c: ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m"))
2012-01-10 11:50:11,105 DEBUG PCDerivation$ Trying to find path for: [Object: pmap]
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m")), sourceFile -> procps/pmap.c, generated -> false, objectFile -> pmap, listName -> lib)
2012-01-10 11:50:11,105 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m")), sourceFile -> procps/pmap.c, generated -> false, objectFile -> pmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,105 DEBUG PCDerivation$ Expression of path for object occurrence procps/pmap.c: ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m"))
2012-01-10 11:50:11,105 DEBUG PCDerivation$ Trying to find path for: [Object: powertop]
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")), sourceFile -> procps/powertop.c, generated -> false, objectFile -> powertop, listName -> lib)
2012-01-10 11:50:11,105 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")), sourceFile -> procps/powertop.c, generated -> false, objectFile -> powertop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,105 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,105 DEBUG PCDerivation$ Expression of path for object occurrence procps/powertop.c: ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))
2012-01-10 11:50:11,106 DEBUG PCDerivation$ Trying to find path for: [Object: pstree]
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m")), sourceFile -> procps/pstree.c, generated -> false, objectFile -> pstree, listName -> lib)
2012-01-10 11:50:11,106 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m")), sourceFile -> procps/pstree.c, generated -> false, objectFile -> pstree, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,106 DEBUG PCDerivation$ Expression of path for object occurrence procps/pstree.c: ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m"))
2012-01-10 11:50:11,106 DEBUG PCDerivation$ Trying to find path for: [Object: pwdx]
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m")), sourceFile -> procps/pwdx.c, generated -> false, objectFile -> pwdx, listName -> lib)
2012-01-10 11:50:11,106 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m")), sourceFile -> procps/pwdx.c, generated -> false, objectFile -> pwdx, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,106 DEBUG PCDerivation$ Expression of path for object occurrence procps/pwdx.c: ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m"))
2012-01-10 11:50:11,106 DEBUG PCDerivation$ Trying to find path for: [Object: smemcap]
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m")), sourceFile -> procps/smemcap.c, generated -> false, objectFile -> smemcap, listName -> lib)
2012-01-10 11:50:11,106 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m")), sourceFile -> procps/smemcap.c, generated -> false, objectFile -> smemcap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,106 DEBUG PCDerivation$ Expression of path for object occurrence procps/smemcap.c: ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m"))
2012-01-10 11:50:11,106 DEBUG PCDerivation$ Trying to find path for: [Object: free]
2012-01-10 11:50:11,106 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FREE == "y") || (CONFIG_FREE == "m")), sourceFile -> procps/free.c, generated -> false, objectFile -> free, listName -> lib)
2012-01-10 11:50:11,106 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FREE == "y") || (CONFIG_FREE == "m")), sourceFile -> procps/free.c, generated -> false, objectFile -> free, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,107 DEBUG PCDerivation$ Expression of path for object occurrence procps/free.c: ((CONFIG_FREE == "y") || (CONFIG_FREE == "m"))
2012-01-10 11:50:11,107 DEBUG PCDerivation$ Trying to find path for: [Object: fuser]
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m")), sourceFile -> procps/fuser.c, generated -> false, objectFile -> fuser, listName -> lib)
2012-01-10 11:50:11,107 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m")), sourceFile -> procps/fuser.c, generated -> false, objectFile -> fuser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,107 DEBUG PCDerivation$ Expression of path for object occurrence procps/fuser.c: ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m"))
2012-01-10 11:50:11,107 DEBUG PCDerivation$ Trying to find path for: [Object: kill]
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))), sourceFile -> procps/kill.c, generated -> false, objectFile -> kill, listName -> lib)
2012-01-10 11:50:11,107 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))), sourceFile -> procps/kill.c, generated -> false, objectFile -> kill, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,107 DEBUG PCDerivation$ Expression of path for object occurrence procps/kill.c: (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")))
2012-01-10 11:50:11,107 DEBUG PCDerivation$ Trying to find path for: [Object: pgrep]
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))), sourceFile -> procps/pgrep.c, generated -> false, objectFile -> pgrep, listName -> lib)
2012-01-10 11:50:11,107 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))), sourceFile -> procps/pgrep.c, generated -> false, objectFile -> pgrep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,107 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,107 DEBUG PCDerivation$ Expression of path for object occurrence procps/pgrep.c: (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m")))
2012-01-10 11:50:11,107 DEBUG PCDerivation$ Trying to find path for: [Object: pidof]
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m")), sourceFile -> procps/pidof.c, generated -> false, objectFile -> pidof, listName -> lib)
2012-01-10 11:50:11,108 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m")), sourceFile -> procps/pidof.c, generated -> false, objectFile -> pidof, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Expression of path for object occurrence procps/pidof.c: ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m"))
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Trying to find path for: [Object: ps]
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PS == "y") || (CONFIG_PS == "m")), sourceFile -> procps/ps.c, generated -> false, objectFile -> ps, listName -> lib)
2012-01-10 11:50:11,108 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PS == "y") || (CONFIG_PS == "m")), sourceFile -> procps/ps.c, generated -> false, objectFile -> ps, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Expression of path for object occurrence procps/ps.c: ((CONFIG_PS == "y") || (CONFIG_PS == "m"))
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Trying to find path for: [Object: renice]
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m")), sourceFile -> procps/renice.c, generated -> false, objectFile -> renice, listName -> lib)
2012-01-10 11:50:11,108 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m")), sourceFile -> procps/renice.c, generated -> false, objectFile -> renice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Expression of path for object occurrence procps/renice.c: ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m"))
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Trying to find path for: [Object: sysctl]
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m")), sourceFile -> procps/sysctl.c, generated -> false, objectFile -> sysctl, listName -> lib)
2012-01-10 11:50:11,108 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m")), sourceFile -> procps/sysctl.c, generated -> false, objectFile -> sysctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Expression of path for object occurrence procps/sysctl.c: ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m"))
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Trying to find path for: [Object: top]
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOP == "y") || (CONFIG_TOP == "m")), sourceFile -> procps/top.c, generated -> false, objectFile -> top, listName -> lib)
2012-01-10 11:50:11,108 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOP == "y") || (CONFIG_TOP == "m")), sourceFile -> procps/top.c, generated -> false, objectFile -> top, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,108 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Expression of path for object occurrence procps/top.c: ((CONFIG_TOP == "y") || (CONFIG_TOP == "m"))
2012-01-10 11:50:11,108 DEBUG PCDerivation$ Trying to find path for: [Object: uptime]
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m")), sourceFile -> procps/uptime.c, generated -> false, objectFile -> uptime, listName -> lib)
2012-01-10 11:50:11,109 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m")), sourceFile -> procps/uptime.c, generated -> false, objectFile -> uptime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Expression of path for object occurrence procps/uptime.c: ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m"))
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Trying to find path for: [Object: watch]
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m")), sourceFile -> procps/watch.c, generated -> false, objectFile -> watch, listName -> lib)
2012-01-10 11:50:11,109 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m")), sourceFile -> procps/watch.c, generated -> false, objectFile -> watch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Expression of path for object occurrence procps/watch.c: ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m"))
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Trying to find path for: [Object: runsv]
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m")), sourceFile -> runit/runsv.c, generated -> false, objectFile -> runsv, listName -> lib)
2012-01-10 11:50:11,109 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m")), sourceFile -> runit/runsv.c, generated -> false, objectFile -> runsv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Expression of path for object occurrence runit/runsv.c: ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m"))
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Trying to find path for: [Object: runsvdir]
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m")), sourceFile -> runit/runsvdir.c, generated -> false, objectFile -> runsvdir, listName -> lib)
2012-01-10 11:50:11,109 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m")), sourceFile -> runit/runsvdir.c, generated -> false, objectFile -> runsvdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Expression of path for object occurrence runit/runsvdir.c: ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m"))
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Trying to find path for: [Object: sv]
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SV == "y") || (CONFIG_SV == "m")), sourceFile -> runit/sv.c, generated -> false, objectFile -> sv, listName -> lib)
2012-01-10 11:50:11,109 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SV == "y") || (CONFIG_SV == "m")), sourceFile -> runit/sv.c, generated -> false, objectFile -> sv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,109 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Expression of path for object occurrence runit/sv.c: ((CONFIG_SV == "y") || (CONFIG_SV == "m"))
2012-01-10 11:50:11,109 DEBUG PCDerivation$ Trying to find path for: [Object: svlogd]
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m")), sourceFile -> runit/svlogd.c, generated -> false, objectFile -> svlogd, listName -> lib)
2012-01-10 11:50:11,110 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m")), sourceFile -> runit/svlogd.c, generated -> false, objectFile -> svlogd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,110 DEBUG PCDerivation$ Expression of path for object occurrence runit/svlogd.c: ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m"))
2012-01-10 11:50:11,110 DEBUG PCDerivation$ Trying to find path for: [Object: chpst]
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m"))), sourceFile -> runit/chpst.c, generated -> false, objectFile -> chpst, listName -> lib)
2012-01-10 11:50:11,110 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m"))), sourceFile -> runit/chpst.c, generated -> false, objectFile -> chpst, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,110 DEBUG PCDerivation$ Expression of path for object occurrence runit/chpst.c: ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m")))
2012-01-10 11:50:11,110 DEBUG PCDerivation$ Trying to find path for: [Object: chcon]
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m")), sourceFile -> selinux/chcon.c, generated -> false, objectFile -> chcon, listName -> lib)
2012-01-10 11:50:11,110 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m")), sourceFile -> selinux/chcon.c, generated -> false, objectFile -> chcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,110 DEBUG PCDerivation$ Expression of path for object occurrence selinux/chcon.c: ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m"))
2012-01-10 11:50:11,110 DEBUG PCDerivation$ Trying to find path for: [Object: getenforce]
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m")), sourceFile -> selinux/getenforce.c, generated -> false, objectFile -> getenforce, listName -> lib)
2012-01-10 11:50:11,110 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m")), sourceFile -> selinux/getenforce.c, generated -> false, objectFile -> getenforce, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,110 DEBUG PCDerivation$ Expression of path for object occurrence selinux/getenforce.c: ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m"))
2012-01-10 11:50:11,110 DEBUG PCDerivation$ Trying to find path for: [Object: getsebool]
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m")), sourceFile -> selinux/getsebool.c, generated -> false, objectFile -> getsebool, listName -> lib)
2012-01-10 11:50:11,110 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m")), sourceFile -> selinux/getsebool.c, generated -> false, objectFile -> getsebool, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,110 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,110 DEBUG PCDerivation$ Expression of path for object occurrence selinux/getsebool.c: ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m"))
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Trying to find path for: [Object: load_policy]
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m")), sourceFile -> selinux/load_policy.c, generated -> false, objectFile -> load_policy, listName -> lib)
2012-01-10 11:50:11,111 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m")), sourceFile -> selinux/load_policy.c, generated -> false, objectFile -> load_policy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Expression of path for object occurrence selinux/load_policy.c: ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m"))
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Trying to find path for: [Object: matchpathcon]
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m")), sourceFile -> selinux/matchpathcon.c, generated -> false, objectFile -> matchpathcon, listName -> lib)
2012-01-10 11:50:11,111 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m")), sourceFile -> selinux/matchpathcon.c, generated -> false, objectFile -> matchpathcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Expression of path for object occurrence selinux/matchpathcon.c: ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m"))
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Trying to find path for: [Object: runcon]
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m")), sourceFile -> selinux/runcon.c, generated -> false, objectFile -> runcon, listName -> lib)
2012-01-10 11:50:11,111 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m")), sourceFile -> selinux/runcon.c, generated -> false, objectFile -> runcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Expression of path for object occurrence selinux/runcon.c: ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m"))
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Trying to find path for: [Object: selinuxenabled]
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUXENABLED == "y") || (CONFIG_SELINUXENABLED == "m")), sourceFile -> selinux/selinuxenabled.c, generated -> false, objectFile -> selinuxenabled, listName -> lib)
2012-01-10 11:50:11,111 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUXENABLED == "y") || (CONFIG_SELINUXENABLED == "m")), sourceFile -> selinux/selinuxenabled.c, generated -> false, objectFile -> selinuxenabled, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Expression of path for object occurrence selinux/selinuxenabled.c: ((CONFIG_SELINUXENABLED == "y") || (CONFIG_SELINUXENABLED == "m"))
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Trying to find path for: [Object: setenforce]
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETENFORCE == "y") || (CONFIG_SETENFORCE == "m")), sourceFile -> selinux/setenforce.c, generated -> false, objectFile -> setenforce, listName -> lib)
2012-01-10 11:50:11,111 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETENFORCE == "y") || (CONFIG_SETENFORCE == "m")), sourceFile -> selinux/setenforce.c, generated -> false, objectFile -> setenforce, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,111 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Expression of path for object occurrence selinux/setenforce.c: ((CONFIG_SETENFORCE == "y") || (CONFIG_SETENFORCE == "m"))
2012-01-10 11:50:11,111 DEBUG PCDerivation$ Trying to find path for: [Object: setfiles]
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_SETFILES == "y") || (CONFIG_SETFILES == "m")) || ((CONFIG_RESTORECON == "y") || (CONFIG_RESTORECON == "m"))), sourceFile -> selinux/setfiles.c, generated -> false, objectFile -> setfiles, listName -> lib)
2012-01-10 11:50:11,112 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_SETFILES == "y") || (CONFIG_SETFILES == "m")) || ((CONFIG_RESTORECON == "y") || (CONFIG_RESTORECON == "m"))), sourceFile -> selinux/setfiles.c, generated -> false, objectFile -> setfiles, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Expression of path for object occurrence selinux/setfiles.c: (((CONFIG_SETFILES == "y") || (CONFIG_SETFILES == "m")) || ((CONFIG_RESTORECON == "y") || (CONFIG_RESTORECON == "m")))
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Trying to find path for: [Object: setsebool]
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSEBOOL == "y") || (CONFIG_SETSEBOOL == "m")), sourceFile -> selinux/setsebool.c, generated -> false, objectFile -> setsebool, listName -> lib)
2012-01-10 11:50:11,112 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSEBOOL == "y") || (CONFIG_SETSEBOOL == "m")), sourceFile -> selinux/setsebool.c, generated -> false, objectFile -> setsebool, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Expression of path for object occurrence selinux/setsebool.c: ((CONFIG_SETSEBOOL == "y") || (CONFIG_SETSEBOOL == "m"))
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Trying to find path for: [Object: sestatus]
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SESTATUS == "y") || (CONFIG_SESTATUS == "m")), sourceFile -> selinux/sestatus.c, generated -> false, objectFile -> sestatus, listName -> lib)
2012-01-10 11:50:11,112 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SESTATUS == "y") || (CONFIG_SESTATUS == "m")), sourceFile -> selinux/sestatus.c, generated -> false, objectFile -> sestatus, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Expression of path for object occurrence selinux/sestatus.c: ((CONFIG_SESTATUS == "y") || (CONFIG_SESTATUS == "m"))
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Trying to find path for: [Object: ash]
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash.c, generated -> false, objectFile -> ash, listName -> lib)
2012-01-10 11:50:11,112 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash.c, generated -> false, objectFile -> ash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Expression of path for object occurrence shell/ash.c: ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Trying to find path for: [Object: ash_ptr_hack]
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash_ptr_hack.c, generated -> false, objectFile -> ash_ptr_hack, listName -> lib)
2012-01-10 11:50:11,112 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash_ptr_hack.c, generated -> false, objectFile -> ash_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,112 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Expression of path for object occurrence shell/ash_ptr_hack.c: ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))
2012-01-10 11:50:11,112 DEBUG PCDerivation$ Trying to find path for: [Object: shell_common]
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH == "y") || (CONFIG_ASH == "m")) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> shell/shell_common.c, generated -> false, objectFile -> shell_common, listName -> lib)
2012-01-10 11:50:11,113 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH == "y") || (CONFIG_ASH == "m")) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> shell/shell_common.c, generated -> false, objectFile -> shell_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Expression of path for object occurrence shell/shell_common.c: (((CONFIG_ASH == "y") || (CONFIG_ASH == "m")) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Trying to find path for: [Object: random]
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH_RANDOM_SUPPORT == "y") || (CONFIG_ASH_RANDOM_SUPPORT == "m")) || ((CONFIG_HUSH_RANDOM_SUPPORT == "y") || (CONFIG_HUSH_RANDOM_SUPPORT == "m"))), sourceFile -> shell/random.c, generated -> false, objectFile -> random, listName -> lib)
2012-01-10 11:50:11,113 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH_RANDOM_SUPPORT == "y") || (CONFIG_ASH_RANDOM_SUPPORT == "m")) || ((CONFIG_HUSH_RANDOM_SUPPORT == "y") || (CONFIG_HUSH_RANDOM_SUPPORT == "m"))), sourceFile -> shell/random.c, generated -> false, objectFile -> random, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Expression of path for object occurrence shell/random.c: (((CONFIG_ASH_RANDOM_SUPPORT == "y") || (CONFIG_ASH_RANDOM_SUPPORT == "m")) || ((CONFIG_HUSH_RANDOM_SUPPORT == "y") || (CONFIG_HUSH_RANDOM_SUPPORT == "m")))
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Trying to find path for: [Object: cttyhack]
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CTTYHACK == "y") || (CONFIG_CTTYHACK == "m")), sourceFile -> shell/cttyhack.c, generated -> false, objectFile -> cttyhack, listName -> lib)
2012-01-10 11:50:11,113 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CTTYHACK == "y") || (CONFIG_CTTYHACK == "m")), sourceFile -> shell/cttyhack.c, generated -> false, objectFile -> cttyhack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Expression of path for object occurrence shell/cttyhack.c: ((CONFIG_CTTYHACK == "y") || (CONFIG_CTTYHACK == "m"))
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Trying to find path for: [Object: hush]
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/hush.c, generated -> false, objectFile -> hush, listName -> lib)
2012-01-10 11:50:11,113 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/hush.c, generated -> false, objectFile -> hush, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Expression of path for object occurrence shell/hush.c: ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Trying to find path for: [Object: match]
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/match.c, generated -> false, objectFile -> match, listName -> lib)
2012-01-10 11:50:11,113 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/match.c, generated -> false, objectFile -> match, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Expression of path for object occurrence shell/match.c: ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))
2012-01-10 11:50:11,113 DEBUG PCDerivation$ Trying to find path for: [Object: math]
2012-01-10 11:50:11,113 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SH_MATH_SUPPORT == "y") || (CONFIG_SH_MATH_SUPPORT == "m")), sourceFile -> shell/math.c, generated -> false, objectFile -> math, listName -> lib)
2012-01-10 11:50:11,114 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SH_MATH_SUPPORT == "y") || (CONFIG_SH_MATH_SUPPORT == "m")), sourceFile -> shell/math.c, generated -> false, objectFile -> math, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,114 DEBUG PCDerivation$ Expression of path for object occurrence shell/math.c: ((CONFIG_SH_MATH_SUPPORT == "y") || (CONFIG_SH_MATH_SUPPORT == "m"))
2012-01-10 11:50:11,114 DEBUG PCDerivation$ Trying to find path for: [Object: klogd]
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KLOGD == "y") || (CONFIG_KLOGD == "m")), sourceFile -> sysklogd/klogd.c, generated -> false, objectFile -> klogd, listName -> lib)
2012-01-10 11:50:11,114 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KLOGD == "y") || (CONFIG_KLOGD == "m")), sourceFile -> sysklogd/klogd.c, generated -> false, objectFile -> klogd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,114 DEBUG PCDerivation$ Expression of path for object occurrence sysklogd/klogd.c: ((CONFIG_KLOGD == "y") || (CONFIG_KLOGD == "m"))
2012-01-10 11:50:11,114 DEBUG PCDerivation$ Trying to find path for: [Object: syslogd_and_logger]
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOGGER == "y") || (CONFIG_LOGGER == "m")) || ((CONFIG_SYSLOGD == "y") || (CONFIG_SYSLOGD == "m"))), sourceFile -> sysklogd/syslogd_and_logger.c, generated -> false, objectFile -> syslogd_and_logger, listName -> lib)
2012-01-10 11:50:11,114 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOGGER == "y") || (CONFIG_LOGGER == "m")) || ((CONFIG_SYSLOGD == "y") || (CONFIG_SYSLOGD == "m"))), sourceFile -> sysklogd/syslogd_and_logger.c, generated -> false, objectFile -> syslogd_and_logger, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,114 DEBUG PCDerivation$ Expression of path for object occurrence sysklogd/syslogd_and_logger.c: (((CONFIG_LOGGER == "y") || (CONFIG_LOGGER == "m")) || ((CONFIG_SYSLOGD == "y") || (CONFIG_SYSLOGD == "m")))
2012-01-10 11:50:11,114 DEBUG PCDerivation$ Trying to find path for: [Object: logread]
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGREAD == "y") || (CONFIG_LOGREAD == "m")), sourceFile -> sysklogd/logread.c, generated -> false, objectFile -> logread, listName -> lib)
2012-01-10 11:50:11,114 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGREAD == "y") || (CONFIG_LOGREAD == "m")), sourceFile -> sysklogd/logread.c, generated -> false, objectFile -> logread, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,114 DEBUG PCDerivation$ Expression of path for object occurrence sysklogd/logread.c: ((CONFIG_LOGREAD == "y") || (CONFIG_LOGREAD == "m"))
2012-01-10 11:50:11,114 DEBUG PCDerivation$ Trying to find path for: [Object: blockdev]
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLOCKDEV == "y") || (CONFIG_BLOCKDEV == "m")), sourceFile -> util-linux/blockdev.c, generated -> false, objectFile -> blockdev, listName -> lib)
2012-01-10 11:50:11,114 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLOCKDEV == "y") || (CONFIG_BLOCKDEV == "m")), sourceFile -> util-linux/blockdev.c, generated -> false, objectFile -> blockdev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,114 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,114 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,114 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/blockdev.c: ((CONFIG_BLOCKDEV == "y") || (CONFIG_BLOCKDEV == "m"))
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Trying to find path for: [Object: mdev]
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m")), sourceFile -> util-linux/mdev.c, generated -> false, objectFile -> mdev, listName -> lib)
2012-01-10 11:50:11,115 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m")), sourceFile -> util-linux/mdev.c, generated -> false, objectFile -> mdev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mdev.c: ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Trying to find path for: [Object: rev]
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REV == "y") || (CONFIG_REV == "m")), sourceFile -> util-linux/rev.c, generated -> false, objectFile -> rev, listName -> lib)
2012-01-10 11:50:11,115 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REV == "y") || (CONFIG_REV == "m")), sourceFile -> util-linux/rev.c, generated -> false, objectFile -> rev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rev.c: ((CONFIG_REV == "y") || (CONFIG_REV == "m"))
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Trying to find path for: [Object: acpid]
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ACPID == "y") || (CONFIG_ACPID == "m")), sourceFile -> util-linux/acpid.c, generated -> false, objectFile -> acpid, listName -> lib)
2012-01-10 11:50:11,115 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ACPID == "y") || (CONFIG_ACPID == "m")), sourceFile -> util-linux/acpid.c, generated -> false, objectFile -> acpid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/acpid.c: ((CONFIG_ACPID == "y") || (CONFIG_ACPID == "m"))
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Trying to find path for: [Object: blkid]
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")), sourceFile -> util-linux/blkid.c, generated -> false, objectFile -> blkid, listName -> lib)
2012-01-10 11:50:11,115 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")), sourceFile -> util-linux/blkid.c, generated -> false, objectFile -> blkid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/blkid.c: ((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m"))
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Trying to find path for: [Object: dmesg]
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DMESG == "y") || (CONFIG_DMESG == "m")), sourceFile -> util-linux/dmesg.c, generated -> false, objectFile -> dmesg, listName -> lib)
2012-01-10 11:50:11,115 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DMESG == "y") || (CONFIG_DMESG == "m")), sourceFile -> util-linux/dmesg.c, generated -> false, objectFile -> dmesg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,115 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/dmesg.c: ((CONFIG_DMESG == "y") || (CONFIG_DMESG == "m"))
2012-01-10 11:50:11,115 DEBUG PCDerivation$ Trying to find path for: [Object: fbset]
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSET == "y") || (CONFIG_FBSET == "m")), sourceFile -> util-linux/fbset.c, generated -> false, objectFile -> fbset, listName -> lib)
2012-01-10 11:50:11,116 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSET == "y") || (CONFIG_FBSET == "m")), sourceFile -> util-linux/fbset.c, generated -> false, objectFile -> fbset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fbset.c: ((CONFIG_FBSET == "y") || (CONFIG_FBSET == "m"))
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Trying to find path for: [Object: freeramdisk]
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FDFLUSH == "y") || (CONFIG_FDFLUSH == "m")) || ((CONFIG_FREERAMDISK == "y") || (CONFIG_FREERAMDISK == "m"))), sourceFile -> util-linux/freeramdisk.c, generated -> false, objectFile -> freeramdisk, listName -> lib)
2012-01-10 11:50:11,116 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FDFLUSH == "y") || (CONFIG_FDFLUSH == "m")) || ((CONFIG_FREERAMDISK == "y") || (CONFIG_FREERAMDISK == "m"))), sourceFile -> util-linux/freeramdisk.c, generated -> false, objectFile -> freeramdisk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/freeramdisk.c: (((CONFIG_FDFLUSH == "y") || (CONFIG_FDFLUSH == "m")) || ((CONFIG_FREERAMDISK == "y") || (CONFIG_FREERAMDISK == "m")))
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Trying to find path for: [Object: fdformat]
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDFORMAT == "y") || (CONFIG_FDFORMAT == "m")), sourceFile -> util-linux/fdformat.c, generated -> false, objectFile -> fdformat, listName -> lib)
2012-01-10 11:50:11,116 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDFORMAT == "y") || (CONFIG_FDFORMAT == "m")), sourceFile -> util-linux/fdformat.c, generated -> false, objectFile -> fdformat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fdformat.c: ((CONFIG_FDFORMAT == "y") || (CONFIG_FDFORMAT == "m"))
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Trying to find path for: [Object: fdisk]
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDISK == "y") || (CONFIG_FDISK == "m")), sourceFile -> util-linux/fdisk.c, generated -> false, objectFile -> fdisk, listName -> lib)
2012-01-10 11:50:11,116 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDISK == "y") || (CONFIG_FDISK == "m")), sourceFile -> util-linux/fdisk.c, generated -> false, objectFile -> fdisk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fdisk.c: ((CONFIG_FDISK == "y") || (CONFIG_FDISK == "m"))
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Trying to find path for: [Object: findfs]
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m")), sourceFile -> util-linux/findfs.c, generated -> false, objectFile -> findfs, listName -> lib)
2012-01-10 11:50:11,116 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m")), sourceFile -> util-linux/findfs.c, generated -> false, objectFile -> findfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/findfs.c: ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))
2012-01-10 11:50:11,116 DEBUG PCDerivation$ Trying to find path for: [Object: flock]
2012-01-10 11:50:11,116 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLOCK == "y") || (CONFIG_FLOCK == "m")), sourceFile -> util-linux/flock.c, generated -> false, objectFile -> flock, listName -> lib)
2012-01-10 11:50:11,117 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLOCK == "y") || (CONFIG_FLOCK == "m")), sourceFile -> util-linux/flock.c, generated -> false, objectFile -> flock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,117 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,117 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,117 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/flock.c: ((CONFIG_FLOCK == "y") || (CONFIG_FLOCK == "m"))
2012-01-10 11:50:11,117 DEBUG PCDerivation$ Trying to find path for: [Object: fsck_minix]
2012-01-10 11:50:11,117 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m")), sourceFile -> util-linux/fsck_minix.c, generated -> false, objectFile -> fsck_minix, listName -> lib)
2012-01-10 11:50:11,117 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m")), sourceFile -> util-linux/fsck_minix.c, generated -> false, objectFile -> fsck_minix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,117 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,117 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,117 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fsck_minix.c: ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))
2012-01-10 11:50:11,117 DEBUG PCDerivation$ Trying to find path for: [Object: getopt]
2012-01-10 11:50:11,117 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETOPT == "y") || (CONFIG_GETOPT == "m")), sourceFile -> util-linux/getopt.c, generated -> false, objectFile -> getopt, listName -> lib)
2012-01-10 11:50:11,117 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETOPT == "y") || (CONFIG_GETOPT == "m")), sourceFile -> util-linux/getopt.c, generated -> false, objectFile -> getopt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,117 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,117 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,117 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/getopt.c: ((CONFIG_GETOPT == "y") || (CONFIG_GETOPT == "m"))
2012-01-10 11:50:11,117 DEBUG PCDerivation$ Trying to find path for: [Object: hexdump]
2012-01-10 11:50:11,117 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEXDUMP == "y") || (CONFIG_HEXDUMP == "m")), sourceFile -> util-linux/hexdump.c, generated -> false, objectFile -> hexdump, listName -> lib)
2012-01-10 11:50:11,117 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEXDUMP == "y") || (CONFIG_HEXDUMP == "m")), sourceFile -> util-linux/hexdump.c, generated -> false, objectFile -> hexdump, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,118 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,118 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,118 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/hexdump.c: ((CONFIG_HEXDUMP == "y") || (CONFIG_HEXDUMP == "m"))
2012-01-10 11:50:11,118 DEBUG PCDerivation$ Trying to find path for: [Object: hwclock]
2012-01-10 11:50:11,118 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")), sourceFile -> util-linux/hwclock.c, generated -> false, objectFile -> hwclock, listName -> lib)
2012-01-10 11:50:11,118 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")), sourceFile -> util-linux/hwclock.c, generated -> false, objectFile -> hwclock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,118 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,118 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,118 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/hwclock.c: ((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m"))
2012-01-10 11:50:11,118 DEBUG PCDerivation$ Trying to find path for: [Object: ipcrm]
2012-01-10 11:50:11,118 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCRM == "y") || (CONFIG_IPCRM == "m")), sourceFile -> util-linux/ipcrm.c, generated -> false, objectFile -> ipcrm, listName -> lib)
2012-01-10 11:50:11,118 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCRM == "y") || (CONFIG_IPCRM == "m")), sourceFile -> util-linux/ipcrm.c, generated -> false, objectFile -> ipcrm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,118 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,118 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,118 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/ipcrm.c: ((CONFIG_IPCRM == "y") || (CONFIG_IPCRM == "m"))
2012-01-10 11:50:11,118 DEBUG PCDerivation$ Trying to find path for: [Object: ipcs]
2012-01-10 11:50:11,118 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCS == "y") || (CONFIG_IPCS == "m")), sourceFile -> util-linux/ipcs.c, generated -> false, objectFile -> ipcs, listName -> lib)
2012-01-10 11:50:11,118 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCS == "y") || (CONFIG_IPCS == "m")), sourceFile -> util-linux/ipcs.c, generated -> false, objectFile -> ipcs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,119 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/ipcs.c: ((CONFIG_IPCS == "y") || (CONFIG_IPCS == "m"))
2012-01-10 11:50:11,119 DEBUG PCDerivation$ Trying to find path for: [Object: losetup]
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")), sourceFile -> util-linux/losetup.c, generated -> false, objectFile -> losetup, listName -> lib)
2012-01-10 11:50:11,119 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")), sourceFile -> util-linux/losetup.c, generated -> false, objectFile -> losetup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,119 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/losetup.c: ((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m"))
2012-01-10 11:50:11,119 DEBUG PCDerivation$ Trying to find path for: [Object: lspci]
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSPCI == "y") || (CONFIG_LSPCI == "m")), sourceFile -> util-linux/lspci.c, generated -> false, objectFile -> lspci, listName -> lib)
2012-01-10 11:50:11,119 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSPCI == "y") || (CONFIG_LSPCI == "m")), sourceFile -> util-linux/lspci.c, generated -> false, objectFile -> lspci, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,119 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/lspci.c: ((CONFIG_LSPCI == "y") || (CONFIG_LSPCI == "m"))
2012-01-10 11:50:11,119 DEBUG PCDerivation$ Trying to find path for: [Object: lsusb]
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSUSB == "y") || (CONFIG_LSUSB == "m")), sourceFile -> util-linux/lsusb.c, generated -> false, objectFile -> lsusb, listName -> lib)
2012-01-10 11:50:11,119 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSUSB == "y") || (CONFIG_LSUSB == "m")), sourceFile -> util-linux/lsusb.c, generated -> false, objectFile -> lsusb, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,119 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,120 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/lsusb.c: ((CONFIG_LSUSB == "y") || (CONFIG_LSUSB == "m"))
2012-01-10 11:50:11,120 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_ext2]
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m")), sourceFile -> util-linux/mkfs_ext2.c, generated -> false, objectFile -> mkfs_ext2, listName -> lib)
2012-01-10 11:50:11,120 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m")), sourceFile -> util-linux/mkfs_ext2.c, generated -> false, objectFile -> mkfs_ext2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,120 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_ext2.c: ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))
2012-01-10 11:50:11,120 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_minix]
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m")), sourceFile -> util-linux/mkfs_minix.c, generated -> false, objectFile -> mkfs_minix, listName -> lib)
2012-01-10 11:50:11,120 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m")), sourceFile -> util-linux/mkfs_minix.c, generated -> false, objectFile -> mkfs_minix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,120 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_minix.c: ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))
2012-01-10 11:50:11,120 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_reiser]
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m")), sourceFile -> util-linux/mkfs_reiser.c, generated -> false, objectFile -> mkfs_reiser, listName -> lib)
2012-01-10 11:50:11,120 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m")), sourceFile -> util-linux/mkfs_reiser.c, generated -> false, objectFile -> mkfs_reiser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,120 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_reiser.c: ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))
2012-01-10 11:50:11,120 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_vfat]
2012-01-10 11:50:11,120 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_VFAT == "y") || (CONFIG_MKFS_VFAT == "m")), sourceFile -> util-linux/mkfs_vfat.c, generated -> false, objectFile -> mkfs_vfat, listName -> lib)
2012-01-10 11:50:11,121 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_VFAT == "y") || (CONFIG_MKFS_VFAT == "m")), sourceFile -> util-linux/mkfs_vfat.c, generated -> false, objectFile -> mkfs_vfat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,121 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_vfat.c: ((CONFIG_MKFS_VFAT == "y") || (CONFIG_MKFS_VFAT == "m"))
2012-01-10 11:50:11,121 DEBUG PCDerivation$ Trying to find path for: [Object: mkswap]
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKSWAP == "y") || (CONFIG_MKSWAP == "m")), sourceFile -> util-linux/mkswap.c, generated -> false, objectFile -> mkswap, listName -> lib)
2012-01-10 11:50:11,121 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKSWAP == "y") || (CONFIG_MKSWAP == "m")), sourceFile -> util-linux/mkswap.c, generated -> false, objectFile -> mkswap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,121 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkswap.c: ((CONFIG_MKSWAP == "y") || (CONFIG_MKSWAP == "m"))
2012-01-10 11:50:11,121 DEBUG PCDerivation$ Trying to find path for: [Object: more]
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MORE == "y") || (CONFIG_MORE == "m")), sourceFile -> util-linux/more.c, generated -> false, objectFile -> more, listName -> lib)
2012-01-10 11:50:11,121 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MORE == "y") || (CONFIG_MORE == "m")), sourceFile -> util-linux/more.c, generated -> false, objectFile -> more, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,121 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/more.c: ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))
2012-01-10 11:50:11,121 DEBUG PCDerivation$ Trying to find path for: [Object: mount]
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")), sourceFile -> util-linux/mount.c, generated -> false, objectFile -> mount, listName -> lib)
2012-01-10 11:50:11,121 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")), sourceFile -> util-linux/mount.c, generated -> false, objectFile -> mount, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,121 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,122 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mount.c: ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))
2012-01-10 11:50:11,122 DEBUG PCDerivation$ Trying to find path for: [Object: pivot_root]
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIVOT_ROOT == "y") || (CONFIG_PIVOT_ROOT == "m")), sourceFile -> util-linux/pivot_root.c, generated -> false, objectFile -> pivot_root, listName -> lib)
2012-01-10 11:50:11,122 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIVOT_ROOT == "y") || (CONFIG_PIVOT_ROOT == "m")), sourceFile -> util-linux/pivot_root.c, generated -> false, objectFile -> pivot_root, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,122 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/pivot_root.c: ((CONFIG_PIVOT_ROOT == "y") || (CONFIG_PIVOT_ROOT == "m"))
2012-01-10 11:50:11,122 DEBUG PCDerivation$ Trying to find path for: [Object: rdate]
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDATE == "y") || (CONFIG_RDATE == "m")), sourceFile -> util-linux/rdate.c, generated -> false, objectFile -> rdate, listName -> lib)
2012-01-10 11:50:11,122 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDATE == "y") || (CONFIG_RDATE == "m")), sourceFile -> util-linux/rdate.c, generated -> false, objectFile -> rdate, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,122 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rdate.c: ((CONFIG_RDATE == "y") || (CONFIG_RDATE == "m"))
2012-01-10 11:50:11,122 DEBUG PCDerivation$ Trying to find path for: [Object: rdev]
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDEV == "y") || (CONFIG_RDEV == "m")), sourceFile -> util-linux/rdev.c, generated -> false, objectFile -> rdev, listName -> lib)
2012-01-10 11:50:11,122 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDEV == "y") || (CONFIG_RDEV == "m")), sourceFile -> util-linux/rdev.c, generated -> false, objectFile -> rdev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,122 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rdev.c: ((CONFIG_RDEV == "y") || (CONFIG_RDEV == "m"))
2012-01-10 11:50:11,122 DEBUG PCDerivation$ Trying to find path for: [Object: readprofile]
2012-01-10 11:50:11,122 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READPROFILE == "y") || (CONFIG_READPROFILE == "m")), sourceFile -> util-linux/readprofile.c, generated -> false, objectFile -> readprofile, listName -> lib)
2012-01-10 11:50:11,123 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READPROFILE == "y") || (CONFIG_READPROFILE == "m")), sourceFile -> util-linux/readprofile.c, generated -> false, objectFile -> readprofile, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,123 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,123 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,123 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/readprofile.c: ((CONFIG_READPROFILE == "y") || (CONFIG_READPROFILE == "m"))
2012-01-10 11:50:11,123 DEBUG PCDerivation$ Trying to find path for: [Object: rtcwake]
2012-01-10 11:50:11,123 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")), sourceFile -> util-linux/rtcwake.c, generated -> false, objectFile -> rtcwake, listName -> lib)
2012-01-10 11:50:11,123 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")), sourceFile -> util-linux/rtcwake.c, generated -> false, objectFile -> rtcwake, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,123 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,123 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,123 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rtcwake.c: ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))
2012-01-10 11:50:11,123 DEBUG PCDerivation$ Trying to find path for: [Object: script]
2012-01-10 11:50:11,123 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPT == "y") || (CONFIG_SCRIPT == "m")), sourceFile -> util-linux/script.c, generated -> false, objectFile -> script, listName -> lib)
2012-01-10 11:50:11,123 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPT == "y") || (CONFIG_SCRIPT == "m")), sourceFile -> util-linux/script.c, generated -> false, objectFile -> script, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,123 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,123 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,123 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/script.c: ((CONFIG_SCRIPT == "y") || (CONFIG_SCRIPT == "m"))
2012-01-10 11:50:11,123 DEBUG PCDerivation$ Trying to find path for: [Object: scriptreplay]
2012-01-10 11:50:11,123 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPTREPLAY == "y") || (CONFIG_SCRIPTREPLAY == "m")), sourceFile -> util-linux/scriptreplay.c, generated -> false, objectFile -> scriptreplay, listName -> lib)
2012-01-10 11:50:11,123 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPTREPLAY == "y") || (CONFIG_SCRIPTREPLAY == "m")), sourceFile -> util-linux/scriptreplay.c, generated -> false, objectFile -> scriptreplay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,124 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/scriptreplay.c: ((CONFIG_SCRIPTREPLAY == "y") || (CONFIG_SCRIPTREPLAY == "m"))
2012-01-10 11:50:11,124 DEBUG PCDerivation$ Trying to find path for: [Object: setarch]
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETARCH == "y") || (CONFIG_SETARCH == "m")), sourceFile -> util-linux/setarch.c, generated -> false, objectFile -> setarch, listName -> lib)
2012-01-10 11:50:11,124 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETARCH == "y") || (CONFIG_SETARCH == "m")), sourceFile -> util-linux/setarch.c, generated -> false, objectFile -> setarch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,124 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/setarch.c: ((CONFIG_SETARCH == "y") || (CONFIG_SETARCH == "m"))
2012-01-10 11:50:11,124 DEBUG PCDerivation$ Trying to find path for: [Object: swaponoff]
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWAPONOFF == "y") || (CONFIG_SWAPONOFF == "m")), sourceFile -> util-linux/swaponoff.c, generated -> false, objectFile -> swaponoff, listName -> lib)
2012-01-10 11:50:11,124 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWAPONOFF == "y") || (CONFIG_SWAPONOFF == "m")), sourceFile -> util-linux/swaponoff.c, generated -> false, objectFile -> swaponoff, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,124 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/swaponoff.c: ((CONFIG_SWAPONOFF == "y") || (CONFIG_SWAPONOFF == "m"))
2012-01-10 11:50:11,124 DEBUG PCDerivation$ Trying to find path for: [Object: switch_root]
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWITCH_ROOT == "y") || (CONFIG_SWITCH_ROOT == "m")), sourceFile -> util-linux/switch_root.c, generated -> false, objectFile -> switch_root, listName -> lib)
2012-01-10 11:50:11,124 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWITCH_ROOT == "y") || (CONFIG_SWITCH_ROOT == "m")), sourceFile -> util-linux/switch_root.c, generated -> false, objectFile -> switch_root, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,124 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,124 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/switch_root.c: ((CONFIG_SWITCH_ROOT == "y") || (CONFIG_SWITCH_ROOT == "m"))
2012-01-10 11:50:11,125 DEBUG PCDerivation$ Trying to find path for: [Object: umount]
2012-01-10 11:50:11,125 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UMOUNT == "y") || (CONFIG_UMOUNT == "m")), sourceFile -> util-linux/umount.c, generated -> false, objectFile -> umount, listName -> lib)
2012-01-10 11:50:11,125 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UMOUNT == "y") || (CONFIG_UMOUNT == "m")), sourceFile -> util-linux/umount.c, generated -> false, objectFile -> umount, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,125 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:50:11,125 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,125 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/umount.c: ((CONFIG_UMOUNT == "y") || (CONFIG_UMOUNT == "m"))
2012-01-10 11:50:11,125 DEBUG PCDerivation$ Trying to find path for: [Object: get_devname]
2012-01-10 11:50:11,125 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")) || ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))) || ((CONFIG_FEATURE_MOUNT_LABEL == "y") || (CONFIG_FEATURE_MOUNT_LABEL == "m"))), sourceFile -> util-linux/volume_id/get_devname.c, generated -> false, objectFile -> get_devname, listName -> lib)
2012-01-10 11:50:11,125 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")) || ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))) || ((CONFIG_FEATURE_MOUNT_LABEL == "y") || (CONFIG_FEATURE_MOUNT_LABEL == "m"))), sourceFile -> util-linux/volume_id/get_devname.c, generated -> false, objectFile -> get_devname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,125 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,125 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild) is: RootNode --> Map()
2012-01-10 11:50:11,125 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,125 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/get_devname.c: ((((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")) || ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))) || ((CONFIG_FEATURE_MOUNT_LABEL == "y") || (CONFIG_FEATURE_MOUNT_LABEL == "m")))
2012-01-10 11:50:11,125 DEBUG PCDerivation$ Trying to find path for: [Object: volume_id]
2012-01-10 11:50:11,125 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/volume_id.c, generated -> false, objectFile -> volume_id, listName -> lib)
2012-01-10 11:50:11,125 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/volume_id.c, generated -> false, objectFile -> volume_id, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,125 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,125 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,125 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/volume_id.c: ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m"))
2012-01-10 11:50:11,125 DEBUG PCDerivation$ Trying to find path for: [Object: util]
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/util.c, generated -> false, objectFile -> util, listName -> lib)
2012-01-10 11:50:11,126 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/util.c, generated -> false, objectFile -> util, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,126 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/util.c: ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m"))
2012-01-10 11:50:11,126 DEBUG PCDerivation$ Trying to find path for: [Object: btrfs]
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_BTRFS == "y") || (CONFIG_FEATURE_VOLUMEID_BTRFS == "m")), sourceFile -> util-linux/volume_id/btrfs.c, generated -> false, objectFile -> btrfs, listName -> lib)
2012-01-10 11:50:11,126 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_BTRFS == "y") || (CONFIG_FEATURE_VOLUMEID_BTRFS == "m")), sourceFile -> util-linux/volume_id/btrfs.c, generated -> false, objectFile -> btrfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,126 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/btrfs.c: ((CONFIG_FEATURE_VOLUMEID_BTRFS == "y") || (CONFIG_FEATURE_VOLUMEID_BTRFS == "m"))
2012-01-10 11:50:11,126 DEBUG PCDerivation$ Trying to find path for: [Object: ext]
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_EXT == "y") || (CONFIG_FEATURE_VOLUMEID_EXT == "m")), sourceFile -> util-linux/volume_id/ext.c, generated -> false, objectFile -> ext, listName -> lib)
2012-01-10 11:50:11,126 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_EXT == "y") || (CONFIG_FEATURE_VOLUMEID_EXT == "m")), sourceFile -> util-linux/volume_id/ext.c, generated -> false, objectFile -> ext, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,126 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/ext.c: ((CONFIG_FEATURE_VOLUMEID_EXT == "y") || (CONFIG_FEATURE_VOLUMEID_EXT == "m"))
2012-01-10 11:50:11,126 DEBUG PCDerivation$ Trying to find path for: [Object: fat]
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_FAT == "y") || (CONFIG_FEATURE_VOLUMEID_FAT == "m")), sourceFile -> util-linux/volume_id/fat.c, generated -> false, objectFile -> fat, listName -> lib)
2012-01-10 11:50:11,126 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_FAT == "y") || (CONFIG_FEATURE_VOLUMEID_FAT == "m")), sourceFile -> util-linux/volume_id/fat.c, generated -> false, objectFile -> fat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,126 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,127 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/fat.c: ((CONFIG_FEATURE_VOLUMEID_FAT == "y") || (CONFIG_FEATURE_VOLUMEID_FAT == "m"))
2012-01-10 11:50:11,127 DEBUG PCDerivation$ Trying to find path for: [Object: hfs]
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_HFS == "y") || (CONFIG_FEATURE_VOLUMEID_HFS == "m")), sourceFile -> util-linux/volume_id/hfs.c, generated -> false, objectFile -> hfs, listName -> lib)
2012-01-10 11:50:11,127 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_HFS == "y") || (CONFIG_FEATURE_VOLUMEID_HFS == "m")), sourceFile -> util-linux/volume_id/hfs.c, generated -> false, objectFile -> hfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,127 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/hfs.c: ((CONFIG_FEATURE_VOLUMEID_HFS == "y") || (CONFIG_FEATURE_VOLUMEID_HFS == "m"))
2012-01-10 11:50:11,127 DEBUG PCDerivation$ Trying to find path for: [Object: iso9660]
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ISO9660 == "y") || (CONFIG_FEATURE_VOLUMEID_ISO9660 == "m")), sourceFile -> util-linux/volume_id/iso9660.c, generated -> false, objectFile -> iso9660, listName -> lib)
2012-01-10 11:50:11,127 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ISO9660 == "y") || (CONFIG_FEATURE_VOLUMEID_ISO9660 == "m")), sourceFile -> util-linux/volume_id/iso9660.c, generated -> false, objectFile -> iso9660, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,127 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/iso9660.c: ((CONFIG_FEATURE_VOLUMEID_ISO9660 == "y") || (CONFIG_FEATURE_VOLUMEID_ISO9660 == "m"))
2012-01-10 11:50:11,127 DEBUG PCDerivation$ Trying to find path for: [Object: jfs]
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_JFS == "y") || (CONFIG_FEATURE_VOLUMEID_JFS == "m")), sourceFile -> util-linux/volume_id/jfs.c, generated -> false, objectFile -> jfs, listName -> lib)
2012-01-10 11:50:11,127 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_JFS == "y") || (CONFIG_FEATURE_VOLUMEID_JFS == "m")), sourceFile -> util-linux/volume_id/jfs.c, generated -> false, objectFile -> jfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,127 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/jfs.c: ((CONFIG_FEATURE_VOLUMEID_JFS == "y") || (CONFIG_FEATURE_VOLUMEID_JFS == "m"))
2012-01-10 11:50:11,127 DEBUG PCDerivation$ Trying to find path for: [Object: linux_raid]
2012-01-10 11:50:11,127 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXRAID == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXRAID == "m")), sourceFile -> util-linux/volume_id/linux_raid.c, generated -> false, objectFile -> linux_raid, listName -> lib)
2012-01-10 11:50:11,128 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXRAID == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXRAID == "m")), sourceFile -> util-linux/volume_id/linux_raid.c, generated -> false, objectFile -> linux_raid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,128 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,128 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,128 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/linux_raid.c: ((CONFIG_FEATURE_VOLUMEID_LINUXRAID == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXRAID == "m"))
2012-01-10 11:50:11,128 DEBUG PCDerivation$ Trying to find path for: [Object: linux_swap]
2012-01-10 11:50:11,128 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "m")), sourceFile -> util-linux/volume_id/linux_swap.c, generated -> false, objectFile -> linux_swap, listName -> lib)
2012-01-10 11:50:11,128 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "m")), sourceFile -> util-linux/volume_id/linux_swap.c, generated -> false, objectFile -> linux_swap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,128 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,128 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,128 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/linux_swap.c: ((CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "m"))
2012-01-10 11:50:11,128 DEBUG PCDerivation$ Trying to find path for: [Object: ntfs]
2012-01-10 11:50:11,128 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_NTFS == "y") || (CONFIG_FEATURE_VOLUMEID_NTFS == "m")), sourceFile -> util-linux/volume_id/ntfs.c, generated -> false, objectFile -> ntfs, listName -> lib)
2012-01-10 11:50:11,128 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_NTFS == "y") || (CONFIG_FEATURE_VOLUMEID_NTFS == "m")), sourceFile -> util-linux/volume_id/ntfs.c, generated -> false, objectFile -> ntfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,128 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,128 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,128 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/ntfs.c: ((CONFIG_FEATURE_VOLUMEID_NTFS == "y") || (CONFIG_FEATURE_VOLUMEID_NTFS == "m"))
2012-01-10 11:50:11,128 DEBUG PCDerivation$ Trying to find path for: [Object: reiserfs]
2012-01-10 11:50:11,128 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_REISERFS == "y") || (CONFIG_FEATURE_VOLUMEID_REISERFS == "m")), sourceFile -> util-linux/volume_id/reiserfs.c, generated -> false, objectFile -> reiserfs, listName -> lib)
2012-01-10 11:50:11,128 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_REISERFS == "y") || (CONFIG_FEATURE_VOLUMEID_REISERFS == "m")), sourceFile -> util-linux/volume_id/reiserfs.c, generated -> false, objectFile -> reiserfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,129 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/reiserfs.c: ((CONFIG_FEATURE_VOLUMEID_REISERFS == "y") || (CONFIG_FEATURE_VOLUMEID_REISERFS == "m"))
2012-01-10 11:50:11,129 DEBUG PCDerivation$ Trying to find path for: [Object: udf]
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_UDF == "y") || (CONFIG_FEATURE_VOLUMEID_UDF == "m")), sourceFile -> util-linux/volume_id/udf.c, generated -> false, objectFile -> udf, listName -> lib)
2012-01-10 11:50:11,129 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_UDF == "y") || (CONFIG_FEATURE_VOLUMEID_UDF == "m")), sourceFile -> util-linux/volume_id/udf.c, generated -> false, objectFile -> udf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,129 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/udf.c: ((CONFIG_FEATURE_VOLUMEID_UDF == "y") || (CONFIG_FEATURE_VOLUMEID_UDF == "m"))
2012-01-10 11:50:11,129 DEBUG PCDerivation$ Trying to find path for: [Object: xfs]
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_XFS == "y") || (CONFIG_FEATURE_VOLUMEID_XFS == "m")), sourceFile -> util-linux/volume_id/xfs.c, generated -> false, objectFile -> xfs, listName -> lib)
2012-01-10 11:50:11,129 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_XFS == "y") || (CONFIG_FEATURE_VOLUMEID_XFS == "m")), sourceFile -> util-linux/volume_id/xfs.c, generated -> false, objectFile -> xfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,129 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/xfs.c: ((CONFIG_FEATURE_VOLUMEID_XFS == "y") || (CONFIG_FEATURE_VOLUMEID_XFS == "m"))
2012-01-10 11:50:11,129 DEBUG PCDerivation$ Trying to find path for: [Object: cramfs]
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_CRAMFS == "y") || (CONFIG_FEATURE_VOLUMEID_CRAMFS == "m")), sourceFile -> util-linux/volume_id/cramfs.c, generated -> false, objectFile -> cramfs, listName -> lib)
2012-01-10 11:50:11,129 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_CRAMFS == "y") || (CONFIG_FEATURE_VOLUMEID_CRAMFS == "m")), sourceFile -> util-linux/volume_id/cramfs.c, generated -> false, objectFile -> cramfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,129 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/cramfs.c: ((CONFIG_FEATURE_VOLUMEID_CRAMFS == "y") || (CONFIG_FEATURE_VOLUMEID_CRAMFS == "m"))
2012-01-10 11:50:11,129 DEBUG PCDerivation$ Trying to find path for: [Object: romfs]
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ROMFS == "y") || (CONFIG_FEATURE_VOLUMEID_ROMFS == "m")), sourceFile -> util-linux/volume_id/romfs.c, generated -> false, objectFile -> romfs, listName -> lib)
2012-01-10 11:50:11,129 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ROMFS == "y") || (CONFIG_FEATURE_VOLUMEID_ROMFS == "m")), sourceFile -> util-linux/volume_id/romfs.c, generated -> false, objectFile -> romfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,129 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,130 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/romfs.c: ((CONFIG_FEATURE_VOLUMEID_ROMFS == "y") || (CONFIG_FEATURE_VOLUMEID_ROMFS == "m"))
2012-01-10 11:50:11,130 DEBUG PCDerivation$ Trying to find path for: [Object: sysv]
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_SYSV == "y") || (CONFIG_FEATURE_VOLUMEID_SYSV == "m")), sourceFile -> util-linux/volume_id/sysv.c, generated -> false, objectFile -> sysv, listName -> lib)
2012-01-10 11:50:11,130 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_SYSV == "y") || (CONFIG_FEATURE_VOLUMEID_SYSV == "m")), sourceFile -> util-linux/volume_id/sysv.c, generated -> false, objectFile -> sysv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,130 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/sysv.c: ((CONFIG_FEATURE_VOLUMEID_SYSV == "y") || (CONFIG_FEATURE_VOLUMEID_SYSV == "m"))
2012-01-10 11:50:11,130 DEBUG PCDerivation$ Trying to find path for: [Object: luks]
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LUKS == "y") || (CONFIG_FEATURE_VOLUMEID_LUKS == "m")), sourceFile -> util-linux/volume_id/luks.c, generated -> false, objectFile -> luks, listName -> lib)
2012-01-10 11:50:11,130 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LUKS == "y") || (CONFIG_FEATURE_VOLUMEID_LUKS == "m")), sourceFile -> util-linux/volume_id/luks.c, generated -> false, objectFile -> luks, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,130 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/luks.c: ((CONFIG_FEATURE_VOLUMEID_LUKS == "y") || (CONFIG_FEATURE_VOLUMEID_LUKS == "m"))
2012-01-10 11:50:11,130 DEBUG PCDerivation$ Trying to find path for: [Object: ocfs2]
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_OCFS2 == "y") || (CONFIG_FEATURE_VOLUMEID_OCFS2 == "m")), sourceFile -> util-linux/volume_id/ocfs2.c, generated -> false, objectFile -> ocfs2, listName -> lib)
2012-01-10 11:50:11,130 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_OCFS2 == "y") || (CONFIG_FEATURE_VOLUMEID_OCFS2 == "m")), sourceFile -> util-linux/volume_id/ocfs2.c, generated -> false, objectFile -> ocfs2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:50:11,130 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:50:11,130 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/ocfs2.c: ((CONFIG_FEATURE_VOLUMEID_OCFS2 == "y") || (CONFIG_FEATURE_VOLUMEID_OCFS2 == "m"))
2012-01-10 11:50:11,176 INFO KBuildMinerMain$ Saving PCs to: pc.txt
2012-01-10 11:50:11,211 INFO KBuildMinerMain$ Extracting additional C flags...
2012-01-10 11:52:03,977 INFO KBuildMinerMain$ Starting KBuildMiner...
2012-01-10 11:52:04,058 INFO KBuildMinerMain$ === PreProcessing applets/Kbuild
2012-01-10 11:52:04,060 INFO KBuildMinerMain$ === Processing applets/Kbuild
2012-01-10 11:52:04,113 TRACE ModelFactory addObject
2012-01-10 11:52:04,119 TRACE ModelFactory  addVariableAssignment: always, value: $(hostprogs-y)
2012-01-10 11:52:04,121 TRACE ModelFactory pushIf
2012-01-10 11:52:04,123 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@7c49cdc8,Hole(List(gsd.buildanalysis.linux.model.BNode@7233374e, [Object: applets]),NodeLoc([Makefile: applets/Kbuild],Top),List()))
2012-01-10 11:52:04,126 TRACE ModelFactory pushElse
2012-01-10 11:52:04,127 TRACE ModelFactory  addVariableAssignment: srctree_slash, value: $(srctree)/
2012-01-10 11:52:04,129 TRACE ModelFactory popEndIf
2012-01-10 11:52:04,129 TRACE ModelFactory  addVariableAssignment: HOSTCFLAGS_usage.o, value: -I$(srctree_slash)include -Iinclude
2012-01-10 11:52:04,129 TRACE ModelFactory  addVariableAssignment: HOSTCFLAGS_usage_pod.o, value: -I$(srctree_slash)include -Iinclude
2012-01-10 11:52:04,137 TRACE ModelFactory  addVariableAssignment: quiet_cmd_gen_usage_compressed, value: GEN     include/usage_compressed.h
2012-01-10 11:52:04,137 TRACE ModelFactory  addVariableAssignment: cmd_gen_usage_compressed, value: $(srctree_slash)applets/usage_compressed include/usage_compressed.h applets
2012-01-10 11:52:04,142 TRACE ModelFactory  addVariableAssignment: quiet_cmd_gen_applet_tables, value: GEN     include/applet_tables.h
2012-01-10 11:52:04,142 TRACE ModelFactory  addVariableAssignment: cmd_gen_applet_tables, value: applets/applet_tables include/applet_tables.h include/NUM_APPLETS.h
2012-01-10 11:52:04,153 INFO KBuildMinerMain$ === PostProcessing applets/Kbuild
2012-01-10 11:52:04,193 INFO KBuildMinerMain$ === PreProcessing archival/Kbuild
2012-01-10 11:52:04,193 INFO KBuildMinerMain$ === Processing archival/Kbuild
2012-01-10 11:52:04,196 TRACE ModelFactory addMakefile
2012-01-10 11:52:04,201 TRACE ModelFactory addObject
2012-01-10 11:52:04,201 TRACE ModelFactory addObject
2012-01-10 11:52:04,202 TRACE ModelFactory addObject
2012-01-10 11:52:04,202 TRACE ModelFactory addObject
2012-01-10 11:52:04,202 TRACE ModelFactory addObject
2012-01-10 11:52:04,203 TRACE ModelFactory addObject
2012-01-10 11:52:04,203 TRACE ModelFactory addObject
2012-01-10 11:52:04,204 TRACE ModelFactory addObject
2012-01-10 11:52:04,204 TRACE ModelFactory addObject
2012-01-10 11:52:04,204 TRACE ModelFactory addObject
2012-01-10 11:52:04,205 TRACE ModelFactory addObject
2012-01-10 11:52:04,205 TRACE ModelFactory addObject
2012-01-10 11:52:04,205 TRACE ModelFactory addObject
2012-01-10 11:52:04,205 TRACE ModelFactory addObject
2012-01-10 11:52:04,206 TRACE ModelFactory addObject
2012-01-10 11:52:04,206 TRACE ModelFactory addObject
2012-01-10 11:52:04,207 TRACE ModelFactory addObject
2012-01-10 11:52:04,207 TRACE ModelFactory addObject
2012-01-10 11:52:04,208 TRACE ModelFactory addObject
2012-01-10 11:52:04,208 INFO KBuildMinerMain$ === PostProcessing archival/Kbuild
2012-01-10 11:52:04,246 INFO KBuildMinerMain$ === PreProcessing archival/libarchive/Kbuild
2012-01-10 11:52:04,247 INFO KBuildMinerMain$ === Processing archival/libarchive/Kbuild
2012-01-10 11:52:04,250 TRACE ModelFactory pushListVariable: COMMON_FILES
2012-01-10 11:52:04,252 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:52:04,253 TRACE ModelFactory addObjectToList: data_skip
2012-01-10 11:52:04,253 TRACE ModelFactory addObjectToList: data_extract_all
2012-01-10 11:52:04,253 TRACE ModelFactory addObjectToList: data_extract_to_stdout
2012-01-10 11:52:04,254 TRACE ModelFactory addObjectToList: filter_accept_all
2012-01-10 11:52:04,254 TRACE ModelFactory addObjectToList: filter_accept_list
2012-01-10 11:52:04,254 TRACE ModelFactory addObjectToList: filter_accept_reject_list
2012-01-10 11:52:04,254 TRACE ModelFactory addObjectToList: header_skip
2012-01-10 11:52:04,254 TRACE ModelFactory addObjectToList: header_list
2012-01-10 11:52:04,254 TRACE ModelFactory addObjectToList: header_verbose_list
2012-01-10 11:52:04,254 TRACE ModelFactory addObjectToList: seek_by_read
2012-01-10 11:52:04,254 TRACE ModelFactory addObjectToList: seek_by_jump
2012-01-10 11:52:04,254 TRACE ModelFactory addObjectToList: data_align
2012-01-10 11:52:04,255 TRACE ModelFactory addObjectToList: find_list_entry
2012-01-10 11:52:04,255 TRACE ModelFactory addObjectToList: init_handle
2012-01-10 11:52:04,256 TRACE ModelFactory popListVariable
2012-01-10 11:52:04,256 TRACE ModelFactory  addVariableAssignment: COMMON_FILES, value: data_skip.o \
	data_extract_all.o \
	data_extract_to_stdout.o \
\
	filter_accept_all.o \
	filter_accept_list.o \
	filter_accept_reject_list.o \
\
	header_skip.o \
	header_list.o \
	header_verbose_list.o \
\
	seek_by_read.o \
	seek_by_jump.o \
\
	data_align.o \
	find_list_entry.o \
	init_handle.o
2012-01-10 11:52:04,257 TRACE ModelFactory pushListVariable: DPKG_FILES
2012-01-10 11:52:04,257 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:52:04,257 TRACE ModelFactory addObjectToList: get_header_ar
2012-01-10 11:52:04,257 TRACE ModelFactory addObjectToList: unpack_ar_archive
2012-01-10 11:52:04,257 TRACE ModelFactory addObjectToList: get_header_tar
2012-01-10 11:52:04,257 TRACE ModelFactory addObjectToList: filter_accept_list_reassign
2012-01-10 11:52:04,257 TRACE ModelFactory popListVariable
2012-01-10 11:52:04,257 TRACE ModelFactory  addVariableAssignment: DPKG_FILES, value: get_header_ar.o \
	unpack_ar_archive.o \
	get_header_tar.o \
	filter_accept_list_reassign.o
2012-01-10 11:52:04,258 TRACE ModelFactory addObject
2012-01-10 11:52:04,258 TRACE ModelFactory addObject
2012-01-10 11:52:04,258 TRACE ModelFactory addObject
2012-01-10 11:52:04,259 TRACE ModelFactory addObject
2012-01-10 11:52:04,259 TRACE ModelFactory addObject
2012-01-10 11:52:04,259 TRACE ModelFactory addObject
2012-01-10 11:52:04,261 TRACE ModelFactory addVariableReference
2012-01-10 11:52:04,262 TRACE ModelFactory addVariableReference
2012-01-10 11:52:04,262 TRACE ModelFactory addObject
2012-01-10 11:52:04,263 TRACE ModelFactory addObject
2012-01-10 11:52:04,263 TRACE ModelFactory addObject
2012-01-10 11:52:04,264 TRACE ModelFactory addObject
2012-01-10 11:52:04,264 TRACE ModelFactory addObject
2012-01-10 11:52:04,264 TRACE ModelFactory addObject
2012-01-10 11:52:04,264 TRACE ModelFactory addObject
2012-01-10 11:52:04,265 TRACE ModelFactory addObject
2012-01-10 11:52:04,265 TRACE ModelFactory addObject
2012-01-10 11:52:04,266 TRACE ModelFactory addObject
2012-01-10 11:52:04,266 TRACE ModelFactory addObject
2012-01-10 11:52:04,266 TRACE ModelFactory addObject
2012-01-10 11:52:04,267 TRACE ModelFactory addObject
2012-01-10 11:52:04,267 TRACE ModelFactory addObject
2012-01-10 11:52:04,268 TRACE ModelFactory addObject
2012-01-10 11:52:04,268 TRACE ModelFactory addObject
2012-01-10 11:52:04,268 TRACE ModelFactory addObject
2012-01-10 11:52:04,269 TRACE ModelFactory addObject
2012-01-10 11:52:04,269 TRACE ModelFactory addObject
2012-01-10 11:52:04,270 TRACE ModelFactory addObject
2012-01-10 11:52:04,270 TRACE ModelFactory addObject
2012-01-10 11:52:04,270 TRACE ModelFactory addObject
2012-01-10 11:52:04,271 TRACE ModelFactory addObject
2012-01-10 11:52:04,271 TRACE ModelFactory addObject
2012-01-10 11:52:04,272 TRACE ModelFactory addObject
2012-01-10 11:52:04,272 TRACE ModelFactory addObject
2012-01-10 11:52:04,272 TRACE ModelFactory addObject
2012-01-10 11:52:04,273 TRACE ModelFactory addObject
2012-01-10 11:52:04,273 TRACE ModelFactory addObject
2012-01-10 11:52:04,274 TRACE ModelFactory pushIf
2012-01-10 11:52:04,274 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@fbc0d0f2,Hole(List([Object: data_extract_to_command], [Object: decompress_bunzip2], [Object: decompress_bunzip2], [Object: decompress_unxz], [Object: open_transformer], [Object: get_header_tar_lzma], [Object: decompress_unlzma], [Object: open_transformer], [Object: get_header_tar_bz2], [Object: decompress_bunzip2], [Object: open_transformer], [Object: get_header_tar_gz], [Object: decompress_unzip], [Object: open_transformer], [Object: decompress_uncompress], [Object: open_transformer], [Object: lzo1x_9x], [Object: lzo1x_d], [Object: lzo1x_1o], [Object: lzo1x_1], [Object: decompress_unzip], [Object: decompress_uncompress], [Object: get_header_tar], [Object: get_header_cpio], [Object: decompress_unzip], [Object: open_transformer], [Object: get_header_cpio], [Object: decompress_unzip], [Object: decompress_unzip], [VariableReference: DPKG_FILES], [VariableReference: DPKG_FILES], [Object: get_header_cpio], [Object: decompress_unxz], [Object: decompress_unlzma], [Object: decompress_bunzip2], [Object: unpack_ar_archive], [Object: get_header_ar], gsd.buildanalysis.linux.model.BNode@6b0b455d, [VariableDefinition: DPKG_FILES], gsd.buildanalysis.linux.model.BNode@d001331, [VariableDefinition: COMMON_FILES]),NodeLoc([Makefile: archival/libarchive/Kbuild],Top),List()))
2012-01-10 11:52:04,275 TRACE ModelFactory addVariableReference
2012-01-10 11:52:04,275 TRACE ModelFactory popEndIf
2012-01-10 11:52:04,275 INFO KBuildMinerMain$ === PostProcessing archival/libarchive/Kbuild
2012-01-10 11:52:04,341 INFO KBuildMinerMain$ === PreProcessing archival/libarchive/Kbuild
2012-01-10 11:52:04,342 INFO KBuildMinerMain$ === Processing archival/libarchive/Kbuild
2012-01-10 11:52:04,343 TRACE ModelFactory pushListVariable: COMMON_FILES
2012-01-10 11:52:04,343 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:52:04,343 TRACE ModelFactory addObjectToList: data_skip
2012-01-10 11:52:04,343 TRACE ModelFactory addObjectToList: data_extract_all
2012-01-10 11:52:04,343 TRACE ModelFactory addObjectToList: data_extract_to_stdout
2012-01-10 11:52:04,343 TRACE ModelFactory addObjectToList: filter_accept_all
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: filter_accept_list
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: filter_accept_reject_list
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: header_skip
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: header_list
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: header_verbose_list
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: seek_by_read
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: seek_by_jump
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: data_align
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: find_list_entry
2012-01-10 11:52:04,344 TRACE ModelFactory addObjectToList: init_handle
2012-01-10 11:52:04,344 TRACE ModelFactory popListVariable
2012-01-10 11:52:04,344 TRACE ModelFactory  addVariableAssignment: COMMON_FILES, value: data_skip.o \
	data_extract_all.o \
	data_extract_to_stdout.o \
\
	filter_accept_all.o \
	filter_accept_list.o \
	filter_accept_reject_list.o \
\
	header_skip.o \
	header_list.o \
	header_verbose_list.o \
\
	seek_by_read.o \
	seek_by_jump.o \
\
	data_align.o \
	find_list_entry.o \
	init_handle.o
2012-01-10 11:52:04,345 TRACE ModelFactory pushListVariable: DPKG_FILES
2012-01-10 11:52:04,345 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:52:04,345 TRACE ModelFactory addObjectToList: get_header_ar
2012-01-10 11:52:04,345 TRACE ModelFactory addObjectToList: unpack_ar_archive
2012-01-10 11:52:04,345 TRACE ModelFactory addObjectToList: get_header_tar
2012-01-10 11:52:04,345 TRACE ModelFactory addObjectToList: filter_accept_list_reassign
2012-01-10 11:52:04,345 TRACE ModelFactory popListVariable
2012-01-10 11:52:04,345 TRACE ModelFactory  addVariableAssignment: DPKG_FILES, value: get_header_ar.o \
	unpack_ar_archive.o \
	get_header_tar.o \
	filter_accept_list_reassign.o
2012-01-10 11:52:04,346 TRACE ModelFactory addObject
2012-01-10 11:52:04,346 TRACE ModelFactory addObject
2012-01-10 11:52:04,346 TRACE ModelFactory addObject
2012-01-10 11:52:04,347 TRACE ModelFactory addObject
2012-01-10 11:52:04,347 TRACE ModelFactory addObject
2012-01-10 11:52:04,347 TRACE ModelFactory addObject
2012-01-10 11:52:04,348 TRACE ModelFactory addVariableReference
2012-01-10 11:52:04,348 TRACE ModelFactory addVariableReference
2012-01-10 11:52:04,348 TRACE ModelFactory addObject
2012-01-10 11:52:04,349 TRACE ModelFactory addObject
2012-01-10 11:52:04,349 TRACE ModelFactory addObject
2012-01-10 11:52:04,349 TRACE ModelFactory addObject
2012-01-10 11:52:04,350 TRACE ModelFactory addObject
2012-01-10 11:52:04,350 TRACE ModelFactory addObject
2012-01-10 11:52:04,350 TRACE ModelFactory addObject
2012-01-10 11:52:04,350 TRACE ModelFactory addObject
2012-01-10 11:52:04,351 TRACE ModelFactory addObject
2012-01-10 11:52:04,351 TRACE ModelFactory addObject
2012-01-10 11:52:04,351 TRACE ModelFactory addObject
2012-01-10 11:52:04,351 TRACE ModelFactory addObject
2012-01-10 11:52:04,352 TRACE ModelFactory addObject
2012-01-10 11:52:04,352 TRACE ModelFactory addObject
2012-01-10 11:52:04,352 TRACE ModelFactory addObject
2012-01-10 11:52:04,353 TRACE ModelFactory addObject
2012-01-10 11:52:04,353 TRACE ModelFactory addObject
2012-01-10 11:52:04,353 TRACE ModelFactory addObject
2012-01-10 11:52:04,354 TRACE ModelFactory addObject
2012-01-10 11:52:04,354 TRACE ModelFactory addObject
2012-01-10 11:52:04,354 TRACE ModelFactory addObject
2012-01-10 11:52:04,354 TRACE ModelFactory addObject
2012-01-10 11:52:04,354 TRACE ModelFactory addObject
2012-01-10 11:52:04,355 TRACE ModelFactory addObject
2012-01-10 11:52:04,355 TRACE ModelFactory addObject
2012-01-10 11:52:04,355 TRACE ModelFactory addObject
2012-01-10 11:52:04,355 TRACE ModelFactory addObject
2012-01-10 11:52:04,356 TRACE ModelFactory addObject
2012-01-10 11:52:04,356 TRACE ModelFactory addObject
2012-01-10 11:52:04,356 TRACE ModelFactory pushIf
2012-01-10 11:52:04,357 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@fbc0d0f2,Hole(List([Object: data_extract_to_command], [Object: decompress_bunzip2], [Object: decompress_bunzip2], [Object: decompress_unxz], [Object: open_transformer], [Object: get_header_tar_lzma], [Object: decompress_unlzma], [Object: open_transformer], [Object: get_header_tar_bz2], [Object: decompress_bunzip2], [Object: open_transformer], [Object: get_header_tar_gz], [Object: decompress_unzip], [Object: open_transformer], [Object: decompress_uncompress], [Object: open_transformer], [Object: lzo1x_9x], [Object: lzo1x_d], [Object: lzo1x_1o], [Object: lzo1x_1], [Object: decompress_unzip], [Object: decompress_uncompress], [Object: get_header_tar], [Object: get_header_cpio], [Object: decompress_unzip], [Object: open_transformer], [Object: get_header_cpio], [Object: decompress_unzip], [Object: decompress_unzip], [VariableReference: DPKG_FILES], [VariableReference: DPKG_FILES], [Object: get_header_cpio], [Object: decompress_unxz], [Object: decompress_unlzma], [Object: decompress_bunzip2], [Object: unpack_ar_archive], [Object: get_header_ar], gsd.buildanalysis.linux.model.BNode@6b0b455d, [VariableDefinition: DPKG_FILES], gsd.buildanalysis.linux.model.BNode@d001331, [VariableDefinition: COMMON_FILES]),NodeLoc([Makefile: archival/libarchive/Kbuild],Top),List()))
2012-01-10 11:52:04,357 TRACE ModelFactory addVariableReference
2012-01-10 11:52:04,357 TRACE ModelFactory popEndIf
2012-01-10 11:52:04,357 INFO KBuildMinerMain$ === PostProcessing archival/libarchive/Kbuild
2012-01-10 11:52:04,404 INFO KBuildMinerMain$ === PreProcessing console-tools/Kbuild
2012-01-10 11:52:04,404 INFO KBuildMinerMain$ === Processing console-tools/Kbuild
2012-01-10 11:52:04,406 TRACE ModelFactory addObject
2012-01-10 11:52:04,406 TRACE ModelFactory addObject
2012-01-10 11:52:04,406 TRACE ModelFactory addObject
2012-01-10 11:52:04,406 TRACE ModelFactory addObject
2012-01-10 11:52:04,407 TRACE ModelFactory addObject
2012-01-10 11:52:04,407 TRACE ModelFactory addObject
2012-01-10 11:52:04,407 TRACE ModelFactory addObject
2012-01-10 11:52:04,407 TRACE ModelFactory addObject
2012-01-10 11:52:04,408 TRACE ModelFactory addObject
2012-01-10 11:52:04,408 TRACE ModelFactory addObject
2012-01-10 11:52:04,408 TRACE ModelFactory addObject
2012-01-10 11:52:04,408 TRACE ModelFactory addObject
2012-01-10 11:52:04,409 TRACE ModelFactory addObject
2012-01-10 11:52:04,409 TRACE ModelFactory addObject
2012-01-10 11:52:04,409 TRACE ModelFactory addObject
2012-01-10 11:52:04,410 TRACE ModelFactory addObject
2012-01-10 11:52:04,410 INFO KBuildMinerMain$ === PostProcessing console-tools/Kbuild
2012-01-10 11:52:04,422 INFO KBuildMinerMain$ === PreProcessing coreutils/Kbuild
2012-01-10 11:52:04,422 INFO KBuildMinerMain$ === Processing coreutils/Kbuild
2012-01-10 11:52:04,424 TRACE ModelFactory addMakefile
2012-01-10 11:52:04,425 TRACE ModelFactory addObject
2012-01-10 11:52:04,425 TRACE ModelFactory addObject
2012-01-10 11:52:04,425 TRACE ModelFactory addObject
2012-01-10 11:52:04,425 TRACE ModelFactory addObject
2012-01-10 11:52:04,426 TRACE ModelFactory addObject
2012-01-10 11:52:04,426 TRACE ModelFactory addObject
2012-01-10 11:52:04,426 TRACE ModelFactory addObject
2012-01-10 11:52:04,426 TRACE ModelFactory addObject
2012-01-10 11:52:04,427 TRACE ModelFactory addObject
2012-01-10 11:52:04,427 TRACE ModelFactory addObject
2012-01-10 11:52:04,427 TRACE ModelFactory addObject
2012-01-10 11:52:04,427 TRACE ModelFactory addObject
2012-01-10 11:52:04,427 TRACE ModelFactory addObject
2012-01-10 11:52:04,428 TRACE ModelFactory addObject
2012-01-10 11:52:04,428 TRACE ModelFactory addObject
2012-01-10 11:52:04,428 TRACE ModelFactory addObject
2012-01-10 11:52:04,428 TRACE ModelFactory addObject
2012-01-10 11:52:04,429 TRACE ModelFactory addObject
2012-01-10 11:52:04,429 TRACE ModelFactory addObject
2012-01-10 11:52:04,429 TRACE ModelFactory addObject
2012-01-10 11:52:04,429 TRACE ModelFactory addObject
2012-01-10 11:52:04,430 TRACE ModelFactory addObject
2012-01-10 11:52:04,430 TRACE ModelFactory addObject
2012-01-10 11:52:04,430 TRACE ModelFactory addObject
2012-01-10 11:52:04,430 TRACE ModelFactory addObject
2012-01-10 11:52:04,431 TRACE ModelFactory addObject
2012-01-10 11:52:04,431 TRACE ModelFactory addObject
2012-01-10 11:52:04,431 TRACE ModelFactory addObject
2012-01-10 11:52:04,432 TRACE ModelFactory addObject
2012-01-10 11:52:04,432 TRACE ModelFactory addObject
2012-01-10 11:52:04,432 TRACE ModelFactory addObject
2012-01-10 11:52:04,433 TRACE ModelFactory addObject
2012-01-10 11:52:04,433 TRACE ModelFactory addObject
2012-01-10 11:52:04,433 TRACE ModelFactory addObject
2012-01-10 11:52:04,433 TRACE ModelFactory addObject
2012-01-10 11:52:04,434 TRACE ModelFactory addObject
2012-01-10 11:52:04,434 TRACE ModelFactory addObject
2012-01-10 11:52:04,434 TRACE ModelFactory addObject
2012-01-10 11:52:04,435 TRACE ModelFactory addObject
2012-01-10 11:52:04,435 TRACE ModelFactory addObject
2012-01-10 11:52:04,435 TRACE ModelFactory addObject
2012-01-10 11:52:04,436 TRACE ModelFactory addObject
2012-01-10 11:52:04,436 TRACE ModelFactory addObject
2012-01-10 11:52:04,436 TRACE ModelFactory addObject
2012-01-10 11:52:04,437 TRACE ModelFactory addObject
2012-01-10 11:52:04,437 TRACE ModelFactory addObject
2012-01-10 11:52:04,437 TRACE ModelFactory addObject
2012-01-10 11:52:04,438 TRACE ModelFactory addObject
2012-01-10 11:52:04,438 TRACE ModelFactory addObject
2012-01-10 11:52:04,439 TRACE ModelFactory addObject
2012-01-10 11:52:04,439 TRACE ModelFactory addObject
2012-01-10 11:52:04,439 TRACE ModelFactory addObject
2012-01-10 11:52:04,439 TRACE ModelFactory addObject
2012-01-10 11:52:04,440 TRACE ModelFactory addObject
2012-01-10 11:52:04,440 TRACE ModelFactory addObject
2012-01-10 11:52:04,440 TRACE ModelFactory addObject
2012-01-10 11:52:04,441 TRACE ModelFactory addObject
2012-01-10 11:52:04,441 TRACE ModelFactory addObject
2012-01-10 11:52:04,441 TRACE ModelFactory addObject
2012-01-10 11:52:04,441 TRACE ModelFactory addObject
2012-01-10 11:52:04,442 TRACE ModelFactory addObject
2012-01-10 11:52:04,442 TRACE ModelFactory addObject
2012-01-10 11:52:04,442 TRACE ModelFactory addObject
2012-01-10 11:52:04,443 TRACE ModelFactory addObject
2012-01-10 11:52:04,443 TRACE ModelFactory addObject
2012-01-10 11:52:04,444 TRACE ModelFactory addObject
2012-01-10 11:52:04,444 TRACE ModelFactory addObject
2012-01-10 11:52:04,445 TRACE ModelFactory addObject
2012-01-10 11:52:04,445 TRACE ModelFactory addObject
2012-01-10 11:52:04,445 TRACE ModelFactory addObject
2012-01-10 11:52:04,446 TRACE ModelFactory addObject
2012-01-10 11:52:04,446 TRACE ModelFactory addObject
2012-01-10 11:52:04,446 TRACE ModelFactory addObject
2012-01-10 11:52:04,446 TRACE ModelFactory addObject
2012-01-10 11:52:04,447 TRACE ModelFactory addObject
2012-01-10 11:52:04,447 TRACE ModelFactory addObject
2012-01-10 11:52:04,447 TRACE ModelFactory addObject
2012-01-10 11:52:04,447 TRACE ModelFactory addObject
2012-01-10 11:52:04,448 TRACE ModelFactory addObject
2012-01-10 11:52:04,448 TRACE ModelFactory addObject
2012-01-10 11:52:04,448 TRACE ModelFactory addObject
2012-01-10 11:52:04,448 TRACE ModelFactory addObject
2012-01-10 11:52:04,449 TRACE ModelFactory addObject
2012-01-10 11:52:04,449 TRACE ModelFactory addObject
2012-01-10 11:52:04,449 TRACE ModelFactory addObject
2012-01-10 11:52:04,449 TRACE ModelFactory addObject
2012-01-10 11:52:04,449 TRACE ModelFactory addObject
2012-01-10 11:52:04,450 TRACE ModelFactory addObject
2012-01-10 11:52:04,450 TRACE ModelFactory addObject
2012-01-10 11:52:04,450 TRACE ModelFactory addObject
2012-01-10 11:52:04,450 TRACE ModelFactory addObject
2012-01-10 11:52:04,451 TRACE ModelFactory addObject
2012-01-10 11:52:04,451 TRACE ModelFactory addObject
2012-01-10 11:52:04,451 TRACE ModelFactory addObject
2012-01-10 11:52:04,451 INFO KBuildMinerMain$ === PostProcessing coreutils/Kbuild
2012-01-10 11:52:04,504 INFO KBuildMinerMain$ === PreProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:52:04,504 INFO KBuildMinerMain$ === Processing coreutils/libcoreutils/Kbuild
2012-01-10 11:52:04,506 TRACE ModelFactory addObject
2012-01-10 11:52:04,506 TRACE ModelFactory addObject
2012-01-10 11:52:04,507 TRACE ModelFactory addObject
2012-01-10 11:52:04,507 TRACE ModelFactory addObject
2012-01-10 11:52:04,508 TRACE ModelFactory addObject
2012-01-10 11:52:04,508 INFO KBuildMinerMain$ === PostProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:52:04,512 INFO KBuildMinerMain$ === PreProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:52:04,512 INFO KBuildMinerMain$ === Processing coreutils/libcoreutils/Kbuild
2012-01-10 11:52:04,513 TRACE ModelFactory addObject
2012-01-10 11:52:04,513 TRACE ModelFactory addObject
2012-01-10 11:52:04,513 TRACE ModelFactory addObject
2012-01-10 11:52:04,514 TRACE ModelFactory addObject
2012-01-10 11:52:04,514 TRACE ModelFactory addObject
2012-01-10 11:52:04,514 INFO KBuildMinerMain$ === PostProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:52:04,515 INFO KBuildMinerMain$ === PreProcessing debianutils/Kbuild
2012-01-10 11:52:04,516 INFO KBuildMinerMain$ === Processing debianutils/Kbuild
2012-01-10 11:52:04,517 TRACE ModelFactory addObject
2012-01-10 11:52:04,517 TRACE ModelFactory addObject
2012-01-10 11:52:04,518 TRACE ModelFactory addObject
2012-01-10 11:52:04,518 TRACE ModelFactory addObject
2012-01-10 11:52:04,518 TRACE ModelFactory addObject
2012-01-10 11:52:04,518 INFO KBuildMinerMain$ === PostProcessing debianutils/Kbuild
2012-01-10 11:52:04,522 INFO KBuildMinerMain$ === PreProcessing e2fsprogs/Kbuild
2012-01-10 11:52:04,523 INFO KBuildMinerMain$ === Processing e2fsprogs/Kbuild
2012-01-10 11:52:04,524 TRACE ModelFactory addObject
2012-01-10 11:52:04,524 TRACE ModelFactory addObject
2012-01-10 11:52:04,524 TRACE ModelFactory addObject
2012-01-10 11:52:04,524 TRACE ModelFactory addObject
2012-01-10 11:52:04,524 TRACE ModelFactory addObject
2012-01-10 11:52:04,525 TRACE ModelFactory addObject
2012-01-10 11:52:04,525 INFO KBuildMinerMain$ === PostProcessing e2fsprogs/Kbuild
2012-01-10 11:52:04,534 INFO KBuildMinerMain$ === PreProcessing editors/Kbuild
2012-01-10 11:52:04,534 INFO KBuildMinerMain$ === Processing editors/Kbuild
2012-01-10 11:52:04,536 TRACE ModelFactory addObject
2012-01-10 11:52:04,536 TRACE ModelFactory addObject
2012-01-10 11:52:04,536 TRACE ModelFactory addObject
2012-01-10 11:52:04,536 TRACE ModelFactory addObject
2012-01-10 11:52:04,536 TRACE ModelFactory addObject
2012-01-10 11:52:04,537 TRACE ModelFactory addObject
2012-01-10 11:52:04,537 TRACE ModelFactory addObject
2012-01-10 11:52:04,537 INFO KBuildMinerMain$ === PostProcessing editors/Kbuild
2012-01-10 11:52:04,543 INFO KBuildMinerMain$ === PreProcessing findutils/Kbuild
2012-01-10 11:52:04,543 INFO KBuildMinerMain$ === Processing findutils/Kbuild
2012-01-10 11:52:04,545 TRACE ModelFactory addObject
2012-01-10 11:52:04,545 TRACE ModelFactory addObject
2012-01-10 11:52:04,546 TRACE ModelFactory addObject
2012-01-10 11:52:04,546 INFO KBuildMinerMain$ === PostProcessing findutils/Kbuild
2012-01-10 11:52:04,549 INFO KBuildMinerMain$ === PreProcessing init/Kbuild
2012-01-10 11:52:04,549 INFO KBuildMinerMain$ === Processing init/Kbuild
2012-01-10 11:52:04,551 TRACE ModelFactory addObject
2012-01-10 11:52:04,552 TRACE ModelFactory addObject
2012-01-10 11:52:04,552 TRACE ModelFactory addObject
2012-01-10 11:52:04,552 TRACE ModelFactory addObject
2012-01-10 11:52:04,553 INFO KBuildMinerMain$ === PostProcessing init/Kbuild
2012-01-10 11:52:04,556 INFO KBuildMinerMain$ === PreProcessing libbb/Kbuild
2012-01-10 11:52:04,556 INFO KBuildMinerMain$ === Processing libbb/Kbuild
2012-01-10 11:52:04,560 TRACE ModelFactory addObject
2012-01-10 11:52:04,560 TRACE ModelFactory addObject
2012-01-10 11:52:04,560 TRACE ModelFactory addObject
2012-01-10 11:52:04,561 TRACE ModelFactory addObject
2012-01-10 11:52:04,561 TRACE ModelFactory addObject
2012-01-10 11:52:04,561 TRACE ModelFactory addObject
2012-01-10 11:52:04,562 TRACE ModelFactory addObject
2012-01-10 11:52:04,562 TRACE ModelFactory addObject
2012-01-10 11:52:04,562 TRACE ModelFactory addObject
2012-01-10 11:52:04,563 TRACE ModelFactory addObject
2012-01-10 11:52:04,563 TRACE ModelFactory addObject
2012-01-10 11:52:04,563 TRACE ModelFactory addObject
2012-01-10 11:52:04,564 TRACE ModelFactory addObject
2012-01-10 11:52:04,564 TRACE ModelFactory addObject
2012-01-10 11:52:04,564 TRACE ModelFactory addObject
2012-01-10 11:52:04,565 TRACE ModelFactory addObject
2012-01-10 11:52:04,565 TRACE ModelFactory addObject
2012-01-10 11:52:04,566 TRACE ModelFactory addObject
2012-01-10 11:52:04,566 TRACE ModelFactory addObject
2012-01-10 11:52:04,566 TRACE ModelFactory addObject
2012-01-10 11:52:04,567 TRACE ModelFactory addObject
2012-01-10 11:52:04,567 TRACE ModelFactory addObject
2012-01-10 11:52:04,567 TRACE ModelFactory addObject
2012-01-10 11:52:04,568 TRACE ModelFactory addObject
2012-01-10 11:52:04,568 TRACE ModelFactory addObject
2012-01-10 11:52:04,568 TRACE ModelFactory addObject
2012-01-10 11:52:04,569 TRACE ModelFactory addObject
2012-01-10 11:52:04,569 TRACE ModelFactory addObject
2012-01-10 11:52:04,569 TRACE ModelFactory addObject
2012-01-10 11:52:04,570 TRACE ModelFactory addObject
2012-01-10 11:52:04,570 TRACE ModelFactory addObject
2012-01-10 11:52:04,571 TRACE ModelFactory addObject
2012-01-10 11:52:04,571 TRACE ModelFactory addObject
2012-01-10 11:52:04,571 TRACE ModelFactory addObject
2012-01-10 11:52:04,572 TRACE ModelFactory addObject
2012-01-10 11:52:04,572 TRACE ModelFactory addObject
2012-01-10 11:52:04,572 TRACE ModelFactory addObject
2012-01-10 11:52:04,573 TRACE ModelFactory addObject
2012-01-10 11:52:04,573 TRACE ModelFactory addObject
2012-01-10 11:52:04,573 TRACE ModelFactory addObject
2012-01-10 11:52:04,574 TRACE ModelFactory addObject
2012-01-10 11:52:04,574 TRACE ModelFactory addObject
2012-01-10 11:52:04,574 TRACE ModelFactory addObject
2012-01-10 11:52:04,575 TRACE ModelFactory addObject
2012-01-10 11:52:04,575 TRACE ModelFactory addObject
2012-01-10 11:52:04,575 TRACE ModelFactory addObject
2012-01-10 11:52:04,576 TRACE ModelFactory addObject
2012-01-10 11:52:04,576 TRACE ModelFactory addObject
2012-01-10 11:52:04,576 TRACE ModelFactory addObject
2012-01-10 11:52:04,576 TRACE ModelFactory addObject
2012-01-10 11:52:04,577 TRACE ModelFactory addObject
2012-01-10 11:52:04,577 TRACE ModelFactory addObject
2012-01-10 11:52:04,577 TRACE ModelFactory addObject
2012-01-10 11:52:04,578 TRACE ModelFactory addObject
2012-01-10 11:52:04,578 TRACE ModelFactory addObject
2012-01-10 11:52:04,578 TRACE ModelFactory addObject
2012-01-10 11:52:04,578 TRACE ModelFactory addObject
2012-01-10 11:52:04,579 TRACE ModelFactory addObject
2012-01-10 11:52:04,579 TRACE ModelFactory addObject
2012-01-10 11:52:04,579 TRACE ModelFactory addObject
2012-01-10 11:52:04,579 TRACE ModelFactory addObject
2012-01-10 11:52:04,579 TRACE ModelFactory addObject
2012-01-10 11:52:04,580 TRACE ModelFactory addObject
2012-01-10 11:52:04,580 TRACE ModelFactory addObject
2012-01-10 11:52:04,580 TRACE ModelFactory addObject
2012-01-10 11:52:04,580 TRACE ModelFactory addObject
2012-01-10 11:52:04,580 TRACE ModelFactory addObject
2012-01-10 11:52:04,580 TRACE ModelFactory addObject
2012-01-10 11:52:04,581 TRACE ModelFactory addObject
2012-01-10 11:52:04,581 TRACE ModelFactory addObject
2012-01-10 11:52:04,581 TRACE ModelFactory addObject
2012-01-10 11:52:04,581 TRACE ModelFactory addObject
2012-01-10 11:52:04,581 TRACE ModelFactory addObject
2012-01-10 11:52:04,582 TRACE ModelFactory addObject
2012-01-10 11:52:04,582 TRACE ModelFactory addObject
2012-01-10 11:52:04,582 TRACE ModelFactory addObject
2012-01-10 11:52:04,582 TRACE ModelFactory addObject
2012-01-10 11:52:04,583 TRACE ModelFactory addObject
2012-01-10 11:52:04,583 TRACE ModelFactory addObject
2012-01-10 11:52:04,583 TRACE ModelFactory addObject
2012-01-10 11:52:04,584 TRACE ModelFactory addObject
2012-01-10 11:52:04,584 TRACE ModelFactory addObject
2012-01-10 11:52:04,585 TRACE ModelFactory addObject
2012-01-10 11:52:04,585 TRACE ModelFactory addObject
2012-01-10 11:52:04,585 TRACE ModelFactory addObject
2012-01-10 11:52:04,586 TRACE ModelFactory addObject
2012-01-10 11:52:04,586 TRACE ModelFactory addObject
2012-01-10 11:52:04,587 TRACE ModelFactory addObject
2012-01-10 11:52:04,587 TRACE ModelFactory addObject
2012-01-10 11:52:04,587 TRACE ModelFactory addObject
2012-01-10 11:52:04,588 TRACE ModelFactory addObject
2012-01-10 11:52:04,588 TRACE ModelFactory addObject
2012-01-10 11:52:04,588 TRACE ModelFactory addObject
2012-01-10 11:52:04,589 TRACE ModelFactory addObject
2012-01-10 11:52:04,589 TRACE ModelFactory addObject
2012-01-10 11:52:04,589 TRACE ModelFactory addObject
2012-01-10 11:52:04,590 TRACE ModelFactory addObject
2012-01-10 11:52:04,590 TRACE ModelFactory addObject
2012-01-10 11:52:04,590 TRACE ModelFactory addObject
2012-01-10 11:52:04,590 TRACE ModelFactory addObject
2012-01-10 11:52:04,590 TRACE ModelFactory addObject
2012-01-10 11:52:04,591 TRACE ModelFactory addObject
2012-01-10 11:52:04,591 TRACE ModelFactory addObject
2012-01-10 11:52:04,591 TRACE ModelFactory addObject
2012-01-10 11:52:04,591 TRACE ModelFactory addObject
2012-01-10 11:52:04,591 TRACE ModelFactory addObject
2012-01-10 11:52:04,591 TRACE ModelFactory addObject
2012-01-10 11:52:04,592 TRACE ModelFactory addObject
2012-01-10 11:52:04,592 TRACE ModelFactory addObject
2012-01-10 11:52:04,592 TRACE ModelFactory addObject
2012-01-10 11:52:04,593 TRACE ModelFactory addObject
2012-01-10 11:52:04,593 TRACE ModelFactory addObject
2012-01-10 11:52:04,594 TRACE ModelFactory addObject
2012-01-10 11:52:04,594 TRACE ModelFactory addObject
2012-01-10 11:52:04,594 TRACE ModelFactory addObject
2012-01-10 11:52:04,595 TRACE ModelFactory addObject
2012-01-10 11:52:04,595 TRACE ModelFactory addObject
2012-01-10 11:52:04,595 TRACE ModelFactory addObject
2012-01-10 11:52:04,596 TRACE ModelFactory addObject
2012-01-10 11:52:04,596 TRACE ModelFactory addObject
2012-01-10 11:52:04,596 TRACE ModelFactory addObject
2012-01-10 11:52:04,597 TRACE ModelFactory addObject
2012-01-10 11:52:04,597 TRACE ModelFactory addObject
2012-01-10 11:52:04,598 TRACE ModelFactory addObject
2012-01-10 11:52:04,598 TRACE ModelFactory addObject
2012-01-10 11:52:04,598 TRACE ModelFactory addObject
2012-01-10 11:52:04,599 TRACE ModelFactory addObject
2012-01-10 11:52:04,599 TRACE ModelFactory addObject
2012-01-10 11:52:04,599 TRACE ModelFactory addObject
2012-01-10 11:52:04,599 TRACE ModelFactory addObject
2012-01-10 11:52:04,599 TRACE ModelFactory addObject
2012-01-10 11:52:04,600 TRACE ModelFactory addObject
2012-01-10 11:52:04,600 TRACE ModelFactory addObject
2012-01-10 11:52:04,600 TRACE ModelFactory addObject
2012-01-10 11:52:04,601 TRACE ModelFactory addObject
2012-01-10 11:52:04,601 TRACE ModelFactory addObject
2012-01-10 11:52:04,601 TRACE ModelFactory addObject
2012-01-10 11:52:04,601 TRACE ModelFactory addObject
2012-01-10 11:52:04,602 TRACE ModelFactory addObject
2012-01-10 11:52:04,602 TRACE ModelFactory addObject
2012-01-10 11:52:04,602 TRACE ModelFactory addObject
2012-01-10 11:52:04,603 TRACE ModelFactory addObject
2012-01-10 11:52:04,603 TRACE ModelFactory addObject
2012-01-10 11:52:04,603 TRACE ModelFactory addObject
2012-01-10 11:52:04,604 TRACE ModelFactory addObject
2012-01-10 11:52:04,604 TRACE ModelFactory addObject
2012-01-10 11:52:04,604 TRACE ModelFactory addObject
2012-01-10 11:52:04,605 TRACE ModelFactory addObject
2012-01-10 11:52:04,605 TRACE ModelFactory addObject
2012-01-10 11:52:04,605 TRACE ModelFactory addObject
2012-01-10 11:52:04,605 TRACE ModelFactory addObject
2012-01-10 11:52:04,605 TRACE ModelFactory addObject
2012-01-10 11:52:04,606 TRACE ModelFactory addObject
2012-01-10 11:52:04,606 TRACE ModelFactory addObject
2012-01-10 11:52:04,606 TRACE ModelFactory addObject
2012-01-10 11:52:04,606 TRACE ModelFactory addObject
2012-01-10 11:52:04,607 TRACE ModelFactory addObject
2012-01-10 11:52:04,607 TRACE ModelFactory addObject
2012-01-10 11:52:04,607 TRACE ModelFactory addObject
2012-01-10 11:52:04,607 TRACE ModelFactory addObject
2012-01-10 11:52:04,607 TRACE ModelFactory addObject
2012-01-10 11:52:04,608 TRACE ModelFactory addObject
2012-01-10 11:52:04,608 TRACE ModelFactory addObject
2012-01-10 11:52:04,608 TRACE ModelFactory addObject
2012-01-10 11:52:04,608 TRACE ModelFactory addObject
2012-01-10 11:52:04,608 TRACE ModelFactory addObject
2012-01-10 11:52:04,608 INFO KBuildMinerMain$ === PostProcessing libbb/Kbuild
2012-01-10 11:52:04,688 INFO KBuildMinerMain$ === PreProcessing libpwdgrp/Kbuild
2012-01-10 11:52:04,688 INFO KBuildMinerMain$ === Processing libpwdgrp/Kbuild
2012-01-10 11:52:04,690 TRACE ModelFactory addObject
2012-01-10 11:52:04,690 TRACE ModelFactory addObject
2012-01-10 11:52:04,690 INFO KBuildMinerMain$ === PostProcessing libpwdgrp/Kbuild
2012-01-10 11:52:04,693 INFO KBuildMinerMain$ === PreProcessing loginutils/Kbuild
2012-01-10 11:52:04,694 INFO KBuildMinerMain$ === Processing loginutils/Kbuild
2012-01-10 11:52:04,696 TRACE ModelFactory addObject
2012-01-10 11:52:04,696 TRACE ModelFactory addObject
2012-01-10 11:52:04,697 TRACE ModelFactory addObject
2012-01-10 11:52:04,697 TRACE ModelFactory addObject
2012-01-10 11:52:04,697 TRACE ModelFactory addObject
2012-01-10 11:52:04,698 TRACE ModelFactory addObject
2012-01-10 11:52:04,698 TRACE ModelFactory addObject
2012-01-10 11:52:04,699 TRACE ModelFactory addObject
2012-01-10 11:52:04,699 TRACE ModelFactory addObject
2012-01-10 11:52:04,700 TRACE ModelFactory addObject
2012-01-10 11:52:04,700 TRACE ModelFactory addObject
2012-01-10 11:52:04,701 TRACE ModelFactory addObject
2012-01-10 11:52:04,701 TRACE ModelFactory addObject
2012-01-10 11:52:04,701 TRACE ModelFactory addObject
2012-01-10 11:52:04,702 INFO KBuildMinerMain$ === PostProcessing loginutils/Kbuild
2012-01-10 11:52:04,713 INFO KBuildMinerMain$ === PreProcessing mailutils/Kbuild
2012-01-10 11:52:04,713 INFO KBuildMinerMain$ === Processing mailutils/Kbuild
2012-01-10 11:52:04,715 TRACE ModelFactory addObject
2012-01-10 11:52:04,716 TRACE ModelFactory addObject
2012-01-10 11:52:04,716 TRACE ModelFactory addObject
2012-01-10 11:52:04,716 TRACE ModelFactory addObject
2012-01-10 11:52:04,717 TRACE ModelFactory addObject
2012-01-10 11:52:04,717 TRACE ModelFactory addObject
2012-01-10 11:52:04,718 TRACE ModelFactory addObject
2012-01-10 11:52:04,718 TRACE ModelFactory addObject
2012-01-10 11:52:04,718 INFO KBuildMinerMain$ === PostProcessing mailutils/Kbuild
2012-01-10 11:52:04,725 INFO KBuildMinerMain$ === PreProcessing miscutils/Kbuild
2012-01-10 11:52:04,726 INFO KBuildMinerMain$ === Processing miscutils/Kbuild
2012-01-10 11:52:04,729 TRACE ModelFactory addObject
2012-01-10 11:52:04,729 TRACE ModelFactory addObject
2012-01-10 11:52:04,730 TRACE ModelFactory addObject
2012-01-10 11:52:04,730 TRACE ModelFactory addObject
2012-01-10 11:52:04,730 TRACE ModelFactory addObject
2012-01-10 11:52:04,731 TRACE ModelFactory addObject
2012-01-10 11:52:04,731 TRACE ModelFactory addObject
2012-01-10 11:52:04,731 TRACE ModelFactory addObject
2012-01-10 11:52:04,731 TRACE ModelFactory addObject
2012-01-10 11:52:04,732 TRACE ModelFactory addObject
2012-01-10 11:52:04,732 TRACE ModelFactory addObject
2012-01-10 11:52:04,732 TRACE ModelFactory addObject
2012-01-10 11:52:04,732 TRACE ModelFactory addObject
2012-01-10 11:52:04,733 TRACE ModelFactory addObject
2012-01-10 11:52:04,733 TRACE ModelFactory addObject
2012-01-10 11:52:04,733 TRACE ModelFactory addObject
2012-01-10 11:52:04,733 TRACE ModelFactory addObject
2012-01-10 11:52:04,733 TRACE ModelFactory addObject
2012-01-10 11:52:04,733 TRACE ModelFactory addObject
2012-01-10 11:52:04,734 TRACE ModelFactory addObject
2012-01-10 11:52:04,734 TRACE ModelFactory addObject
2012-01-10 11:52:04,734 TRACE ModelFactory addObject
2012-01-10 11:52:04,735 TRACE ModelFactory addObject
2012-01-10 11:52:04,735 TRACE ModelFactory addObject
2012-01-10 11:52:04,735 TRACE ModelFactory addObject
2012-01-10 11:52:04,736 TRACE ModelFactory addObject
2012-01-10 11:52:04,736 TRACE ModelFactory addObject
2012-01-10 11:52:04,736 TRACE ModelFactory addObject
2012-01-10 11:52:04,736 TRACE ModelFactory addObject
2012-01-10 11:52:04,736 TRACE ModelFactory addObject
2012-01-10 11:52:04,736 TRACE ModelFactory addObject
2012-01-10 11:52:04,737 TRACE ModelFactory addObject
2012-01-10 11:52:04,737 TRACE ModelFactory addObject
2012-01-10 11:52:04,738 TRACE ModelFactory addObject
2012-01-10 11:52:04,738 TRACE ModelFactory addObject
2012-01-10 11:52:04,738 TRACE ModelFactory addObject
2012-01-10 11:52:04,738 TRACE ModelFactory addObject
2012-01-10 11:52:04,739 TRACE ModelFactory addObject
2012-01-10 11:52:04,739 TRACE ModelFactory addObject
2012-01-10 11:52:04,739 TRACE ModelFactory addObject
2012-01-10 11:52:04,739 TRACE ModelFactory addObject
2012-01-10 11:52:04,739 TRACE ModelFactory addObject
2012-01-10 11:52:04,739 TRACE ModelFactory addObject
2012-01-10 11:52:04,739 TRACE ModelFactory addObject
2012-01-10 11:52:04,740 TRACE ModelFactory addObject
2012-01-10 11:52:04,740 TRACE ModelFactory addObject
2012-01-10 11:52:04,740 TRACE ModelFactory addObject
2012-01-10 11:52:04,740 TRACE ModelFactory addObject
2012-01-10 11:52:04,740 TRACE ModelFactory addObject
2012-01-10 11:52:04,741 TRACE ModelFactory addObject
2012-01-10 11:52:04,741 TRACE ModelFactory addObject
2012-01-10 11:52:04,741 INFO KBuildMinerMain$ === PostProcessing miscutils/Kbuild
2012-01-10 11:52:04,767 INFO KBuildMinerMain$ === PreProcessing modutils/Kbuild
2012-01-10 11:52:04,767 INFO KBuildMinerMain$ === Processing modutils/Kbuild
2012-01-10 11:52:04,769 TRACE ModelFactory addObject
2012-01-10 11:52:04,769 TRACE ModelFactory addObject
2012-01-10 11:52:04,769 TRACE ModelFactory addObject
2012-01-10 11:52:04,769 TRACE ModelFactory addObject
2012-01-10 11:52:04,769 TRACE ModelFactory addObject
2012-01-10 11:52:04,769 TRACE ModelFactory addObject
2012-01-10 11:52:04,769 TRACE ModelFactory addObject
2012-01-10 11:52:04,770 TRACE ModelFactory addObject
2012-01-10 11:52:04,770 TRACE ModelFactory addObject
2012-01-10 11:52:04,770 TRACE ModelFactory addObject
2012-01-10 11:52:04,770 TRACE ModelFactory addObject
2012-01-10 11:52:04,770 TRACE ModelFactory addObject
2012-01-10 11:52:04,770 TRACE ModelFactory addObject
2012-01-10 11:52:04,771 TRACE ModelFactory addObject
2012-01-10 11:52:04,771 INFO KBuildMinerMain$ === PostProcessing modutils/Kbuild
2012-01-10 11:52:04,780 INFO KBuildMinerMain$ === PreProcessing networking/Kbuild
2012-01-10 11:52:04,781 INFO KBuildMinerMain$ === Processing networking/Kbuild
2012-01-10 11:52:04,782 TRACE ModelFactory addObject
2012-01-10 11:52:04,783 TRACE ModelFactory addObject
2012-01-10 11:52:04,783 TRACE ModelFactory addObject
2012-01-10 11:52:04,783 TRACE ModelFactory addObject
2012-01-10 11:52:04,784 TRACE ModelFactory addObject
2012-01-10 11:52:04,784 TRACE ModelFactory addObject
2012-01-10 11:52:04,784 TRACE ModelFactory addObject
2012-01-10 11:52:04,784 TRACE ModelFactory addObject
2012-01-10 11:52:04,785 TRACE ModelFactory addObject
2012-01-10 11:52:04,785 TRACE ModelFactory addObject
2012-01-10 11:52:04,785 TRACE ModelFactory addObject
2012-01-10 11:52:04,785 TRACE ModelFactory addObject
2012-01-10 11:52:04,786 TRACE ModelFactory addObject
2012-01-10 11:52:04,786 TRACE ModelFactory addObject
2012-01-10 11:52:04,786 TRACE ModelFactory addObject
2012-01-10 11:52:04,787 TRACE ModelFactory addObject
2012-01-10 11:52:04,787 TRACE ModelFactory addObject
2012-01-10 11:52:04,787 TRACE ModelFactory addObject
2012-01-10 11:52:04,787 TRACE ModelFactory addObject
2012-01-10 11:52:04,787 TRACE ModelFactory addObject
2012-01-10 11:52:04,787 TRACE ModelFactory addObject
2012-01-10 11:52:04,787 TRACE ModelFactory addObject
2012-01-10 11:52:04,788 TRACE ModelFactory addObject
2012-01-10 11:52:04,788 TRACE ModelFactory addObject
2012-01-10 11:52:04,788 TRACE ModelFactory addObject
2012-01-10 11:52:04,788 TRACE ModelFactory addObject
2012-01-10 11:52:04,788 TRACE ModelFactory addObject
2012-01-10 11:52:04,788 TRACE ModelFactory addObject
2012-01-10 11:52:04,789 TRACE ModelFactory addObject
2012-01-10 11:52:04,789 TRACE ModelFactory addObject
2012-01-10 11:52:04,789 TRACE ModelFactory addObject
2012-01-10 11:52:04,789 TRACE ModelFactory addObject
2012-01-10 11:52:04,789 TRACE ModelFactory addObject
2012-01-10 11:52:04,789 TRACE ModelFactory addObject
2012-01-10 11:52:04,789 TRACE ModelFactory addObject
2012-01-10 11:52:04,790 TRACE ModelFactory addObject
2012-01-10 11:52:04,790 TRACE ModelFactory addObject
2012-01-10 11:52:04,790 TRACE ModelFactory addObject
2012-01-10 11:52:04,790 TRACE ModelFactory addObject
2012-01-10 11:52:04,790 TRACE ModelFactory addObject
2012-01-10 11:52:04,790 TRACE ModelFactory addObject
2012-01-10 11:52:04,791 TRACE ModelFactory addObject
2012-01-10 11:52:04,791 TRACE ModelFactory addObject
2012-01-10 11:52:04,791 TRACE ModelFactory addObject
2012-01-10 11:52:04,791 TRACE ModelFactory addObject
2012-01-10 11:52:04,791 TRACE ModelFactory addObject
2012-01-10 11:52:04,791 TRACE ModelFactory addObject
2012-01-10 11:52:04,792 TRACE ModelFactory addObject
2012-01-10 11:52:04,792 INFO KBuildMinerMain$ === PostProcessing networking/Kbuild
2012-01-10 11:52:04,813 INFO KBuildMinerMain$ === PreProcessing networking/libiproute/Kbuild
2012-01-10 11:52:04,813 INFO KBuildMinerMain$ === Processing networking/libiproute/Kbuild
2012-01-10 11:52:04,815 TRACE ModelFactory addObject
2012-01-10 11:52:04,816 TRACE ModelFactory addObject
2012-01-10 11:52:04,816 TRACE ModelFactory addObject
2012-01-10 11:52:04,816 TRACE ModelFactory addObject
2012-01-10 11:52:04,816 TRACE ModelFactory addObject
2012-01-10 11:52:04,816 TRACE ModelFactory addObject
2012-01-10 11:52:04,816 TRACE ModelFactory addObject
2012-01-10 11:52:04,816 TRACE ModelFactory addObject
2012-01-10 11:52:04,816 TRACE ModelFactory addObject
2012-01-10 11:52:04,817 TRACE ModelFactory addObject
2012-01-10 11:52:04,817 TRACE ModelFactory addObject
2012-01-10 11:52:04,817 TRACE ModelFactory addObject
2012-01-10 11:52:04,817 TRACE ModelFactory addObject
2012-01-10 11:52:04,817 TRACE ModelFactory addObject
2012-01-10 11:52:04,818 TRACE ModelFactory addObject
2012-01-10 11:52:04,818 TRACE ModelFactory addObject
2012-01-10 11:52:04,818 TRACE ModelFactory addObject
2012-01-10 11:52:04,818 TRACE ModelFactory addObject
2012-01-10 11:52:04,818 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,819 TRACE ModelFactory addObject
2012-01-10 11:52:04,820 TRACE ModelFactory addObject
2012-01-10 11:52:04,820 TRACE ModelFactory addObject
2012-01-10 11:52:04,820 TRACE ModelFactory addObject
2012-01-10 11:52:04,820 TRACE ModelFactory addObject
2012-01-10 11:52:04,820 TRACE ModelFactory addObject
2012-01-10 11:52:04,820 TRACE ModelFactory addObject
2012-01-10 11:52:04,820 TRACE ModelFactory addObject
2012-01-10 11:52:04,820 TRACE ModelFactory addObject
2012-01-10 11:52:04,820 INFO KBuildMinerMain$ === PostProcessing networking/libiproute/Kbuild
2012-01-10 11:52:04,829 INFO KBuildMinerMain$ === PreProcessing networking/udhcp/Kbuild
2012-01-10 11:52:04,829 INFO KBuildMinerMain$ === Processing networking/udhcp/Kbuild
2012-01-10 11:52:04,831 TRACE ModelFactory addObject
2012-01-10 11:52:04,831 TRACE ModelFactory addObject
2012-01-10 11:52:04,831 TRACE ModelFactory addObject
2012-01-10 11:52:04,831 TRACE ModelFactory addObject
2012-01-10 11:52:04,831 TRACE ModelFactory addObject
2012-01-10 11:52:04,832 TRACE ModelFactory addObject
2012-01-10 11:52:04,832 TRACE ModelFactory addObject
2012-01-10 11:52:04,832 TRACE ModelFactory addObject
2012-01-10 11:52:04,832 TRACE ModelFactory addObject
2012-01-10 11:52:04,832 TRACE ModelFactory addObject
2012-01-10 11:52:04,832 TRACE ModelFactory addObject
2012-01-10 11:52:04,832 TRACE ModelFactory addObject
2012-01-10 11:52:04,832 TRACE ModelFactory addObject
2012-01-10 11:52:04,833 TRACE ModelFactory addObject
2012-01-10 11:52:04,833 TRACE ModelFactory addObject
2012-01-10 11:52:04,833 TRACE ModelFactory addObject
2012-01-10 11:52:04,833 TRACE ModelFactory addObject
2012-01-10 11:52:04,833 TRACE ModelFactory addObject
2012-01-10 11:52:04,833 TRACE ModelFactory addObject
2012-01-10 11:52:04,834 TRACE ModelFactory addObject
2012-01-10 11:52:04,834 TRACE ModelFactory addObject
2012-01-10 11:52:04,834 TRACE ModelFactory addObject
2012-01-10 11:52:04,834 INFO KBuildMinerMain$ === PostProcessing networking/udhcp/Kbuild
2012-01-10 11:52:04,844 INFO KBuildMinerMain$ === PreProcessing printutils/Kbuild
2012-01-10 11:52:04,844 INFO KBuildMinerMain$ === Processing printutils/Kbuild
2012-01-10 11:52:04,846 TRACE ModelFactory addObject
2012-01-10 11:52:04,846 TRACE ModelFactory addObject
2012-01-10 11:52:04,847 TRACE ModelFactory addObject
2012-01-10 11:52:04,847 INFO KBuildMinerMain$ === PostProcessing printutils/Kbuild
2012-01-10 11:52:04,849 INFO KBuildMinerMain$ === PreProcessing procps/Kbuild
2012-01-10 11:52:04,849 INFO KBuildMinerMain$ === Processing procps/Kbuild
2012-01-10 11:52:04,850 TRACE ModelFactory addObject
2012-01-10 11:52:04,850 TRACE ModelFactory addObject
2012-01-10 11:52:04,851 TRACE ModelFactory addObject
2012-01-10 11:52:04,851 TRACE ModelFactory addObject
2012-01-10 11:52:04,851 TRACE ModelFactory addObject
2012-01-10 11:52:04,851 TRACE ModelFactory addObject
2012-01-10 11:52:04,851 TRACE ModelFactory addObject
2012-01-10 11:52:04,852 TRACE ModelFactory addObject
2012-01-10 11:52:04,852 TRACE ModelFactory addObject
2012-01-10 11:52:04,852 TRACE ModelFactory addObject
2012-01-10 11:52:04,852 TRACE ModelFactory addObject
2012-01-10 11:52:04,853 TRACE ModelFactory addObject
2012-01-10 11:52:04,853 TRACE ModelFactory addObject
2012-01-10 11:52:04,853 TRACE ModelFactory addObject
2012-01-10 11:52:04,853 TRACE ModelFactory addObject
2012-01-10 11:52:04,854 TRACE ModelFactory addObject
2012-01-10 11:52:04,854 TRACE ModelFactory addObject
2012-01-10 11:52:04,854 TRACE ModelFactory addObject
2012-01-10 11:52:04,854 TRACE ModelFactory addObject
2012-01-10 11:52:04,854 TRACE ModelFactory addObject
2012-01-10 11:52:04,855 TRACE ModelFactory addObject
2012-01-10 11:52:04,855 INFO KBuildMinerMain$ === PostProcessing procps/Kbuild
2012-01-10 11:52:04,866 INFO KBuildMinerMain$ === PreProcessing runit/Kbuild
2012-01-10 11:52:04,867 INFO KBuildMinerMain$ === Processing runit/Kbuild
2012-01-10 11:52:04,868 TRACE ModelFactory addObject
2012-01-10 11:52:04,869 TRACE ModelFactory addObject
2012-01-10 11:52:04,869 TRACE ModelFactory addObject
2012-01-10 11:52:04,870 TRACE ModelFactory addObject
2012-01-10 11:52:04,870 TRACE ModelFactory addObject
2012-01-10 11:52:04,871 TRACE ModelFactory addObject
2012-01-10 11:52:04,871 TRACE ModelFactory addObject
2012-01-10 11:52:04,872 TRACE ModelFactory addObject
2012-01-10 11:52:04,872 TRACE ModelFactory addObject
2012-01-10 11:52:04,873 INFO KBuildMinerMain$ === PostProcessing runit/Kbuild
2012-01-10 11:52:04,878 INFO KBuildMinerMain$ === PreProcessing selinux/Kbuild
2012-01-10 11:52:04,878 INFO KBuildMinerMain$ === Processing selinux/Kbuild
2012-01-10 11:52:04,880 TRACE ModelFactory addObject
2012-01-10 11:52:04,880 TRACE ModelFactory addObject
2012-01-10 11:52:04,881 TRACE ModelFactory addObject
2012-01-10 11:52:04,881 TRACE ModelFactory addObject
2012-01-10 11:52:04,882 TRACE ModelFactory addObject
2012-01-10 11:52:04,882 TRACE ModelFactory addObject
2012-01-10 11:52:04,883 TRACE ModelFactory addObject
2012-01-10 11:52:04,884 TRACE ModelFactory addObject
2012-01-10 11:52:04,885 TRACE ModelFactory addObject
2012-01-10 11:52:04,885 TRACE ModelFactory addObject
2012-01-10 11:52:04,886 TRACE ModelFactory addObject
2012-01-10 11:52:04,887 TRACE ModelFactory addObject
2012-01-10 11:52:04,887 INFO KBuildMinerMain$ === PostProcessing selinux/Kbuild
2012-01-10 11:52:04,894 INFO KBuildMinerMain$ === PreProcessing shell/Kbuild
2012-01-10 11:52:04,894 INFO KBuildMinerMain$ === Processing shell/Kbuild
2012-01-10 11:52:04,896 TRACE ModelFactory addObject
2012-01-10 11:52:04,896 TRACE ModelFactory addObject
2012-01-10 11:52:04,896 TRACE ModelFactory addObject
2012-01-10 11:52:04,896 TRACE ModelFactory addObject
2012-01-10 11:52:04,897 TRACE ModelFactory addObject
2012-01-10 11:52:04,897 TRACE ModelFactory addObject
2012-01-10 11:52:04,897 TRACE ModelFactory addObject
2012-01-10 11:52:04,897 TRACE ModelFactory addObject
2012-01-10 11:52:04,897 TRACE ModelFactory addObject
2012-01-10 11:52:04,898 TRACE ModelFactory addObject
2012-01-10 11:52:04,898 INFO KBuildMinerMain$ === PostProcessing shell/Kbuild
2012-01-10 11:52:04,903 INFO KBuildMinerMain$ === PreProcessing sysklogd/Kbuild
2012-01-10 11:52:04,903 INFO KBuildMinerMain$ === Processing sysklogd/Kbuild
2012-01-10 11:52:04,904 TRACE ModelFactory addObject
2012-01-10 11:52:04,905 TRACE ModelFactory addObject
2012-01-10 11:52:04,905 TRACE ModelFactory addObject
2012-01-10 11:52:04,905 TRACE ModelFactory addObject
2012-01-10 11:52:04,905 INFO KBuildMinerMain$ === PostProcessing sysklogd/Kbuild
2012-01-10 11:52:04,908 INFO KBuildMinerMain$ === PreProcessing util-linux/Kbuild
2012-01-10 11:52:04,908 INFO KBuildMinerMain$ === Processing util-linux/Kbuild
2012-01-10 11:52:04,910 TRACE ModelFactory addObject
2012-01-10 11:52:04,910 TRACE ModelFactory addObject
2012-01-10 11:52:04,911 TRACE ModelFactory addObject
2012-01-10 11:52:04,911 TRACE ModelFactory addObject
2012-01-10 11:52:04,911 TRACE ModelFactory addObject
2012-01-10 11:52:04,912 TRACE ModelFactory addObject
2012-01-10 11:52:04,912 TRACE ModelFactory addObject
2012-01-10 11:52:04,912 TRACE ModelFactory addObject
2012-01-10 11:52:04,912 TRACE ModelFactory addObject
2012-01-10 11:52:04,913 TRACE ModelFactory addObject
2012-01-10 11:52:04,913 TRACE ModelFactory addObject
2012-01-10 11:52:04,913 TRACE ModelFactory addObject
2012-01-10 11:52:04,914 TRACE ModelFactory addObject
2012-01-10 11:52:04,914 TRACE ModelFactory addObject
2012-01-10 11:52:04,914 TRACE ModelFactory addObject
2012-01-10 11:52:04,915 TRACE ModelFactory addObject
2012-01-10 11:52:04,915 TRACE ModelFactory addObject
2012-01-10 11:52:04,915 TRACE ModelFactory addObject
2012-01-10 11:52:04,916 TRACE ModelFactory addObject
2012-01-10 11:52:04,916 TRACE ModelFactory addObject
2012-01-10 11:52:04,916 TRACE ModelFactory addObject
2012-01-10 11:52:04,916 TRACE ModelFactory addObject
2012-01-10 11:52:04,917 TRACE ModelFactory addObject
2012-01-10 11:52:04,917 TRACE ModelFactory addObject
2012-01-10 11:52:04,917 TRACE ModelFactory addObject
2012-01-10 11:52:04,918 TRACE ModelFactory addObject
2012-01-10 11:52:04,918 TRACE ModelFactory addObject
2012-01-10 11:52:04,918 TRACE ModelFactory addObject
2012-01-10 11:52:04,919 TRACE ModelFactory addObject
2012-01-10 11:52:04,919 TRACE ModelFactory addObject
2012-01-10 11:52:04,919 TRACE ModelFactory addObject
2012-01-10 11:52:04,919 TRACE ModelFactory addObject
2012-01-10 11:52:04,919 TRACE ModelFactory addObject
2012-01-10 11:52:04,920 TRACE ModelFactory addObject
2012-01-10 11:52:04,920 TRACE ModelFactory addObject
2012-01-10 11:52:04,920 TRACE ModelFactory addObject
2012-01-10 11:52:04,920 TRACE ModelFactory addObject
2012-01-10 11:52:04,920 TRACE ModelFactory addObject
2012-01-10 11:52:04,921 TRACE ModelFactory addObject
2012-01-10 11:52:04,921 TRACE ModelFactory addObject
2012-01-10 11:52:04,921 INFO KBuildMinerMain$ === PostProcessing util-linux/Kbuild
2012-01-10 11:52:04,942 INFO KBuildMinerMain$ === PreProcessing util-linux/volume_id/Kbuild
2012-01-10 11:52:04,942 INFO KBuildMinerMain$ === Processing util-linux/volume_id/Kbuild
2012-01-10 11:52:04,944 TRACE ModelFactory addObject
2012-01-10 11:52:04,944 TRACE ModelFactory addObject
2012-01-10 11:52:04,945 TRACE ModelFactory addObject
2012-01-10 11:52:04,945 TRACE ModelFactory addObject
2012-01-10 11:52:04,945 TRACE ModelFactory addObject
2012-01-10 11:52:04,946 TRACE ModelFactory addObject
2012-01-10 11:52:04,947 TRACE ModelFactory addObject
2012-01-10 11:52:04,947 TRACE ModelFactory addObject
2012-01-10 11:52:04,948 TRACE ModelFactory addObject
2012-01-10 11:52:04,949 TRACE ModelFactory addObject
2012-01-10 11:52:04,949 TRACE ModelFactory addObject
2012-01-10 11:52:04,949 TRACE ModelFactory addObject
2012-01-10 11:52:04,949 TRACE ModelFactory addObject
2012-01-10 11:52:04,950 TRACE ModelFactory addObject
2012-01-10 11:52:04,950 TRACE ModelFactory addObject
2012-01-10 11:52:04,950 TRACE ModelFactory addObject
2012-01-10 11:52:04,951 TRACE ModelFactory addObject
2012-01-10 11:52:04,951 TRACE ModelFactory addObject
2012-01-10 11:52:04,951 TRACE ModelFactory addObject
2012-01-10 11:52:04,952 TRACE ModelFactory addObject
2012-01-10 11:52:04,952 TRACE ModelFactory addObject
2012-01-10 11:52:04,952 TRACE ModelFactory addObject
2012-01-10 11:52:04,952 INFO KBuildMinerMain$ === PostProcessing util-linux/volume_id/Kbuild
2012-01-10 11:52:04,971 INFO PersistenceManager$ Saving Build AST to: ast.xml
2012-01-10 11:52:05,704 INFO KBuildMinerMain$ Deriving file presence conditions...
2012-01-10 11:52:06,639 DEBUG PCDerivation$ Trying to find path for: [Object: applets]
2012-01-10 11:52:06,643 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> applets/applets.c, builtAs -> y, generated -> false, objectFile -> applets, listName -> obj)
2012-01-10 11:52:06,645 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> applets/applets.c, builtAs -> y, generated -> false, objectFile -> applets, listName -> obj) is: MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild)
2012-01-10 11:52:06,645 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild)
2012-01-10 11:52:06,645 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,645 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,654 DEBUG PCDerivation$ Expression of path for object occurrence applets/applets.c: [TRUE]
2012-01-10 11:52:06,654 DEBUG PCDerivation$ Trying to find path for: [Object: data_skip]
2012-01-10 11:52:06,654 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES)
2012-01-10 11:52:06,654 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,654 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,656 TRACE PCDerivation$ trying to find variable reference, var: COMMON_FILES
2012-01-10 11:52:06,660 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:52:06,677 TRACE PCDerivation$    # collecting: [VariableReference: COMMON_FILES]
2012-01-10 11:52:06,677 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,677 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES) is: IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,677 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,677 TRACE PCDerivation$ parent of IfBNode --> Map(expr -> Unknown(!(lib-y == ""))) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,677 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,677 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,679 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,679 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,679 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,682 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,682 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_all]
2012-01-10 11:52:06,682 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES)
2012-01-10 11:52:06,682 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,682 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,683 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,683 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,683 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,683 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,683 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,683 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,683 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_stdout]
2012-01-10 11:52:06,683 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES)
2012-01-10 11:52:06,683 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,683 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,683 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,684 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,684 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,684 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,684 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,684 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_stdout.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,684 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_all]
2012-01-10 11:52:06,684 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES)
2012-01-10 11:52:06,684 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,684 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,684 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,684 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,684 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,685 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,685 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,685 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,685 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list]
2012-01-10 11:52:06,685 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES)
2012-01-10 11:52:06,685 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,685 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,685 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,685 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,685 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,686 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,686 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,686 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,686 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_reject_list]
2012-01-10 11:52:06,686 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES)
2012-01-10 11:52:06,686 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,686 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,686 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,686 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,686 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,687 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,687 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,687 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_reject_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,687 DEBUG PCDerivation$ Trying to find path for: [Object: header_skip]
2012-01-10 11:52:06,687 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES)
2012-01-10 11:52:06,687 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,687 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,687 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,687 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,687 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,687 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,688 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,688 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,688 DEBUG PCDerivation$ Trying to find path for: [Object: header_list]
2012-01-10 11:52:06,688 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES)
2012-01-10 11:52:06,688 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,688 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,688 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,688 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,688 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,688 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,689 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,689 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,689 DEBUG PCDerivation$ Trying to find path for: [Object: header_verbose_list]
2012-01-10 11:52:06,689 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES)
2012-01-10 11:52:06,689 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,689 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,689 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,689 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,689 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,689 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,689 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,690 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_verbose_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,690 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_read]
2012-01-10 11:52:06,690 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES)
2012-01-10 11:52:06,690 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,690 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,690 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,690 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,690 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,690 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,690 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,690 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_read.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,690 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_jump]
2012-01-10 11:52:06,691 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES)
2012-01-10 11:52:06,691 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,691 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,691 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,691 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,691 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,691 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,691 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,691 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_jump.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,691 DEBUG PCDerivation$ Trying to find path for: [Object: data_align]
2012-01-10 11:52:06,691 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES)
2012-01-10 11:52:06,691 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,692 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,692 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,692 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,692 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,692 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,692 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,692 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_align.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,692 DEBUG PCDerivation$ Trying to find path for: [Object: find_list_entry]
2012-01-10 11:52:06,692 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES)
2012-01-10 11:52:06,692 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,692 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,692 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,693 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,693 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,693 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,693 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,693 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/find_list_entry.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,693 DEBUG PCDerivation$ Trying to find path for: [Object: init_handle]
2012-01-10 11:52:06,693 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES)
2012-01-10 11:52:06,693 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,694 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,694 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,694 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,694 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,694 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,694 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,694 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/init_handle.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,694 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:52:06,694 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES)
2012-01-10 11:52:06,694 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,695 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,695 TRACE PCDerivation$ trying to find variable reference, var: DPKG_FILES
2012-01-10 11:52:06,695 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:52:06,698 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:52:06,698 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:52:06,702 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,702 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,702 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,702 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,703 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,703 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,703 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,703 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,703 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,703 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,703 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:52:06,703 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:52:06,704 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES)
2012-01-10 11:52:06,704 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,704 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,704 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,704 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,704 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,704 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,704 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,704 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,704 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,705 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,705 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:52:06,705 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:52:06,705 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES)
2012-01-10 11:52:06,705 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,705 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,705 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,705 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,705 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,706 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,706 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,706 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,706 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,706 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,706 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:52:06,706 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list_reassign]
2012-01-10 11:52:06,706 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES)
2012-01-10 11:52:06,706 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,706 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,706 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,707 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,707 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,707 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,707 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,707 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,707 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,707 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,708 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list_reassign.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:52:06,708 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:52:06,708 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib)
2012-01-10 11:52:06,708 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,708 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,708 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,708 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,708 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:52:06,708 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:52:06,708 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib)
2012-01-10 11:52:06,708 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,708 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,708 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,708 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,708 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:52:06,708 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_bunzip2]
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib)
2012-01-10 11:52:06,709 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,709 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_bunzip2.c: (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m")))
2012-01-10 11:52:06,709 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unlzma]
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib)
2012-01-10 11:52:06,709 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,709 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unlzma.c: (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")))
2012-01-10 11:52:06,709 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unxz]
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib)
2012-01-10 11:52:06,709 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,709 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,709 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unxz.c: (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:52:06,709 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_cpio]
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib)
2012-01-10 11:52:06,710 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,710 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_cpio.c: ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")))
2012-01-10 11:52:06,710 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unzip]
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib)
2012-01-10 11:52:06,710 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,710 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unzip.c: ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")))
2012-01-10 11:52:06,710 DEBUG PCDerivation$ Trying to find path for: [Object: open_transformer]
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib)
2012-01-10 11:52:06,710 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,710 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,711 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/open_transformer.c: (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:52:06,711 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib)
2012-01-10 11:52:06,711 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,711 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-10 11:52:06,711 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_uncompress]
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib)
2012-01-10 11:52:06,711 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,711 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_uncompress.c: (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m")))
2012-01-10 11:52:06,711 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1]
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib)
2012-01-10 11:52:06,711 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,711 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,712 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:52:06,712 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1o]
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib)
2012-01-10 11:52:06,712 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,712 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1o.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:52:06,712 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_d]
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib)
2012-01-10 11:52:06,712 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,712 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_d.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:52:06,712 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_9x]
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib)
2012-01-10 11:52:06,712 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,712 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,713 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_9x.c: ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m"))
2012-01-10 11:52:06,713 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_gz]
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib)
2012-01-10 11:52:06,713 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,713 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_gz.c: ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))
2012-01-10 11:52:06,713 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_bz2]
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib)
2012-01-10 11:52:06,713 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,713 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_bz2.c: ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))
2012-01-10 11:52:06,713 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_lzma]
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib)
2012-01-10 11:52:06,713 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,713 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,714 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_lzma.c: ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))
2012-01-10 11:52:06,714 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_command]
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib)
2012-01-10 11:52:06,714 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,714 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_command.c: ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m"))
2012-01-10 11:52:06,714 DEBUG PCDerivation$ Trying to find path for: [Object: ar]
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/ar.c, generated -> false, objectFile -> ar, listName -> lib)
2012-01-10 11:52:06,714 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/ar.c, generated -> false, objectFile -> ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,714 DEBUG PCDerivation$ Expression of path for object occurrence archival/ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:52:06,714 DEBUG PCDerivation$ Trying to find path for: [Object: cpio]
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")), sourceFile -> archival/cpio.c, generated -> false, objectFile -> cpio, listName -> lib)
2012-01-10 11:52:06,714 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")), sourceFile -> archival/cpio.c, generated -> false, objectFile -> cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,714 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,714 DEBUG PCDerivation$ Expression of path for object occurrence archival/cpio.c: ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m"))
2012-01-10 11:52:06,715 DEBUG PCDerivation$ Trying to find path for: [Object: dpkg]
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), sourceFile -> archival/dpkg.c, generated -> false, objectFile -> dpkg, listName -> lib)
2012-01-10 11:52:06,715 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), sourceFile -> archival/dpkg.c, generated -> false, objectFile -> dpkg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,715 DEBUG PCDerivation$ Expression of path for object occurrence archival/dpkg.c: ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m"))
2012-01-10 11:52:06,715 DEBUG PCDerivation$ Trying to find path for: [Object: dpkg_deb]
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), sourceFile -> archival/dpkg_deb.c, generated -> false, objectFile -> dpkg_deb, listName -> lib)
2012-01-10 11:52:06,715 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), sourceFile -> archival/dpkg_deb.c, generated -> false, objectFile -> dpkg_deb, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,715 DEBUG PCDerivation$ Expression of path for object occurrence archival/dpkg_deb.c: ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m"))
2012-01-10 11:52:06,715 DEBUG PCDerivation$ Trying to find path for: [Object: rpm2cpio]
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m")), sourceFile -> archival/rpm2cpio.c, generated -> false, objectFile -> rpm2cpio, listName -> lib)
2012-01-10 11:52:06,715 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m")), sourceFile -> archival/rpm2cpio.c, generated -> false, objectFile -> rpm2cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,715 DEBUG PCDerivation$ Expression of path for object occurrence archival/rpm2cpio.c: ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))
2012-01-10 11:52:06,715 DEBUG PCDerivation$ Trying to find path for: [Object: rpm]
2012-01-10 11:52:06,715 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")), sourceFile -> archival/rpm.c, generated -> false, objectFile -> rpm, listName -> lib)
2012-01-10 11:52:06,715 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")), sourceFile -> archival/rpm.c, generated -> false, objectFile -> rpm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,716 DEBUG PCDerivation$ Expression of path for object occurrence archival/rpm.c: ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))
2012-01-10 11:52:06,716 DEBUG PCDerivation$ Trying to find path for: [Object: tar]
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/tar.c, generated -> false, objectFile -> tar, listName -> lib)
2012-01-10 11:52:06,716 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/tar.c, generated -> false, objectFile -> tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,716 DEBUG PCDerivation$ Expression of path for object occurrence archival/tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-10 11:52:06,716 DEBUG PCDerivation$ Trying to find path for: [Object: unzip]
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m")), sourceFile -> archival/unzip.c, generated -> false, objectFile -> unzip, listName -> lib)
2012-01-10 11:52:06,716 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m")), sourceFile -> archival/unzip.c, generated -> false, objectFile -> unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,716 DEBUG PCDerivation$ Expression of path for object occurrence archival/unzip.c: ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))
2012-01-10 11:52:06,716 DEBUG PCDerivation$ Trying to find path for: [Object: lzop]
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/lzop.c, generated -> false, objectFile -> lzop, listName -> lib)
2012-01-10 11:52:06,716 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/lzop.c, generated -> false, objectFile -> lzop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,716 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,716 DEBUG PCDerivation$ Expression of path for object occurrence archival/lzop.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:52:06,716 DEBUG PCDerivation$ Trying to find path for: [Object: bbunzip]
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m"))), sourceFile -> archival/bbunzip.c, generated -> false, objectFile -> bbunzip, listName -> lib)
2012-01-10 11:52:06,717 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m"))), sourceFile -> archival/bbunzip.c, generated -> false, objectFile -> bbunzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,717 DEBUG PCDerivation$ Expression of path for object occurrence archival/bbunzip.c: (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")))
2012-01-10 11:52:06,717 DEBUG PCDerivation$ Trying to find path for: [Object: gzip]
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m")), sourceFile -> archival/gzip.c, generated -> false, objectFile -> gzip, listName -> lib)
2012-01-10 11:52:06,717 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m")), sourceFile -> archival/gzip.c, generated -> false, objectFile -> gzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,717 DEBUG PCDerivation$ Expression of path for object occurrence archival/gzip.c: ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))
2012-01-10 11:52:06,717 DEBUG PCDerivation$ Trying to find path for: [Object: bzip2]
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m")), sourceFile -> archival/bzip2.c, generated -> false, objectFile -> bzip2, listName -> lib)
2012-01-10 11:52:06,717 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m")), sourceFile -> archival/bzip2.c, generated -> false, objectFile -> bzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,717 DEBUG PCDerivation$ Expression of path for object occurrence archival/bzip2.c: ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))
2012-01-10 11:52:06,717 DEBUG PCDerivation$ Trying to find path for: [Object: data_skip]
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES)
2012-01-10 11:52:06,717 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,717 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,718 TRACE PCDerivation$ trying to find variable reference, var: COMMON_FILES
2012-01-10 11:52:06,718 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:52:06,724 TRACE PCDerivation$    # collecting: [VariableReference: COMMON_FILES]
2012-01-10 11:52:06,725 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,725 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES) is: IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,725 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,725 TRACE PCDerivation$ parent of IfBNode --> Map(expr -> Unknown(!(lib-y == ""))) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,725 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,725 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,725 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,725 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,725 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_all]
2012-01-10 11:52:06,725 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES)
2012-01-10 11:52:06,725 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,725 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,726 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,726 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_stdout]
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES)
2012-01-10 11:52:06,726 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,726 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,727 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_stdout.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,727 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_all]
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES)
2012-01-10 11:52:06,727 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,727 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,727 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list]
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES)
2012-01-10 11:52:06,727 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,727 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,728 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,728 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,728 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,728 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_reject_list]
2012-01-10 11:52:06,728 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES)
2012-01-10 11:52:06,728 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,728 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,728 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,728 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,728 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,728 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,729 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_reject_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,729 DEBUG PCDerivation$ Trying to find path for: [Object: header_skip]
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES)
2012-01-10 11:52:06,729 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,729 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,729 DEBUG PCDerivation$ Trying to find path for: [Object: header_list]
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES)
2012-01-10 11:52:06,729 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,729 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,730 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,730 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,730 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,730 DEBUG PCDerivation$ Trying to find path for: [Object: header_verbose_list]
2012-01-10 11:52:06,730 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES)
2012-01-10 11:52:06,730 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,730 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,730 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,730 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,730 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,730 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,731 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_verbose_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,731 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_read]
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES)
2012-01-10 11:52:06,731 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,731 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_read.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,731 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_jump]
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES)
2012-01-10 11:52:06,731 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,731 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,732 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,732 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,732 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_jump.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,732 DEBUG PCDerivation$ Trying to find path for: [Object: data_align]
2012-01-10 11:52:06,732 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES)
2012-01-10 11:52:06,732 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,732 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,732 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,732 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,732 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,732 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,733 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_align.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,733 DEBUG PCDerivation$ Trying to find path for: [Object: find_list_entry]
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES)
2012-01-10 11:52:06,733 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,733 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/find_list_entry.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,733 DEBUG PCDerivation$ Trying to find path for: [Object: init_handle]
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES)
2012-01-10 11:52:06,733 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:52:06,733 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:52:06,734 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,734 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,734 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/init_handle.c: Unknown(!(lib-y == ""))
2012-01-10 11:52:06,734 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:52:06,734 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES)
2012-01-10 11:52:06,734 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,734 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,734 TRACE PCDerivation$ trying to find variable reference, var: DPKG_FILES
2012-01-10 11:52:06,734 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:52:06,737 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:52:06,737 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:52:06,741 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,742 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,742 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,742 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:52:06,742 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES)
2012-01-10 11:52:06,742 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,742 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,743 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:52:06,743 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES)
2012-01-10 11:52:06,743 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,743 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:52:06,743 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list_reassign]
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES)
2012-01-10 11:52:06,743 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:52:06,743 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,744 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list_reassign.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:52:06,744 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib)
2012-01-10 11:52:06,744 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,744 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:52:06,744 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib)
2012-01-10 11:52:06,744 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,744 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,744 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:52:06,744 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_bunzip2]
2012-01-10 11:52:06,745 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib)
2012-01-10 11:52:06,745 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,745 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,745 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,745 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_bunzip2.c: (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m")))
2012-01-10 11:52:06,745 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unlzma]
2012-01-10 11:52:06,745 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib)
2012-01-10 11:52:06,745 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,745 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,745 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,745 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unlzma.c: (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")))
2012-01-10 11:52:06,745 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unxz]
2012-01-10 11:52:06,745 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib)
2012-01-10 11:52:06,745 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,745 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,745 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,745 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unxz.c: (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:52:06,745 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_cpio]
2012-01-10 11:52:06,746 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib)
2012-01-10 11:52:06,746 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,746 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,746 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,746 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_cpio.c: ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")))
2012-01-10 11:52:06,746 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unzip]
2012-01-10 11:52:06,746 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib)
2012-01-10 11:52:06,746 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,746 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,746 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,746 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unzip.c: ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")))
2012-01-10 11:52:06,746 DEBUG PCDerivation$ Trying to find path for: [Object: open_transformer]
2012-01-10 11:52:06,746 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib)
2012-01-10 11:52:06,746 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,746 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,746 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,746 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/open_transformer.c: (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:52:06,747 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:52:06,747 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib)
2012-01-10 11:52:06,747 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,747 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,747 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,747 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-10 11:52:06,747 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_uncompress]
2012-01-10 11:52:06,747 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib)
2012-01-10 11:52:06,747 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,747 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,747 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,747 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_uncompress.c: (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m")))
2012-01-10 11:52:06,747 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1]
2012-01-10 11:52:06,747 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib)
2012-01-10 11:52:06,747 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,747 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,747 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,747 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:52:06,747 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1o]
2012-01-10 11:52:06,748 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib)
2012-01-10 11:52:06,748 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,748 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,748 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,748 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1o.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:52:06,748 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_d]
2012-01-10 11:52:06,748 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib)
2012-01-10 11:52:06,748 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,748 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,748 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,748 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_d.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:52:06,748 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_9x]
2012-01-10 11:52:06,748 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib)
2012-01-10 11:52:06,748 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,748 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,748 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,748 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_9x.c: ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m"))
2012-01-10 11:52:06,748 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_gz]
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib)
2012-01-10 11:52:06,749 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,749 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_gz.c: ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))
2012-01-10 11:52:06,749 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_bz2]
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib)
2012-01-10 11:52:06,749 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,749 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_bz2.c: ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))
2012-01-10 11:52:06,749 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_lzma]
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib)
2012-01-10 11:52:06,749 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,749 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_lzma.c: ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))
2012-01-10 11:52:06,749 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_command]
2012-01-10 11:52:06,749 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib)
2012-01-10 11:52:06,750 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,750 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:52:06,750 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,750 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_command.c: ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m"))
2012-01-10 11:52:06,750 DEBUG PCDerivation$ Trying to find path for: [Object: chvt]
2012-01-10 11:52:06,750 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m")), sourceFile -> console-tools/chvt.c, generated -> false, objectFile -> chvt, listName -> lib)
2012-01-10 11:52:06,750 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m")), sourceFile -> console-tools/chvt.c, generated -> false, objectFile -> chvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,750 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,750 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,750 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,750 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/chvt.c: ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m"))
2012-01-10 11:52:06,750 DEBUG PCDerivation$ Trying to find path for: [Object: fgconsole]
2012-01-10 11:52:06,750 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m")), sourceFile -> console-tools/fgconsole.c, generated -> false, objectFile -> fgconsole, listName -> lib)
2012-01-10 11:52:06,750 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m")), sourceFile -> console-tools/fgconsole.c, generated -> false, objectFile -> fgconsole, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,750 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,750 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,750 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/fgconsole.c: ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m"))
2012-01-10 11:52:06,750 DEBUG PCDerivation$ Trying to find path for: [Object: clear]
2012-01-10 11:52:06,751 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m")), sourceFile -> console-tools/clear.c, generated -> false, objectFile -> clear, listName -> lib)
2012-01-10 11:52:06,751 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m")), sourceFile -> console-tools/clear.c, generated -> false, objectFile -> clear, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,751 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,751 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,751 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/clear.c: ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m"))
2012-01-10 11:52:06,751 DEBUG PCDerivation$ Trying to find path for: [Object: deallocvt]
2012-01-10 11:52:06,751 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m")), sourceFile -> console-tools/deallocvt.c, generated -> false, objectFile -> deallocvt, listName -> lib)
2012-01-10 11:52:06,751 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m")), sourceFile -> console-tools/deallocvt.c, generated -> false, objectFile -> deallocvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,751 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,751 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,751 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/deallocvt.c: ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m"))
2012-01-10 11:52:06,751 DEBUG PCDerivation$ Trying to find path for: [Object: dumpkmap]
2012-01-10 11:52:06,751 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m")), sourceFile -> console-tools/dumpkmap.c, generated -> false, objectFile -> dumpkmap, listName -> lib)
2012-01-10 11:52:06,751 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m")), sourceFile -> console-tools/dumpkmap.c, generated -> false, objectFile -> dumpkmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,751 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,751 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,751 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/dumpkmap.c: ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m"))
2012-01-10 11:52:06,751 DEBUG PCDerivation$ Trying to find path for: [Object: setconsole]
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m")), sourceFile -> console-tools/setconsole.c, generated -> false, objectFile -> setconsole, listName -> lib)
2012-01-10 11:52:06,752 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m")), sourceFile -> console-tools/setconsole.c, generated -> false, objectFile -> setconsole, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,752 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setconsole.c: ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m"))
2012-01-10 11:52:06,752 DEBUG PCDerivation$ Trying to find path for: [Object: kbd_mode]
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m")), sourceFile -> console-tools/kbd_mode.c, generated -> false, objectFile -> kbd_mode, listName -> lib)
2012-01-10 11:52:06,752 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m")), sourceFile -> console-tools/kbd_mode.c, generated -> false, objectFile -> kbd_mode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,752 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/kbd_mode.c: ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m"))
2012-01-10 11:52:06,752 DEBUG PCDerivation$ Trying to find path for: [Object: loadfont]
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m"))), sourceFile -> console-tools/loadfont.c, generated -> false, objectFile -> loadfont, listName -> lib)
2012-01-10 11:52:06,752 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m"))), sourceFile -> console-tools/loadfont.c, generated -> false, objectFile -> loadfont, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,752 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/loadfont.c: (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m")))
2012-01-10 11:52:06,752 DEBUG PCDerivation$ Trying to find path for: [Object: loadkmap]
2012-01-10 11:52:06,752 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m")), sourceFile -> console-tools/loadkmap.c, generated -> false, objectFile -> loadkmap, listName -> lib)
2012-01-10 11:52:06,753 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m")), sourceFile -> console-tools/loadkmap.c, generated -> false, objectFile -> loadkmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,753 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,753 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,753 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/loadkmap.c: ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m"))
2012-01-10 11:52:06,753 DEBUG PCDerivation$ Trying to find path for: [Object: openvt]
2012-01-10 11:52:06,753 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m")), sourceFile -> console-tools/openvt.c, generated -> false, objectFile -> openvt, listName -> lib)
2012-01-10 11:52:06,753 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m")), sourceFile -> console-tools/openvt.c, generated -> false, objectFile -> openvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,753 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,753 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,753 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/openvt.c: ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m"))
2012-01-10 11:52:06,753 DEBUG PCDerivation$ Trying to find path for: [Object: reset]
2012-01-10 11:52:06,753 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESET == "y") || (CONFIG_RESET == "m")), sourceFile -> console-tools/reset.c, generated -> false, objectFile -> reset, listName -> lib)
2012-01-10 11:52:06,753 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESET == "y") || (CONFIG_RESET == "m")), sourceFile -> console-tools/reset.c, generated -> false, objectFile -> reset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,753 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,753 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,753 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/reset.c: ((CONFIG_RESET == "y") || (CONFIG_RESET == "m"))
2012-01-10 11:52:06,753 DEBUG PCDerivation$ Trying to find path for: [Object: resize]
2012-01-10 11:52:06,753 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m")), sourceFile -> console-tools/resize.c, generated -> false, objectFile -> resize, listName -> lib)
2012-01-10 11:52:06,754 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m")), sourceFile -> console-tools/resize.c, generated -> false, objectFile -> resize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,754 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,754 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,754 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/resize.c: ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m"))
2012-01-10 11:52:06,754 DEBUG PCDerivation$ Trying to find path for: [Object: setkeycodes]
2012-01-10 11:52:06,754 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m")), sourceFile -> console-tools/setkeycodes.c, generated -> false, objectFile -> setkeycodes, listName -> lib)
2012-01-10 11:52:06,754 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m")), sourceFile -> console-tools/setkeycodes.c, generated -> false, objectFile -> setkeycodes, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,754 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,754 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,754 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setkeycodes.c: ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m"))
2012-01-10 11:52:06,754 DEBUG PCDerivation$ Trying to find path for: [Object: setlogcons]
2012-01-10 11:52:06,754 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m")), sourceFile -> console-tools/setlogcons.c, generated -> false, objectFile -> setlogcons, listName -> lib)
2012-01-10 11:52:06,754 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m")), sourceFile -> console-tools/setlogcons.c, generated -> false, objectFile -> setlogcons, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,754 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,754 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,754 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setlogcons.c: ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m"))
2012-01-10 11:52:06,754 DEBUG PCDerivation$ Trying to find path for: [Object: showkey]
2012-01-10 11:52:06,754 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m")), sourceFile -> console-tools/showkey.c, generated -> false, objectFile -> showkey, listName -> lib)
2012-01-10 11:52:06,754 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m")), sourceFile -> console-tools/showkey.c, generated -> false, objectFile -> showkey, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,755 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/showkey.c: ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m"))
2012-01-10 11:52:06,755 DEBUG PCDerivation$ Trying to find path for: [Object: getopt_mk_fifo_nod]
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib)
2012-01-10 11:52:06,755 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:52:06,755 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,755 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,755 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/getopt_mk_fifo_nod.c: (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")))
2012-01-10 11:52:06,755 DEBUG PCDerivation$ Trying to find path for: [Object: cp_mv_stat]
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib)
2012-01-10 11:52:06,755 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,755 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,756 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/cp_mv_stat.c: ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m")))
2012-01-10 11:52:06,756 DEBUG PCDerivation$ Trying to find path for: [Object: basename]
2012-01-10 11:52:06,756 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m")), sourceFile -> coreutils/basename.c, generated -> false, objectFile -> basename, listName -> lib)
2012-01-10 11:52:06,756 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m")), sourceFile -> coreutils/basename.c, generated -> false, objectFile -> basename, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,756 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,756 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,756 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/basename.c: ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m"))
2012-01-10 11:52:06,756 DEBUG PCDerivation$ Trying to find path for: [Object: cat]
2012-01-10 11:52:06,756 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))), sourceFile -> coreutils/cat.c, generated -> false, objectFile -> cat, listName -> lib)
2012-01-10 11:52:06,756 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))), sourceFile -> coreutils/cat.c, generated -> false, objectFile -> cat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,756 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,756 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,756 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cat.c: (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")))
2012-01-10 11:52:06,756 DEBUG PCDerivation$ Trying to find path for: [Object: date]
2012-01-10 11:52:06,756 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DATE == "y") || (CONFIG_DATE == "m")), sourceFile -> coreutils/date.c, generated -> false, objectFile -> date, listName -> lib)
2012-01-10 11:52:06,756 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DATE == "y") || (CONFIG_DATE == "m")), sourceFile -> coreutils/date.c, generated -> false, objectFile -> date, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,756 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,757 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,757 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/date.c: ((CONFIG_DATE == "y") || (CONFIG_DATE == "m"))
2012-01-10 11:52:06,757 DEBUG PCDerivation$ Trying to find path for: [Object: hostid]
2012-01-10 11:52:06,757 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m")), sourceFile -> coreutils/hostid.c, generated -> false, objectFile -> hostid, listName -> lib)
2012-01-10 11:52:06,757 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m")), sourceFile -> coreutils/hostid.c, generated -> false, objectFile -> hostid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,757 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,757 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,757 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/hostid.c: ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m"))
2012-01-10 11:52:06,757 DEBUG PCDerivation$ Trying to find path for: [Object: id]
2012-01-10 11:52:06,757 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m"))), sourceFile -> coreutils/id.c, generated -> false, objectFile -> id, listName -> lib)
2012-01-10 11:52:06,757 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m"))), sourceFile -> coreutils/id.c, generated -> false, objectFile -> id, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,757 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,757 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,757 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/id.c: (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m")))
2012-01-10 11:52:06,757 DEBUG PCDerivation$ Trying to find path for: [Object: test]
2012-01-10 11:52:06,757 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test.c, generated -> false, objectFile -> test, listName -> lib)
2012-01-10 11:52:06,757 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test.c, generated -> false, objectFile -> test, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,757 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,758 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,758 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/test.c: ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:52:06,758 DEBUG PCDerivation$ Trying to find path for: [Object: test_ptr_hack]
2012-01-10 11:52:06,758 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test_ptr_hack.c, generated -> false, objectFile -> test_ptr_hack, listName -> lib)
2012-01-10 11:52:06,758 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test_ptr_hack.c, generated -> false, objectFile -> test_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,758 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,758 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,758 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/test_ptr_hack.c: ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:52:06,758 DEBUG PCDerivation$ Trying to find path for: [Object: touch]
2012-01-10 11:52:06,758 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m")), sourceFile -> coreutils/touch.c, generated -> false, objectFile -> touch, listName -> lib)
2012-01-10 11:52:06,758 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m")), sourceFile -> coreutils/touch.c, generated -> false, objectFile -> touch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,758 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,758 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,758 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/touch.c: ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m"))
2012-01-10 11:52:06,758 DEBUG PCDerivation$ Trying to find path for: [Object: tr]
2012-01-10 11:52:06,758 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TR == "y") || (CONFIG_TR == "m")), sourceFile -> coreutils/tr.c, generated -> false, objectFile -> tr, listName -> lib)
2012-01-10 11:52:06,758 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TR == "y") || (CONFIG_TR == "m")), sourceFile -> coreutils/tr.c, generated -> false, objectFile -> tr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,758 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,759 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tr.c: ((CONFIG_TR == "y") || (CONFIG_TR == "m"))
2012-01-10 11:52:06,759 DEBUG PCDerivation$ Trying to find path for: [Object: uudecode]
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m"))), sourceFile -> coreutils/uudecode.c, generated -> false, objectFile -> uudecode, listName -> lib)
2012-01-10 11:52:06,759 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m"))), sourceFile -> coreutils/uudecode.c, generated -> false, objectFile -> uudecode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,759 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uudecode.c: (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m")))
2012-01-10 11:52:06,759 DEBUG PCDerivation$ Trying to find path for: [Object: who]
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m"))), sourceFile -> coreutils/who.c, generated -> false, objectFile -> who, listName -> lib)
2012-01-10 11:52:06,759 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m"))), sourceFile -> coreutils/who.c, generated -> false, objectFile -> who, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,759 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/who.c: (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m")))
2012-01-10 11:52:06,759 DEBUG PCDerivation$ Trying to find path for: [Object: cal]
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CAL == "y") || (CONFIG_CAL == "m")), sourceFile -> coreutils/cal.c, generated -> false, objectFile -> cal, listName -> lib)
2012-01-10 11:52:06,759 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CAL == "y") || (CONFIG_CAL == "m")), sourceFile -> coreutils/cal.c, generated -> false, objectFile -> cal, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,759 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,760 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cal.c: ((CONFIG_CAL == "y") || (CONFIG_CAL == "m"))
2012-01-10 11:52:06,760 DEBUG PCDerivation$ Trying to find path for: [Object: catv]
2012-01-10 11:52:06,760 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CATV == "y") || (CONFIG_CATV == "m")), sourceFile -> coreutils/catv.c, generated -> false, objectFile -> catv, listName -> lib)
2012-01-10 11:52:06,760 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CATV == "y") || (CONFIG_CATV == "m")), sourceFile -> coreutils/catv.c, generated -> false, objectFile -> catv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,760 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,760 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,760 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/catv.c: ((CONFIG_CATV == "y") || (CONFIG_CATV == "m"))
2012-01-10 11:52:06,760 DEBUG PCDerivation$ Trying to find path for: [Object: chgrp]
2012-01-10 11:52:06,760 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")), sourceFile -> coreutils/chgrp.c, generated -> false, objectFile -> chgrp, listName -> lib)
2012-01-10 11:52:06,760 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")), sourceFile -> coreutils/chgrp.c, generated -> false, objectFile -> chgrp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,760 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,760 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,760 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chgrp.c: ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m"))
2012-01-10 11:52:06,760 DEBUG PCDerivation$ Trying to find path for: [Object: chown]
2012-01-10 11:52:06,760 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))), sourceFile -> coreutils/chown.c, generated -> false, objectFile -> chown, listName -> lib)
2012-01-10 11:52:06,760 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))), sourceFile -> coreutils/chown.c, generated -> false, objectFile -> chown, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,760 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,760 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,760 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chown.c: (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")))
2012-01-10 11:52:06,761 DEBUG PCDerivation$ Trying to find path for: [Object: chmod]
2012-01-10 11:52:06,761 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m")), sourceFile -> coreutils/chmod.c, generated -> false, objectFile -> chmod, listName -> lib)
2012-01-10 11:52:06,761 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m")), sourceFile -> coreutils/chmod.c, generated -> false, objectFile -> chmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,761 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,761 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,761 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chmod.c: ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m"))
2012-01-10 11:52:06,761 DEBUG PCDerivation$ Trying to find path for: [Object: chroot]
2012-01-10 11:52:06,761 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m")), sourceFile -> coreutils/chroot.c, generated -> false, objectFile -> chroot, listName -> lib)
2012-01-10 11:52:06,761 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m")), sourceFile -> coreutils/chroot.c, generated -> false, objectFile -> chroot, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,761 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,761 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,761 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chroot.c: ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m"))
2012-01-10 11:52:06,761 DEBUG PCDerivation$ Trying to find path for: [Object: cksum]
2012-01-10 11:52:06,761 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m")), sourceFile -> coreutils/cksum.c, generated -> false, objectFile -> cksum, listName -> lib)
2012-01-10 11:52:06,761 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m")), sourceFile -> coreutils/cksum.c, generated -> false, objectFile -> cksum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,761 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,761 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,761 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cksum.c: ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m"))
2012-01-10 11:52:06,761 DEBUG PCDerivation$ Trying to find path for: [Object: comm]
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_COMM == "y") || (CONFIG_COMM == "m")), sourceFile -> coreutils/comm.c, generated -> false, objectFile -> comm, listName -> lib)
2012-01-10 11:52:06,762 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_COMM == "y") || (CONFIG_COMM == "m")), sourceFile -> coreutils/comm.c, generated -> false, objectFile -> comm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,762 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/comm.c: ((CONFIG_COMM == "y") || (CONFIG_COMM == "m"))
2012-01-10 11:52:06,762 DEBUG PCDerivation$ Trying to find path for: [Object: cp]
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CP == "y") || (CONFIG_CP == "m")), sourceFile -> coreutils/cp.c, generated -> false, objectFile -> cp, listName -> lib)
2012-01-10 11:52:06,762 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CP == "y") || (CONFIG_CP == "m")), sourceFile -> coreutils/cp.c, generated -> false, objectFile -> cp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,762 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cp.c: ((CONFIG_CP == "y") || (CONFIG_CP == "m"))
2012-01-10 11:52:06,762 DEBUG PCDerivation$ Trying to find path for: [Object: cut]
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CUT == "y") || (CONFIG_CUT == "m")), sourceFile -> coreutils/cut.c, generated -> false, objectFile -> cut, listName -> lib)
2012-01-10 11:52:06,762 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CUT == "y") || (CONFIG_CUT == "m")), sourceFile -> coreutils/cut.c, generated -> false, objectFile -> cut, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,762 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cut.c: ((CONFIG_CUT == "y") || (CONFIG_CUT == "m"))
2012-01-10 11:52:06,762 DEBUG PCDerivation$ Trying to find path for: [Object: dd]
2012-01-10 11:52:06,762 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DD == "y") || (CONFIG_DD == "m")), sourceFile -> coreutils/dd.c, generated -> false, objectFile -> dd, listName -> lib)
2012-01-10 11:52:06,763 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DD == "y") || (CONFIG_DD == "m")), sourceFile -> coreutils/dd.c, generated -> false, objectFile -> dd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,763 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,763 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,763 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dd.c: ((CONFIG_DD == "y") || (CONFIG_DD == "m"))
2012-01-10 11:52:06,763 DEBUG PCDerivation$ Trying to find path for: [Object: df]
2012-01-10 11:52:06,763 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DF == "y") || (CONFIG_DF == "m")), sourceFile -> coreutils/df.c, generated -> false, objectFile -> df, listName -> lib)
2012-01-10 11:52:06,763 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DF == "y") || (CONFIG_DF == "m")), sourceFile -> coreutils/df.c, generated -> false, objectFile -> df, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,763 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,763 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,763 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/df.c: ((CONFIG_DF == "y") || (CONFIG_DF == "m"))
2012-01-10 11:52:06,763 DEBUG PCDerivation$ Trying to find path for: [Object: dirname]
2012-01-10 11:52:06,763 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m")), sourceFile -> coreutils/dirname.c, generated -> false, objectFile -> dirname, listName -> lib)
2012-01-10 11:52:06,763 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m")), sourceFile -> coreutils/dirname.c, generated -> false, objectFile -> dirname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,763 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,763 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,763 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dirname.c: ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m"))
2012-01-10 11:52:06,763 DEBUG PCDerivation$ Trying to find path for: [Object: dos2unix]
2012-01-10 11:52:06,763 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m")), sourceFile -> coreutils/dos2unix.c, generated -> false, objectFile -> dos2unix, listName -> lib)
2012-01-10 11:52:06,764 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m")), sourceFile -> coreutils/dos2unix.c, generated -> false, objectFile -> dos2unix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,764 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,764 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,764 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dos2unix.c: ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m"))
2012-01-10 11:52:06,764 DEBUG PCDerivation$ Trying to find path for: [Object: du]
2012-01-10 11:52:06,764 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DU == "y") || (CONFIG_DU == "m")), sourceFile -> coreutils/du.c, generated -> false, objectFile -> du, listName -> lib)
2012-01-10 11:52:06,764 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DU == "y") || (CONFIG_DU == "m")), sourceFile -> coreutils/du.c, generated -> false, objectFile -> du, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,764 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,764 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,764 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/du.c: ((CONFIG_DU == "y") || (CONFIG_DU == "m"))
2012-01-10 11:52:06,764 DEBUG PCDerivation$ Trying to find path for: [Object: echo]
2012-01-10 11:52:06,764 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/echo.c, generated -> false, objectFile -> echo, listName -> lib)
2012-01-10 11:52:06,764 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/echo.c, generated -> false, objectFile -> echo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,764 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,764 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,764 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/echo.c: ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:52:06,764 DEBUG PCDerivation$ Trying to find path for: [Object: env]
2012-01-10 11:52:06,764 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ENV == "y") || (CONFIG_ENV == "m")), sourceFile -> coreutils/env.c, generated -> false, objectFile -> env, listName -> lib)
2012-01-10 11:52:06,764 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ENV == "y") || (CONFIG_ENV == "m")), sourceFile -> coreutils/env.c, generated -> false, objectFile -> env, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,765 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/env.c: ((CONFIG_ENV == "y") || (CONFIG_ENV == "m"))
2012-01-10 11:52:06,765 DEBUG PCDerivation$ Trying to find path for: [Object: expr]
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m")), sourceFile -> coreutils/expr.c, generated -> false, objectFile -> expr, listName -> lib)
2012-01-10 11:52:06,765 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m")), sourceFile -> coreutils/expr.c, generated -> false, objectFile -> expr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,765 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/expr.c: ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))
2012-01-10 11:52:06,765 DEBUG PCDerivation$ Trying to find path for: [Object: expand]
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m"))), sourceFile -> coreutils/expand.c, generated -> false, objectFile -> expand, listName -> lib)
2012-01-10 11:52:06,765 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m"))), sourceFile -> coreutils/expand.c, generated -> false, objectFile -> expand, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,765 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/expand.c: (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m")))
2012-01-10 11:52:06,765 DEBUG PCDerivation$ Trying to find path for: [Object: false]
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m")), sourceFile -> coreutils/false.c, generated -> false, objectFile -> false, listName -> lib)
2012-01-10 11:52:06,765 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m")), sourceFile -> coreutils/false.c, generated -> false, objectFile -> false, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,765 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,766 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/false.c: ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m"))
2012-01-10 11:52:06,766 DEBUG PCDerivation$ Trying to find path for: [Object: fold]
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m")), sourceFile -> coreutils/fold.c, generated -> false, objectFile -> fold, listName -> lib)
2012-01-10 11:52:06,766 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m")), sourceFile -> coreutils/fold.c, generated -> false, objectFile -> fold, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,766 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/fold.c: ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m"))
2012-01-10 11:52:06,766 DEBUG PCDerivation$ Trying to find path for: [Object: fsync]
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m")), sourceFile -> coreutils/fsync.c, generated -> false, objectFile -> fsync, listName -> lib)
2012-01-10 11:52:06,766 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m")), sourceFile -> coreutils/fsync.c, generated -> false, objectFile -> fsync, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,766 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/fsync.c: ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m"))
2012-01-10 11:52:06,766 DEBUG PCDerivation$ Trying to find path for: [Object: head]
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m")), sourceFile -> coreutils/head.c, generated -> false, objectFile -> head, listName -> lib)
2012-01-10 11:52:06,766 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m")), sourceFile -> coreutils/head.c, generated -> false, objectFile -> head, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,766 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,767 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/head.c: ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m"))
2012-01-10 11:52:06,767 DEBUG PCDerivation$ Trying to find path for: [Object: install]
2012-01-10 11:52:06,767 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")), sourceFile -> coreutils/install.c, generated -> false, objectFile -> install, listName -> lib)
2012-01-10 11:52:06,767 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")), sourceFile -> coreutils/install.c, generated -> false, objectFile -> install, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,767 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,767 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,767 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/install.c: ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m"))
2012-01-10 11:52:06,767 DEBUG PCDerivation$ Trying to find path for: [Object: ln]
2012-01-10 11:52:06,767 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LN == "y") || (CONFIG_LN == "m")), sourceFile -> coreutils/ln.c, generated -> false, objectFile -> ln, listName -> lib)
2012-01-10 11:52:06,767 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LN == "y") || (CONFIG_LN == "m")), sourceFile -> coreutils/ln.c, generated -> false, objectFile -> ln, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,767 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,767 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,767 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/ln.c: ((CONFIG_LN == "y") || (CONFIG_LN == "m"))
2012-01-10 11:52:06,767 DEBUG PCDerivation$ Trying to find path for: [Object: logname]
2012-01-10 11:52:06,767 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m")), sourceFile -> coreutils/logname.c, generated -> false, objectFile -> logname, listName -> lib)
2012-01-10 11:52:06,767 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m")), sourceFile -> coreutils/logname.c, generated -> false, objectFile -> logname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,767 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,767 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,768 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/logname.c: ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m"))
2012-01-10 11:52:06,768 DEBUG PCDerivation$ Trying to find path for: [Object: ls]
2012-01-10 11:52:06,768 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))), sourceFile -> coreutils/ls.c, generated -> false, objectFile -> ls, listName -> lib)
2012-01-10 11:52:06,768 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))), sourceFile -> coreutils/ls.c, generated -> false, objectFile -> ls, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,768 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,768 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,768 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/ls.c: (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")))
2012-01-10 11:52:06,768 DEBUG PCDerivation$ Trying to find path for: [Object: md5_sha1_sum]
2012-01-10 11:52:06,768 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m"))), sourceFile -> coreutils/md5_sha1_sum.c, generated -> false, objectFile -> md5_sha1_sum, listName -> lib)
2012-01-10 11:52:06,768 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m"))), sourceFile -> coreutils/md5_sha1_sum.c, generated -> false, objectFile -> md5_sha1_sum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,768 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,768 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,768 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/md5_sha1_sum.c: (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m")))
2012-01-10 11:52:06,768 DEBUG PCDerivation$ Trying to find path for: [Object: mkdir]
2012-01-10 11:52:06,768 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m")), sourceFile -> coreutils/mkdir.c, generated -> false, objectFile -> mkdir, listName -> lib)
2012-01-10 11:52:06,768 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m")), sourceFile -> coreutils/mkdir.c, generated -> false, objectFile -> mkdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,768 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,768 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,769 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mkdir.c: ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m"))
2012-01-10 11:52:06,769 DEBUG PCDerivation$ Trying to find path for: [Object: mkfifo]
2012-01-10 11:52:06,769 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")), sourceFile -> coreutils/mkfifo.c, generated -> false, objectFile -> mkfifo, listName -> lib)
2012-01-10 11:52:06,769 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")), sourceFile -> coreutils/mkfifo.c, generated -> false, objectFile -> mkfifo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,769 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,769 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,769 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mkfifo.c: ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m"))
2012-01-10 11:52:06,769 DEBUG PCDerivation$ Trying to find path for: [Object: mknod]
2012-01-10 11:52:06,769 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")), sourceFile -> coreutils/mknod.c, generated -> false, objectFile -> mknod, listName -> lib)
2012-01-10 11:52:06,769 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")), sourceFile -> coreutils/mknod.c, generated -> false, objectFile -> mknod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,769 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,769 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,769 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mknod.c: ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))
2012-01-10 11:52:06,769 DEBUG PCDerivation$ Trying to find path for: [Object: mv]
2012-01-10 11:52:06,769 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MV == "y") || (CONFIG_MV == "m")), sourceFile -> coreutils/mv.c, generated -> false, objectFile -> mv, listName -> lib)
2012-01-10 11:52:06,769 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MV == "y") || (CONFIG_MV == "m")), sourceFile -> coreutils/mv.c, generated -> false, objectFile -> mv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,769 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,769 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,769 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mv.c: ((CONFIG_MV == "y") || (CONFIG_MV == "m"))
2012-01-10 11:52:06,770 DEBUG PCDerivation$ Trying to find path for: [Object: nice]
2012-01-10 11:52:06,770 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NICE == "y") || (CONFIG_NICE == "m")), sourceFile -> coreutils/nice.c, generated -> false, objectFile -> nice, listName -> lib)
2012-01-10 11:52:06,770 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NICE == "y") || (CONFIG_NICE == "m")), sourceFile -> coreutils/nice.c, generated -> false, objectFile -> nice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,770 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,770 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,770 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/nice.c: ((CONFIG_NICE == "y") || (CONFIG_NICE == "m"))
2012-01-10 11:52:06,770 DEBUG PCDerivation$ Trying to find path for: [Object: nohup]
2012-01-10 11:52:06,770 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m")), sourceFile -> coreutils/nohup.c, generated -> false, objectFile -> nohup, listName -> lib)
2012-01-10 11:52:06,770 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m")), sourceFile -> coreutils/nohup.c, generated -> false, objectFile -> nohup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,770 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,770 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,770 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/nohup.c: ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m"))
2012-01-10 11:52:06,770 DEBUG PCDerivation$ Trying to find path for: [Object: od]
2012-01-10 11:52:06,770 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OD == "y") || (CONFIG_OD == "m")), sourceFile -> coreutils/od.c, generated -> false, objectFile -> od, listName -> lib)
2012-01-10 11:52:06,770 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OD == "y") || (CONFIG_OD == "m")), sourceFile -> coreutils/od.c, generated -> false, objectFile -> od, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,770 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,770 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,770 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/od.c: ((CONFIG_OD == "y") || (CONFIG_OD == "m"))
2012-01-10 11:52:06,770 DEBUG PCDerivation$ Trying to find path for: [Object: printenv]
2012-01-10 11:52:06,771 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m")), sourceFile -> coreutils/printenv.c, generated -> false, objectFile -> printenv, listName -> lib)
2012-01-10 11:52:06,771 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m")), sourceFile -> coreutils/printenv.c, generated -> false, objectFile -> printenv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,771 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,771 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,771 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/printenv.c: ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m"))
2012-01-10 11:52:06,771 DEBUG PCDerivation$ Trying to find path for: [Object: printf]
2012-01-10 11:52:06,771 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m"))), sourceFile -> coreutils/printf.c, generated -> false, objectFile -> printf, listName -> lib)
2012-01-10 11:52:06,771 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m"))), sourceFile -> coreutils/printf.c, generated -> false, objectFile -> printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,771 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,771 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,771 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/printf.c: (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m")))
2012-01-10 11:52:06,771 DEBUG PCDerivation$ Trying to find path for: [Object: pwd]
2012-01-10 11:52:06,771 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWD == "y") || (CONFIG_PWD == "m")), sourceFile -> coreutils/pwd.c, generated -> false, objectFile -> pwd, listName -> lib)
2012-01-10 11:52:06,771 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWD == "y") || (CONFIG_PWD == "m")), sourceFile -> coreutils/pwd.c, generated -> false, objectFile -> pwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,771 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,771 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,771 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/pwd.c: ((CONFIG_PWD == "y") || (CONFIG_PWD == "m"))
2012-01-10 11:52:06,771 DEBUG PCDerivation$ Trying to find path for: [Object: readlink]
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m")), sourceFile -> coreutils/readlink.c, generated -> false, objectFile -> readlink, listName -> lib)
2012-01-10 11:52:06,772 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m")), sourceFile -> coreutils/readlink.c, generated -> false, objectFile -> readlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,772 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/readlink.c: ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m"))
2012-01-10 11:52:06,772 DEBUG PCDerivation$ Trying to find path for: [Object: realpath]
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m")), sourceFile -> coreutils/realpath.c, generated -> false, objectFile -> realpath, listName -> lib)
2012-01-10 11:52:06,772 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m")), sourceFile -> coreutils/realpath.c, generated -> false, objectFile -> realpath, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,772 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/realpath.c: ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m"))
2012-01-10 11:52:06,772 DEBUG PCDerivation$ Trying to find path for: [Object: rm]
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RM == "y") || (CONFIG_RM == "m")), sourceFile -> coreutils/rm.c, generated -> false, objectFile -> rm, listName -> lib)
2012-01-10 11:52:06,772 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RM == "y") || (CONFIG_RM == "m")), sourceFile -> coreutils/rm.c, generated -> false, objectFile -> rm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,772 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/rm.c: ((CONFIG_RM == "y") || (CONFIG_RM == "m"))
2012-01-10 11:52:06,772 DEBUG PCDerivation$ Trying to find path for: [Object: rmdir]
2012-01-10 11:52:06,772 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m")), sourceFile -> coreutils/rmdir.c, generated -> false, objectFile -> rmdir, listName -> lib)
2012-01-10 11:52:06,773 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m")), sourceFile -> coreutils/rmdir.c, generated -> false, objectFile -> rmdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,773 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,773 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,773 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/rmdir.c: ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m"))
2012-01-10 11:52:06,773 DEBUG PCDerivation$ Trying to find path for: [Object: seq]
2012-01-10 11:52:06,773 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m")), sourceFile -> coreutils/seq.c, generated -> false, objectFile -> seq, listName -> lib)
2012-01-10 11:52:06,773 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m")), sourceFile -> coreutils/seq.c, generated -> false, objectFile -> seq, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,773 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,773 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,773 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/seq.c: ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m"))
2012-01-10 11:52:06,773 DEBUG PCDerivation$ Trying to find path for: [Object: sleep]
2012-01-10 11:52:06,773 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m")), sourceFile -> coreutils/sleep.c, generated -> false, objectFile -> sleep, listName -> lib)
2012-01-10 11:52:06,773 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m")), sourceFile -> coreutils/sleep.c, generated -> false, objectFile -> sleep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,773 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,773 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,773 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sleep.c: ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m"))
2012-01-10 11:52:06,773 DEBUG PCDerivation$ Trying to find path for: [Object: split]
2012-01-10 11:52:06,773 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m")), sourceFile -> coreutils/split.c, generated -> false, objectFile -> split, listName -> lib)
2012-01-10 11:52:06,773 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m")), sourceFile -> coreutils/split.c, generated -> false, objectFile -> split, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,774 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/split.c: ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m"))
2012-01-10 11:52:06,774 DEBUG PCDerivation$ Trying to find path for: [Object: sort]
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SORT == "y") || (CONFIG_SORT == "m")), sourceFile -> coreutils/sort.c, generated -> false, objectFile -> sort, listName -> lib)
2012-01-10 11:52:06,774 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SORT == "y") || (CONFIG_SORT == "m")), sourceFile -> coreutils/sort.c, generated -> false, objectFile -> sort, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,774 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sort.c: ((CONFIG_SORT == "y") || (CONFIG_SORT == "m"))
2012-01-10 11:52:06,774 DEBUG PCDerivation$ Trying to find path for: [Object: stat]
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STAT == "y") || (CONFIG_STAT == "m")), sourceFile -> coreutils/stat.c, generated -> false, objectFile -> stat, listName -> lib)
2012-01-10 11:52:06,774 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STAT == "y") || (CONFIG_STAT == "m")), sourceFile -> coreutils/stat.c, generated -> false, objectFile -> stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,774 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/stat.c: ((CONFIG_STAT == "y") || (CONFIG_STAT == "m"))
2012-01-10 11:52:06,774 DEBUG PCDerivation$ Trying to find path for: [Object: stty]
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STTY == "y") || (CONFIG_STTY == "m")), sourceFile -> coreutils/stty.c, generated -> false, objectFile -> stty, listName -> lib)
2012-01-10 11:52:06,774 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STTY == "y") || (CONFIG_STTY == "m")), sourceFile -> coreutils/stty.c, generated -> false, objectFile -> stty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,774 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,775 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/stty.c: ((CONFIG_STTY == "y") || (CONFIG_STTY == "m"))
2012-01-10 11:52:06,775 DEBUG PCDerivation$ Trying to find path for: [Object: sum]
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SUM == "y") || (CONFIG_SUM == "m")), sourceFile -> coreutils/sum.c, generated -> false, objectFile -> sum, listName -> lib)
2012-01-10 11:52:06,775 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SUM == "y") || (CONFIG_SUM == "m")), sourceFile -> coreutils/sum.c, generated -> false, objectFile -> sum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,775 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sum.c: ((CONFIG_SUM == "y") || (CONFIG_SUM == "m"))
2012-01-10 11:52:06,775 DEBUG PCDerivation$ Trying to find path for: [Object: sync]
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m")), sourceFile -> coreutils/sync.c, generated -> false, objectFile -> sync, listName -> lib)
2012-01-10 11:52:06,775 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m")), sourceFile -> coreutils/sync.c, generated -> false, objectFile -> sync, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,775 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sync.c: ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m"))
2012-01-10 11:52:06,775 DEBUG PCDerivation$ Trying to find path for: [Object: tac]
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAC == "y") || (CONFIG_TAC == "m")), sourceFile -> coreutils/tac.c, generated -> false, objectFile -> tac, listName -> lib)
2012-01-10 11:52:06,775 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAC == "y") || (CONFIG_TAC == "m")), sourceFile -> coreutils/tac.c, generated -> false, objectFile -> tac, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,775 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,776 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tac.c: ((CONFIG_TAC == "y") || (CONFIG_TAC == "m"))
2012-01-10 11:52:06,776 DEBUG PCDerivation$ Trying to find path for: [Object: tail]
2012-01-10 11:52:06,776 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m")), sourceFile -> coreutils/tail.c, generated -> false, objectFile -> tail, listName -> lib)
2012-01-10 11:52:06,776 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m")), sourceFile -> coreutils/tail.c, generated -> false, objectFile -> tail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,776 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,776 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,776 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tail.c: ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m"))
2012-01-10 11:52:06,776 DEBUG PCDerivation$ Trying to find path for: [Object: tee]
2012-01-10 11:52:06,776 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TEE == "y") || (CONFIG_TEE == "m")), sourceFile -> coreutils/tee.c, generated -> false, objectFile -> tee, listName -> lib)
2012-01-10 11:52:06,776 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TEE == "y") || (CONFIG_TEE == "m")), sourceFile -> coreutils/tee.c, generated -> false, objectFile -> tee, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,776 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,776 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,776 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tee.c: ((CONFIG_TEE == "y") || (CONFIG_TEE == "m"))
2012-01-10 11:52:06,776 DEBUG PCDerivation$ Trying to find path for: [Object: true]
2012-01-10 11:52:06,776 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m")), sourceFile -> coreutils/true.c, generated -> false, objectFile -> true, listName -> lib)
2012-01-10 11:52:06,776 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m")), sourceFile -> coreutils/true.c, generated -> false, objectFile -> true, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,776 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,776 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,776 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/true.c: ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m"))
2012-01-10 11:52:06,776 DEBUG PCDerivation$ Trying to find path for: [Object: tty]
2012-01-10 11:52:06,777 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTY == "y") || (CONFIG_TTY == "m")), sourceFile -> coreutils/tty.c, generated -> false, objectFile -> tty, listName -> lib)
2012-01-10 11:52:06,777 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTY == "y") || (CONFIG_TTY == "m")), sourceFile -> coreutils/tty.c, generated -> false, objectFile -> tty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,777 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,777 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,777 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tty.c: ((CONFIG_TTY == "y") || (CONFIG_TTY == "m"))
2012-01-10 11:52:06,777 DEBUG PCDerivation$ Trying to find path for: [Object: uname]
2012-01-10 11:52:06,777 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m")), sourceFile -> coreutils/uname.c, generated -> false, objectFile -> uname, listName -> lib)
2012-01-10 11:52:06,777 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m")), sourceFile -> coreutils/uname.c, generated -> false, objectFile -> uname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,777 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,777 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,777 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uname.c: ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m"))
2012-01-10 11:52:06,777 DEBUG PCDerivation$ Trying to find path for: [Object: uniq]
2012-01-10 11:52:06,777 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m")), sourceFile -> coreutils/uniq.c, generated -> false, objectFile -> uniq, listName -> lib)
2012-01-10 11:52:06,777 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m")), sourceFile -> coreutils/uniq.c, generated -> false, objectFile -> uniq, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,777 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,777 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,777 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uniq.c: ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m"))
2012-01-10 11:52:06,777 DEBUG PCDerivation$ Trying to find path for: [Object: usleep]
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m")), sourceFile -> coreutils/usleep.c, generated -> false, objectFile -> usleep, listName -> lib)
2012-01-10 11:52:06,778 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m")), sourceFile -> coreutils/usleep.c, generated -> false, objectFile -> usleep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,778 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/usleep.c: ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m"))
2012-01-10 11:52:06,778 DEBUG PCDerivation$ Trying to find path for: [Object: uuencode]
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m")), sourceFile -> coreutils/uuencode.c, generated -> false, objectFile -> uuencode, listName -> lib)
2012-01-10 11:52:06,778 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m")), sourceFile -> coreutils/uuencode.c, generated -> false, objectFile -> uuencode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,778 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uuencode.c: ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m"))
2012-01-10 11:52:06,778 DEBUG PCDerivation$ Trying to find path for: [Object: wc]
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WC == "y") || (CONFIG_WC == "m")), sourceFile -> coreutils/wc.c, generated -> false, objectFile -> wc, listName -> lib)
2012-01-10 11:52:06,778 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WC == "y") || (CONFIG_WC == "m")), sourceFile -> coreutils/wc.c, generated -> false, objectFile -> wc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,778 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/wc.c: ((CONFIG_WC == "y") || (CONFIG_WC == "m"))
2012-01-10 11:52:06,778 DEBUG PCDerivation$ Trying to find path for: [Object: whoami]
2012-01-10 11:52:06,778 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m")), sourceFile -> coreutils/whoami.c, generated -> false, objectFile -> whoami, listName -> lib)
2012-01-10 11:52:06,779 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m")), sourceFile -> coreutils/whoami.c, generated -> false, objectFile -> whoami, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,779 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,779 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,779 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/whoami.c: ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m"))
2012-01-10 11:52:06,779 DEBUG PCDerivation$ Trying to find path for: [Object: yes]
2012-01-10 11:52:06,779 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_YES == "y") || (CONFIG_YES == "m")), sourceFile -> coreutils/yes.c, generated -> false, objectFile -> yes, listName -> lib)
2012-01-10 11:52:06,779 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_YES == "y") || (CONFIG_YES == "m")), sourceFile -> coreutils/yes.c, generated -> false, objectFile -> yes, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,779 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:52:06,779 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,779 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/yes.c: ((CONFIG_YES == "y") || (CONFIG_YES == "m"))
2012-01-10 11:52:06,779 DEBUG PCDerivation$ Trying to find path for: [Object: getopt_mk_fifo_nod]
2012-01-10 11:52:06,779 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib)
2012-01-10 11:52:06,779 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:52:06,779 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:52:06,779 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,779 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,779 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/getopt_mk_fifo_nod.c: (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")))
2012-01-10 11:52:06,779 DEBUG PCDerivation$ Trying to find path for: [Object: cp_mv_stat]
2012-01-10 11:52:06,780 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib)
2012-01-10 11:52:06,780 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:52:06,780 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:52:06,780 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,780 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/cp_mv_stat.c: ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m")))
2012-01-10 11:52:06,780 DEBUG PCDerivation$ Trying to find path for: [Object: mktemp]
2012-01-10 11:52:06,780 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m")), sourceFile -> debianutils/mktemp.c, generated -> false, objectFile -> mktemp, listName -> lib)
2012-01-10 11:52:06,780 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m")), sourceFile -> debianutils/mktemp.c, generated -> false, objectFile -> mktemp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,780 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,780 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,780 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,780 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/mktemp.c: ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m"))
2012-01-10 11:52:06,780 DEBUG PCDerivation$ Trying to find path for: [Object: pipe_progress]
2012-01-10 11:52:06,780 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m")), sourceFile -> debianutils/pipe_progress.c, generated -> false, objectFile -> pipe_progress, listName -> lib)
2012-01-10 11:52:06,780 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m")), sourceFile -> debianutils/pipe_progress.c, generated -> false, objectFile -> pipe_progress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,780 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,780 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,780 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/pipe_progress.c: ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m"))
2012-01-10 11:52:06,780 DEBUG PCDerivation$ Trying to find path for: [Object: run_parts]
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m")), sourceFile -> debianutils/run_parts.c, generated -> false, objectFile -> run_parts, listName -> lib)
2012-01-10 11:52:06,781 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m")), sourceFile -> debianutils/run_parts.c, generated -> false, objectFile -> run_parts, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,781 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/run_parts.c: ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m"))
2012-01-10 11:52:06,781 DEBUG PCDerivation$ Trying to find path for: [Object: start_stop_daemon]
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m")), sourceFile -> debianutils/start_stop_daemon.c, generated -> false, objectFile -> start_stop_daemon, listName -> lib)
2012-01-10 11:52:06,781 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m")), sourceFile -> debianutils/start_stop_daemon.c, generated -> false, objectFile -> start_stop_daemon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,781 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/start_stop_daemon.c: ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m"))
2012-01-10 11:52:06,781 DEBUG PCDerivation$ Trying to find path for: [Object: which]
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m")), sourceFile -> debianutils/which.c, generated -> false, objectFile -> which, listName -> lib)
2012-01-10 11:52:06,781 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m")), sourceFile -> debianutils/which.c, generated -> false, objectFile -> which, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,781 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/which.c: ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m"))
2012-01-10 11:52:06,781 DEBUG PCDerivation$ Trying to find path for: [Object: chattr]
2012-01-10 11:52:06,781 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")), sourceFile -> e2fsprogs/chattr.c, generated -> false, objectFile -> chattr, listName -> lib)
2012-01-10 11:52:06,782 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")), sourceFile -> e2fsprogs/chattr.c, generated -> false, objectFile -> chattr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,782 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,782 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,782 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,782 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/chattr.c: ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m"))
2012-01-10 11:52:06,782 DEBUG PCDerivation$ Trying to find path for: [Object: e2fs_lib]
2012-01-10 11:52:06,782 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))), sourceFile -> e2fsprogs/e2fs_lib.c, generated -> false, objectFile -> e2fs_lib, listName -> lib)
2012-01-10 11:52:06,782 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))), sourceFile -> e2fsprogs/e2fs_lib.c, generated -> false, objectFile -> e2fs_lib, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,782 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,782 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,782 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/e2fs_lib.c: (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")))
2012-01-10 11:52:06,782 DEBUG PCDerivation$ Trying to find path for: [Object: lsattr]
2012-01-10 11:52:06,782 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")), sourceFile -> e2fsprogs/lsattr.c, generated -> false, objectFile -> lsattr, listName -> lib)
2012-01-10 11:52:06,782 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")), sourceFile -> e2fsprogs/lsattr.c, generated -> false, objectFile -> lsattr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,782 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,782 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,782 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/lsattr.c: ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))
2012-01-10 11:52:06,782 DEBUG PCDerivation$ Trying to find path for: [Object: fsck]
2012-01-10 11:52:06,782 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m")), sourceFile -> e2fsprogs/fsck.c, generated -> false, objectFile -> fsck, listName -> lib)
2012-01-10 11:52:06,783 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m")), sourceFile -> e2fsprogs/fsck.c, generated -> false, objectFile -> fsck, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,783 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,783 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,783 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/fsck.c: ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m"))
2012-01-10 11:52:06,783 DEBUG PCDerivation$ Trying to find path for: [Object: tune2fs]
2012-01-10 11:52:06,783 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m")), sourceFile -> e2fsprogs/tune2fs.c, generated -> false, objectFile -> tune2fs, listName -> lib)
2012-01-10 11:52:06,783 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m")), sourceFile -> e2fsprogs/tune2fs.c, generated -> false, objectFile -> tune2fs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,783 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:52:06,783 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,783 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/tune2fs.c: ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m"))
2012-01-10 11:52:06,783 DEBUG PCDerivation$ Trying to find path for: [Object: patch]
2012-01-10 11:52:06,783 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m")), sourceFile -> editors/patch.c, generated -> false, objectFile -> patch, listName -> lib)
2012-01-10 11:52:06,783 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m")), sourceFile -> editors/patch.c, generated -> false, objectFile -> patch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,783 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,783 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,783 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,783 DEBUG PCDerivation$ Expression of path for object occurrence editors/patch.c: ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m"))
2012-01-10 11:52:06,783 DEBUG PCDerivation$ Trying to find path for: [Object: vi]
2012-01-10 11:52:06,783 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VI == "y") || (CONFIG_VI == "m")), sourceFile -> editors/vi.c, generated -> false, objectFile -> vi, listName -> lib)
2012-01-10 11:52:06,784 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VI == "y") || (CONFIG_VI == "m")), sourceFile -> editors/vi.c, generated -> false, objectFile -> vi, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,784 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,784 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,784 DEBUG PCDerivation$ Expression of path for object occurrence editors/vi.c: ((CONFIG_VI == "y") || (CONFIG_VI == "m"))
2012-01-10 11:52:06,784 DEBUG PCDerivation$ Trying to find path for: [Object: awk]
2012-01-10 11:52:06,784 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AWK == "y") || (CONFIG_AWK == "m")), sourceFile -> editors/awk.c, generated -> false, objectFile -> awk, listName -> lib)
2012-01-10 11:52:06,784 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AWK == "y") || (CONFIG_AWK == "m")), sourceFile -> editors/awk.c, generated -> false, objectFile -> awk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,784 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,784 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,784 DEBUG PCDerivation$ Expression of path for object occurrence editors/awk.c: ((CONFIG_AWK == "y") || (CONFIG_AWK == "m"))
2012-01-10 11:52:06,784 DEBUG PCDerivation$ Trying to find path for: [Object: cmp]
2012-01-10 11:52:06,784 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CMP == "y") || (CONFIG_CMP == "m")), sourceFile -> editors/cmp.c, generated -> false, objectFile -> cmp, listName -> lib)
2012-01-10 11:52:06,784 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CMP == "y") || (CONFIG_CMP == "m")), sourceFile -> editors/cmp.c, generated -> false, objectFile -> cmp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,784 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,784 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,784 DEBUG PCDerivation$ Expression of path for object occurrence editors/cmp.c: ((CONFIG_CMP == "y") || (CONFIG_CMP == "m"))
2012-01-10 11:52:06,784 DEBUG PCDerivation$ Trying to find path for: [Object: diff]
2012-01-10 11:52:06,784 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m")), sourceFile -> editors/diff.c, generated -> false, objectFile -> diff, listName -> lib)
2012-01-10 11:52:06,784 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m")), sourceFile -> editors/diff.c, generated -> false, objectFile -> diff, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,785 DEBUG PCDerivation$ Expression of path for object occurrence editors/diff.c: ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m"))
2012-01-10 11:52:06,785 DEBUG PCDerivation$ Trying to find path for: [Object: ed]
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ED == "y") || (CONFIG_ED == "m")), sourceFile -> editors/ed.c, generated -> false, objectFile -> ed, listName -> lib)
2012-01-10 11:52:06,785 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ED == "y") || (CONFIG_ED == "m")), sourceFile -> editors/ed.c, generated -> false, objectFile -> ed, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,785 DEBUG PCDerivation$ Expression of path for object occurrence editors/ed.c: ((CONFIG_ED == "y") || (CONFIG_ED == "m"))
2012-01-10 11:52:06,785 DEBUG PCDerivation$ Trying to find path for: [Object: sed]
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SED == "y") || (CONFIG_SED == "m")), sourceFile -> editors/sed.c, generated -> false, objectFile -> sed, listName -> lib)
2012-01-10 11:52:06,785 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SED == "y") || (CONFIG_SED == "m")), sourceFile -> editors/sed.c, generated -> false, objectFile -> sed, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,785 DEBUG PCDerivation$ Expression of path for object occurrence editors/sed.c: ((CONFIG_SED == "y") || (CONFIG_SED == "m"))
2012-01-10 11:52:06,785 DEBUG PCDerivation$ Trying to find path for: [Object: find]
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FIND == "y") || (CONFIG_FIND == "m")), sourceFile -> findutils/find.c, generated -> false, objectFile -> find, listName -> lib)
2012-01-10 11:52:06,785 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FIND == "y") || (CONFIG_FIND == "m")), sourceFile -> findutils/find.c, generated -> false, objectFile -> find, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:52:06,785 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:52:06,786 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,786 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,786 DEBUG PCDerivation$ Expression of path for object occurrence findutils/find.c: ((CONFIG_FIND == "y") || (CONFIG_FIND == "m"))
2012-01-10 11:52:06,786 DEBUG PCDerivation$ Trying to find path for: [Object: grep]
2012-01-10 11:52:06,786 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GREP == "y") || (CONFIG_GREP == "m")), sourceFile -> findutils/grep.c, generated -> false, objectFile -> grep, listName -> lib)
2012-01-10 11:52:06,786 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GREP == "y") || (CONFIG_GREP == "m")), sourceFile -> findutils/grep.c, generated -> false, objectFile -> grep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:52:06,786 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:52:06,786 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,786 DEBUG PCDerivation$ Expression of path for object occurrence findutils/grep.c: ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))
2012-01-10 11:52:06,786 DEBUG PCDerivation$ Trying to find path for: [Object: xargs]
2012-01-10 11:52:06,786 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m")), sourceFile -> findutils/xargs.c, generated -> false, objectFile -> xargs, listName -> lib)
2012-01-10 11:52:06,786 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m")), sourceFile -> findutils/xargs.c, generated -> false, objectFile -> xargs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:52:06,786 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:52:06,786 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,786 DEBUG PCDerivation$ Expression of path for object occurrence findutils/xargs.c: ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m"))
2012-01-10 11:52:06,786 DEBUG PCDerivation$ Trying to find path for: [Object: bootchartd]
2012-01-10 11:52:06,786 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m")), sourceFile -> init/bootchartd.c, generated -> false, objectFile -> bootchartd, listName -> lib)
2012-01-10 11:52:06,786 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m")), sourceFile -> init/bootchartd.c, generated -> false, objectFile -> bootchartd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:52:06,786 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:52:06,787 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,787 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,787 DEBUG PCDerivation$ Expression of path for object occurrence init/bootchartd.c: ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m"))
2012-01-10 11:52:06,787 DEBUG PCDerivation$ Trying to find path for: [Object: halt]
2012-01-10 11:52:06,787 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HALT == "y") || (CONFIG_HALT == "m")), sourceFile -> init/halt.c, generated -> false, objectFile -> halt, listName -> lib)
2012-01-10 11:52:06,787 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HALT == "y") || (CONFIG_HALT == "m")), sourceFile -> init/halt.c, generated -> false, objectFile -> halt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:52:06,787 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:52:06,787 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,787 DEBUG PCDerivation$ Expression of path for object occurrence init/halt.c: ((CONFIG_HALT == "y") || (CONFIG_HALT == "m"))
2012-01-10 11:52:06,787 DEBUG PCDerivation$ Trying to find path for: [Object: init]
2012-01-10 11:52:06,787 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INIT == "y") || (CONFIG_INIT == "m")), sourceFile -> init/init.c, generated -> false, objectFile -> init, listName -> lib)
2012-01-10 11:52:06,787 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INIT == "y") || (CONFIG_INIT == "m")), sourceFile -> init/init.c, generated -> false, objectFile -> init, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:52:06,787 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:52:06,787 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,787 DEBUG PCDerivation$ Expression of path for object occurrence init/init.c: ((CONFIG_INIT == "y") || (CONFIG_INIT == "m"))
2012-01-10 11:52:06,787 DEBUG PCDerivation$ Trying to find path for: [Object: mesg]
2012-01-10 11:52:06,787 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MESG == "y") || (CONFIG_MESG == "m")), sourceFile -> init/mesg.c, generated -> false, objectFile -> mesg, listName -> lib)
2012-01-10 11:52:06,787 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MESG == "y") || (CONFIG_MESG == "m")), sourceFile -> init/mesg.c, generated -> false, objectFile -> mesg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:52:06,787 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:52:06,788 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,788 DEBUG PCDerivation$ Expression of path for object occurrence init/mesg.c: ((CONFIG_MESG == "y") || (CONFIG_MESG == "m"))
2012-01-10 11:52:06,788 DEBUG PCDerivation$ Trying to find path for: [Object: get_shell_name]
2012-01-10 11:52:06,788 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_shell_name.c, builtAs -> y, generated -> false, objectFile -> get_shell_name, listName -> lib)
2012-01-10 11:52:06,788 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_shell_name.c, builtAs -> y, generated -> false, objectFile -> get_shell_name, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,788 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,788 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,788 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,788 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_shell_name.c: [TRUE]
2012-01-10 11:52:06,788 DEBUG PCDerivation$ Trying to find path for: [Object: parse_config]
2012-01-10 11:52:06,788 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_config.c, builtAs -> y, generated -> false, objectFile -> parse_config, listName -> lib)
2012-01-10 11:52:06,788 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_config.c, builtAs -> y, generated -> false, objectFile -> parse_config, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,788 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,788 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,788 DEBUG PCDerivation$ Expression of path for object occurrence libbb/parse_config.c: [TRUE]
2012-01-10 11:52:06,788 DEBUG PCDerivation$ Trying to find path for: [Object: percent_decode]
2012-01-10 11:52:06,788 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/percent_decode.c, builtAs -> y, generated -> false, objectFile -> percent_decode, listName -> lib)
2012-01-10 11:52:06,788 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/percent_decode.c, builtAs -> y, generated -> false, objectFile -> percent_decode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,788 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,789 DEBUG PCDerivation$ Expression of path for object occurrence libbb/percent_decode.c: [TRUE]
2012-01-10 11:52:06,789 DEBUG PCDerivation$ Trying to find path for: [Object: systemd_support]
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m")), sourceFile -> libbb/systemd_support.c, generated -> false, objectFile -> systemd_support, listName -> lib)
2012-01-10 11:52:06,789 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m")), sourceFile -> libbb/systemd_support.c, generated -> false, objectFile -> systemd_support, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,789 DEBUG PCDerivation$ Expression of path for object occurrence libbb/systemd_support.c: ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m"))
2012-01-10 11:52:06,789 DEBUG PCDerivation$ Trying to find path for: [Object: appletlib]
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/appletlib.c, builtAs -> y, generated -> false, objectFile -> appletlib, listName -> lib)
2012-01-10 11:52:06,789 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/appletlib.c, builtAs -> y, generated -> false, objectFile -> appletlib, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,789 DEBUG PCDerivation$ Expression of path for object occurrence libbb/appletlib.c: [TRUE]
2012-01-10 11:52:06,789 DEBUG PCDerivation$ Trying to find path for: [Object: ask_confirmation]
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ask_confirmation.c, builtAs -> y, generated -> false, objectFile -> ask_confirmation, listName -> lib)
2012-01-10 11:52:06,789 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ask_confirmation.c, builtAs -> y, generated -> false, objectFile -> ask_confirmation, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,789 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,790 DEBUG PCDerivation$ Expression of path for object occurrence libbb/ask_confirmation.c: [TRUE]
2012-01-10 11:52:06,790 DEBUG PCDerivation$ Trying to find path for: [Object: bb_askpass]
2012-01-10 11:52:06,790 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_askpass.c, builtAs -> y, generated -> false, objectFile -> bb_askpass, listName -> lib)
2012-01-10 11:52:06,790 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_askpass.c, builtAs -> y, generated -> false, objectFile -> bb_askpass, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,790 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,790 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,790 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_askpass.c: [TRUE]
2012-01-10 11:52:06,790 DEBUG PCDerivation$ Trying to find path for: [Object: bb_bswap_64]
2012-01-10 11:52:06,790 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_bswap_64.c, builtAs -> y, generated -> false, objectFile -> bb_bswap_64, listName -> lib)
2012-01-10 11:52:06,790 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_bswap_64.c, builtAs -> y, generated -> false, objectFile -> bb_bswap_64, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,790 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,790 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,790 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_bswap_64.c: [TRUE]
2012-01-10 11:52:06,790 DEBUG PCDerivation$ Trying to find path for: [Object: bb_do_delay]
2012-01-10 11:52:06,790 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_do_delay.c, builtAs -> y, generated -> false, objectFile -> bb_do_delay, listName -> lib)
2012-01-10 11:52:06,790 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_do_delay.c, builtAs -> y, generated -> false, objectFile -> bb_do_delay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,790 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,790 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,790 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_do_delay.c: [TRUE]
2012-01-10 11:52:06,790 DEBUG PCDerivation$ Trying to find path for: [Object: bb_pwd]
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_pwd.c, builtAs -> y, generated -> false, objectFile -> bb_pwd, listName -> lib)
2012-01-10 11:52:06,791 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_pwd.c, builtAs -> y, generated -> false, objectFile -> bb_pwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,791 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_pwd.c: [TRUE]
2012-01-10 11:52:06,791 DEBUG PCDerivation$ Trying to find path for: [Object: bb_qsort]
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_qsort.c, builtAs -> y, generated -> false, objectFile -> bb_qsort, listName -> lib)
2012-01-10 11:52:06,791 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_qsort.c, builtAs -> y, generated -> false, objectFile -> bb_qsort, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,791 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_qsort.c: [TRUE]
2012-01-10 11:52:06,791 DEBUG PCDerivation$ Trying to find path for: [Object: bb_strtonum]
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_strtonum.c, builtAs -> y, generated -> false, objectFile -> bb_strtonum, listName -> lib)
2012-01-10 11:52:06,791 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_strtonum.c, builtAs -> y, generated -> false, objectFile -> bb_strtonum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,791 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_strtonum.c: [TRUE]
2012-01-10 11:52:06,791 DEBUG PCDerivation$ Trying to find path for: [Object: change_identity]
2012-01-10 11:52:06,791 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/change_identity.c, builtAs -> y, generated -> false, objectFile -> change_identity, listName -> lib)
2012-01-10 11:52:06,792 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/change_identity.c, builtAs -> y, generated -> false, objectFile -> change_identity, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,792 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,792 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,792 DEBUG PCDerivation$ Expression of path for object occurrence libbb/change_identity.c: [TRUE]
2012-01-10 11:52:06,792 DEBUG PCDerivation$ Trying to find path for: [Object: chomp]
2012-01-10 11:52:06,792 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/chomp.c, builtAs -> y, generated -> false, objectFile -> chomp, listName -> lib)
2012-01-10 11:52:06,792 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/chomp.c, builtAs -> y, generated -> false, objectFile -> chomp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,792 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,792 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,792 DEBUG PCDerivation$ Expression of path for object occurrence libbb/chomp.c: [TRUE]
2012-01-10 11:52:06,792 DEBUG PCDerivation$ Trying to find path for: [Object: compare_string_array]
2012-01-10 11:52:06,792 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/compare_string_array.c, builtAs -> y, generated -> false, objectFile -> compare_string_array, listName -> lib)
2012-01-10 11:52:06,792 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/compare_string_array.c, builtAs -> y, generated -> false, objectFile -> compare_string_array, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,792 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,792 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,792 DEBUG PCDerivation$ Expression of path for object occurrence libbb/compare_string_array.c: [TRUE]
2012-01-10 11:52:06,792 DEBUG PCDerivation$ Trying to find path for: [Object: concat_path_file]
2012-01-10 11:52:06,792 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_path_file.c, builtAs -> y, generated -> false, objectFile -> concat_path_file, listName -> lib)
2012-01-10 11:52:06,793 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_path_file.c, builtAs -> y, generated -> false, objectFile -> concat_path_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,793 DEBUG PCDerivation$ Expression of path for object occurrence libbb/concat_path_file.c: [TRUE]
2012-01-10 11:52:06,793 DEBUG PCDerivation$ Trying to find path for: [Object: concat_subpath_file]
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_subpath_file.c, builtAs -> y, generated -> false, objectFile -> concat_subpath_file, listName -> lib)
2012-01-10 11:52:06,793 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_subpath_file.c, builtAs -> y, generated -> false, objectFile -> concat_subpath_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,793 DEBUG PCDerivation$ Expression of path for object occurrence libbb/concat_subpath_file.c: [TRUE]
2012-01-10 11:52:06,793 DEBUG PCDerivation$ Trying to find path for: [Object: copy_file]
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copy_file.c, builtAs -> y, generated -> false, objectFile -> copy_file, listName -> lib)
2012-01-10 11:52:06,793 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copy_file.c, builtAs -> y, generated -> false, objectFile -> copy_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,793 DEBUG PCDerivation$ Expression of path for object occurrence libbb/copy_file.c: [TRUE]
2012-01-10 11:52:06,793 DEBUG PCDerivation$ Trying to find path for: [Object: copyfd]
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copyfd.c, builtAs -> y, generated -> false, objectFile -> copyfd, listName -> lib)
2012-01-10 11:52:06,793 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copyfd.c, builtAs -> y, generated -> false, objectFile -> copyfd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,793 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,794 DEBUG PCDerivation$ Expression of path for object occurrence libbb/copyfd.c: [TRUE]
2012-01-10 11:52:06,794 DEBUG PCDerivation$ Trying to find path for: [Object: crc32]
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/crc32.c, builtAs -> y, generated -> false, objectFile -> crc32, listName -> lib)
2012-01-10 11:52:06,794 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/crc32.c, builtAs -> y, generated -> false, objectFile -> crc32, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,794 DEBUG PCDerivation$ Expression of path for object occurrence libbb/crc32.c: [TRUE]
2012-01-10 11:52:06,794 DEBUG PCDerivation$ Trying to find path for: [Object: create_icmp6_socket]
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp6_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp6_socket, listName -> lib)
2012-01-10 11:52:06,794 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp6_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp6_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,794 DEBUG PCDerivation$ Expression of path for object occurrence libbb/create_icmp6_socket.c: [TRUE]
2012-01-10 11:52:06,794 DEBUG PCDerivation$ Trying to find path for: [Object: create_icmp_socket]
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp_socket, listName -> lib)
2012-01-10 11:52:06,794 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,794 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,795 DEBUG PCDerivation$ Expression of path for object occurrence libbb/create_icmp_socket.c: [TRUE]
2012-01-10 11:52:06,795 DEBUG PCDerivation$ Trying to find path for: [Object: default_error_retval]
2012-01-10 11:52:06,795 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/default_error_retval.c, builtAs -> y, generated -> false, objectFile -> default_error_retval, listName -> lib)
2012-01-10 11:52:06,795 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/default_error_retval.c, builtAs -> y, generated -> false, objectFile -> default_error_retval, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,795 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,795 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,795 DEBUG PCDerivation$ Expression of path for object occurrence libbb/default_error_retval.c: [TRUE]
2012-01-10 11:52:06,795 DEBUG PCDerivation$ Trying to find path for: [Object: device_open]
2012-01-10 11:52:06,795 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/device_open.c, builtAs -> y, generated -> false, objectFile -> device_open, listName -> lib)
2012-01-10 11:52:06,795 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/device_open.c, builtAs -> y, generated -> false, objectFile -> device_open, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,795 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,795 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,795 DEBUG PCDerivation$ Expression of path for object occurrence libbb/device_open.c: [TRUE]
2012-01-10 11:52:06,795 DEBUG PCDerivation$ Trying to find path for: [Object: dump]
2012-01-10 11:52:06,795 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/dump.c, builtAs -> y, generated -> false, objectFile -> dump, listName -> lib)
2012-01-10 11:52:06,795 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/dump.c, builtAs -> y, generated -> false, objectFile -> dump, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,795 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,795 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,795 DEBUG PCDerivation$ Expression of path for object occurrence libbb/dump.c: [TRUE]
2012-01-10 11:52:06,796 DEBUG PCDerivation$ Trying to find path for: [Object: execable]
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/execable.c, builtAs -> y, generated -> false, objectFile -> execable, listName -> lib)
2012-01-10 11:52:06,796 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/execable.c, builtAs -> y, generated -> false, objectFile -> execable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,796 DEBUG PCDerivation$ Expression of path for object occurrence libbb/execable.c: [TRUE]
2012-01-10 11:52:06,796 DEBUG PCDerivation$ Trying to find path for: [Object: fclose_nonstdin]
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fclose_nonstdin.c, builtAs -> y, generated -> false, objectFile -> fclose_nonstdin, listName -> lib)
2012-01-10 11:52:06,796 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fclose_nonstdin.c, builtAs -> y, generated -> false, objectFile -> fclose_nonstdin, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,796 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fclose_nonstdin.c: [TRUE]
2012-01-10 11:52:06,796 DEBUG PCDerivation$ Trying to find path for: [Object: fflush_stdout_and_exit]
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fflush_stdout_and_exit.c, builtAs -> y, generated -> false, objectFile -> fflush_stdout_and_exit, listName -> lib)
2012-01-10 11:52:06,796 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fflush_stdout_and_exit.c, builtAs -> y, generated -> false, objectFile -> fflush_stdout_and_exit, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,796 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fflush_stdout_and_exit.c: [TRUE]
2012-01-10 11:52:06,796 DEBUG PCDerivation$ Trying to find path for: [Object: fgets_str]
2012-01-10 11:52:06,796 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fgets_str.c, builtAs -> y, generated -> false, objectFile -> fgets_str, listName -> lib)
2012-01-10 11:52:06,797 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fgets_str.c, builtAs -> y, generated -> false, objectFile -> fgets_str, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,797 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,797 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,797 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fgets_str.c: [TRUE]
2012-01-10 11:52:06,797 DEBUG PCDerivation$ Trying to find path for: [Object: find_pid_by_name]
2012-01-10 11:52:06,797 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_pid_by_name.c, builtAs -> y, generated -> false, objectFile -> find_pid_by_name, listName -> lib)
2012-01-10 11:52:06,797 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_pid_by_name.c, builtAs -> y, generated -> false, objectFile -> find_pid_by_name, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,797 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,797 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,797 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_pid_by_name.c: [TRUE]
2012-01-10 11:52:06,797 DEBUG PCDerivation$ Trying to find path for: [Object: find_root_device]
2012-01-10 11:52:06,797 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_root_device.c, builtAs -> y, generated -> false, objectFile -> find_root_device, listName -> lib)
2012-01-10 11:52:06,797 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_root_device.c, builtAs -> y, generated -> false, objectFile -> find_root_device, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,797 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,797 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,797 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_root_device.c: [TRUE]
2012-01-10 11:52:06,797 DEBUG PCDerivation$ Trying to find path for: [Object: full_write]
2012-01-10 11:52:06,797 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/full_write.c, builtAs -> y, generated -> false, objectFile -> full_write, listName -> lib)
2012-01-10 11:52:06,798 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/full_write.c, builtAs -> y, generated -> false, objectFile -> full_write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,798 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,798 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,798 DEBUG PCDerivation$ Expression of path for object occurrence libbb/full_write.c: [TRUE]
2012-01-10 11:52:06,798 DEBUG PCDerivation$ Trying to find path for: [Object: get_console]
2012-01-10 11:52:06,798 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_console.c, builtAs -> y, generated -> false, objectFile -> get_console, listName -> lib)
2012-01-10 11:52:06,798 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_console.c, builtAs -> y, generated -> false, objectFile -> get_console, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,798 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,798 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,798 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_console.c: [TRUE]
2012-01-10 11:52:06,798 DEBUG PCDerivation$ Trying to find path for: [Object: get_last_path_component]
2012-01-10 11:52:06,798 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_last_path_component.c, builtAs -> y, generated -> false, objectFile -> get_last_path_component, listName -> lib)
2012-01-10 11:52:06,798 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_last_path_component.c, builtAs -> y, generated -> false, objectFile -> get_last_path_component, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,798 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,798 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,798 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_last_path_component.c: [TRUE]
2012-01-10 11:52:06,798 DEBUG PCDerivation$ Trying to find path for: [Object: get_line_from_file]
2012-01-10 11:52:06,798 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_line_from_file.c, builtAs -> y, generated -> false, objectFile -> get_line_from_file, listName -> lib)
2012-01-10 11:52:06,799 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_line_from_file.c, builtAs -> y, generated -> false, objectFile -> get_line_from_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,799 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,799 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,799 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_line_from_file.c: [TRUE]
2012-01-10 11:52:06,799 DEBUG PCDerivation$ Trying to find path for: [Object: getopt32]
2012-01-10 11:52:06,799 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getopt32.c, builtAs -> y, generated -> false, objectFile -> getopt32, listName -> lib)
2012-01-10 11:52:06,799 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getopt32.c, builtAs -> y, generated -> false, objectFile -> getopt32, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,799 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,799 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,799 DEBUG PCDerivation$ Expression of path for object occurrence libbb/getopt32.c: [TRUE]
2012-01-10 11:52:06,799 DEBUG PCDerivation$ Trying to find path for: [Object: getpty]
2012-01-10 11:52:06,799 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getpty.c, builtAs -> y, generated -> false, objectFile -> getpty, listName -> lib)
2012-01-10 11:52:06,799 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getpty.c, builtAs -> y, generated -> false, objectFile -> getpty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,799 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,799 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,799 DEBUG PCDerivation$ Expression of path for object occurrence libbb/getpty.c: [TRUE]
2012-01-10 11:52:06,799 DEBUG PCDerivation$ Trying to find path for: [Object: get_volsize]
2012-01-10 11:52:06,799 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_volsize.c, builtAs -> y, generated -> false, objectFile -> get_volsize, listName -> lib)
2012-01-10 11:52:06,800 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_volsize.c, builtAs -> y, generated -> false, objectFile -> get_volsize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,800 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,800 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,800 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_volsize.c: [TRUE]
2012-01-10 11:52:06,800 DEBUG PCDerivation$ Trying to find path for: [Object: herror_msg]
2012-01-10 11:52:06,800 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/herror_msg.c, builtAs -> y, generated -> false, objectFile -> herror_msg, listName -> lib)
2012-01-10 11:52:06,800 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/herror_msg.c, builtAs -> y, generated -> false, objectFile -> herror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,800 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,800 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,800 DEBUG PCDerivation$ Expression of path for object occurrence libbb/herror_msg.c: [TRUE]
2012-01-10 11:52:06,800 DEBUG PCDerivation$ Trying to find path for: [Object: human_readable]
2012-01-10 11:52:06,800 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/human_readable.c, builtAs -> y, generated -> false, objectFile -> human_readable, listName -> lib)
2012-01-10 11:52:06,800 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/human_readable.c, builtAs -> y, generated -> false, objectFile -> human_readable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,800 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,800 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,800 DEBUG PCDerivation$ Expression of path for object occurrence libbb/human_readable.c: [TRUE]
2012-01-10 11:52:06,800 DEBUG PCDerivation$ Trying to find path for: [Object: inet_common]
2012-01-10 11:52:06,800 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inet_common.c, builtAs -> y, generated -> false, objectFile -> inet_common, listName -> lib)
2012-01-10 11:52:06,800 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inet_common.c, builtAs -> y, generated -> false, objectFile -> inet_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,801 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inet_common.c: [TRUE]
2012-01-10 11:52:06,801 DEBUG PCDerivation$ Trying to find path for: [Object: info_msg]
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/info_msg.c, builtAs -> y, generated -> false, objectFile -> info_msg, listName -> lib)
2012-01-10 11:52:06,801 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/info_msg.c, builtAs -> y, generated -> false, objectFile -> info_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,801 DEBUG PCDerivation$ Expression of path for object occurrence libbb/info_msg.c: [TRUE]
2012-01-10 11:52:06,801 DEBUG PCDerivation$ Trying to find path for: [Object: inode_hash]
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inode_hash.c, builtAs -> y, generated -> false, objectFile -> inode_hash, listName -> lib)
2012-01-10 11:52:06,801 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inode_hash.c, builtAs -> y, generated -> false, objectFile -> inode_hash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,801 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inode_hash.c: [TRUE]
2012-01-10 11:52:06,801 DEBUG PCDerivation$ Trying to find path for: [Object: isdirectory]
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/isdirectory.c, builtAs -> y, generated -> false, objectFile -> isdirectory, listName -> lib)
2012-01-10 11:52:06,801 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/isdirectory.c, builtAs -> y, generated -> false, objectFile -> isdirectory, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,801 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,802 DEBUG PCDerivation$ Expression of path for object occurrence libbb/isdirectory.c: [TRUE]
2012-01-10 11:52:06,802 DEBUG PCDerivation$ Trying to find path for: [Object: kernel_version]
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/kernel_version.c, builtAs -> y, generated -> false, objectFile -> kernel_version, listName -> lib)
2012-01-10 11:52:06,802 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/kernel_version.c, builtAs -> y, generated -> false, objectFile -> kernel_version, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,802 DEBUG PCDerivation$ Expression of path for object occurrence libbb/kernel_version.c: [TRUE]
2012-01-10 11:52:06,802 DEBUG PCDerivation$ Trying to find path for: [Object: last_char_is]
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/last_char_is.c, builtAs -> y, generated -> false, objectFile -> last_char_is, listName -> lib)
2012-01-10 11:52:06,802 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/last_char_is.c, builtAs -> y, generated -> false, objectFile -> last_char_is, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,802 DEBUG PCDerivation$ Expression of path for object occurrence libbb/last_char_is.c: [TRUE]
2012-01-10 11:52:06,802 DEBUG PCDerivation$ Trying to find path for: [Object: lineedit]
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit.c, builtAs -> y, generated -> false, objectFile -> lineedit, listName -> lib)
2012-01-10 11:52:06,802 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit.c, builtAs -> y, generated -> false, objectFile -> lineedit, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,802 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,803 DEBUG PCDerivation$ Expression of path for object occurrence libbb/lineedit.c: [TRUE]
2012-01-10 11:52:06,803 DEBUG PCDerivation$ Trying to find path for: [Object: lineedit_ptr_hack]
2012-01-10 11:52:06,803 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit_ptr_hack.c, builtAs -> y, generated -> false, objectFile -> lineedit_ptr_hack, listName -> lib)
2012-01-10 11:52:06,803 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit_ptr_hack.c, builtAs -> y, generated -> false, objectFile -> lineedit_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,803 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,803 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,803 DEBUG PCDerivation$ Expression of path for object occurrence libbb/lineedit_ptr_hack.c: [TRUE]
2012-01-10 11:52:06,803 DEBUG PCDerivation$ Trying to find path for: [Object: llist]
2012-01-10 11:52:06,803 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/llist.c, builtAs -> y, generated -> false, objectFile -> llist, listName -> lib)
2012-01-10 11:52:06,803 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/llist.c, builtAs -> y, generated -> false, objectFile -> llist, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,803 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,803 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,803 DEBUG PCDerivation$ Expression of path for object occurrence libbb/llist.c: [TRUE]
2012-01-10 11:52:06,803 DEBUG PCDerivation$ Trying to find path for: [Object: login]
2012-01-10 11:52:06,803 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/login.c, builtAs -> y, generated -> false, objectFile -> login, listName -> lib)
2012-01-10 11:52:06,803 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/login.c, builtAs -> y, generated -> false, objectFile -> login, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,803 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,803 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,803 DEBUG PCDerivation$ Expression of path for object occurrence libbb/login.c: [TRUE]
2012-01-10 11:52:06,803 DEBUG PCDerivation$ Trying to find path for: [Object: make_directory]
2012-01-10 11:52:06,804 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/make_directory.c, builtAs -> y, generated -> false, objectFile -> make_directory, listName -> lib)
2012-01-10 11:52:06,804 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/make_directory.c, builtAs -> y, generated -> false, objectFile -> make_directory, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,804 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,804 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,804 DEBUG PCDerivation$ Expression of path for object occurrence libbb/make_directory.c: [TRUE]
2012-01-10 11:52:06,804 DEBUG PCDerivation$ Trying to find path for: [Object: makedev]
2012-01-10 11:52:06,804 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/makedev.c, builtAs -> y, generated -> false, objectFile -> makedev, listName -> lib)
2012-01-10 11:52:06,804 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/makedev.c, builtAs -> y, generated -> false, objectFile -> makedev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,804 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,804 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,804 DEBUG PCDerivation$ Expression of path for object occurrence libbb/makedev.c: [TRUE]
2012-01-10 11:52:06,804 DEBUG PCDerivation$ Trying to find path for: [Object: hash_md5_sha]
2012-01-10 11:52:06,804 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/hash_md5_sha.c, builtAs -> y, generated -> false, objectFile -> hash_md5_sha, listName -> lib)
2012-01-10 11:52:06,804 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/hash_md5_sha.c, builtAs -> y, generated -> false, objectFile -> hash_md5_sha, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,804 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,804 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,804 DEBUG PCDerivation$ Expression of path for object occurrence libbb/hash_md5_sha.c: [TRUE]
2012-01-10 11:52:06,804 DEBUG PCDerivation$ Trying to find path for: [Object: messages]
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/messages.c, builtAs -> y, generated -> false, objectFile -> messages, listName -> lib)
2012-01-10 11:52:06,805 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/messages.c, builtAs -> y, generated -> false, objectFile -> messages, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,805 DEBUG PCDerivation$ Expression of path for object occurrence libbb/messages.c: [TRUE]
2012-01-10 11:52:06,805 DEBUG PCDerivation$ Trying to find path for: [Object: mode_string]
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/mode_string.c, builtAs -> y, generated -> false, objectFile -> mode_string, listName -> lib)
2012-01-10 11:52:06,805 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/mode_string.c, builtAs -> y, generated -> false, objectFile -> mode_string, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,805 DEBUG PCDerivation$ Expression of path for object occurrence libbb/mode_string.c: [TRUE]
2012-01-10 11:52:06,805 DEBUG PCDerivation$ Trying to find path for: [Object: parse_mode]
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_mode.c, builtAs -> y, generated -> false, objectFile -> parse_mode, listName -> lib)
2012-01-10 11:52:06,805 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_mode.c, builtAs -> y, generated -> false, objectFile -> parse_mode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,805 DEBUG PCDerivation$ Expression of path for object occurrence libbb/parse_mode.c: [TRUE]
2012-01-10 11:52:06,805 DEBUG PCDerivation$ Trying to find path for: [Object: perror_msg]
2012-01-10 11:52:06,805 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_msg.c, builtAs -> y, generated -> false, objectFile -> perror_msg, listName -> lib)
2012-01-10 11:52:06,806 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_msg.c, builtAs -> y, generated -> false, objectFile -> perror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,806 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,806 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,806 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_msg.c: [TRUE]
2012-01-10 11:52:06,806 DEBUG PCDerivation$ Trying to find path for: [Object: perror_nomsg]
2012-01-10 11:52:06,806 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg, listName -> lib)
2012-01-10 11:52:06,806 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,806 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,806 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,806 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_nomsg.c: [TRUE]
2012-01-10 11:52:06,806 DEBUG PCDerivation$ Trying to find path for: [Object: perror_nomsg_and_die]
2012-01-10 11:52:06,806 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg_and_die.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg_and_die, listName -> lib)
2012-01-10 11:52:06,806 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg_and_die.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg_and_die, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,806 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,806 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,806 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_nomsg_and_die.c: [TRUE]
2012-01-10 11:52:06,806 DEBUG PCDerivation$ Trying to find path for: [Object: pidfile]
2012-01-10 11:52:06,806 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/pidfile.c, builtAs -> y, generated -> false, objectFile -> pidfile, listName -> lib)
2012-01-10 11:52:06,806 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/pidfile.c, builtAs -> y, generated -> false, objectFile -> pidfile, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,807 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,807 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,807 DEBUG PCDerivation$ Expression of path for object occurrence libbb/pidfile.c: [TRUE]
2012-01-10 11:52:06,807 DEBUG PCDerivation$ Trying to find path for: [Object: platform]
2012-01-10 11:52:06,807 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/platform.c, builtAs -> y, generated -> false, objectFile -> platform, listName -> lib)
2012-01-10 11:52:06,807 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/platform.c, builtAs -> y, generated -> false, objectFile -> platform, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,807 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,807 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,807 DEBUG PCDerivation$ Expression of path for object occurrence libbb/platform.c: [TRUE]
2012-01-10 11:52:06,807 DEBUG PCDerivation$ Trying to find path for: [Object: printable]
2012-01-10 11:52:06,807 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable.c, builtAs -> y, generated -> false, objectFile -> printable, listName -> lib)
2012-01-10 11:52:06,807 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable.c, builtAs -> y, generated -> false, objectFile -> printable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,807 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,807 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,807 DEBUG PCDerivation$ Expression of path for object occurrence libbb/printable.c: [TRUE]
2012-01-10 11:52:06,807 DEBUG PCDerivation$ Trying to find path for: [Object: printable_string]
2012-01-10 11:52:06,807 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable_string.c, builtAs -> y, generated -> false, objectFile -> printable_string, listName -> lib)
2012-01-10 11:52:06,807 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable_string.c, builtAs -> y, generated -> false, objectFile -> printable_string, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,808 DEBUG PCDerivation$ Expression of path for object occurrence libbb/printable_string.c: [TRUE]
2012-01-10 11:52:06,808 DEBUG PCDerivation$ Trying to find path for: [Object: print_flags]
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/print_flags.c, builtAs -> y, generated -> false, objectFile -> print_flags, listName -> lib)
2012-01-10 11:52:06,808 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/print_flags.c, builtAs -> y, generated -> false, objectFile -> print_flags, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,808 DEBUG PCDerivation$ Expression of path for object occurrence libbb/print_flags.c: [TRUE]
2012-01-10 11:52:06,808 DEBUG PCDerivation$ Trying to find path for: [Object: process_escape_sequence]
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/process_escape_sequence.c, builtAs -> y, generated -> false, objectFile -> process_escape_sequence, listName -> lib)
2012-01-10 11:52:06,808 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/process_escape_sequence.c, builtAs -> y, generated -> false, objectFile -> process_escape_sequence, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,808 DEBUG PCDerivation$ Expression of path for object occurrence libbb/process_escape_sequence.c: [TRUE]
2012-01-10 11:52:06,808 DEBUG PCDerivation$ Trying to find path for: [Object: procps]
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/procps.c, builtAs -> y, generated -> false, objectFile -> procps, listName -> lib)
2012-01-10 11:52:06,808 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/procps.c, builtAs -> y, generated -> false, objectFile -> procps, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,808 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,809 DEBUG PCDerivation$ Expression of path for object occurrence libbb/procps.c: [TRUE]
2012-01-10 11:52:06,809 DEBUG PCDerivation$ Trying to find path for: [Object: progress]
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/progress.c, builtAs -> y, generated -> false, objectFile -> progress, listName -> lib)
2012-01-10 11:52:06,809 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/progress.c, builtAs -> y, generated -> false, objectFile -> progress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,809 DEBUG PCDerivation$ Expression of path for object occurrence libbb/progress.c: [TRUE]
2012-01-10 11:52:06,809 DEBUG PCDerivation$ Trying to find path for: [Object: ptr_to_globals]
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ptr_to_globals.c, builtAs -> y, generated -> false, objectFile -> ptr_to_globals, listName -> lib)
2012-01-10 11:52:06,809 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ptr_to_globals.c, builtAs -> y, generated -> false, objectFile -> ptr_to_globals, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,809 DEBUG PCDerivation$ Expression of path for object occurrence libbb/ptr_to_globals.c: [TRUE]
2012-01-10 11:52:06,809 DEBUG PCDerivation$ Trying to find path for: [Object: read]
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read.c, builtAs -> y, generated -> false, objectFile -> read, listName -> lib)
2012-01-10 11:52:06,809 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read.c, builtAs -> y, generated -> false, objectFile -> read, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,809 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,810 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read.c: [TRUE]
2012-01-10 11:52:06,810 DEBUG PCDerivation$ Trying to find path for: [Object: read_printf]
2012-01-10 11:52:06,810 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_printf.c, builtAs -> y, generated -> false, objectFile -> read_printf, listName -> lib)
2012-01-10 11:52:06,810 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_printf.c, builtAs -> y, generated -> false, objectFile -> read_printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,810 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,810 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,810 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read_printf.c: [TRUE]
2012-01-10 11:52:06,810 DEBUG PCDerivation$ Trying to find path for: [Object: read_key]
2012-01-10 11:52:06,810 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_key.c, builtAs -> y, generated -> false, objectFile -> read_key, listName -> lib)
2012-01-10 11:52:06,810 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_key.c, builtAs -> y, generated -> false, objectFile -> read_key, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,810 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,810 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,810 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read_key.c: [TRUE]
2012-01-10 11:52:06,810 DEBUG PCDerivation$ Trying to find path for: [Object: recursive_action]
2012-01-10 11:52:06,810 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/recursive_action.c, builtAs -> y, generated -> false, objectFile -> recursive_action, listName -> lib)
2012-01-10 11:52:06,810 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/recursive_action.c, builtAs -> y, generated -> false, objectFile -> recursive_action, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,810 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,810 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,810 DEBUG PCDerivation$ Expression of path for object occurrence libbb/recursive_action.c: [TRUE]
2012-01-10 11:52:06,811 DEBUG PCDerivation$ Trying to find path for: [Object: remove_file]
2012-01-10 11:52:06,811 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/remove_file.c, builtAs -> y, generated -> false, objectFile -> remove_file, listName -> lib)
2012-01-10 11:52:06,811 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/remove_file.c, builtAs -> y, generated -> false, objectFile -> remove_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,811 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,811 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,811 DEBUG PCDerivation$ Expression of path for object occurrence libbb/remove_file.c: [TRUE]
2012-01-10 11:52:06,811 DEBUG PCDerivation$ Trying to find path for: [Object: run_shell]
2012-01-10 11:52:06,811 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/run_shell.c, builtAs -> y, generated -> false, objectFile -> run_shell, listName -> lib)
2012-01-10 11:52:06,811 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/run_shell.c, builtAs -> y, generated -> false, objectFile -> run_shell, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,811 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,811 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,811 DEBUG PCDerivation$ Expression of path for object occurrence libbb/run_shell.c: [TRUE]
2012-01-10 11:52:06,811 DEBUG PCDerivation$ Trying to find path for: [Object: safe_gethostname]
2012-01-10 11:52:06,811 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_gethostname.c, builtAs -> y, generated -> false, objectFile -> safe_gethostname, listName -> lib)
2012-01-10 11:52:06,811 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_gethostname.c, builtAs -> y, generated -> false, objectFile -> safe_gethostname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,811 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,811 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,811 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_gethostname.c: [TRUE]
2012-01-10 11:52:06,811 DEBUG PCDerivation$ Trying to find path for: [Object: safe_poll]
2012-01-10 11:52:06,812 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_poll.c, builtAs -> y, generated -> false, objectFile -> safe_poll, listName -> lib)
2012-01-10 11:52:06,812 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_poll.c, builtAs -> y, generated -> false, objectFile -> safe_poll, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,812 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,812 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,812 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_poll.c: [TRUE]
2012-01-10 11:52:06,812 DEBUG PCDerivation$ Trying to find path for: [Object: safe_strncpy]
2012-01-10 11:52:06,812 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_strncpy.c, builtAs -> y, generated -> false, objectFile -> safe_strncpy, listName -> lib)
2012-01-10 11:52:06,812 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_strncpy.c, builtAs -> y, generated -> false, objectFile -> safe_strncpy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,812 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,812 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,812 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_strncpy.c: [TRUE]
2012-01-10 11:52:06,812 DEBUG PCDerivation$ Trying to find path for: [Object: safe_write]
2012-01-10 11:52:06,812 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_write.c, builtAs -> y, generated -> false, objectFile -> safe_write, listName -> lib)
2012-01-10 11:52:06,812 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_write.c, builtAs -> y, generated -> false, objectFile -> safe_write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,812 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,812 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,812 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_write.c: [TRUE]
2012-01-10 11:52:06,812 DEBUG PCDerivation$ Trying to find path for: [Object: setup_environment]
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/setup_environment.c, builtAs -> y, generated -> false, objectFile -> setup_environment, listName -> lib)
2012-01-10 11:52:06,813 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/setup_environment.c, builtAs -> y, generated -> false, objectFile -> setup_environment, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,813 DEBUG PCDerivation$ Expression of path for object occurrence libbb/setup_environment.c: [TRUE]
2012-01-10 11:52:06,813 DEBUG PCDerivation$ Trying to find path for: [Object: signals]
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/signals.c, builtAs -> y, generated -> false, objectFile -> signals, listName -> lib)
2012-01-10 11:52:06,813 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/signals.c, builtAs -> y, generated -> false, objectFile -> signals, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,813 DEBUG PCDerivation$ Expression of path for object occurrence libbb/signals.c: [TRUE]
2012-01-10 11:52:06,813 DEBUG PCDerivation$ Trying to find path for: [Object: simplify_path]
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/simplify_path.c, builtAs -> y, generated -> false, objectFile -> simplify_path, listName -> lib)
2012-01-10 11:52:06,813 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/simplify_path.c, builtAs -> y, generated -> false, objectFile -> simplify_path, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,813 DEBUG PCDerivation$ Expression of path for object occurrence libbb/simplify_path.c: [TRUE]
2012-01-10 11:52:06,813 DEBUG PCDerivation$ Trying to find path for: [Object: single_argv]
2012-01-10 11:52:06,813 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/single_argv.c, builtAs -> y, generated -> false, objectFile -> single_argv, listName -> lib)
2012-01-10 11:52:06,814 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/single_argv.c, builtAs -> y, generated -> false, objectFile -> single_argv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,814 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,814 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,814 DEBUG PCDerivation$ Expression of path for object occurrence libbb/single_argv.c: [TRUE]
2012-01-10 11:52:06,814 DEBUG PCDerivation$ Trying to find path for: [Object: skip_whitespace]
2012-01-10 11:52:06,814 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/skip_whitespace.c, builtAs -> y, generated -> false, objectFile -> skip_whitespace, listName -> lib)
2012-01-10 11:52:06,814 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/skip_whitespace.c, builtAs -> y, generated -> false, objectFile -> skip_whitespace, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,814 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,814 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,814 DEBUG PCDerivation$ Expression of path for object occurrence libbb/skip_whitespace.c: [TRUE]
2012-01-10 11:52:06,814 DEBUG PCDerivation$ Trying to find path for: [Object: speed_table]
2012-01-10 11:52:06,814 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/speed_table.c, builtAs -> y, generated -> false, objectFile -> speed_table, listName -> lib)
2012-01-10 11:52:06,814 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/speed_table.c, builtAs -> y, generated -> false, objectFile -> speed_table, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,814 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,814 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,814 DEBUG PCDerivation$ Expression of path for object occurrence libbb/speed_table.c: [TRUE]
2012-01-10 11:52:06,814 DEBUG PCDerivation$ Trying to find path for: [Object: str_tolower]
2012-01-10 11:52:06,814 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/str_tolower.c, builtAs -> y, generated -> false, objectFile -> str_tolower, listName -> lib)
2012-01-10 11:52:06,815 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/str_tolower.c, builtAs -> y, generated -> false, objectFile -> str_tolower, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,815 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,815 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,815 DEBUG PCDerivation$ Expression of path for object occurrence libbb/str_tolower.c: [TRUE]
2012-01-10 11:52:06,815 DEBUG PCDerivation$ Trying to find path for: [Object: strrstr]
2012-01-10 11:52:06,815 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/strrstr.c, builtAs -> y, generated -> false, objectFile -> strrstr, listName -> lib)
2012-01-10 11:52:06,815 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/strrstr.c, builtAs -> y, generated -> false, objectFile -> strrstr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,815 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,815 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,815 DEBUG PCDerivation$ Expression of path for object occurrence libbb/strrstr.c: [TRUE]
2012-01-10 11:52:06,815 DEBUG PCDerivation$ Trying to find path for: [Object: time]
2012-01-10 11:52:06,815 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/time.c, builtAs -> y, generated -> false, objectFile -> time, listName -> lib)
2012-01-10 11:52:06,815 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/time.c, builtAs -> y, generated -> false, objectFile -> time, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,815 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,815 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,815 DEBUG PCDerivation$ Expression of path for object occurrence libbb/time.c: [TRUE]
2012-01-10 11:52:06,815 DEBUG PCDerivation$ Trying to find path for: [Object: trim]
2012-01-10 11:52:06,815 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/trim.c, builtAs -> y, generated -> false, objectFile -> trim, listName -> lib)
2012-01-10 11:52:06,816 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/trim.c, builtAs -> y, generated -> false, objectFile -> trim, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,816 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,816 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,816 DEBUG PCDerivation$ Expression of path for object occurrence libbb/trim.c: [TRUE]
2012-01-10 11:52:06,816 DEBUG PCDerivation$ Trying to find path for: [Object: u_signal_names]
2012-01-10 11:52:06,816 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/u_signal_names.c, builtAs -> y, generated -> false, objectFile -> u_signal_names, listName -> lib)
2012-01-10 11:52:06,816 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/u_signal_names.c, builtAs -> y, generated -> false, objectFile -> u_signal_names, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,816 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,816 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,816 DEBUG PCDerivation$ Expression of path for object occurrence libbb/u_signal_names.c: [TRUE]
2012-01-10 11:52:06,816 DEBUG PCDerivation$ Trying to find path for: [Object: uuencode]
2012-01-10 11:52:06,816 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/uuencode.c, builtAs -> y, generated -> false, objectFile -> uuencode, listName -> lib)
2012-01-10 11:52:06,816 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/uuencode.c, builtAs -> y, generated -> false, objectFile -> uuencode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,816 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,816 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,816 DEBUG PCDerivation$ Expression of path for object occurrence libbb/uuencode.c: [TRUE]
2012-01-10 11:52:06,816 DEBUG PCDerivation$ Trying to find path for: [Object: vdprintf]
2012-01-10 11:52:06,816 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vdprintf.c, builtAs -> y, generated -> false, objectFile -> vdprintf, listName -> lib)
2012-01-10 11:52:06,816 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vdprintf.c, builtAs -> y, generated -> false, objectFile -> vdprintf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,817 DEBUG PCDerivation$ Expression of path for object occurrence libbb/vdprintf.c: [TRUE]
2012-01-10 11:52:06,817 DEBUG PCDerivation$ Trying to find path for: [Object: verror_msg]
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/verror_msg.c, builtAs -> y, generated -> false, objectFile -> verror_msg, listName -> lib)
2012-01-10 11:52:06,817 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/verror_msg.c, builtAs -> y, generated -> false, objectFile -> verror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,817 DEBUG PCDerivation$ Expression of path for object occurrence libbb/verror_msg.c: [TRUE]
2012-01-10 11:52:06,817 DEBUG PCDerivation$ Trying to find path for: [Object: vfork_daemon_rexec]
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vfork_daemon_rexec.c, builtAs -> y, generated -> false, objectFile -> vfork_daemon_rexec, listName -> lib)
2012-01-10 11:52:06,817 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vfork_daemon_rexec.c, builtAs -> y, generated -> false, objectFile -> vfork_daemon_rexec, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,817 DEBUG PCDerivation$ Expression of path for object occurrence libbb/vfork_daemon_rexec.c: [TRUE]
2012-01-10 11:52:06,817 DEBUG PCDerivation$ Trying to find path for: [Object: warn_ignoring_args]
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/warn_ignoring_args.c, builtAs -> y, generated -> false, objectFile -> warn_ignoring_args, listName -> lib)
2012-01-10 11:52:06,817 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/warn_ignoring_args.c, builtAs -> y, generated -> false, objectFile -> warn_ignoring_args, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,817 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,818 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,818 DEBUG PCDerivation$ Expression of path for object occurrence libbb/warn_ignoring_args.c: [TRUE]
2012-01-10 11:52:06,818 DEBUG PCDerivation$ Trying to find path for: [Object: wfopen]
2012-01-10 11:52:06,818 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen.c, builtAs -> y, generated -> false, objectFile -> wfopen, listName -> lib)
2012-01-10 11:52:06,818 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen.c, builtAs -> y, generated -> false, objectFile -> wfopen, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,818 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,818 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,818 DEBUG PCDerivation$ Expression of path for object occurrence libbb/wfopen.c: [TRUE]
2012-01-10 11:52:06,818 DEBUG PCDerivation$ Trying to find path for: [Object: wfopen_input]
2012-01-10 11:52:06,822 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen_input.c, builtAs -> y, generated -> false, objectFile -> wfopen_input, listName -> lib)
2012-01-10 11:52:06,822 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen_input.c, builtAs -> y, generated -> false, objectFile -> wfopen_input, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,822 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,822 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,822 DEBUG PCDerivation$ Expression of path for object occurrence libbb/wfopen_input.c: [TRUE]
2012-01-10 11:52:06,822 DEBUG PCDerivation$ Trying to find path for: [Object: write]
2012-01-10 11:52:06,822 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/write.c, builtAs -> y, generated -> false, objectFile -> write, listName -> lib)
2012-01-10 11:52:06,822 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/write.c, builtAs -> y, generated -> false, objectFile -> write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,823 DEBUG PCDerivation$ Expression of path for object occurrence libbb/write.c: [TRUE]
2012-01-10 11:52:06,823 DEBUG PCDerivation$ Trying to find path for: [Object: xatonum]
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xatonum.c, builtAs -> y, generated -> false, objectFile -> xatonum, listName -> lib)
2012-01-10 11:52:06,823 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xatonum.c, builtAs -> y, generated -> false, objectFile -> xatonum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,823 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xatonum.c: [TRUE]
2012-01-10 11:52:06,823 DEBUG PCDerivation$ Trying to find path for: [Object: xconnect]
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xconnect.c, builtAs -> y, generated -> false, objectFile -> xconnect, listName -> lib)
2012-01-10 11:52:06,823 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xconnect.c, builtAs -> y, generated -> false, objectFile -> xconnect, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,823 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xconnect.c: [TRUE]
2012-01-10 11:52:06,823 DEBUG PCDerivation$ Trying to find path for: [Object: xfuncs]
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs.c, builtAs -> y, generated -> false, objectFile -> xfuncs, listName -> lib)
2012-01-10 11:52:06,823 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs.c, builtAs -> y, generated -> false, objectFile -> xfuncs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,823 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,823 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfuncs.c: [TRUE]
2012-01-10 11:52:06,824 DEBUG PCDerivation$ Trying to find path for: [Object: xfuncs_printf]
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs_printf.c, builtAs -> y, generated -> false, objectFile -> xfuncs_printf, listName -> lib)
2012-01-10 11:52:06,824 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs_printf.c, builtAs -> y, generated -> false, objectFile -> xfuncs_printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,824 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfuncs_printf.c: [TRUE]
2012-01-10 11:52:06,824 DEBUG PCDerivation$ Trying to find path for: [Object: xfunc_die]
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfunc_die.c, builtAs -> y, generated -> false, objectFile -> xfunc_die, listName -> lib)
2012-01-10 11:52:06,824 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfunc_die.c, builtAs -> y, generated -> false, objectFile -> xfunc_die, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,824 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfunc_die.c: [TRUE]
2012-01-10 11:52:06,824 DEBUG PCDerivation$ Trying to find path for: [Object: xgetcwd]
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgetcwd.c, builtAs -> y, generated -> false, objectFile -> xgetcwd, listName -> lib)
2012-01-10 11:52:06,824 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgetcwd.c, builtAs -> y, generated -> false, objectFile -> xgetcwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,824 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xgetcwd.c: [TRUE]
2012-01-10 11:52:06,824 DEBUG PCDerivation$ Trying to find path for: [Object: xgethostbyname]
2012-01-10 11:52:06,824 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgethostbyname.c, builtAs -> y, generated -> false, objectFile -> xgethostbyname, listName -> lib)
2012-01-10 11:52:06,825 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgethostbyname.c, builtAs -> y, generated -> false, objectFile -> xgethostbyname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,825 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xgethostbyname.c: [TRUE]
2012-01-10 11:52:06,825 DEBUG PCDerivation$ Trying to find path for: [Object: xreadlink]
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xreadlink.c, builtAs -> y, generated -> false, objectFile -> xreadlink, listName -> lib)
2012-01-10 11:52:06,825 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xreadlink.c, builtAs -> y, generated -> false, objectFile -> xreadlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,825 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xreadlink.c: [TRUE]
2012-01-10 11:52:06,825 DEBUG PCDerivation$ Trying to find path for: [Object: xrealloc_vector]
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xrealloc_vector.c, builtAs -> y, generated -> false, objectFile -> xrealloc_vector, listName -> lib)
2012-01-10 11:52:06,825 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xrealloc_vector.c, builtAs -> y, generated -> false, objectFile -> xrealloc_vector, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,825 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xrealloc_vector.c: [TRUE]
2012-01-10 11:52:06,825 DEBUG PCDerivation$ Trying to find path for: [Object: match_fstype]
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m")), sourceFile -> libbb/match_fstype.c, generated -> false, objectFile -> match_fstype, listName -> lib)
2012-01-10 11:52:06,825 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m")), sourceFile -> libbb/match_fstype.c, generated -> false, objectFile -> match_fstype, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,825 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,826 DEBUG PCDerivation$ Expression of path for object occurrence libbb/match_fstype.c: ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m"))
2012-01-10 11:52:06,826 DEBUG PCDerivation$ Trying to find path for: [Object: utmp]
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m")), sourceFile -> libbb/utmp.c, generated -> false, objectFile -> utmp, listName -> lib)
2012-01-10 11:52:06,826 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m")), sourceFile -> libbb/utmp.c, generated -> false, objectFile -> utmp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,826 DEBUG PCDerivation$ Expression of path for object occurrence libbb/utmp.c: ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m"))
2012-01-10 11:52:06,826 DEBUG PCDerivation$ Trying to find path for: [Object: selinux_common]
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m")), sourceFile -> libbb/selinux_common.c, generated -> false, objectFile -> selinux_common, listName -> lib)
2012-01-10 11:52:06,826 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m")), sourceFile -> libbb/selinux_common.c, generated -> false, objectFile -> selinux_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,826 DEBUG PCDerivation$ Expression of path for object occurrence libbb/selinux_common.c: ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m"))
2012-01-10 11:52:06,826 DEBUG PCDerivation$ Trying to find path for: [Object: mtab]
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m")), sourceFile -> libbb/mtab.c, generated -> false, objectFile -> mtab, listName -> lib)
2012-01-10 11:52:06,826 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m")), sourceFile -> libbb/mtab.c, generated -> false, objectFile -> mtab, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,826 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,826 DEBUG PCDerivation$ Expression of path for object occurrence libbb/mtab.c: ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m"))
2012-01-10 11:52:06,827 DEBUG PCDerivation$ Trying to find path for: [Object: unicode]
2012-01-10 11:52:06,827 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m")), sourceFile -> libbb/unicode.c, generated -> false, objectFile -> unicode, listName -> lib)
2012-01-10 11:52:06,827 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m")), sourceFile -> libbb/unicode.c, generated -> false, objectFile -> unicode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,827 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,827 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,827 DEBUG PCDerivation$ Expression of path for object occurrence libbb/unicode.c: ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m"))
2012-01-10 11:52:06,827 DEBUG PCDerivation$ Trying to find path for: [Object: die_if_bad_username]
2012-01-10 11:52:06,827 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m")), sourceFile -> libbb/die_if_bad_username.c, generated -> false, objectFile -> die_if_bad_username, listName -> lib)
2012-01-10 11:52:06,827 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m")), sourceFile -> libbb/die_if_bad_username.c, generated -> false, objectFile -> die_if_bad_username, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,827 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,827 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,827 DEBUG PCDerivation$ Expression of path for object occurrence libbb/die_if_bad_username.c: ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m"))
2012-01-10 11:52:06,827 DEBUG PCDerivation$ Trying to find path for: [Object: udp_io]
2012-01-10 11:52:06,827 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))), sourceFile -> libbb/udp_io.c, generated -> false, objectFile -> udp_io, listName -> lib)
2012-01-10 11:52:06,827 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))), sourceFile -> libbb/udp_io.c, generated -> false, objectFile -> udp_io, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,827 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,827 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,827 DEBUG PCDerivation$ Expression of path for object occurrence libbb/udp_io.c: (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")))
2012-01-10 11:52:06,827 DEBUG PCDerivation$ Trying to find path for: [Object: loop]
2012-01-10 11:52:06,828 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m"))), sourceFile -> libbb/loop.c, generated -> false, objectFile -> loop, listName -> lib)
2012-01-10 11:52:06,828 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m"))), sourceFile -> libbb/loop.c, generated -> false, objectFile -> loop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,828 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,828 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,828 DEBUG PCDerivation$ Expression of path for object occurrence libbb/loop.c: (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m")))
2012-01-10 11:52:06,828 DEBUG PCDerivation$ Trying to find path for: [Object: update_passwd]
2012-01-10 11:52:06,828 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))), sourceFile -> libbb/update_passwd.c, generated -> false, objectFile -> update_passwd, listName -> lib)
2012-01-10 11:52:06,828 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))), sourceFile -> libbb/update_passwd.c, generated -> false, objectFile -> update_passwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,828 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,828 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,828 DEBUG PCDerivation$ Expression of path for object occurrence libbb/update_passwd.c: (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")))
2012-01-10 11:52:06,828 DEBUG PCDerivation$ Trying to find path for: [Object: pw_encrypt]
2012-01-10 11:52:06,828 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m"))), sourceFile -> libbb/pw_encrypt.c, generated -> false, objectFile -> pw_encrypt, listName -> lib)
2012-01-10 11:52:06,828 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m"))), sourceFile -> libbb/pw_encrypt.c, generated -> false, objectFile -> pw_encrypt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,828 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,828 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,829 DEBUG PCDerivation$ Expression of path for object occurrence libbb/pw_encrypt.c: (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m")))
2012-01-10 11:52:06,829 DEBUG PCDerivation$ Trying to find path for: [Object: obscure]
2012-01-10 11:52:06,829 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> libbb/obscure.c, generated -> false, objectFile -> obscure, listName -> lib)
2012-01-10 11:52:06,829 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> libbb/obscure.c, generated -> false, objectFile -> obscure, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,829 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,829 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,829 DEBUG PCDerivation$ Expression of path for object occurrence libbb/obscure.c: ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))
2012-01-10 11:52:06,829 DEBUG PCDerivation$ Trying to find path for: [Object: correct_password]
2012-01-10 11:52:06,829 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))), sourceFile -> libbb/correct_password.c, generated -> false, objectFile -> correct_password, listName -> lib)
2012-01-10 11:52:06,829 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))), sourceFile -> libbb/correct_password.c, generated -> false, objectFile -> correct_password, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,829 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,829 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,829 DEBUG PCDerivation$ Expression of path for object occurrence libbb/correct_password.c: ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")))
2012-01-10 11:52:06,829 DEBUG PCDerivation$ Trying to find path for: [Object: find_mount_point]
2012-01-10 11:52:06,829 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))), sourceFile -> libbb/find_mount_point.c, generated -> false, objectFile -> find_mount_point, listName -> lib)
2012-01-10 11:52:06,829 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))), sourceFile -> libbb/find_mount_point.c, generated -> false, objectFile -> find_mount_point, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,829 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,829 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,830 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_mount_point.c: (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")))
2012-01-10 11:52:06,830 DEBUG PCDerivation$ Trying to find path for: [Object: rtc]
2012-01-10 11:52:06,830 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))), sourceFile -> libbb/rtc.c, generated -> false, objectFile -> rtc, listName -> lib)
2012-01-10 11:52:06,830 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))), sourceFile -> libbb/rtc.c, generated -> false, objectFile -> rtc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,830 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,830 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,830 DEBUG PCDerivation$ Expression of path for object occurrence libbb/rtc.c: (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")))
2012-01-10 11:52:06,830 DEBUG PCDerivation$ Trying to find path for: [Object: get_cpu_count]
2012-01-10 11:52:06,830 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))), sourceFile -> libbb/get_cpu_count.c, generated -> false, objectFile -> get_cpu_count, listName -> lib)
2012-01-10 11:52:06,830 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))), sourceFile -> libbb/get_cpu_count.c, generated -> false, objectFile -> get_cpu_count, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,830 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,830 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,830 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_cpu_count.c: ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")))
2012-01-10 11:52:06,830 DEBUG PCDerivation$ Trying to find path for: [Object: inet_cksum]
2012-01-10 11:52:06,830 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> libbb/inet_cksum.c, generated -> false, objectFile -> inet_cksum, listName -> lib)
2012-01-10 11:52:06,830 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> libbb/inet_cksum.c, generated -> false, objectFile -> inet_cksum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,830 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,830 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,830 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inet_cksum.c: ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:52:06,830 DEBUG PCDerivation$ Trying to find path for: [Object: xregcomp]
2012-01-10 11:52:06,831 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m"))), sourceFile -> libbb/xregcomp.c, generated -> false, objectFile -> xregcomp, listName -> lib)
2012-01-10 11:52:06,831 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m"))), sourceFile -> libbb/xregcomp.c, generated -> false, objectFile -> xregcomp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,831 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:52:06,831 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,831 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xregcomp.c: (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m")))
2012-01-10 11:52:06,831 DEBUG PCDerivation$ Trying to find path for: [Object: uidgid_get]
2012-01-10 11:52:06,831 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libpwdgrp/uidgid_get.c, builtAs -> y, generated -> false, objectFile -> uidgid_get, listName -> lib)
2012-01-10 11:52:06,831 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libpwdgrp/uidgid_get.c, builtAs -> y, generated -> false, objectFile -> uidgid_get, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:52:06,831 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:52:06,831 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,831 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,831 DEBUG PCDerivation$ Expression of path for object occurrence libpwdgrp/uidgid_get.c: [TRUE]
2012-01-10 11:52:06,831 DEBUG PCDerivation$ Trying to find path for: [Object: pwd_grp]
2012-01-10 11:52:06,831 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m")), sourceFile -> libpwdgrp/pwd_grp.c, generated -> false, objectFile -> pwd_grp, listName -> lib)
2012-01-10 11:52:06,831 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m")), sourceFile -> libpwdgrp/pwd_grp.c, generated -> false, objectFile -> pwd_grp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:52:06,831 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:52:06,831 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,831 DEBUG PCDerivation$ Expression of path for object occurrence libpwdgrp/pwd_grp.c: ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m"))
2012-01-10 11:52:06,831 DEBUG PCDerivation$ Trying to find path for: [Object: add-remove-shell]
2012-01-10 11:52:06,832 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m"))), sourceFile -> loginutils/add-remove-shell.c, generated -> false, objectFile -> add-remove-shell, listName -> lib)
2012-01-10 11:52:06,832 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m"))), sourceFile -> loginutils/add-remove-shell.c, generated -> false, objectFile -> add-remove-shell, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,832 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,832 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,832 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,832 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/add-remove-shell.c: (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m")))
2012-01-10 11:52:06,832 DEBUG PCDerivation$ Trying to find path for: [Object: addgroup]
2012-01-10 11:52:06,832 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")), sourceFile -> loginutils/addgroup.c, generated -> false, objectFile -> addgroup, listName -> lib)
2012-01-10 11:52:06,832 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")), sourceFile -> loginutils/addgroup.c, generated -> false, objectFile -> addgroup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,832 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,832 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,832 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/addgroup.c: ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))
2012-01-10 11:52:06,832 DEBUG PCDerivation$ Trying to find path for: [Object: adduser]
2012-01-10 11:52:06,832 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m")), sourceFile -> loginutils/adduser.c, generated -> false, objectFile -> adduser, listName -> lib)
2012-01-10 11:52:06,832 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m")), sourceFile -> loginutils/adduser.c, generated -> false, objectFile -> adduser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,832 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,832 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,832 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/adduser.c: ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))
2012-01-10 11:52:06,832 DEBUG PCDerivation$ Trying to find path for: [Object: cryptpw]
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m")), sourceFile -> loginutils/cryptpw.c, generated -> false, objectFile -> cryptpw, listName -> lib)
2012-01-10 11:52:06,833 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m")), sourceFile -> loginutils/cryptpw.c, generated -> false, objectFile -> cryptpw, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,833 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/cryptpw.c: ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))
2012-01-10 11:52:06,833 DEBUG PCDerivation$ Trying to find path for: [Object: chpasswd]
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")), sourceFile -> loginutils/chpasswd.c, generated -> false, objectFile -> chpasswd, listName -> lib)
2012-01-10 11:52:06,833 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")), sourceFile -> loginutils/chpasswd.c, generated -> false, objectFile -> chpasswd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,833 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/chpasswd.c: ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))
2012-01-10 11:52:06,833 DEBUG PCDerivation$ Trying to find path for: [Object: getty]
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m")), sourceFile -> loginutils/getty.c, generated -> false, objectFile -> getty, listName -> lib)
2012-01-10 11:52:06,833 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m")), sourceFile -> loginutils/getty.c, generated -> false, objectFile -> getty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,833 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/getty.c: ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m"))
2012-01-10 11:52:06,833 DEBUG PCDerivation$ Trying to find path for: [Object: login]
2012-01-10 11:52:06,833 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")), sourceFile -> loginutils/login.c, generated -> false, objectFile -> login, listName -> lib)
2012-01-10 11:52:06,833 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")), sourceFile -> loginutils/login.c, generated -> false, objectFile -> login, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,834 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/login.c: ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))
2012-01-10 11:52:06,834 DEBUG PCDerivation$ Trying to find path for: [Object: passwd]
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> loginutils/passwd.c, generated -> false, objectFile -> passwd, listName -> lib)
2012-01-10 11:52:06,834 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> loginutils/passwd.c, generated -> false, objectFile -> passwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,834 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/passwd.c: ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))
2012-01-10 11:52:06,834 DEBUG PCDerivation$ Trying to find path for: [Object: su]
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SU == "y") || (CONFIG_SU == "m")), sourceFile -> loginutils/su.c, generated -> false, objectFile -> su, listName -> lib)
2012-01-10 11:52:06,834 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SU == "y") || (CONFIG_SU == "m")), sourceFile -> loginutils/su.c, generated -> false, objectFile -> su, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,834 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/su.c: ((CONFIG_SU == "y") || (CONFIG_SU == "m"))
2012-01-10 11:52:06,834 DEBUG PCDerivation$ Trying to find path for: [Object: sulogin]
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m")), sourceFile -> loginutils/sulogin.c, generated -> false, objectFile -> sulogin, listName -> lib)
2012-01-10 11:52:06,834 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m")), sourceFile -> loginutils/sulogin.c, generated -> false, objectFile -> sulogin, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,834 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,835 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/sulogin.c: ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))
2012-01-10 11:52:06,835 DEBUG PCDerivation$ Trying to find path for: [Object: vlock]
2012-01-10 11:52:06,835 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")), sourceFile -> loginutils/vlock.c, generated -> false, objectFile -> vlock, listName -> lib)
2012-01-10 11:52:06,835 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")), sourceFile -> loginutils/vlock.c, generated -> false, objectFile -> vlock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,835 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,835 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,835 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/vlock.c: ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))
2012-01-10 11:52:06,835 DEBUG PCDerivation$ Trying to find path for: [Object: deluser]
2012-01-10 11:52:06,835 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))), sourceFile -> loginutils/deluser.c, generated -> false, objectFile -> deluser, listName -> lib)
2012-01-10 11:52:06,835 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))), sourceFile -> loginutils/deluser.c, generated -> false, objectFile -> deluser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,835 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:52:06,835 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,835 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/deluser.c: (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m")))
2012-01-10 11:52:06,835 DEBUG PCDerivation$ Trying to find path for: [Object: makemime]
2012-01-10 11:52:06,835 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")), sourceFile -> mailutils/makemime.c, generated -> false, objectFile -> makemime, listName -> lib)
2012-01-10 11:52:06,835 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")), sourceFile -> mailutils/makemime.c, generated -> false, objectFile -> makemime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,835 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,835 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,835 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,835 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/makemime.c: ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m"))
2012-01-10 11:52:06,836 DEBUG PCDerivation$ Trying to find path for: [Object: mail]
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))), sourceFile -> mailutils/mail.c, generated -> false, objectFile -> mail, listName -> lib)
2012-01-10 11:52:06,836 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))), sourceFile -> mailutils/mail.c, generated -> false, objectFile -> mail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,836 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/mail.c: (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")))
2012-01-10 11:52:06,836 DEBUG PCDerivation$ Trying to find path for: [Object: popmaildir]
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m")), sourceFile -> mailutils/popmaildir.c, generated -> false, objectFile -> popmaildir, listName -> lib)
2012-01-10 11:52:06,836 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m")), sourceFile -> mailutils/popmaildir.c, generated -> false, objectFile -> popmaildir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,836 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/popmaildir.c: ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))
2012-01-10 11:52:06,836 DEBUG PCDerivation$ Trying to find path for: [Object: reformime]
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m")), sourceFile -> mailutils/reformime.c, generated -> false, objectFile -> reformime, listName -> lib)
2012-01-10 11:52:06,836 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m")), sourceFile -> mailutils/reformime.c, generated -> false, objectFile -> reformime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,836 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/reformime.c: ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))
2012-01-10 11:52:06,836 DEBUG PCDerivation$ Trying to find path for: [Object: sendmail]
2012-01-10 11:52:06,836 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")), sourceFile -> mailutils/sendmail.c, generated -> false, objectFile -> sendmail, listName -> lib)
2012-01-10 11:52:06,837 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")), sourceFile -> mailutils/sendmail.c, generated -> false, objectFile -> sendmail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,837 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:52:06,837 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,837 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/sendmail.c: ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))
2012-01-10 11:52:06,837 DEBUG PCDerivation$ Trying to find path for: [Object: conspy]
2012-01-10 11:52:06,837 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m")), sourceFile -> miscutils/conspy.c, generated -> false, objectFile -> conspy, listName -> lib)
2012-01-10 11:52:06,837 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m")), sourceFile -> miscutils/conspy.c, generated -> false, objectFile -> conspy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,837 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,837 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,837 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,837 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/conspy.c: ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m"))
2012-01-10 11:52:06,837 DEBUG PCDerivation$ Trying to find path for: [Object: nandwrite]
2012-01-10 11:52:06,837 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m"))), sourceFile -> miscutils/nandwrite.c, generated -> false, objectFile -> nandwrite, listName -> lib)
2012-01-10 11:52:06,837 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m"))), sourceFile -> miscutils/nandwrite.c, generated -> false, objectFile -> nandwrite, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,837 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,837 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,837 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/nandwrite.c: (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m")))
2012-01-10 11:52:06,837 DEBUG PCDerivation$ Trying to find path for: [Object: setserial]
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m")), sourceFile -> miscutils/setserial.c, generated -> false, objectFile -> setserial, listName -> lib)
2012-01-10 11:52:06,838 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m")), sourceFile -> miscutils/setserial.c, generated -> false, objectFile -> setserial, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,838 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/setserial.c: ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m"))
2012-01-10 11:52:06,838 DEBUG PCDerivation$ Trying to find path for: [Object: ubi_tools]
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m"))), sourceFile -> miscutils/ubi_tools.c, generated -> false, objectFile -> ubi_tools, listName -> lib)
2012-01-10 11:52:06,838 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m"))), sourceFile -> miscutils/ubi_tools.c, generated -> false, objectFile -> ubi_tools, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,838 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ubi_tools.c: (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m")))
2012-01-10 11:52:06,838 DEBUG PCDerivation$ Trying to find path for: [Object: adjtimex]
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m")), sourceFile -> miscutils/adjtimex.c, generated -> false, objectFile -> adjtimex, listName -> lib)
2012-01-10 11:52:06,838 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m")), sourceFile -> miscutils/adjtimex.c, generated -> false, objectFile -> adjtimex, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,838 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/adjtimex.c: ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m"))
2012-01-10 11:52:06,838 DEBUG PCDerivation$ Trying to find path for: [Object: bbconfig]
2012-01-10 11:52:06,838 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m")), sourceFile -> miscutils/bbconfig.c, generated -> false, objectFile -> bbconfig, listName -> lib)
2012-01-10 11:52:06,839 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m")), sourceFile -> miscutils/bbconfig.c, generated -> false, objectFile -> bbconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,839 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,839 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,839 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/bbconfig.c: ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m"))
2012-01-10 11:52:06,839 DEBUG PCDerivation$ Trying to find path for: [Object: beep]
2012-01-10 11:52:06,839 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m")), sourceFile -> miscutils/beep.c, generated -> false, objectFile -> beep, listName -> lib)
2012-01-10 11:52:06,839 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m")), sourceFile -> miscutils/beep.c, generated -> false, objectFile -> beep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,839 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,839 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,839 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/beep.c: ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m"))
2012-01-10 11:52:06,839 DEBUG PCDerivation$ Trying to find path for: [Object: chat]
2012-01-10 11:52:06,839 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m")), sourceFile -> miscutils/chat.c, generated -> false, objectFile -> chat, listName -> lib)
2012-01-10 11:52:06,839 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m")), sourceFile -> miscutils/chat.c, generated -> false, objectFile -> chat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,839 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,839 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,839 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/chat.c: ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m"))
2012-01-10 11:52:06,839 DEBUG PCDerivation$ Trying to find path for: [Object: chrt]
2012-01-10 11:52:06,839 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m")), sourceFile -> miscutils/chrt.c, generated -> false, objectFile -> chrt, listName -> lib)
2012-01-10 11:52:06,839 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m")), sourceFile -> miscutils/chrt.c, generated -> false, objectFile -> chrt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,840 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/chrt.c: ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m"))
2012-01-10 11:52:06,840 DEBUG PCDerivation$ Trying to find path for: [Object: crond]
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CROND == "y") || (CONFIG_CROND == "m")), sourceFile -> miscutils/crond.c, generated -> false, objectFile -> crond, listName -> lib)
2012-01-10 11:52:06,840 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CROND == "y") || (CONFIG_CROND == "m")), sourceFile -> miscutils/crond.c, generated -> false, objectFile -> crond, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,840 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/crond.c: ((CONFIG_CROND == "y") || (CONFIG_CROND == "m"))
2012-01-10 11:52:06,840 DEBUG PCDerivation$ Trying to find path for: [Object: crontab]
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")), sourceFile -> miscutils/crontab.c, generated -> false, objectFile -> crontab, listName -> lib)
2012-01-10 11:52:06,840 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")), sourceFile -> miscutils/crontab.c, generated -> false, objectFile -> crontab, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,840 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/crontab.c: ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))
2012-01-10 11:52:06,840 DEBUG PCDerivation$ Trying to find path for: [Object: dc]
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DC == "y") || (CONFIG_DC == "m")), sourceFile -> miscutils/dc.c, generated -> false, objectFile -> dc, listName -> lib)
2012-01-10 11:52:06,840 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DC == "y") || (CONFIG_DC == "m")), sourceFile -> miscutils/dc.c, generated -> false, objectFile -> dc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,840 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,841 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/dc.c: ((CONFIG_DC == "y") || (CONFIG_DC == "m"))
2012-01-10 11:52:06,841 DEBUG PCDerivation$ Trying to find path for: [Object: devfsd]
2012-01-10 11:52:06,841 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m")), sourceFile -> miscutils/devfsd.c, generated -> false, objectFile -> devfsd, listName -> lib)
2012-01-10 11:52:06,841 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m")), sourceFile -> miscutils/devfsd.c, generated -> false, objectFile -> devfsd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,841 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,841 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,841 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/devfsd.c: ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))
2012-01-10 11:52:06,841 DEBUG PCDerivation$ Trying to find path for: [Object: devmem]
2012-01-10 11:52:06,841 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m")), sourceFile -> miscutils/devmem.c, generated -> false, objectFile -> devmem, listName -> lib)
2012-01-10 11:52:06,841 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m")), sourceFile -> miscutils/devmem.c, generated -> false, objectFile -> devmem, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,841 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,841 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,841 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/devmem.c: ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m"))
2012-01-10 11:52:06,841 DEBUG PCDerivation$ Trying to find path for: [Object: eject]
2012-01-10 11:52:06,841 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m")), sourceFile -> miscutils/eject.c, generated -> false, objectFile -> eject, listName -> lib)
2012-01-10 11:52:06,841 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m")), sourceFile -> miscutils/eject.c, generated -> false, objectFile -> eject, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,841 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,841 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,841 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/eject.c: ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m"))
2012-01-10 11:52:06,841 DEBUG PCDerivation$ Trying to find path for: [Object: fbsplash]
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m")), sourceFile -> miscutils/fbsplash.c, generated -> false, objectFile -> fbsplash, listName -> lib)
2012-01-10 11:52:06,842 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m")), sourceFile -> miscutils/fbsplash.c, generated -> false, objectFile -> fbsplash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,842 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/fbsplash.c: ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m"))
2012-01-10 11:52:06,842 DEBUG PCDerivation$ Trying to find path for: [Object: flashcp]
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m")), sourceFile -> miscutils/flashcp.c, generated -> false, objectFile -> flashcp, listName -> lib)
2012-01-10 11:52:06,842 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m")), sourceFile -> miscutils/flashcp.c, generated -> false, objectFile -> flashcp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,842 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flashcp.c: ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m"))
2012-01-10 11:52:06,842 DEBUG PCDerivation$ Trying to find path for: [Object: flash_eraseall]
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m")), sourceFile -> miscutils/flash_eraseall.c, generated -> false, objectFile -> flash_eraseall, listName -> lib)
2012-01-10 11:52:06,842 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m")), sourceFile -> miscutils/flash_eraseall.c, generated -> false, objectFile -> flash_eraseall, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,842 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flash_eraseall.c: ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m"))
2012-01-10 11:52:06,842 DEBUG PCDerivation$ Trying to find path for: [Object: flash_lock_unlock]
2012-01-10 11:52:06,842 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m"))), sourceFile -> miscutils/flash_lock_unlock.c, generated -> false, objectFile -> flash_lock_unlock, listName -> lib)
2012-01-10 11:52:06,842 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m"))), sourceFile -> miscutils/flash_lock_unlock.c, generated -> false, objectFile -> flash_lock_unlock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,843 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flash_lock_unlock.c: (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m")))
2012-01-10 11:52:06,843 DEBUG PCDerivation$ Trying to find path for: [Object: ionice]
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m")), sourceFile -> miscutils/ionice.c, generated -> false, objectFile -> ionice, listName -> lib)
2012-01-10 11:52:06,843 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m")), sourceFile -> miscutils/ionice.c, generated -> false, objectFile -> ionice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,843 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ionice.c: ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m"))
2012-01-10 11:52:06,843 DEBUG PCDerivation$ Trying to find path for: [Object: hdparm]
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m")), sourceFile -> miscutils/hdparm.c, generated -> false, objectFile -> hdparm, listName -> lib)
2012-01-10 11:52:06,843 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m")), sourceFile -> miscutils/hdparm.c, generated -> false, objectFile -> hdparm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,843 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/hdparm.c: ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m"))
2012-01-10 11:52:06,843 DEBUG PCDerivation$ Trying to find path for: [Object: inotifyd]
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m")), sourceFile -> miscutils/inotifyd.c, generated -> false, objectFile -> inotifyd, listName -> lib)
2012-01-10 11:52:06,843 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m")), sourceFile -> miscutils/inotifyd.c, generated -> false, objectFile -> inotifyd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,843 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,844 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/inotifyd.c: ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m"))
2012-01-10 11:52:06,844 DEBUG PCDerivation$ Trying to find path for: [Object: last]
2012-01-10 11:52:06,844 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m")), sourceFile -> miscutils/last.c, generated -> false, objectFile -> last, listName -> lib)
2012-01-10 11:52:06,844 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m")), sourceFile -> miscutils/last.c, generated -> false, objectFile -> last, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,844 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,844 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,844 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/last.c: ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m"))
2012-01-10 11:52:06,844 DEBUG PCDerivation$ Trying to find path for: [Object: last_fancy]
2012-01-10 11:52:06,844 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m")), sourceFile -> miscutils/last_fancy.c, generated -> false, objectFile -> last_fancy, listName -> lib)
2012-01-10 11:52:06,844 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m")), sourceFile -> miscutils/last_fancy.c, generated -> false, objectFile -> last_fancy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,844 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,844 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,844 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/last_fancy.c: ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m"))
2012-01-10 11:52:06,844 DEBUG PCDerivation$ Trying to find path for: [Object: less]
2012-01-10 11:52:06,844 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LESS == "y") || (CONFIG_LESS == "m")), sourceFile -> miscutils/less.c, generated -> false, objectFile -> less, listName -> lib)
2012-01-10 11:52:06,844 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LESS == "y") || (CONFIG_LESS == "m")), sourceFile -> miscutils/less.c, generated -> false, objectFile -> less, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,844 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,844 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,845 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/less.c: ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))
2012-01-10 11:52:06,845 DEBUG PCDerivation$ Trying to find path for: [Object: makedevs]
2012-01-10 11:52:06,845 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m")), sourceFile -> miscutils/makedevs.c, generated -> false, objectFile -> makedevs, listName -> lib)
2012-01-10 11:52:06,845 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m")), sourceFile -> miscutils/makedevs.c, generated -> false, objectFile -> makedevs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,845 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,845 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,845 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/makedevs.c: ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m"))
2012-01-10 11:52:06,845 DEBUG PCDerivation$ Trying to find path for: [Object: man]
2012-01-10 11:52:06,845 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAN == "y") || (CONFIG_MAN == "m")), sourceFile -> miscutils/man.c, generated -> false, objectFile -> man, listName -> lib)
2012-01-10 11:52:06,845 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAN == "y") || (CONFIG_MAN == "m")), sourceFile -> miscutils/man.c, generated -> false, objectFile -> man, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,845 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,845 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,845 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/man.c: ((CONFIG_MAN == "y") || (CONFIG_MAN == "m"))
2012-01-10 11:52:06,845 DEBUG PCDerivation$ Trying to find path for: [Object: microcom]
2012-01-10 11:52:06,845 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m")), sourceFile -> miscutils/microcom.c, generated -> false, objectFile -> microcom, listName -> lib)
2012-01-10 11:52:06,845 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m")), sourceFile -> miscutils/microcom.c, generated -> false, objectFile -> microcom, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,845 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,845 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,845 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/microcom.c: ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m"))
2012-01-10 11:52:06,845 DEBUG PCDerivation$ Trying to find path for: [Object: mountpoint]
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m")), sourceFile -> miscutils/mountpoint.c, generated -> false, objectFile -> mountpoint, listName -> lib)
2012-01-10 11:52:06,846 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m")), sourceFile -> miscutils/mountpoint.c, generated -> false, objectFile -> mountpoint, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,846 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/mountpoint.c: ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m"))
2012-01-10 11:52:06,846 DEBUG PCDerivation$ Trying to find path for: [Object: mt]
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MT == "y") || (CONFIG_MT == "m")), sourceFile -> miscutils/mt.c, generated -> false, objectFile -> mt, listName -> lib)
2012-01-10 11:52:06,846 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MT == "y") || (CONFIG_MT == "m")), sourceFile -> miscutils/mt.c, generated -> false, objectFile -> mt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,846 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/mt.c: ((CONFIG_MT == "y") || (CONFIG_MT == "m"))
2012-01-10 11:52:06,846 DEBUG PCDerivation$ Trying to find path for: [Object: raidautorun]
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m")), sourceFile -> miscutils/raidautorun.c, generated -> false, objectFile -> raidautorun, listName -> lib)
2012-01-10 11:52:06,846 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m")), sourceFile -> miscutils/raidautorun.c, generated -> false, objectFile -> raidautorun, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,846 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/raidautorun.c: ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m"))
2012-01-10 11:52:06,846 DEBUG PCDerivation$ Trying to find path for: [Object: readahead]
2012-01-10 11:52:06,846 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m")), sourceFile -> miscutils/readahead.c, generated -> false, objectFile -> readahead, listName -> lib)
2012-01-10 11:52:06,847 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m")), sourceFile -> miscutils/readahead.c, generated -> false, objectFile -> readahead, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,847 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,847 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,847 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/readahead.c: ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m"))
2012-01-10 11:52:06,847 DEBUG PCDerivation$ Trying to find path for: [Object: rfkill]
2012-01-10 11:52:06,847 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m")), sourceFile -> miscutils/rfkill.c, generated -> false, objectFile -> rfkill, listName -> lib)
2012-01-10 11:52:06,847 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m")), sourceFile -> miscutils/rfkill.c, generated -> false, objectFile -> rfkill, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,847 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,847 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,847 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/rfkill.c: ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m"))
2012-01-10 11:52:06,847 DEBUG PCDerivation$ Trying to find path for: [Object: runlevel]
2012-01-10 11:52:06,847 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m")), sourceFile -> miscutils/runlevel.c, generated -> false, objectFile -> runlevel, listName -> lib)
2012-01-10 11:52:06,847 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m")), sourceFile -> miscutils/runlevel.c, generated -> false, objectFile -> runlevel, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,847 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,847 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,847 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/runlevel.c: ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m"))
2012-01-10 11:52:06,847 DEBUG PCDerivation$ Trying to find path for: [Object: rx]
2012-01-10 11:52:06,847 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RX == "y") || (CONFIG_RX == "m")), sourceFile -> miscutils/rx.c, generated -> false, objectFile -> rx, listName -> lib)
2012-01-10 11:52:06,847 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RX == "y") || (CONFIG_RX == "m")), sourceFile -> miscutils/rx.c, generated -> false, objectFile -> rx, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,848 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,848 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,848 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/rx.c: ((CONFIG_RX == "y") || (CONFIG_RX == "m"))
2012-01-10 11:52:06,848 DEBUG PCDerivation$ Trying to find path for: [Object: setsid]
2012-01-10 11:52:06,848 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m")), sourceFile -> miscutils/setsid.c, generated -> false, objectFile -> setsid, listName -> lib)
2012-01-10 11:52:06,848 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m")), sourceFile -> miscutils/setsid.c, generated -> false, objectFile -> setsid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,848 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,848 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,848 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/setsid.c: ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m"))
2012-01-10 11:52:06,848 DEBUG PCDerivation$ Trying to find path for: [Object: strings]
2012-01-10 11:52:06,848 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m")), sourceFile -> miscutils/strings.c, generated -> false, objectFile -> strings, listName -> lib)
2012-01-10 11:52:06,848 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m")), sourceFile -> miscutils/strings.c, generated -> false, objectFile -> strings, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,848 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,848 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,848 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/strings.c: ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m"))
2012-01-10 11:52:06,848 DEBUG PCDerivation$ Trying to find path for: [Object: taskset]
2012-01-10 11:52:06,848 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m")), sourceFile -> miscutils/taskset.c, generated -> false, objectFile -> taskset, listName -> lib)
2012-01-10 11:52:06,848 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m")), sourceFile -> miscutils/taskset.c, generated -> false, objectFile -> taskset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,849 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/taskset.c: ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m"))
2012-01-10 11:52:06,849 DEBUG PCDerivation$ Trying to find path for: [Object: time]
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIME == "y") || (CONFIG_TIME == "m")), sourceFile -> miscutils/time.c, generated -> false, objectFile -> time, listName -> lib)
2012-01-10 11:52:06,849 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIME == "y") || (CONFIG_TIME == "m")), sourceFile -> miscutils/time.c, generated -> false, objectFile -> time, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,849 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/time.c: ((CONFIG_TIME == "y") || (CONFIG_TIME == "m"))
2012-01-10 11:52:06,849 DEBUG PCDerivation$ Trying to find path for: [Object: timeout]
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m")), sourceFile -> miscutils/timeout.c, generated -> false, objectFile -> timeout, listName -> lib)
2012-01-10 11:52:06,849 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m")), sourceFile -> miscutils/timeout.c, generated -> false, objectFile -> timeout, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,849 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/timeout.c: ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m"))
2012-01-10 11:52:06,849 DEBUG PCDerivation$ Trying to find path for: [Object: ttysize]
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m")), sourceFile -> miscutils/ttysize.c, generated -> false, objectFile -> ttysize, listName -> lib)
2012-01-10 11:52:06,849 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m")), sourceFile -> miscutils/ttysize.c, generated -> false, objectFile -> ttysize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,849 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,850 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ttysize.c: ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m"))
2012-01-10 11:52:06,850 DEBUG PCDerivation$ Trying to find path for: [Object: volname]
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m")), sourceFile -> miscutils/volname.c, generated -> false, objectFile -> volname, listName -> lib)
2012-01-10 11:52:06,850 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m")), sourceFile -> miscutils/volname.c, generated -> false, objectFile -> volname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,850 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/volname.c: ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m"))
2012-01-10 11:52:06,850 DEBUG PCDerivation$ Trying to find path for: [Object: wall]
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WALL == "y") || (CONFIG_WALL == "m")), sourceFile -> miscutils/wall.c, generated -> false, objectFile -> wall, listName -> lib)
2012-01-10 11:52:06,850 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WALL == "y") || (CONFIG_WALL == "m")), sourceFile -> miscutils/wall.c, generated -> false, objectFile -> wall, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,850 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/wall.c: ((CONFIG_WALL == "y") || (CONFIG_WALL == "m"))
2012-01-10 11:52:06,850 DEBUG PCDerivation$ Trying to find path for: [Object: watchdog]
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m")), sourceFile -> miscutils/watchdog.c, generated -> false, objectFile -> watchdog, listName -> lib)
2012-01-10 11:52:06,850 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m")), sourceFile -> miscutils/watchdog.c, generated -> false, objectFile -> watchdog, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:52:06,850 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,851 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/watchdog.c: ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m"))
2012-01-10 11:52:06,851 DEBUG PCDerivation$ Trying to find path for: [Object: modinfo]
2012-01-10 11:52:06,851 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")), sourceFile -> modutils/modinfo.c, generated -> false, objectFile -> modinfo, listName -> lib)
2012-01-10 11:52:06,851 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")), sourceFile -> modutils/modinfo.c, generated -> false, objectFile -> modinfo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,851 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,851 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,851 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,851 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modinfo.c: ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m"))
2012-01-10 11:52:06,851 DEBUG PCDerivation$ Trying to find path for: [Object: modutils]
2012-01-10 11:52:06,851 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))), sourceFile -> modutils/modutils.c, generated -> false, objectFile -> modutils, listName -> lib)
2012-01-10 11:52:06,851 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))), sourceFile -> modutils/modutils.c, generated -> false, objectFile -> modutils, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,851 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,851 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,851 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modutils.c: (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")))
2012-01-10 11:52:06,851 DEBUG PCDerivation$ Trying to find path for: [Object: modprobe-small]
2012-01-10 11:52:06,851 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m")), sourceFile -> modutils/modprobe-small.c, generated -> false, objectFile -> modprobe-small, listName -> lib)
2012-01-10 11:52:06,851 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m")), sourceFile -> modutils/modprobe-small.c, generated -> false, objectFile -> modprobe-small, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,851 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,852 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modprobe-small.c: ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m"))
2012-01-10 11:52:06,852 DEBUG PCDerivation$ Trying to find path for: [Object: depmod]
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m")), sourceFile -> modutils/depmod.c, generated -> false, objectFile -> depmod, listName -> lib)
2012-01-10 11:52:06,852 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m")), sourceFile -> modutils/depmod.c, generated -> false, objectFile -> depmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,852 DEBUG PCDerivation$ Expression of path for object occurrence modutils/depmod.c: ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))
2012-01-10 11:52:06,852 DEBUG PCDerivation$ Trying to find path for: [Object: insmod]
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m")), sourceFile -> modutils/insmod.c, generated -> false, objectFile -> insmod, listName -> lib)
2012-01-10 11:52:06,852 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m")), sourceFile -> modutils/insmod.c, generated -> false, objectFile -> insmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,852 DEBUG PCDerivation$ Expression of path for object occurrence modutils/insmod.c: ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))
2012-01-10 11:52:06,852 DEBUG PCDerivation$ Trying to find path for: [Object: lsmod]
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m")), sourceFile -> modutils/lsmod.c, generated -> false, objectFile -> lsmod, listName -> lib)
2012-01-10 11:52:06,852 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m")), sourceFile -> modutils/lsmod.c, generated -> false, objectFile -> lsmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,852 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,853 DEBUG PCDerivation$ Expression of path for object occurrence modutils/lsmod.c: ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))
2012-01-10 11:52:06,853 DEBUG PCDerivation$ Trying to find path for: [Object: modprobe]
2012-01-10 11:52:06,853 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m")), sourceFile -> modutils/modprobe.c, generated -> false, objectFile -> modprobe, listName -> lib)
2012-01-10 11:52:06,853 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m")), sourceFile -> modutils/modprobe.c, generated -> false, objectFile -> modprobe, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,853 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,853 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,853 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modprobe.c: ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))
2012-01-10 11:52:06,853 DEBUG PCDerivation$ Trying to find path for: [Object: rmmod]
2012-01-10 11:52:06,853 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")), sourceFile -> modutils/rmmod.c, generated -> false, objectFile -> rmmod, listName -> lib)
2012-01-10 11:52:06,853 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")), sourceFile -> modutils/rmmod.c, generated -> false, objectFile -> rmmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,853 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,853 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,853 DEBUG PCDerivation$ Expression of path for object occurrence modutils/rmmod.c: ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))
2012-01-10 11:52:06,853 DEBUG PCDerivation$ Trying to find path for: [Object: modutils-24]
2012-01-10 11:52:06,853 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m")), sourceFile -> modutils/modutils-24.c, generated -> false, objectFile -> modutils-24, listName -> lib)
2012-01-10 11:52:06,853 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m")), sourceFile -> modutils/modutils-24.c, generated -> false, objectFile -> modutils-24, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,853 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:52:06,853 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,853 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modutils-24.c: ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m"))
2012-01-10 11:52:06,854 DEBUG PCDerivation$ Trying to find path for: [Object: nbd-client]
2012-01-10 11:52:06,854 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m")), sourceFile -> networking/nbd-client.c, generated -> false, objectFile -> nbd-client, listName -> lib)
2012-01-10 11:52:06,854 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m")), sourceFile -> networking/nbd-client.c, generated -> false, objectFile -> nbd-client, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,854 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,854 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,854 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,854 DEBUG PCDerivation$ Expression of path for object occurrence networking/nbd-client.c: ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m"))
2012-01-10 11:52:06,854 DEBUG PCDerivation$ Trying to find path for: [Object: ping]
2012-01-10 11:52:06,854 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m"))), sourceFile -> networking/ping.c, generated -> false, objectFile -> ping, listName -> lib)
2012-01-10 11:52:06,854 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m"))), sourceFile -> networking/ping.c, generated -> false, objectFile -> ping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,854 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,854 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,854 DEBUG PCDerivation$ Expression of path for object occurrence networking/ping.c: (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m")))
2012-01-10 11:52:06,854 DEBUG PCDerivation$ Trying to find path for: [Object: whois]
2012-01-10 11:52:06,854 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m")), sourceFile -> networking/whois.c, generated -> false, objectFile -> whois, listName -> lib)
2012-01-10 11:52:06,854 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m")), sourceFile -> networking/whois.c, generated -> false, objectFile -> whois, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,854 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,854 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,855 DEBUG PCDerivation$ Expression of path for object occurrence networking/whois.c: ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m"))
2012-01-10 11:52:06,855 DEBUG PCDerivation$ Trying to find path for: [Object: arp]
2012-01-10 11:52:06,855 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARP == "y") || (CONFIG_ARP == "m")), sourceFile -> networking/arp.c, generated -> false, objectFile -> arp, listName -> lib)
2012-01-10 11:52:06,855 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARP == "y") || (CONFIG_ARP == "m")), sourceFile -> networking/arp.c, generated -> false, objectFile -> arp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,855 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,855 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,855 DEBUG PCDerivation$ Expression of path for object occurrence networking/arp.c: ((CONFIG_ARP == "y") || (CONFIG_ARP == "m"))
2012-01-10 11:52:06,855 DEBUG PCDerivation$ Trying to find path for: [Object: interface]
2012-01-10 11:52:06,855 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))), sourceFile -> networking/interface.c, generated -> false, objectFile -> interface, listName -> lib)
2012-01-10 11:52:06,855 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))), sourceFile -> networking/interface.c, generated -> false, objectFile -> interface, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,855 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,855 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,855 DEBUG PCDerivation$ Expression of path for object occurrence networking/interface.c: ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")))
2012-01-10 11:52:06,855 DEBUG PCDerivation$ Trying to find path for: [Object: arping]
2012-01-10 11:52:06,855 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m")), sourceFile -> networking/arping.c, generated -> false, objectFile -> arping, listName -> lib)
2012-01-10 11:52:06,855 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m")), sourceFile -> networking/arping.c, generated -> false, objectFile -> arping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,855 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,855 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,855 DEBUG PCDerivation$ Expression of path for object occurrence networking/arping.c: ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m"))
2012-01-10 11:52:06,856 DEBUG PCDerivation$ Trying to find path for: [Object: brctl]
2012-01-10 11:52:06,856 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m")), sourceFile -> networking/brctl.c, generated -> false, objectFile -> brctl, listName -> lib)
2012-01-10 11:52:06,856 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m")), sourceFile -> networking/brctl.c, generated -> false, objectFile -> brctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,856 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,856 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,856 DEBUG PCDerivation$ Expression of path for object occurrence networking/brctl.c: ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m"))
2012-01-10 11:52:06,856 DEBUG PCDerivation$ Trying to find path for: [Object: dnsd]
2012-01-10 11:52:06,856 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m")), sourceFile -> networking/dnsd.c, generated -> false, objectFile -> dnsd, listName -> lib)
2012-01-10 11:52:06,856 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m")), sourceFile -> networking/dnsd.c, generated -> false, objectFile -> dnsd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,856 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,856 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,856 DEBUG PCDerivation$ Expression of path for object occurrence networking/dnsd.c: ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))
2012-01-10 11:52:06,856 DEBUG PCDerivation$ Trying to find path for: [Object: ether-wake]
2012-01-10 11:52:06,856 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m")), sourceFile -> networking/ether-wake.c, generated -> false, objectFile -> ether-wake, listName -> lib)
2012-01-10 11:52:06,856 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m")), sourceFile -> networking/ether-wake.c, generated -> false, objectFile -> ether-wake, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,856 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,856 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,856 DEBUG PCDerivation$ Expression of path for object occurrence networking/ether-wake.c: ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m"))
2012-01-10 11:52:06,856 DEBUG PCDerivation$ Trying to find path for: [Object: isrv_identd]
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv_identd.c, generated -> false, objectFile -> isrv_identd, listName -> lib)
2012-01-10 11:52:06,857 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv_identd.c, generated -> false, objectFile -> isrv_identd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,857 DEBUG PCDerivation$ Expression of path for object occurrence networking/isrv_identd.c: ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m"))
2012-01-10 11:52:06,857 DEBUG PCDerivation$ Trying to find path for: [Object: isrv]
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv.c, generated -> false, objectFile -> isrv, listName -> lib)
2012-01-10 11:52:06,857 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv.c, generated -> false, objectFile -> isrv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,857 DEBUG PCDerivation$ Expression of path for object occurrence networking/isrv.c: ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m"))
2012-01-10 11:52:06,857 DEBUG PCDerivation$ Trying to find path for: [Object: ftpd]
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")), sourceFile -> networking/ftpd.c, generated -> false, objectFile -> ftpd, listName -> lib)
2012-01-10 11:52:06,857 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")), sourceFile -> networking/ftpd.c, generated -> false, objectFile -> ftpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,857 DEBUG PCDerivation$ Expression of path for object occurrence networking/ftpd.c: ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))
2012-01-10 11:52:06,857 DEBUG PCDerivation$ Trying to find path for: [Object: ftpgetput]
2012-01-10 11:52:06,857 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m"))), sourceFile -> networking/ftpgetput.c, generated -> false, objectFile -> ftpgetput, listName -> lib)
2012-01-10 11:52:06,858 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m"))), sourceFile -> networking/ftpgetput.c, generated -> false, objectFile -> ftpgetput, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,858 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,858 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,858 DEBUG PCDerivation$ Expression of path for object occurrence networking/ftpgetput.c: (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m")))
2012-01-10 11:52:06,858 DEBUG PCDerivation$ Trying to find path for: [Object: hostname]
2012-01-10 11:52:06,858 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m")), sourceFile -> networking/hostname.c, generated -> false, objectFile -> hostname, listName -> lib)
2012-01-10 11:52:06,858 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m")), sourceFile -> networking/hostname.c, generated -> false, objectFile -> hostname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,858 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,858 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,858 DEBUG PCDerivation$ Expression of path for object occurrence networking/hostname.c: ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m"))
2012-01-10 11:52:06,858 DEBUG PCDerivation$ Trying to find path for: [Object: httpd]
2012-01-10 11:52:06,858 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m")), sourceFile -> networking/httpd.c, generated -> false, objectFile -> httpd, listName -> lib)
2012-01-10 11:52:06,858 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m")), sourceFile -> networking/httpd.c, generated -> false, objectFile -> httpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,858 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,858 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,858 DEBUG PCDerivation$ Expression of path for object occurrence networking/httpd.c: ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m"))
2012-01-10 11:52:06,858 DEBUG PCDerivation$ Trying to find path for: [Object: ifconfig]
2012-01-10 11:52:06,858 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m")), sourceFile -> networking/ifconfig.c, generated -> false, objectFile -> ifconfig, listName -> lib)
2012-01-10 11:52:06,859 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m")), sourceFile -> networking/ifconfig.c, generated -> false, objectFile -> ifconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,859 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,859 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,859 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifconfig.c: ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))
2012-01-10 11:52:06,859 DEBUG PCDerivation$ Trying to find path for: [Object: ifenslave]
2012-01-10 11:52:06,859 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")), sourceFile -> networking/ifenslave.c, generated -> false, objectFile -> ifenslave, listName -> lib)
2012-01-10 11:52:06,859 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")), sourceFile -> networking/ifenslave.c, generated -> false, objectFile -> ifenslave, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,859 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,859 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,859 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifenslave.c: ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))
2012-01-10 11:52:06,859 DEBUG PCDerivation$ Trying to find path for: [Object: ifplugd]
2012-01-10 11:52:06,859 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m")), sourceFile -> networking/ifplugd.c, generated -> false, objectFile -> ifplugd, listName -> lib)
2012-01-10 11:52:06,859 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m")), sourceFile -> networking/ifplugd.c, generated -> false, objectFile -> ifplugd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,859 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,859 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,859 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifplugd.c: ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m"))
2012-01-10 11:52:06,859 DEBUG PCDerivation$ Trying to find path for: [Object: ifupdown]
2012-01-10 11:52:06,859 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m")), sourceFile -> networking/ifupdown.c, generated -> false, objectFile -> ifupdown, listName -> lib)
2012-01-10 11:52:06,860 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m")), sourceFile -> networking/ifupdown.c, generated -> false, objectFile -> ifupdown, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,860 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,860 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,860 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifupdown.c: ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m"))
2012-01-10 11:52:06,860 DEBUG PCDerivation$ Trying to find path for: [Object: inetd]
2012-01-10 11:52:06,860 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INETD == "y") || (CONFIG_INETD == "m")), sourceFile -> networking/inetd.c, generated -> false, objectFile -> inetd, listName -> lib)
2012-01-10 11:52:06,860 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INETD == "y") || (CONFIG_INETD == "m")), sourceFile -> networking/inetd.c, generated -> false, objectFile -> inetd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,860 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,860 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,860 DEBUG PCDerivation$ Expression of path for object occurrence networking/inetd.c: ((CONFIG_INETD == "y") || (CONFIG_INETD == "m"))
2012-01-10 11:52:06,860 DEBUG PCDerivation$ Trying to find path for: [Object: ip]
2012-01-10 11:52:06,860 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/ip.c, generated -> false, objectFile -> ip, listName -> lib)
2012-01-10 11:52:06,860 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/ip.c, generated -> false, objectFile -> ip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,860 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,860 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,860 DEBUG PCDerivation$ Expression of path for object occurrence networking/ip.c: ((CONFIG_IP == "y") || (CONFIG_IP == "m"))
2012-01-10 11:52:06,860 DEBUG PCDerivation$ Trying to find path for: [Object: ipcalc]
2012-01-10 11:52:06,860 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m")), sourceFile -> networking/ipcalc.c, generated -> false, objectFile -> ipcalc, listName -> lib)
2012-01-10 11:52:06,860 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m")), sourceFile -> networking/ipcalc.c, generated -> false, objectFile -> ipcalc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,861 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,861 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,861 DEBUG PCDerivation$ Expression of path for object occurrence networking/ipcalc.c: ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m"))
2012-01-10 11:52:06,861 DEBUG PCDerivation$ Trying to find path for: [Object: nameif]
2012-01-10 11:52:06,861 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m")), sourceFile -> networking/nameif.c, generated -> false, objectFile -> nameif, listName -> lib)
2012-01-10 11:52:06,861 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m")), sourceFile -> networking/nameif.c, generated -> false, objectFile -> nameif, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,861 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,861 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,861 DEBUG PCDerivation$ Expression of path for object occurrence networking/nameif.c: ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m"))
2012-01-10 11:52:06,861 DEBUG PCDerivation$ Trying to find path for: [Object: nc]
2012-01-10 11:52:06,861 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NC == "y") || (CONFIG_NC == "m")), sourceFile -> networking/nc.c, generated -> false, objectFile -> nc, listName -> lib)
2012-01-10 11:52:06,861 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NC == "y") || (CONFIG_NC == "m")), sourceFile -> networking/nc.c, generated -> false, objectFile -> nc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,861 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,861 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,861 DEBUG PCDerivation$ Expression of path for object occurrence networking/nc.c: ((CONFIG_NC == "y") || (CONFIG_NC == "m"))
2012-01-10 11:52:06,861 DEBUG PCDerivation$ Trying to find path for: [Object: netstat]
2012-01-10 11:52:06,861 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m")), sourceFile -> networking/netstat.c, generated -> false, objectFile -> netstat, listName -> lib)
2012-01-10 11:52:06,861 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m")), sourceFile -> networking/netstat.c, generated -> false, objectFile -> netstat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,862 DEBUG PCDerivation$ Expression of path for object occurrence networking/netstat.c: ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m"))
2012-01-10 11:52:06,862 DEBUG PCDerivation$ Trying to find path for: [Object: nslookup]
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m")), sourceFile -> networking/nslookup.c, generated -> false, objectFile -> nslookup, listName -> lib)
2012-01-10 11:52:06,862 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m")), sourceFile -> networking/nslookup.c, generated -> false, objectFile -> nslookup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,862 DEBUG PCDerivation$ Expression of path for object occurrence networking/nslookup.c: ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m"))
2012-01-10 11:52:06,862 DEBUG PCDerivation$ Trying to find path for: [Object: ntpd]
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m")), sourceFile -> networking/ntpd.c, generated -> false, objectFile -> ntpd, listName -> lib)
2012-01-10 11:52:06,862 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m")), sourceFile -> networking/ntpd.c, generated -> false, objectFile -> ntpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,862 DEBUG PCDerivation$ Expression of path for object occurrence networking/ntpd.c: ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))
2012-01-10 11:52:06,862 DEBUG PCDerivation$ Trying to find path for: [Object: pscan]
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m")), sourceFile -> networking/pscan.c, generated -> false, objectFile -> pscan, listName -> lib)
2012-01-10 11:52:06,862 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m")), sourceFile -> networking/pscan.c, generated -> false, objectFile -> pscan, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,862 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,863 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,863 DEBUG PCDerivation$ Expression of path for object occurrence networking/pscan.c: ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m"))
2012-01-10 11:52:06,863 DEBUG PCDerivation$ Trying to find path for: [Object: route]
2012-01-10 11:52:06,863 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m")), sourceFile -> networking/route.c, generated -> false, objectFile -> route, listName -> lib)
2012-01-10 11:52:06,863 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m")), sourceFile -> networking/route.c, generated -> false, objectFile -> route, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,863 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,863 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,863 DEBUG PCDerivation$ Expression of path for object occurrence networking/route.c: ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m"))
2012-01-10 11:52:06,863 DEBUG PCDerivation$ Trying to find path for: [Object: slattach]
2012-01-10 11:52:06,863 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")), sourceFile -> networking/slattach.c, generated -> false, objectFile -> slattach, listName -> lib)
2012-01-10 11:52:06,863 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")), sourceFile -> networking/slattach.c, generated -> false, objectFile -> slattach, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,863 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,863 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,863 DEBUG PCDerivation$ Expression of path for object occurrence networking/slattach.c: ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m"))
2012-01-10 11:52:06,863 DEBUG PCDerivation$ Trying to find path for: [Object: tc]
2012-01-10 11:52:06,863 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TC == "y") || (CONFIG_TC == "m")), sourceFile -> networking/tc.c, generated -> false, objectFile -> tc, listName -> lib)
2012-01-10 11:52:06,864 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TC == "y") || (CONFIG_TC == "m")), sourceFile -> networking/tc.c, generated -> false, objectFile -> tc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,864 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,864 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,864 DEBUG PCDerivation$ Expression of path for object occurrence networking/tc.c: ((CONFIG_TC == "y") || (CONFIG_TC == "m"))
2012-01-10 11:52:06,864 DEBUG PCDerivation$ Trying to find path for: [Object: telnet]
2012-01-10 11:52:06,864 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m")), sourceFile -> networking/telnet.c, generated -> false, objectFile -> telnet, listName -> lib)
2012-01-10 11:52:06,864 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m")), sourceFile -> networking/telnet.c, generated -> false, objectFile -> telnet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,864 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,864 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,864 DEBUG PCDerivation$ Expression of path for object occurrence networking/telnet.c: ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m"))
2012-01-10 11:52:06,864 DEBUG PCDerivation$ Trying to find path for: [Object: telnetd]
2012-01-10 11:52:06,864 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m")), sourceFile -> networking/telnetd.c, generated -> false, objectFile -> telnetd, listName -> lib)
2012-01-10 11:52:06,864 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m")), sourceFile -> networking/telnetd.c, generated -> false, objectFile -> telnetd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,864 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,864 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,864 DEBUG PCDerivation$ Expression of path for object occurrence networking/telnetd.c: ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m"))
2012-01-10 11:52:06,864 DEBUG PCDerivation$ Trying to find path for: [Object: tftp]
2012-01-10 11:52:06,864 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))), sourceFile -> networking/tftp.c, generated -> false, objectFile -> tftp, listName -> lib)
2012-01-10 11:52:06,865 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))), sourceFile -> networking/tftp.c, generated -> false, objectFile -> tftp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,865 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,865 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,865 DEBUG PCDerivation$ Expression of path for object occurrence networking/tftp.c: (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m")))
2012-01-10 11:52:06,865 DEBUG PCDerivation$ Trying to find path for: [Object: traceroute]
2012-01-10 11:52:06,865 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")), sourceFile -> networking/traceroute.c, generated -> false, objectFile -> traceroute, listName -> lib)
2012-01-10 11:52:06,865 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")), sourceFile -> networking/traceroute.c, generated -> false, objectFile -> traceroute, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,865 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,865 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,865 DEBUG PCDerivation$ Expression of path for object occurrence networking/traceroute.c: ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))
2012-01-10 11:52:06,865 DEBUG PCDerivation$ Trying to find path for: [Object: tunctl]
2012-01-10 11:52:06,865 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m")), sourceFile -> networking/tunctl.c, generated -> false, objectFile -> tunctl, listName -> lib)
2012-01-10 11:52:06,865 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m")), sourceFile -> networking/tunctl.c, generated -> false, objectFile -> tunctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,865 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,865 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,865 DEBUG PCDerivation$ Expression of path for object occurrence networking/tunctl.c: ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m"))
2012-01-10 11:52:06,865 DEBUG PCDerivation$ Trying to find path for: [Object: vconfig]
2012-01-10 11:52:06,865 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m")), sourceFile -> networking/vconfig.c, generated -> false, objectFile -> vconfig, listName -> lib)
2012-01-10 11:52:06,865 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m")), sourceFile -> networking/vconfig.c, generated -> false, objectFile -> vconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,866 DEBUG PCDerivation$ Expression of path for object occurrence networking/vconfig.c: ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m"))
2012-01-10 11:52:06,866 DEBUG PCDerivation$ Trying to find path for: [Object: wget]
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WGET == "y") || (CONFIG_WGET == "m")), sourceFile -> networking/wget.c, generated -> false, objectFile -> wget, listName -> lib)
2012-01-10 11:52:06,866 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WGET == "y") || (CONFIG_WGET == "m")), sourceFile -> networking/wget.c, generated -> false, objectFile -> wget, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,866 DEBUG PCDerivation$ Expression of path for object occurrence networking/wget.c: ((CONFIG_WGET == "y") || (CONFIG_WGET == "m"))
2012-01-10 11:52:06,866 DEBUG PCDerivation$ Trying to find path for: [Object: zcip]
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m")), sourceFile -> networking/zcip.c, generated -> false, objectFile -> zcip, listName -> lib)
2012-01-10 11:52:06,866 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m")), sourceFile -> networking/zcip.c, generated -> false, objectFile -> zcip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,866 DEBUG PCDerivation$ Expression of path for object occurrence networking/zcip.c: ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m"))
2012-01-10 11:52:06,866 DEBUG PCDerivation$ Trying to find path for: [Object: tcpudp]
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp.c, generated -> false, objectFile -> tcpudp, listName -> lib)
2012-01-10 11:52:06,866 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp.c, generated -> false, objectFile -> tcpudp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,866 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,867 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,867 DEBUG PCDerivation$ Expression of path for object occurrence networking/tcpudp.c: (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m")))
2012-01-10 11:52:06,867 DEBUG PCDerivation$ Trying to find path for: [Object: tcpudp_perhost]
2012-01-10 11:52:06,867 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp_perhost.c, generated -> false, objectFile -> tcpudp_perhost, listName -> lib)
2012-01-10 11:52:06,867 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp_perhost.c, generated -> false, objectFile -> tcpudp_perhost, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,867 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:52:06,867 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,867 DEBUG PCDerivation$ Expression of path for object occurrence networking/tcpudp_perhost.c: (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m")))
2012-01-10 11:52:06,867 DEBUG PCDerivation$ Trying to find path for: [Object: utils]
2012-01-10 11:52:06,867 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/utils.c, generated -> false, objectFile -> utils, listName -> lib)
2012-01-10 11:52:06,867 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/utils.c, generated -> false, objectFile -> utils, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,867 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,867 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,867 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,867 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/utils.c: ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-10 11:52:06,867 DEBUG PCDerivation$ Trying to find path for: [Object: ip_parse_common_args]
2012-01-10 11:52:06,867 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/ip_parse_common_args.c, generated -> false, objectFile -> ip_parse_common_args, listName -> lib)
2012-01-10 11:52:06,868 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/ip_parse_common_args.c, generated -> false, objectFile -> ip_parse_common_args, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,868 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,868 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,868 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ip_parse_common_args.c: (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-10 11:52:06,868 DEBUG PCDerivation$ Trying to find path for: [Object: libnetlink]
2012-01-10 11:52:06,868 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/libnetlink.c, generated -> false, objectFile -> libnetlink, listName -> lib)
2012-01-10 11:52:06,868 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/libnetlink.c, generated -> false, objectFile -> libnetlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,868 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,868 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,868 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/libnetlink.c: (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-10 11:52:06,868 DEBUG PCDerivation$ Trying to find path for: [Object: ll_addr]
2012-01-10 11:52:06,868 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_addr.c, generated -> false, objectFile -> ll_addr, listName -> lib)
2012-01-10 11:52:06,868 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_addr.c, generated -> false, objectFile -> ll_addr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,868 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,868 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,868 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_addr.c: ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-10 11:52:06,868 DEBUG PCDerivation$ Trying to find path for: [Object: ll_map]
2012-01-10 11:52:06,868 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/ll_map.c, generated -> false, objectFile -> ll_map, listName -> lib)
2012-01-10 11:52:06,869 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/ll_map.c, generated -> false, objectFile -> ll_map, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,869 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,869 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,869 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_map.c: (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-10 11:52:06,869 DEBUG PCDerivation$ Trying to find path for: [Object: ll_proto]
2012-01-10 11:52:06,869 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/libiproute/ll_proto.c, generated -> false, objectFile -> ll_proto, listName -> lib)
2012-01-10 11:52:06,869 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/libiproute/ll_proto.c, generated -> false, objectFile -> ll_proto, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,869 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,869 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,869 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_proto.c: ((CONFIG_IP == "y") || (CONFIG_IP == "m"))
2012-01-10 11:52:06,869 DEBUG PCDerivation$ Trying to find path for: [Object: ll_types]
2012-01-10 11:52:06,869 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_types.c, generated -> false, objectFile -> ll_types, listName -> lib)
2012-01-10 11:52:06,869 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_types.c, generated -> false, objectFile -> ll_types, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,869 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,869 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,869 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_types.c: ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-10 11:52:06,869 DEBUG PCDerivation$ Trying to find path for: [Object: rt_names]
2012-01-10 11:52:06,869 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/rt_names.c, generated -> false, objectFile -> rt_names, listName -> lib)
2012-01-10 11:52:06,870 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/rt_names.c, generated -> false, objectFile -> rt_names, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,870 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,870 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,870 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/rt_names.c: (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-10 11:52:06,870 DEBUG PCDerivation$ Trying to find path for: [Object: rtm_map]
2012-01-10 11:52:06,870 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/rtm_map.c, generated -> false, objectFile -> rtm_map, listName -> lib)
2012-01-10 11:52:06,870 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/rtm_map.c, generated -> false, objectFile -> rtm_map, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,870 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,870 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,870 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/rtm_map.c: (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-10 11:52:06,870 DEBUG PCDerivation$ Trying to find path for: [Object: ipaddress]
2012-01-10 11:52:06,870 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ipaddress.c, generated -> false, objectFile -> ipaddress, listName -> lib)
2012-01-10 11:52:06,870 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ipaddress.c, generated -> false, objectFile -> ipaddress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,870 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,870 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,870 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ipaddress.c: (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-10 11:52:06,870 DEBUG PCDerivation$ Trying to find path for: [Object: iplink]
2012-01-10 11:52:06,870 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")), sourceFile -> networking/libiproute/iplink.c, generated -> false, objectFile -> iplink, listName -> lib)
2012-01-10 11:52:06,871 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")), sourceFile -> networking/libiproute/iplink.c, generated -> false, objectFile -> iplink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,871 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,871 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,871 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iplink.c: ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))
2012-01-10 11:52:06,871 DEBUG PCDerivation$ Trying to find path for: [Object: iproute]
2012-01-10 11:52:06,871 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")), sourceFile -> networking/libiproute/iproute.c, generated -> false, objectFile -> iproute, listName -> lib)
2012-01-10 11:52:06,871 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")), sourceFile -> networking/libiproute/iproute.c, generated -> false, objectFile -> iproute, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,871 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,871 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,871 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iproute.c: ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))
2012-01-10 11:52:06,871 DEBUG PCDerivation$ Trying to find path for: [Object: iptunnel]
2012-01-10 11:52:06,871 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m")), sourceFile -> networking/libiproute/iptunnel.c, generated -> false, objectFile -> iptunnel, listName -> lib)
2012-01-10 11:52:06,871 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m")), sourceFile -> networking/libiproute/iptunnel.c, generated -> false, objectFile -> iptunnel, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,871 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,871 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,871 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iptunnel.c: ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))
2012-01-10 11:52:06,871 DEBUG PCDerivation$ Trying to find path for: [Object: iprule]
2012-01-10 11:52:06,871 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")), sourceFile -> networking/libiproute/iprule.c, generated -> false, objectFile -> iprule, listName -> lib)
2012-01-10 11:52:06,872 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")), sourceFile -> networking/libiproute/iprule.c, generated -> false, objectFile -> iprule, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,872 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:52:06,872 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,872 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iprule.c: ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))
2012-01-10 11:52:06,872 DEBUG PCDerivation$ Trying to find path for: [Object: d6_dhcpc]
2012-01-10 11:52:06,872 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_dhcpc.c, generated -> false, objectFile -> d6_dhcpc, listName -> lib)
2012-01-10 11:52:06,872 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_dhcpc.c, generated -> false, objectFile -> d6_dhcpc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,872 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,872 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,872 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,872 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_dhcpc.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-10 11:52:06,872 DEBUG PCDerivation$ Trying to find path for: [Object: d6_packet]
2012-01-10 11:52:06,872 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_packet.c, generated -> false, objectFile -> d6_packet, listName -> lib)
2012-01-10 11:52:06,872 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_packet.c, generated -> false, objectFile -> d6_packet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,872 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,872 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,872 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_packet.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-10 11:52:06,872 DEBUG PCDerivation$ Trying to find path for: [Object: d6_socket]
2012-01-10 11:52:06,872 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_socket.c, generated -> false, objectFile -> d6_socket, listName -> lib)
2012-01-10 11:52:06,873 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_socket.c, generated -> false, objectFile -> d6_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,873 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,873 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,873 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_socket.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-10 11:52:06,873 DEBUG PCDerivation$ Trying to find path for: [Object: common]
2012-01-10 11:52:06,873 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/common.c, generated -> false, objectFile -> common, listName -> lib)
2012-01-10 11:52:06,873 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/common.c, generated -> false, objectFile -> common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,873 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,873 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,873 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/common.c: ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:52:06,873 DEBUG PCDerivation$ Trying to find path for: [Object: packet]
2012-01-10 11:52:06,873 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/packet.c, generated -> false, objectFile -> packet, listName -> lib)
2012-01-10 11:52:06,873 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/packet.c, generated -> false, objectFile -> packet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,873 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,873 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,873 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/packet.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:52:06,873 DEBUG PCDerivation$ Trying to find path for: [Object: signalpipe]
2012-01-10 11:52:06,873 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/signalpipe.c, generated -> false, objectFile -> signalpipe, listName -> lib)
2012-01-10 11:52:06,874 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/signalpipe.c, generated -> false, objectFile -> signalpipe, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,874 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,874 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,874 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/signalpipe.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:52:06,874 DEBUG PCDerivation$ Trying to find path for: [Object: socket]
2012-01-10 11:52:06,874 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/socket.c, generated -> false, objectFile -> socket, listName -> lib)
2012-01-10 11:52:06,874 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/socket.c, generated -> false, objectFile -> socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,874 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,874 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,874 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/socket.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:52:06,874 DEBUG PCDerivation$ Trying to find path for: [Object: dhcpc]
2012-01-10 11:52:06,874 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")), sourceFile -> networking/udhcp/dhcpc.c, generated -> false, objectFile -> dhcpc, listName -> lib)
2012-01-10 11:52:06,874 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")), sourceFile -> networking/udhcp/dhcpc.c, generated -> false, objectFile -> dhcpc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,874 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,874 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,874 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcpc.c: ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))
2012-01-10 11:52:06,874 DEBUG PCDerivation$ Trying to find path for: [Object: dhcpd]
2012-01-10 11:52:06,874 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/dhcpd.c, generated -> false, objectFile -> dhcpd, listName -> lib)
2012-01-10 11:52:06,875 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/dhcpd.c, generated -> false, objectFile -> dhcpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,875 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,875 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,875 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcpd.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:52:06,875 DEBUG PCDerivation$ Trying to find path for: [Object: arpping]
2012-01-10 11:52:06,875 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m"))), sourceFile -> networking/udhcp/arpping.c, generated -> false, objectFile -> arpping, listName -> lib)
2012-01-10 11:52:06,875 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m"))), sourceFile -> networking/udhcp/arpping.c, generated -> false, objectFile -> arpping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,875 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,875 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,875 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/arpping.c: (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m")))
2012-01-10 11:52:06,875 DEBUG PCDerivation$ Trying to find path for: [Object: files]
2012-01-10 11:52:06,875 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/files.c, generated -> false, objectFile -> files, listName -> lib)
2012-01-10 11:52:06,875 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/files.c, generated -> false, objectFile -> files, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,875 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,875 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,875 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/files.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:52:06,875 DEBUG PCDerivation$ Trying to find path for: [Object: leases]
2012-01-10 11:52:06,875 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/leases.c, generated -> false, objectFile -> leases, listName -> lib)
2012-01-10 11:52:06,875 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/leases.c, generated -> false, objectFile -> leases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,876 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,876 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,876 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/leases.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:52:06,876 DEBUG PCDerivation$ Trying to find path for: [Object: static_leases]
2012-01-10 11:52:06,876 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/static_leases.c, generated -> false, objectFile -> static_leases, listName -> lib)
2012-01-10 11:52:06,876 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/static_leases.c, generated -> false, objectFile -> static_leases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,876 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,876 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,876 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/static_leases.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:52:06,876 DEBUG PCDerivation$ Trying to find path for: [Object: dumpleases]
2012-01-10 11:52:06,876 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m")), sourceFile -> networking/udhcp/dumpleases.c, generated -> false, objectFile -> dumpleases, listName -> lib)
2012-01-10 11:52:06,876 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m")), sourceFile -> networking/udhcp/dumpleases.c, generated -> false, objectFile -> dumpleases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,876 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,876 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,876 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dumpleases.c: ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m"))
2012-01-10 11:52:06,876 DEBUG PCDerivation$ Trying to find path for: [Object: dhcprelay]
2012-01-10 11:52:06,876 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m")), sourceFile -> networking/udhcp/dhcprelay.c, generated -> false, objectFile -> dhcprelay, listName -> lib)
2012-01-10 11:52:06,876 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m")), sourceFile -> networking/udhcp/dhcprelay.c, generated -> false, objectFile -> dhcprelay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,877 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,877 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,877 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcprelay.c: ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m"))
2012-01-10 11:52:06,877 DEBUG PCDerivation$ Trying to find path for: [Object: domain_codec]
2012-01-10 11:52:06,877 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m")), sourceFile -> networking/udhcp/domain_codec.c, generated -> false, objectFile -> domain_codec, listName -> lib)
2012-01-10 11:52:06,877 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m")), sourceFile -> networking/udhcp/domain_codec.c, generated -> false, objectFile -> domain_codec, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,877 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:52:06,877 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,877 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/domain_codec.c: ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m"))
2012-01-10 11:52:06,877 DEBUG PCDerivation$ Trying to find path for: [Object: lpd]
2012-01-10 11:52:06,877 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LPD == "y") || (CONFIG_LPD == "m")), sourceFile -> printutils/lpd.c, generated -> false, objectFile -> lpd, listName -> lib)
2012-01-10 11:52:06,877 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LPD == "y") || (CONFIG_LPD == "m")), sourceFile -> printutils/lpd.c, generated -> false, objectFile -> lpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:52:06,877 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:52:06,877 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,877 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,877 DEBUG PCDerivation$ Expression of path for object occurrence printutils/lpd.c: ((CONFIG_LPD == "y") || (CONFIG_LPD == "m"))
2012-01-10 11:52:06,877 DEBUG PCDerivation$ Trying to find path for: [Object: lpr]
2012-01-10 11:52:06,877 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m"))), sourceFile -> printutils/lpr.c, generated -> false, objectFile -> lpr, listName -> lib)
2012-01-10 11:52:06,877 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m"))), sourceFile -> printutils/lpr.c, generated -> false, objectFile -> lpr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:52:06,878 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:52:06,878 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,878 DEBUG PCDerivation$ Expression of path for object occurrence printutils/lpr.c: (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m")))
2012-01-10 11:52:06,878 DEBUG PCDerivation$ Trying to find path for: [Object: iostat]
2012-01-10 11:52:06,878 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")), sourceFile -> procps/iostat.c, generated -> false, objectFile -> iostat, listName -> lib)
2012-01-10 11:52:06,878 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")), sourceFile -> procps/iostat.c, generated -> false, objectFile -> iostat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,878 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,878 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,878 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,878 DEBUG PCDerivation$ Expression of path for object occurrence procps/iostat.c: ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m"))
2012-01-10 11:52:06,878 DEBUG PCDerivation$ Trying to find path for: [Object: mpstat]
2012-01-10 11:52:06,878 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m")), sourceFile -> procps/mpstat.c, generated -> false, objectFile -> mpstat, listName -> lib)
2012-01-10 11:52:06,878 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m")), sourceFile -> procps/mpstat.c, generated -> false, objectFile -> mpstat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,878 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,878 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,878 DEBUG PCDerivation$ Expression of path for object occurrence procps/mpstat.c: ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))
2012-01-10 11:52:06,878 DEBUG PCDerivation$ Trying to find path for: [Object: nmeter]
2012-01-10 11:52:06,878 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m")), sourceFile -> procps/nmeter.c, generated -> false, objectFile -> nmeter, listName -> lib)
2012-01-10 11:52:06,879 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m")), sourceFile -> procps/nmeter.c, generated -> false, objectFile -> nmeter, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,879 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,879 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,879 DEBUG PCDerivation$ Expression of path for object occurrence procps/nmeter.c: ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m"))
2012-01-10 11:52:06,879 DEBUG PCDerivation$ Trying to find path for: [Object: pmap]
2012-01-10 11:52:06,879 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m")), sourceFile -> procps/pmap.c, generated -> false, objectFile -> pmap, listName -> lib)
2012-01-10 11:52:06,879 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m")), sourceFile -> procps/pmap.c, generated -> false, objectFile -> pmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,879 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,879 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,879 DEBUG PCDerivation$ Expression of path for object occurrence procps/pmap.c: ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m"))
2012-01-10 11:52:06,879 DEBUG PCDerivation$ Trying to find path for: [Object: powertop]
2012-01-10 11:52:06,879 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")), sourceFile -> procps/powertop.c, generated -> false, objectFile -> powertop, listName -> lib)
2012-01-10 11:52:06,879 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")), sourceFile -> procps/powertop.c, generated -> false, objectFile -> powertop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,879 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,879 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,879 DEBUG PCDerivation$ Expression of path for object occurrence procps/powertop.c: ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))
2012-01-10 11:52:06,879 DEBUG PCDerivation$ Trying to find path for: [Object: pstree]
2012-01-10 11:52:06,879 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m")), sourceFile -> procps/pstree.c, generated -> false, objectFile -> pstree, listName -> lib)
2012-01-10 11:52:06,880 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m")), sourceFile -> procps/pstree.c, generated -> false, objectFile -> pstree, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,880 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,880 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,880 DEBUG PCDerivation$ Expression of path for object occurrence procps/pstree.c: ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m"))
2012-01-10 11:52:06,880 DEBUG PCDerivation$ Trying to find path for: [Object: pwdx]
2012-01-10 11:52:06,880 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m")), sourceFile -> procps/pwdx.c, generated -> false, objectFile -> pwdx, listName -> lib)
2012-01-10 11:52:06,880 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m")), sourceFile -> procps/pwdx.c, generated -> false, objectFile -> pwdx, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,880 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,880 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,880 DEBUG PCDerivation$ Expression of path for object occurrence procps/pwdx.c: ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m"))
2012-01-10 11:52:06,880 DEBUG PCDerivation$ Trying to find path for: [Object: smemcap]
2012-01-10 11:52:06,880 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m")), sourceFile -> procps/smemcap.c, generated -> false, objectFile -> smemcap, listName -> lib)
2012-01-10 11:52:06,880 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m")), sourceFile -> procps/smemcap.c, generated -> false, objectFile -> smemcap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,880 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,880 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,880 DEBUG PCDerivation$ Expression of path for object occurrence procps/smemcap.c: ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m"))
2012-01-10 11:52:06,880 DEBUG PCDerivation$ Trying to find path for: [Object: free]
2012-01-10 11:52:06,880 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FREE == "y") || (CONFIG_FREE == "m")), sourceFile -> procps/free.c, generated -> false, objectFile -> free, listName -> lib)
2012-01-10 11:52:06,880 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FREE == "y") || (CONFIG_FREE == "m")), sourceFile -> procps/free.c, generated -> false, objectFile -> free, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,881 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,881 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,881 DEBUG PCDerivation$ Expression of path for object occurrence procps/free.c: ((CONFIG_FREE == "y") || (CONFIG_FREE == "m"))
2012-01-10 11:52:06,881 DEBUG PCDerivation$ Trying to find path for: [Object: fuser]
2012-01-10 11:52:06,881 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m")), sourceFile -> procps/fuser.c, generated -> false, objectFile -> fuser, listName -> lib)
2012-01-10 11:52:06,881 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m")), sourceFile -> procps/fuser.c, generated -> false, objectFile -> fuser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,881 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,881 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,881 DEBUG PCDerivation$ Expression of path for object occurrence procps/fuser.c: ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m"))
2012-01-10 11:52:06,881 DEBUG PCDerivation$ Trying to find path for: [Object: kill]
2012-01-10 11:52:06,881 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))), sourceFile -> procps/kill.c, generated -> false, objectFile -> kill, listName -> lib)
2012-01-10 11:52:06,881 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))), sourceFile -> procps/kill.c, generated -> false, objectFile -> kill, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,881 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,881 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,881 DEBUG PCDerivation$ Expression of path for object occurrence procps/kill.c: (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")))
2012-01-10 11:52:06,881 DEBUG PCDerivation$ Trying to find path for: [Object: pgrep]
2012-01-10 11:52:06,881 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))), sourceFile -> procps/pgrep.c, generated -> false, objectFile -> pgrep, listName -> lib)
2012-01-10 11:52:06,881 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))), sourceFile -> procps/pgrep.c, generated -> false, objectFile -> pgrep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,882 DEBUG PCDerivation$ Expression of path for object occurrence procps/pgrep.c: (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m")))
2012-01-10 11:52:06,882 DEBUG PCDerivation$ Trying to find path for: [Object: pidof]
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m")), sourceFile -> procps/pidof.c, generated -> false, objectFile -> pidof, listName -> lib)
2012-01-10 11:52:06,882 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m")), sourceFile -> procps/pidof.c, generated -> false, objectFile -> pidof, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,882 DEBUG PCDerivation$ Expression of path for object occurrence procps/pidof.c: ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m"))
2012-01-10 11:52:06,882 DEBUG PCDerivation$ Trying to find path for: [Object: ps]
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PS == "y") || (CONFIG_PS == "m")), sourceFile -> procps/ps.c, generated -> false, objectFile -> ps, listName -> lib)
2012-01-10 11:52:06,882 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PS == "y") || (CONFIG_PS == "m")), sourceFile -> procps/ps.c, generated -> false, objectFile -> ps, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,882 DEBUG PCDerivation$ Expression of path for object occurrence procps/ps.c: ((CONFIG_PS == "y") || (CONFIG_PS == "m"))
2012-01-10 11:52:06,882 DEBUG PCDerivation$ Trying to find path for: [Object: renice]
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m")), sourceFile -> procps/renice.c, generated -> false, objectFile -> renice, listName -> lib)
2012-01-10 11:52:06,882 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m")), sourceFile -> procps/renice.c, generated -> false, objectFile -> renice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,882 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,883 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,883 DEBUG PCDerivation$ Expression of path for object occurrence procps/renice.c: ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m"))
2012-01-10 11:52:06,883 DEBUG PCDerivation$ Trying to find path for: [Object: sysctl]
2012-01-10 11:52:06,883 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m")), sourceFile -> procps/sysctl.c, generated -> false, objectFile -> sysctl, listName -> lib)
2012-01-10 11:52:06,883 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m")), sourceFile -> procps/sysctl.c, generated -> false, objectFile -> sysctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,883 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,883 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,883 DEBUG PCDerivation$ Expression of path for object occurrence procps/sysctl.c: ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m"))
2012-01-10 11:52:06,883 DEBUG PCDerivation$ Trying to find path for: [Object: top]
2012-01-10 11:52:06,883 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOP == "y") || (CONFIG_TOP == "m")), sourceFile -> procps/top.c, generated -> false, objectFile -> top, listName -> lib)
2012-01-10 11:52:06,883 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOP == "y") || (CONFIG_TOP == "m")), sourceFile -> procps/top.c, generated -> false, objectFile -> top, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,883 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,883 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,883 DEBUG PCDerivation$ Expression of path for object occurrence procps/top.c: ((CONFIG_TOP == "y") || (CONFIG_TOP == "m"))
2012-01-10 11:52:06,883 DEBUG PCDerivation$ Trying to find path for: [Object: uptime]
2012-01-10 11:52:06,883 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m")), sourceFile -> procps/uptime.c, generated -> false, objectFile -> uptime, listName -> lib)
2012-01-10 11:52:06,883 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m")), sourceFile -> procps/uptime.c, generated -> false, objectFile -> uptime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,883 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,884 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,884 DEBUG PCDerivation$ Expression of path for object occurrence procps/uptime.c: ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m"))
2012-01-10 11:52:06,884 DEBUG PCDerivation$ Trying to find path for: [Object: watch]
2012-01-10 11:52:06,884 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m")), sourceFile -> procps/watch.c, generated -> false, objectFile -> watch, listName -> lib)
2012-01-10 11:52:06,884 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m")), sourceFile -> procps/watch.c, generated -> false, objectFile -> watch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,884 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:52:06,884 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,884 DEBUG PCDerivation$ Expression of path for object occurrence procps/watch.c: ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m"))
2012-01-10 11:52:06,884 DEBUG PCDerivation$ Trying to find path for: [Object: runsv]
2012-01-10 11:52:06,884 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m")), sourceFile -> runit/runsv.c, generated -> false, objectFile -> runsv, listName -> lib)
2012-01-10 11:52:06,884 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m")), sourceFile -> runit/runsv.c, generated -> false, objectFile -> runsv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,884 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,884 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,884 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,884 DEBUG PCDerivation$ Expression of path for object occurrence runit/runsv.c: ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m"))
2012-01-10 11:52:06,884 DEBUG PCDerivation$ Trying to find path for: [Object: runsvdir]
2012-01-10 11:52:06,884 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m")), sourceFile -> runit/runsvdir.c, generated -> false, objectFile -> runsvdir, listName -> lib)
2012-01-10 11:52:06,884 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m")), sourceFile -> runit/runsvdir.c, generated -> false, objectFile -> runsvdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,884 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,885 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,885 DEBUG PCDerivation$ Expression of path for object occurrence runit/runsvdir.c: ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m"))
2012-01-10 11:52:06,885 DEBUG PCDerivation$ Trying to find path for: [Object: sv]
2012-01-10 11:52:06,885 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SV == "y") || (CONFIG_SV == "m")), sourceFile -> runit/sv.c, generated -> false, objectFile -> sv, listName -> lib)
2012-01-10 11:52:06,885 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SV == "y") || (CONFIG_SV == "m")), sourceFile -> runit/sv.c, generated -> false, objectFile -> sv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,885 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,885 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,885 DEBUG PCDerivation$ Expression of path for object occurrence runit/sv.c: ((CONFIG_SV == "y") || (CONFIG_SV == "m"))
2012-01-10 11:52:06,885 DEBUG PCDerivation$ Trying to find path for: [Object: svlogd]
2012-01-10 11:52:06,885 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m")), sourceFile -> runit/svlogd.c, generated -> false, objectFile -> svlogd, listName -> lib)
2012-01-10 11:52:06,885 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m")), sourceFile -> runit/svlogd.c, generated -> false, objectFile -> svlogd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,885 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,885 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,885 DEBUG PCDerivation$ Expression of path for object occurrence runit/svlogd.c: ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m"))
2012-01-10 11:52:06,885 DEBUG PCDerivation$ Trying to find path for: [Object: chpst]
2012-01-10 11:52:06,885 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m"))), sourceFile -> runit/chpst.c, generated -> false, objectFile -> chpst, listName -> lib)
2012-01-10 11:52:06,885 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m"))), sourceFile -> runit/chpst.c, generated -> false, objectFile -> chpst, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,885 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:52:06,886 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,886 DEBUG PCDerivation$ Expression of path for object occurrence runit/chpst.c: ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m")))
2012-01-10 11:52:06,886 DEBUG PCDerivation$ Trying to find path for: [Object: chcon]
2012-01-10 11:52:06,886 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m")), sourceFile -> selinux/chcon.c, generated -> false, objectFile -> chcon, listName -> lib)
2012-01-10 11:52:06,886 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m")), sourceFile -> selinux/chcon.c, generated -> false, objectFile -> chcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,886 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,886 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild) is: RootNode --> Map()
2012-01-10 11:52:06,886 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,886 DEBUG PCDerivation$ Expression of path for object occurrence selinux/chcon.c: ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m"))
2012-01-10 11:52:06,886 DEBUG PCDerivation$ Trying to find path for: [Object: getenforce]
2012-01-10 11:52:06,886 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m")), sourceFile -> selinux/getenforce.c, generated -> false, objectFile -> getenforce, listName -> lib)
2012-01-10 11:52:06,886 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m")), sourceFile -> selinux/getenforce.c, generated -> false, objectFile -> getenforce, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,886 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,886 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,886 DEBUG PCDerivation$ Expression of path for object occurrence selinux/getenforce.c: ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m"))
2012-01-10 11:52:06,886 DEBUG PCDerivation$ Trying to find path for: [Object: getsebool]
2012-01-10 11:52:06,886 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m")), sourceFile -> selinux/getsebool.c, generated -> false, objectFile -> getsebool, listName -> lib)
2012-01-10 11:52:06,886 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m")), sourceFile -> selinux/getsebool.c, generated -> false, objectFile -> getsebool, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,887 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,887 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,887 DEBUG PCDerivation$ Expression of path for object occurrence selinux/getsebool.c: ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m"))
2012-01-10 11:52:06,887 DEBUG PCDerivation$ Trying to find path for: [Object: load_policy]
2012-01-10 11:52:06,887 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m")), sourceFile -> selinux/load_policy.c, generated -> false, objectFile -> load_policy, listName -> lib)
2012-01-10 11:52:06,887 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m")), sourceFile -> selinux/load_policy.c, generated -> false, objectFile -> load_policy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,887 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,887 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,887 DEBUG PCDerivation$ Expression of path for object occurrence selinux/load_policy.c: ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m"))
2012-01-10 11:52:06,888 DEBUG PCDerivation$ Trying to find path for: [Object: matchpathcon]
2012-01-10 11:52:06,888 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m")), sourceFile -> selinux/matchpathcon.c, generated -> false, objectFile -> matchpathcon, listName -> lib)
2012-01-10 11:52:06,888 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m")), sourceFile -> selinux/matchpathcon.c, generated -> false, objectFile -> matchpathcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,888 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:52:06,888 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:52:06,888 DEBUG PCDerivation$ Expression of path for object occurrence selinux/matchpathcon.c: ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m"))
2012-01-10 11:52:06,888 DEBUG PCDerivation$ Trying to find path for: [Object: runcon]
2012-01-10 11:52:06,888 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m")), sourceFile -> selinux/runcon.c, generated -> false, objectFile -> runcon, listName -> lib)
2012-01-10 11:58:33,864 INFO KBuildMinerMain$ Starting KBuildMiner...
2012-01-10 11:58:33,942 INFO KBuildMinerMain$ === PreProcessing applets/Kbuild
2012-01-10 11:58:33,945 INFO KBuildMinerMain$ === Processing applets/Kbuild
2012-01-10 11:58:34,002 TRACE ModelFactory addObject
2012-01-10 11:58:34,007 TRACE ModelFactory  addVariableAssignment: always, value: $(hostprogs-y)
2012-01-10 11:58:34,010 TRACE ModelFactory pushIf
2012-01-10 11:58:34,014 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@f274d33,Hole(List(gsd.buildanalysis.linux.model.BNode@79170f08, [Object: applets]),NodeLoc([Makefile: applets/Kbuild],Top),List()))
2012-01-10 11:58:34,018 TRACE ModelFactory pushElse
2012-01-10 11:58:34,019 TRACE ModelFactory  addVariableAssignment: srctree_slash, value: $(srctree)/
2012-01-10 11:58:34,021 TRACE ModelFactory popEndIf
2012-01-10 11:58:34,022 TRACE ModelFactory  addVariableAssignment: HOSTCFLAGS_usage.o, value: -I$(srctree_slash)include -Iinclude
2012-01-10 11:58:34,023 TRACE ModelFactory  addVariableAssignment: HOSTCFLAGS_usage_pod.o, value: -I$(srctree_slash)include -Iinclude
2012-01-10 11:58:34,034 TRACE ModelFactory  addVariableAssignment: quiet_cmd_gen_usage_compressed, value: GEN     include/usage_compressed.h
2012-01-10 11:58:34,035 TRACE ModelFactory  addVariableAssignment: cmd_gen_usage_compressed, value: $(srctree_slash)applets/usage_compressed include/usage_compressed.h applets
2012-01-10 11:58:34,041 TRACE ModelFactory  addVariableAssignment: quiet_cmd_gen_applet_tables, value: GEN     include/applet_tables.h
2012-01-10 11:58:34,042 TRACE ModelFactory  addVariableAssignment: cmd_gen_applet_tables, value: applets/applet_tables include/applet_tables.h include/NUM_APPLETS.h
2012-01-10 11:58:34,053 INFO KBuildMinerMain$ === PostProcessing applets/Kbuild
2012-01-10 11:58:34,093 INFO KBuildMinerMain$ === PreProcessing archival/Kbuild
2012-01-10 11:58:34,093 INFO KBuildMinerMain$ === Processing archival/Kbuild
2012-01-10 11:58:34,097 TRACE ModelFactory addMakefile
2012-01-10 11:58:34,102 TRACE ModelFactory addObject
2012-01-10 11:58:34,102 TRACE ModelFactory addObject
2012-01-10 11:58:34,102 TRACE ModelFactory addObject
2012-01-10 11:58:34,103 TRACE ModelFactory addObject
2012-01-10 11:58:34,103 TRACE ModelFactory addObject
2012-01-10 11:58:34,104 TRACE ModelFactory addObject
2012-01-10 11:58:34,104 TRACE ModelFactory addObject
2012-01-10 11:58:34,105 TRACE ModelFactory addObject
2012-01-10 11:58:34,105 TRACE ModelFactory addObject
2012-01-10 11:58:34,106 TRACE ModelFactory addObject
2012-01-10 11:58:34,106 TRACE ModelFactory addObject
2012-01-10 11:58:34,106 TRACE ModelFactory addObject
2012-01-10 11:58:34,107 TRACE ModelFactory addObject
2012-01-10 11:58:34,107 TRACE ModelFactory addObject
2012-01-10 11:58:34,107 TRACE ModelFactory addObject
2012-01-10 11:58:34,108 TRACE ModelFactory addObject
2012-01-10 11:58:34,108 TRACE ModelFactory addObject
2012-01-10 11:58:34,109 TRACE ModelFactory addObject
2012-01-10 11:58:34,109 TRACE ModelFactory addObject
2012-01-10 11:58:34,110 INFO KBuildMinerMain$ === PostProcessing archival/Kbuild
2012-01-10 11:58:34,147 INFO KBuildMinerMain$ === PreProcessing archival/libarchive/Kbuild
2012-01-10 11:58:34,147 INFO KBuildMinerMain$ === Processing archival/libarchive/Kbuild
2012-01-10 11:58:34,151 TRACE ModelFactory pushListVariable: COMMON_FILES
2012-01-10 11:58:34,152 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:58:34,154 TRACE ModelFactory addObjectToList: data_skip
2012-01-10 11:58:34,154 TRACE ModelFactory addObjectToList: data_extract_all
2012-01-10 11:58:34,154 TRACE ModelFactory addObjectToList: data_extract_to_stdout
2012-01-10 11:58:34,154 TRACE ModelFactory addObjectToList: filter_accept_all
2012-01-10 11:58:34,154 TRACE ModelFactory addObjectToList: filter_accept_list
2012-01-10 11:58:34,154 TRACE ModelFactory addObjectToList: filter_accept_reject_list
2012-01-10 11:58:34,154 TRACE ModelFactory addObjectToList: header_skip
2012-01-10 11:58:34,155 TRACE ModelFactory addObjectToList: header_list
2012-01-10 11:58:34,155 TRACE ModelFactory addObjectToList: header_verbose_list
2012-01-10 11:58:34,155 TRACE ModelFactory addObjectToList: seek_by_read
2012-01-10 11:58:34,155 TRACE ModelFactory addObjectToList: seek_by_jump
2012-01-10 11:58:34,155 TRACE ModelFactory addObjectToList: data_align
2012-01-10 11:58:34,155 TRACE ModelFactory addObjectToList: find_list_entry
2012-01-10 11:58:34,155 TRACE ModelFactory addObjectToList: init_handle
2012-01-10 11:58:34,157 TRACE ModelFactory popListVariable
2012-01-10 11:58:34,157 TRACE ModelFactory  addVariableAssignment: COMMON_FILES, value: data_skip.o \
	data_extract_all.o \
	data_extract_to_stdout.o \
\
	filter_accept_all.o \
	filter_accept_list.o \
	filter_accept_reject_list.o \
\
	header_skip.o \
	header_list.o \
	header_verbose_list.o \
\
	seek_by_read.o \
	seek_by_jump.o \
\
	data_align.o \
	find_list_entry.o \
	init_handle.o
2012-01-10 11:58:34,157 TRACE ModelFactory pushListVariable: DPKG_FILES
2012-01-10 11:58:34,158 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:58:34,158 TRACE ModelFactory addObjectToList: get_header_ar
2012-01-10 11:58:34,158 TRACE ModelFactory addObjectToList: unpack_ar_archive
2012-01-10 11:58:34,158 TRACE ModelFactory addObjectToList: get_header_tar
2012-01-10 11:58:34,158 TRACE ModelFactory addObjectToList: filter_accept_list_reassign
2012-01-10 11:58:34,158 TRACE ModelFactory popListVariable
2012-01-10 11:58:34,158 TRACE ModelFactory  addVariableAssignment: DPKG_FILES, value: get_header_ar.o \
	unpack_ar_archive.o \
	get_header_tar.o \
	filter_accept_list_reassign.o
2012-01-10 11:58:34,159 TRACE ModelFactory addObject
2012-01-10 11:58:34,159 TRACE ModelFactory addObject
2012-01-10 11:58:34,159 TRACE ModelFactory addObject
2012-01-10 11:58:34,160 TRACE ModelFactory addObject
2012-01-10 11:58:34,160 TRACE ModelFactory addObject
2012-01-10 11:58:34,161 TRACE ModelFactory addObject
2012-01-10 11:58:34,163 TRACE ModelFactory addVariableReference
2012-01-10 11:58:34,163 TRACE ModelFactory addVariableReference
2012-01-10 11:58:34,164 TRACE ModelFactory addObject
2012-01-10 11:58:34,165 TRACE ModelFactory addObject
2012-01-10 11:58:34,165 TRACE ModelFactory addObject
2012-01-10 11:58:34,165 TRACE ModelFactory addObject
2012-01-10 11:58:34,166 TRACE ModelFactory addObject
2012-01-10 11:58:34,166 TRACE ModelFactory addObject
2012-01-10 11:58:34,166 TRACE ModelFactory addObject
2012-01-10 11:58:34,167 TRACE ModelFactory addObject
2012-01-10 11:58:34,167 TRACE ModelFactory addObject
2012-01-10 11:58:34,168 TRACE ModelFactory addObject
2012-01-10 11:58:34,168 TRACE ModelFactory addObject
2012-01-10 11:58:34,168 TRACE ModelFactory addObject
2012-01-10 11:58:34,169 TRACE ModelFactory addObject
2012-01-10 11:58:34,170 TRACE ModelFactory addObject
2012-01-10 11:58:34,170 TRACE ModelFactory addObject
2012-01-10 11:58:34,170 TRACE ModelFactory addObject
2012-01-10 11:58:34,171 TRACE ModelFactory addObject
2012-01-10 11:58:34,171 TRACE ModelFactory addObject
2012-01-10 11:58:34,172 TRACE ModelFactory addObject
2012-01-10 11:58:34,172 TRACE ModelFactory addObject
2012-01-10 11:58:34,172 TRACE ModelFactory addObject
2012-01-10 11:58:34,173 TRACE ModelFactory addObject
2012-01-10 11:58:34,173 TRACE ModelFactory addObject
2012-01-10 11:58:34,173 TRACE ModelFactory addObject
2012-01-10 11:58:34,174 TRACE ModelFactory addObject
2012-01-10 11:58:34,175 TRACE ModelFactory addObject
2012-01-10 11:58:34,176 TRACE ModelFactory addObject
2012-01-10 11:58:34,177 TRACE ModelFactory addObject
2012-01-10 11:58:34,178 TRACE ModelFactory addObject
2012-01-10 11:58:34,178 TRACE ModelFactory pushIf
2012-01-10 11:58:34,179 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@1f4bac87,Hole(List([Object: data_extract_to_command], [Object: decompress_bunzip2], [Object: decompress_bunzip2], [Object: decompress_unxz], [Object: open_transformer], [Object: get_header_tar_lzma], [Object: decompress_unlzma], [Object: open_transformer], [Object: get_header_tar_bz2], [Object: decompress_bunzip2], [Object: open_transformer], [Object: get_header_tar_gz], [Object: decompress_unzip], [Object: open_transformer], [Object: decompress_uncompress], [Object: open_transformer], [Object: lzo1x_9x], [Object: lzo1x_d], [Object: lzo1x_1o], [Object: lzo1x_1], [Object: decompress_unzip], [Object: decompress_uncompress], [Object: get_header_tar], [Object: get_header_cpio], [Object: decompress_unzip], [Object: open_transformer], [Object: get_header_cpio], [Object: decompress_unzip], [Object: decompress_unzip], [VariableReference: DPKG_FILES], [VariableReference: DPKG_FILES], [Object: get_header_cpio], [Object: decompress_unxz], [Object: decompress_unlzma], [Object: decompress_bunzip2], [Object: unpack_ar_archive], [Object: get_header_ar], gsd.buildanalysis.linux.model.BNode@71ef1d17, [VariableDefinition: DPKG_FILES], gsd.buildanalysis.linux.model.BNode@13e3eaeb, [VariableDefinition: COMMON_FILES]),NodeLoc([Makefile: archival/libarchive/Kbuild],Top),List()))
2012-01-10 11:58:34,179 TRACE ModelFactory addVariableReference
2012-01-10 11:58:34,179 TRACE ModelFactory popEndIf
2012-01-10 11:58:34,179 INFO KBuildMinerMain$ === PostProcessing archival/libarchive/Kbuild
2012-01-10 11:58:34,245 INFO KBuildMinerMain$ === PreProcessing archival/libarchive/Kbuild
2012-01-10 11:58:34,245 INFO KBuildMinerMain$ === Processing archival/libarchive/Kbuild
2012-01-10 11:58:34,247 TRACE ModelFactory pushListVariable: COMMON_FILES
2012-01-10 11:58:34,247 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:58:34,247 TRACE ModelFactory addObjectToList: data_skip
2012-01-10 11:58:34,247 TRACE ModelFactory addObjectToList: data_extract_all
2012-01-10 11:58:34,247 TRACE ModelFactory addObjectToList: data_extract_to_stdout
2012-01-10 11:58:34,247 TRACE ModelFactory addObjectToList: filter_accept_all
2012-01-10 11:58:34,247 TRACE ModelFactory addObjectToList: filter_accept_list
2012-01-10 11:58:34,247 TRACE ModelFactory addObjectToList: filter_accept_reject_list
2012-01-10 11:58:34,247 TRACE ModelFactory addObjectToList: header_skip
2012-01-10 11:58:34,248 TRACE ModelFactory addObjectToList: header_list
2012-01-10 11:58:34,248 TRACE ModelFactory addObjectToList: header_verbose_list
2012-01-10 11:58:34,248 TRACE ModelFactory addObjectToList: seek_by_read
2012-01-10 11:58:34,248 TRACE ModelFactory addObjectToList: seek_by_jump
2012-01-10 11:58:34,248 TRACE ModelFactory addObjectToList: data_align
2012-01-10 11:58:34,248 TRACE ModelFactory addObjectToList: find_list_entry
2012-01-10 11:58:34,248 TRACE ModelFactory addObjectToList: init_handle
2012-01-10 11:58:34,248 TRACE ModelFactory popListVariable
2012-01-10 11:58:34,248 TRACE ModelFactory  addVariableAssignment: COMMON_FILES, value: data_skip.o \
	data_extract_all.o \
	data_extract_to_stdout.o \
\
	filter_accept_all.o \
	filter_accept_list.o \
	filter_accept_reject_list.o \
\
	header_skip.o \
	header_list.o \
	header_verbose_list.o \
\
	seek_by_read.o \
	seek_by_jump.o \
\
	data_align.o \
	find_list_entry.o \
	init_handle.o
2012-01-10 11:58:34,248 TRACE ModelFactory pushListVariable: DPKG_FILES
2012-01-10 11:58:34,248 TRACE ModelFactory currentLoc=VariableDefinitionBNode
2012-01-10 11:58:34,248 TRACE ModelFactory addObjectToList: get_header_ar
2012-01-10 11:58:34,249 TRACE ModelFactory addObjectToList: unpack_ar_archive
2012-01-10 11:58:34,249 TRACE ModelFactory addObjectToList: get_header_tar
2012-01-10 11:58:34,249 TRACE ModelFactory addObjectToList: filter_accept_list_reassign
2012-01-10 11:58:34,249 TRACE ModelFactory popListVariable
2012-01-10 11:58:34,249 TRACE ModelFactory  addVariableAssignment: DPKG_FILES, value: get_header_ar.o \
	unpack_ar_archive.o \
	get_header_tar.o \
	filter_accept_list_reassign.o
2012-01-10 11:58:34,249 TRACE ModelFactory addObject
2012-01-10 11:58:34,249 TRACE ModelFactory addObject
2012-01-10 11:58:34,250 TRACE ModelFactory addObject
2012-01-10 11:58:34,250 TRACE ModelFactory addObject
2012-01-10 11:58:34,250 TRACE ModelFactory addObject
2012-01-10 11:58:34,251 TRACE ModelFactory addObject
2012-01-10 11:58:34,251 TRACE ModelFactory addVariableReference
2012-01-10 11:58:34,252 TRACE ModelFactory addVariableReference
2012-01-10 11:58:34,252 TRACE ModelFactory addObject
2012-01-10 11:58:34,252 TRACE ModelFactory addObject
2012-01-10 11:58:34,252 TRACE ModelFactory addObject
2012-01-10 11:58:34,253 TRACE ModelFactory addObject
2012-01-10 11:58:34,253 TRACE ModelFactory addObject
2012-01-10 11:58:34,253 TRACE ModelFactory addObject
2012-01-10 11:58:34,253 TRACE ModelFactory addObject
2012-01-10 11:58:34,254 TRACE ModelFactory addObject
2012-01-10 11:58:34,254 TRACE ModelFactory addObject
2012-01-10 11:58:34,255 TRACE ModelFactory addObject
2012-01-10 11:58:34,255 TRACE ModelFactory addObject
2012-01-10 11:58:34,255 TRACE ModelFactory addObject
2012-01-10 11:58:34,255 TRACE ModelFactory addObject
2012-01-10 11:58:34,255 TRACE ModelFactory addObject
2012-01-10 11:58:34,256 TRACE ModelFactory addObject
2012-01-10 11:58:34,256 TRACE ModelFactory addObject
2012-01-10 11:58:34,256 TRACE ModelFactory addObject
2012-01-10 11:58:34,256 TRACE ModelFactory addObject
2012-01-10 11:58:34,257 TRACE ModelFactory addObject
2012-01-10 11:58:34,257 TRACE ModelFactory addObject
2012-01-10 11:58:34,257 TRACE ModelFactory addObject
2012-01-10 11:58:34,257 TRACE ModelFactory addObject
2012-01-10 11:58:34,258 TRACE ModelFactory addObject
2012-01-10 11:58:34,258 TRACE ModelFactory addObject
2012-01-10 11:58:34,258 TRACE ModelFactory addObject
2012-01-10 11:58:34,258 TRACE ModelFactory addObject
2012-01-10 11:58:34,259 TRACE ModelFactory addObject
2012-01-10 11:58:34,259 TRACE ModelFactory addObject
2012-01-10 11:58:34,259 TRACE ModelFactory addObject
2012-01-10 11:58:34,260 TRACE ModelFactory pushIf
2012-01-10 11:58:34,260 TRACE ModelFactory currentLoc=NodeLoc(gsd.buildanalysis.linux.model.BNode@1f4bac87,Hole(List([Object: data_extract_to_command], [Object: decompress_bunzip2], [Object: decompress_bunzip2], [Object: decompress_unxz], [Object: open_transformer], [Object: get_header_tar_lzma], [Object: decompress_unlzma], [Object: open_transformer], [Object: get_header_tar_bz2], [Object: decompress_bunzip2], [Object: open_transformer], [Object: get_header_tar_gz], [Object: decompress_unzip], [Object: open_transformer], [Object: decompress_uncompress], [Object: open_transformer], [Object: lzo1x_9x], [Object: lzo1x_d], [Object: lzo1x_1o], [Object: lzo1x_1], [Object: decompress_unzip], [Object: decompress_uncompress], [Object: get_header_tar], [Object: get_header_cpio], [Object: decompress_unzip], [Object: open_transformer], [Object: get_header_cpio], [Object: decompress_unzip], [Object: decompress_unzip], [VariableReference: DPKG_FILES], [VariableReference: DPKG_FILES], [Object: get_header_cpio], [Object: decompress_unxz], [Object: decompress_unlzma], [Object: decompress_bunzip2], [Object: unpack_ar_archive], [Object: get_header_ar], gsd.buildanalysis.linux.model.BNode@71ef1d17, [VariableDefinition: DPKG_FILES], gsd.buildanalysis.linux.model.BNode@13e3eaeb, [VariableDefinition: COMMON_FILES]),NodeLoc([Makefile: archival/libarchive/Kbuild],Top),List()))
2012-01-10 11:58:34,260 TRACE ModelFactory addVariableReference
2012-01-10 11:58:34,260 TRACE ModelFactory popEndIf
2012-01-10 11:58:34,261 INFO KBuildMinerMain$ === PostProcessing archival/libarchive/Kbuild
2012-01-10 11:58:34,297 INFO KBuildMinerMain$ === PreProcessing console-tools/Kbuild
2012-01-10 11:58:34,297 INFO KBuildMinerMain$ === Processing console-tools/Kbuild
2012-01-10 11:58:34,298 TRACE ModelFactory addObject
2012-01-10 11:58:34,299 TRACE ModelFactory addObject
2012-01-10 11:58:34,299 TRACE ModelFactory addObject
2012-01-10 11:58:34,299 TRACE ModelFactory addObject
2012-01-10 11:58:34,300 TRACE ModelFactory addObject
2012-01-10 11:58:34,300 TRACE ModelFactory addObject
2012-01-10 11:58:34,300 TRACE ModelFactory addObject
2012-01-10 11:58:34,300 TRACE ModelFactory addObject
2012-01-10 11:58:34,301 TRACE ModelFactory addObject
2012-01-10 11:58:34,301 TRACE ModelFactory addObject
2012-01-10 11:58:34,301 TRACE ModelFactory addObject
2012-01-10 11:58:34,301 TRACE ModelFactory addObject
2012-01-10 11:58:34,302 TRACE ModelFactory addObject
2012-01-10 11:58:34,302 TRACE ModelFactory addObject
2012-01-10 11:58:34,302 TRACE ModelFactory addObject
2012-01-10 11:58:34,302 TRACE ModelFactory addObject
2012-01-10 11:58:34,303 INFO KBuildMinerMain$ === PostProcessing console-tools/Kbuild
2012-01-10 11:58:34,317 INFO KBuildMinerMain$ === PreProcessing coreutils/Kbuild
2012-01-10 11:58:34,317 INFO KBuildMinerMain$ === Processing coreutils/Kbuild
2012-01-10 11:58:34,319 TRACE ModelFactory addMakefile
2012-01-10 11:58:34,320 TRACE ModelFactory addObject
2012-01-10 11:58:34,320 TRACE ModelFactory addObject
2012-01-10 11:58:34,320 TRACE ModelFactory addObject
2012-01-10 11:58:34,320 TRACE ModelFactory addObject
2012-01-10 11:58:34,321 TRACE ModelFactory addObject
2012-01-10 11:58:34,321 TRACE ModelFactory addObject
2012-01-10 11:58:34,321 TRACE ModelFactory addObject
2012-01-10 11:58:34,321 TRACE ModelFactory addObject
2012-01-10 11:58:34,322 TRACE ModelFactory addObject
2012-01-10 11:58:34,322 TRACE ModelFactory addObject
2012-01-10 11:58:34,322 TRACE ModelFactory addObject
2012-01-10 11:58:34,322 TRACE ModelFactory addObject
2012-01-10 11:58:34,322 TRACE ModelFactory addObject
2012-01-10 11:58:34,323 TRACE ModelFactory addObject
2012-01-10 11:58:34,323 TRACE ModelFactory addObject
2012-01-10 11:58:34,323 TRACE ModelFactory addObject
2012-01-10 11:58:34,323 TRACE ModelFactory addObject
2012-01-10 11:58:34,324 TRACE ModelFactory addObject
2012-01-10 11:58:34,324 TRACE ModelFactory addObject
2012-01-10 11:58:34,324 TRACE ModelFactory addObject
2012-01-10 11:58:34,324 TRACE ModelFactory addObject
2012-01-10 11:58:34,325 TRACE ModelFactory addObject
2012-01-10 11:58:34,325 TRACE ModelFactory addObject
2012-01-10 11:58:34,325 TRACE ModelFactory addObject
2012-01-10 11:58:34,325 TRACE ModelFactory addObject
2012-01-10 11:58:34,326 TRACE ModelFactory addObject
2012-01-10 11:58:34,326 TRACE ModelFactory addObject
2012-01-10 11:58:34,326 TRACE ModelFactory addObject
2012-01-10 11:58:34,327 TRACE ModelFactory addObject
2012-01-10 11:58:34,327 TRACE ModelFactory addObject
2012-01-10 11:58:34,327 TRACE ModelFactory addObject
2012-01-10 11:58:34,327 TRACE ModelFactory addObject
2012-01-10 11:58:34,328 TRACE ModelFactory addObject
2012-01-10 11:58:34,328 TRACE ModelFactory addObject
2012-01-10 11:58:34,328 TRACE ModelFactory addObject
2012-01-10 11:58:34,329 TRACE ModelFactory addObject
2012-01-10 11:58:34,329 TRACE ModelFactory addObject
2012-01-10 11:58:34,329 TRACE ModelFactory addObject
2012-01-10 11:58:34,330 TRACE ModelFactory addObject
2012-01-10 11:58:34,330 TRACE ModelFactory addObject
2012-01-10 11:58:34,330 TRACE ModelFactory addObject
2012-01-10 11:58:34,331 TRACE ModelFactory addObject
2012-01-10 11:58:34,331 TRACE ModelFactory addObject
2012-01-10 11:58:34,331 TRACE ModelFactory addObject
2012-01-10 11:58:34,332 TRACE ModelFactory addObject
2012-01-10 11:58:34,332 TRACE ModelFactory addObject
2012-01-10 11:58:34,332 TRACE ModelFactory addObject
2012-01-10 11:58:34,333 TRACE ModelFactory addObject
2012-01-10 11:58:34,333 TRACE ModelFactory addObject
2012-01-10 11:58:34,333 TRACE ModelFactory addObject
2012-01-10 11:58:34,334 TRACE ModelFactory addObject
2012-01-10 11:58:34,334 TRACE ModelFactory addObject
2012-01-10 11:58:34,334 TRACE ModelFactory addObject
2012-01-10 11:58:34,335 TRACE ModelFactory addObject
2012-01-10 11:58:34,335 TRACE ModelFactory addObject
2012-01-10 11:58:34,336 TRACE ModelFactory addObject
2012-01-10 11:58:34,336 TRACE ModelFactory addObject
2012-01-10 11:58:34,336 TRACE ModelFactory addObject
2012-01-10 11:58:34,337 TRACE ModelFactory addObject
2012-01-10 11:58:34,337 TRACE ModelFactory addObject
2012-01-10 11:58:34,338 TRACE ModelFactory addObject
2012-01-10 11:58:34,338 TRACE ModelFactory addObject
2012-01-10 11:58:34,338 TRACE ModelFactory addObject
2012-01-10 11:58:34,339 TRACE ModelFactory addObject
2012-01-10 11:58:34,339 TRACE ModelFactory addObject
2012-01-10 11:58:34,339 TRACE ModelFactory addObject
2012-01-10 11:58:34,340 TRACE ModelFactory addObject
2012-01-10 11:58:34,340 TRACE ModelFactory addObject
2012-01-10 11:58:34,340 TRACE ModelFactory addObject
2012-01-10 11:58:34,341 TRACE ModelFactory addObject
2012-01-10 11:58:34,341 TRACE ModelFactory addObject
2012-01-10 11:58:34,342 TRACE ModelFactory addObject
2012-01-10 11:58:34,342 TRACE ModelFactory addObject
2012-01-10 11:58:34,343 TRACE ModelFactory addObject
2012-01-10 11:58:34,343 TRACE ModelFactory addObject
2012-01-10 11:58:34,343 TRACE ModelFactory addObject
2012-01-10 11:58:34,344 TRACE ModelFactory addObject
2012-01-10 11:58:34,344 TRACE ModelFactory addObject
2012-01-10 11:58:34,345 TRACE ModelFactory addObject
2012-01-10 11:58:34,345 TRACE ModelFactory addObject
2012-01-10 11:58:34,345 TRACE ModelFactory addObject
2012-01-10 11:58:34,346 TRACE ModelFactory addObject
2012-01-10 11:58:34,346 TRACE ModelFactory addObject
2012-01-10 11:58:34,347 TRACE ModelFactory addObject
2012-01-10 11:58:34,347 TRACE ModelFactory addObject
2012-01-10 11:58:34,347 TRACE ModelFactory addObject
2012-01-10 11:58:34,348 TRACE ModelFactory addObject
2012-01-10 11:58:34,348 TRACE ModelFactory addObject
2012-01-10 11:58:34,349 TRACE ModelFactory addObject
2012-01-10 11:58:34,349 TRACE ModelFactory addObject
2012-01-10 11:58:34,350 TRACE ModelFactory addObject
2012-01-10 11:58:34,350 TRACE ModelFactory addObject
2012-01-10 11:58:34,351 TRACE ModelFactory addObject
2012-01-10 11:58:34,351 TRACE ModelFactory addObject
2012-01-10 11:58:34,351 INFO KBuildMinerMain$ === PostProcessing coreutils/Kbuild
2012-01-10 11:58:34,402 INFO KBuildMinerMain$ === PreProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:58:34,403 INFO KBuildMinerMain$ === Processing coreutils/libcoreutils/Kbuild
2012-01-10 11:58:34,405 TRACE ModelFactory addObject
2012-01-10 11:58:34,406 TRACE ModelFactory addObject
2012-01-10 11:58:34,407 TRACE ModelFactory addObject
2012-01-10 11:58:34,408 TRACE ModelFactory addObject
2012-01-10 11:58:34,408 TRACE ModelFactory addObject
2012-01-10 11:58:34,409 INFO KBuildMinerMain$ === PostProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:58:34,416 INFO KBuildMinerMain$ === PreProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:58:34,417 INFO KBuildMinerMain$ === Processing coreutils/libcoreutils/Kbuild
2012-01-10 11:58:34,419 TRACE ModelFactory addObject
2012-01-10 11:58:34,420 TRACE ModelFactory addObject
2012-01-10 11:58:34,421 TRACE ModelFactory addObject
2012-01-10 11:58:34,421 TRACE ModelFactory addObject
2012-01-10 11:58:34,422 TRACE ModelFactory addObject
2012-01-10 11:58:34,422 INFO KBuildMinerMain$ === PostProcessing coreutils/libcoreutils/Kbuild
2012-01-10 11:58:34,425 INFO KBuildMinerMain$ === PreProcessing debianutils/Kbuild
2012-01-10 11:58:34,426 INFO KBuildMinerMain$ === Processing debianutils/Kbuild
2012-01-10 11:58:34,428 TRACE ModelFactory addObject
2012-01-10 11:58:34,429 TRACE ModelFactory addObject
2012-01-10 11:58:34,429 TRACE ModelFactory addObject
2012-01-10 11:58:34,430 TRACE ModelFactory addObject
2012-01-10 11:58:34,431 TRACE ModelFactory addObject
2012-01-10 11:58:34,431 INFO KBuildMinerMain$ === PostProcessing debianutils/Kbuild
2012-01-10 11:58:34,437 INFO KBuildMinerMain$ === PreProcessing e2fsprogs/Kbuild
2012-01-10 11:58:34,437 INFO KBuildMinerMain$ === Processing e2fsprogs/Kbuild
2012-01-10 11:58:34,439 TRACE ModelFactory addObject
2012-01-10 11:58:34,440 TRACE ModelFactory addObject
2012-01-10 11:58:34,440 TRACE ModelFactory addObject
2012-01-10 11:58:34,440 TRACE ModelFactory addObject
2012-01-10 11:58:34,441 TRACE ModelFactory addObject
2012-01-10 11:58:34,442 TRACE ModelFactory addObject
2012-01-10 11:58:34,442 INFO KBuildMinerMain$ === PostProcessing e2fsprogs/Kbuild
2012-01-10 11:58:34,453 INFO KBuildMinerMain$ === PreProcessing editors/Kbuild
2012-01-10 11:58:34,453 INFO KBuildMinerMain$ === Processing editors/Kbuild
2012-01-10 11:58:34,455 TRACE ModelFactory addObject
2012-01-10 11:58:34,456 TRACE ModelFactory addObject
2012-01-10 11:58:34,456 TRACE ModelFactory addObject
2012-01-10 11:58:34,457 TRACE ModelFactory addObject
2012-01-10 11:58:34,457 TRACE ModelFactory addObject
2012-01-10 11:58:34,458 TRACE ModelFactory addObject
2012-01-10 11:58:34,458 TRACE ModelFactory addObject
2012-01-10 11:58:34,459 INFO KBuildMinerMain$ === PostProcessing editors/Kbuild
2012-01-10 11:58:34,467 INFO KBuildMinerMain$ === PreProcessing findutils/Kbuild
2012-01-10 11:58:34,467 INFO KBuildMinerMain$ === Processing findutils/Kbuild
2012-01-10 11:58:34,469 TRACE ModelFactory addObject
2012-01-10 11:58:34,470 TRACE ModelFactory addObject
2012-01-10 11:58:34,471 TRACE ModelFactory addObject
2012-01-10 11:58:34,471 INFO KBuildMinerMain$ === PostProcessing findutils/Kbuild
2012-01-10 11:58:34,475 INFO KBuildMinerMain$ === PreProcessing init/Kbuild
2012-01-10 11:58:34,475 INFO KBuildMinerMain$ === Processing init/Kbuild
2012-01-10 11:58:34,478 TRACE ModelFactory addObject
2012-01-10 11:58:34,478 TRACE ModelFactory addObject
2012-01-10 11:58:34,479 TRACE ModelFactory addObject
2012-01-10 11:58:34,479 TRACE ModelFactory addObject
2012-01-10 11:58:34,479 INFO KBuildMinerMain$ === PostProcessing init/Kbuild
2012-01-10 11:58:34,482 INFO KBuildMinerMain$ === PreProcessing libbb/Kbuild
2012-01-10 11:58:34,482 INFO KBuildMinerMain$ === Processing libbb/Kbuild
2012-01-10 11:58:34,485 TRACE ModelFactory addObject
2012-01-10 11:58:34,485 TRACE ModelFactory addObject
2012-01-10 11:58:34,485 TRACE ModelFactory addObject
2012-01-10 11:58:34,485 TRACE ModelFactory addObject
2012-01-10 11:58:34,486 TRACE ModelFactory addObject
2012-01-10 11:58:34,486 TRACE ModelFactory addObject
2012-01-10 11:58:34,486 TRACE ModelFactory addObject
2012-01-10 11:58:34,486 TRACE ModelFactory addObject
2012-01-10 11:58:34,487 TRACE ModelFactory addObject
2012-01-10 11:58:34,487 TRACE ModelFactory addObject
2012-01-10 11:58:34,487 TRACE ModelFactory addObject
2012-01-10 11:58:34,487 TRACE ModelFactory addObject
2012-01-10 11:58:34,488 TRACE ModelFactory addObject
2012-01-10 11:58:34,488 TRACE ModelFactory addObject
2012-01-10 11:58:34,488 TRACE ModelFactory addObject
2012-01-10 11:58:34,488 TRACE ModelFactory addObject
2012-01-10 11:58:34,488 TRACE ModelFactory addObject
2012-01-10 11:58:34,489 TRACE ModelFactory addObject
2012-01-10 11:58:34,489 TRACE ModelFactory addObject
2012-01-10 11:58:34,489 TRACE ModelFactory addObject
2012-01-10 11:58:34,490 TRACE ModelFactory addObject
2012-01-10 11:58:34,490 TRACE ModelFactory addObject
2012-01-10 11:58:34,490 TRACE ModelFactory addObject
2012-01-10 11:58:34,490 TRACE ModelFactory addObject
2012-01-10 11:58:34,491 TRACE ModelFactory addObject
2012-01-10 11:58:34,491 TRACE ModelFactory addObject
2012-01-10 11:58:34,491 TRACE ModelFactory addObject
2012-01-10 11:58:34,491 TRACE ModelFactory addObject
2012-01-10 11:58:34,492 TRACE ModelFactory addObject
2012-01-10 11:58:34,492 TRACE ModelFactory addObject
2012-01-10 11:58:34,492 TRACE ModelFactory addObject
2012-01-10 11:58:34,492 TRACE ModelFactory addObject
2012-01-10 11:58:34,493 TRACE ModelFactory addObject
2012-01-10 11:58:34,493 TRACE ModelFactory addObject
2012-01-10 11:58:34,493 TRACE ModelFactory addObject
2012-01-10 11:58:34,493 TRACE ModelFactory addObject
2012-01-10 11:58:34,494 TRACE ModelFactory addObject
2012-01-10 11:58:34,494 TRACE ModelFactory addObject
2012-01-10 11:58:34,494 TRACE ModelFactory addObject
2012-01-10 11:58:34,494 TRACE ModelFactory addObject
2012-01-10 11:58:34,495 TRACE ModelFactory addObject
2012-01-10 11:58:34,495 TRACE ModelFactory addObject
2012-01-10 11:58:34,495 TRACE ModelFactory addObject
2012-01-10 11:58:34,495 TRACE ModelFactory addObject
2012-01-10 11:58:34,496 TRACE ModelFactory addObject
2012-01-10 11:58:34,496 TRACE ModelFactory addObject
2012-01-10 11:58:34,496 TRACE ModelFactory addObject
2012-01-10 11:58:34,496 TRACE ModelFactory addObject
2012-01-10 11:58:34,497 TRACE ModelFactory addObject
2012-01-10 11:58:34,497 TRACE ModelFactory addObject
2012-01-10 11:58:34,497 TRACE ModelFactory addObject
2012-01-10 11:58:34,497 TRACE ModelFactory addObject
2012-01-10 11:58:34,498 TRACE ModelFactory addObject
2012-01-10 11:58:34,498 TRACE ModelFactory addObject
2012-01-10 11:58:34,498 TRACE ModelFactory addObject
2012-01-10 11:58:34,499 TRACE ModelFactory addObject
2012-01-10 11:58:34,499 TRACE ModelFactory addObject
2012-01-10 11:58:34,499 TRACE ModelFactory addObject
2012-01-10 11:58:34,499 TRACE ModelFactory addObject
2012-01-10 11:58:34,500 TRACE ModelFactory addObject
2012-01-10 11:58:34,500 TRACE ModelFactory addObject
2012-01-10 11:58:34,500 TRACE ModelFactory addObject
2012-01-10 11:58:34,500 TRACE ModelFactory addObject
2012-01-10 11:58:34,501 TRACE ModelFactory addObject
2012-01-10 11:58:34,501 TRACE ModelFactory addObject
2012-01-10 11:58:34,501 TRACE ModelFactory addObject
2012-01-10 11:58:34,502 TRACE ModelFactory addObject
2012-01-10 11:58:34,502 TRACE ModelFactory addObject
2012-01-10 11:58:34,502 TRACE ModelFactory addObject
2012-01-10 11:58:34,502 TRACE ModelFactory addObject
2012-01-10 11:58:34,503 TRACE ModelFactory addObject
2012-01-10 11:58:34,503 TRACE ModelFactory addObject
2012-01-10 11:58:34,503 TRACE ModelFactory addObject
2012-01-10 11:58:34,504 TRACE ModelFactory addObject
2012-01-10 11:58:34,504 TRACE ModelFactory addObject
2012-01-10 11:58:34,504 TRACE ModelFactory addObject
2012-01-10 11:58:34,504 TRACE ModelFactory addObject
2012-01-10 11:58:34,505 TRACE ModelFactory addObject
2012-01-10 11:58:34,505 TRACE ModelFactory addObject
2012-01-10 11:58:34,505 TRACE ModelFactory addObject
2012-01-10 11:58:34,506 TRACE ModelFactory addObject
2012-01-10 11:58:34,506 TRACE ModelFactory addObject
2012-01-10 11:58:34,506 TRACE ModelFactory addObject
2012-01-10 11:58:34,506 TRACE ModelFactory addObject
2012-01-10 11:58:34,507 TRACE ModelFactory addObject
2012-01-10 11:58:34,507 TRACE ModelFactory addObject
2012-01-10 11:58:34,507 TRACE ModelFactory addObject
2012-01-10 11:58:34,508 TRACE ModelFactory addObject
2012-01-10 11:58:34,508 TRACE ModelFactory addObject
2012-01-10 11:58:34,508 TRACE ModelFactory addObject
2012-01-10 11:58:34,508 TRACE ModelFactory addObject
2012-01-10 11:58:34,509 TRACE ModelFactory addObject
2012-01-10 11:58:34,509 TRACE ModelFactory addObject
2012-01-10 11:58:34,509 TRACE ModelFactory addObject
2012-01-10 11:58:34,509 TRACE ModelFactory addObject
2012-01-10 11:58:34,510 TRACE ModelFactory addObject
2012-01-10 11:58:34,510 TRACE ModelFactory addObject
2012-01-10 11:58:34,510 TRACE ModelFactory addObject
2012-01-10 11:58:34,510 TRACE ModelFactory addObject
2012-01-10 11:58:34,510 TRACE ModelFactory addObject
2012-01-10 11:58:34,511 TRACE ModelFactory addObject
2012-01-10 11:58:34,511 TRACE ModelFactory addObject
2012-01-10 11:58:34,511 TRACE ModelFactory addObject
2012-01-10 11:58:34,511 TRACE ModelFactory addObject
2012-01-10 11:58:34,511 TRACE ModelFactory addObject
2012-01-10 11:58:34,512 TRACE ModelFactory addObject
2012-01-10 11:58:34,512 TRACE ModelFactory addObject
2012-01-10 11:58:34,512 TRACE ModelFactory addObject
2012-01-10 11:58:34,513 TRACE ModelFactory addObject
2012-01-10 11:58:34,513 TRACE ModelFactory addObject
2012-01-10 11:58:34,513 TRACE ModelFactory addObject
2012-01-10 11:58:34,513 TRACE ModelFactory addObject
2012-01-10 11:58:34,514 TRACE ModelFactory addObject
2012-01-10 11:58:34,514 TRACE ModelFactory addObject
2012-01-10 11:58:34,514 TRACE ModelFactory addObject
2012-01-10 11:58:34,514 TRACE ModelFactory addObject
2012-01-10 11:58:34,515 TRACE ModelFactory addObject
2012-01-10 11:58:34,515 TRACE ModelFactory addObject
2012-01-10 11:58:34,515 TRACE ModelFactory addObject
2012-01-10 11:58:34,515 TRACE ModelFactory addObject
2012-01-10 11:58:34,516 TRACE ModelFactory addObject
2012-01-10 11:58:34,516 TRACE ModelFactory addObject
2012-01-10 11:58:34,516 TRACE ModelFactory addObject
2012-01-10 11:58:34,517 TRACE ModelFactory addObject
2012-01-10 11:58:34,517 TRACE ModelFactory addObject
2012-01-10 11:58:34,517 TRACE ModelFactory addObject
2012-01-10 11:58:34,518 TRACE ModelFactory addObject
2012-01-10 11:58:34,518 TRACE ModelFactory addObject
2012-01-10 11:58:34,518 TRACE ModelFactory addObject
2012-01-10 11:58:34,518 TRACE ModelFactory addObject
2012-01-10 11:58:34,518 TRACE ModelFactory addObject
2012-01-10 11:58:34,518 TRACE ModelFactory addObject
2012-01-10 11:58:34,519 TRACE ModelFactory addObject
2012-01-10 11:58:34,519 TRACE ModelFactory addObject
2012-01-10 11:58:34,519 TRACE ModelFactory addObject
2012-01-10 11:58:34,519 TRACE ModelFactory addObject
2012-01-10 11:58:34,520 TRACE ModelFactory addObject
2012-01-10 11:58:34,520 TRACE ModelFactory addObject
2012-01-10 11:58:34,520 TRACE ModelFactory addObject
2012-01-10 11:58:34,520 TRACE ModelFactory addObject
2012-01-10 11:58:34,521 TRACE ModelFactory addObject
2012-01-10 11:58:34,521 TRACE ModelFactory addObject
2012-01-10 11:58:34,521 TRACE ModelFactory addObject
2012-01-10 11:58:34,522 TRACE ModelFactory addObject
2012-01-10 11:58:34,522 TRACE ModelFactory addObject
2012-01-10 11:58:34,522 TRACE ModelFactory addObject
2012-01-10 11:58:34,523 TRACE ModelFactory addObject
2012-01-10 11:58:34,523 TRACE ModelFactory addObject
2012-01-10 11:58:34,523 TRACE ModelFactory addObject
2012-01-10 11:58:34,524 TRACE ModelFactory addObject
2012-01-10 11:58:34,524 TRACE ModelFactory addObject
2012-01-10 11:58:34,524 TRACE ModelFactory addObject
2012-01-10 11:58:34,525 TRACE ModelFactory addObject
2012-01-10 11:58:34,525 TRACE ModelFactory addObject
2012-01-10 11:58:34,525 TRACE ModelFactory addObject
2012-01-10 11:58:34,526 TRACE ModelFactory addObject
2012-01-10 11:58:34,526 TRACE ModelFactory addObject
2012-01-10 11:58:34,526 TRACE ModelFactory addObject
2012-01-10 11:58:34,526 TRACE ModelFactory addObject
2012-01-10 11:58:34,527 TRACE ModelFactory addObject
2012-01-10 11:58:34,527 TRACE ModelFactory addObject
2012-01-10 11:58:34,527 TRACE ModelFactory addObject
2012-01-10 11:58:34,527 TRACE ModelFactory addObject
2012-01-10 11:58:34,527 TRACE ModelFactory addObject
2012-01-10 11:58:34,528 TRACE ModelFactory addObject
2012-01-10 11:58:34,528 TRACE ModelFactory addObject
2012-01-10 11:58:34,528 INFO KBuildMinerMain$ === PostProcessing libbb/Kbuild
2012-01-10 11:58:34,591 INFO KBuildMinerMain$ === PreProcessing libpwdgrp/Kbuild
2012-01-10 11:58:34,592 INFO KBuildMinerMain$ === Processing libpwdgrp/Kbuild
2012-01-10 11:58:34,593 TRACE ModelFactory addObject
2012-01-10 11:58:34,593 TRACE ModelFactory addObject
2012-01-10 11:58:34,593 INFO KBuildMinerMain$ === PostProcessing libpwdgrp/Kbuild
2012-01-10 11:58:34,595 INFO KBuildMinerMain$ === PreProcessing loginutils/Kbuild
2012-01-10 11:58:34,595 INFO KBuildMinerMain$ === Processing loginutils/Kbuild
2012-01-10 11:58:34,597 TRACE ModelFactory addObject
2012-01-10 11:58:34,597 TRACE ModelFactory addObject
2012-01-10 11:58:34,597 TRACE ModelFactory addObject
2012-01-10 11:58:34,597 TRACE ModelFactory addObject
2012-01-10 11:58:34,598 TRACE ModelFactory addObject
2012-01-10 11:58:34,598 TRACE ModelFactory addObject
2012-01-10 11:58:34,598 TRACE ModelFactory addObject
2012-01-10 11:58:34,598 TRACE ModelFactory addObject
2012-01-10 11:58:34,598 TRACE ModelFactory addObject
2012-01-10 11:58:34,599 TRACE ModelFactory addObject
2012-01-10 11:58:34,599 TRACE ModelFactory addObject
2012-01-10 11:58:34,599 TRACE ModelFactory addObject
2012-01-10 11:58:34,599 TRACE ModelFactory addObject
2012-01-10 11:58:34,599 TRACE ModelFactory addObject
2012-01-10 11:58:34,599 INFO KBuildMinerMain$ === PostProcessing loginutils/Kbuild
2012-01-10 11:58:34,606 INFO KBuildMinerMain$ === PreProcessing mailutils/Kbuild
2012-01-10 11:58:34,606 INFO KBuildMinerMain$ === Processing mailutils/Kbuild
2012-01-10 11:58:34,608 TRACE ModelFactory addObject
2012-01-10 11:58:34,608 TRACE ModelFactory addObject
2012-01-10 11:58:34,608 TRACE ModelFactory addObject
2012-01-10 11:58:34,608 TRACE ModelFactory addObject
2012-01-10 11:58:34,608 TRACE ModelFactory addObject
2012-01-10 11:58:34,608 TRACE ModelFactory addObject
2012-01-10 11:58:34,609 TRACE ModelFactory addObject
2012-01-10 11:58:34,609 TRACE ModelFactory addObject
2012-01-10 11:58:34,609 INFO KBuildMinerMain$ === PostProcessing mailutils/Kbuild
2012-01-10 11:58:34,613 INFO KBuildMinerMain$ === PreProcessing miscutils/Kbuild
2012-01-10 11:58:34,613 INFO KBuildMinerMain$ === Processing miscutils/Kbuild
2012-01-10 11:58:34,614 TRACE ModelFactory addObject
2012-01-10 11:58:34,614 TRACE ModelFactory addObject
2012-01-10 11:58:34,615 TRACE ModelFactory addObject
2012-01-10 11:58:34,615 TRACE ModelFactory addObject
2012-01-10 11:58:34,615 TRACE ModelFactory addObject
2012-01-10 11:58:34,615 TRACE ModelFactory addObject
2012-01-10 11:58:34,615 TRACE ModelFactory addObject
2012-01-10 11:58:34,616 TRACE ModelFactory addObject
2012-01-10 11:58:34,616 TRACE ModelFactory addObject
2012-01-10 11:58:34,616 TRACE ModelFactory addObject
2012-01-10 11:58:34,616 TRACE ModelFactory addObject
2012-01-10 11:58:34,616 TRACE ModelFactory addObject
2012-01-10 11:58:34,617 TRACE ModelFactory addObject
2012-01-10 11:58:34,617 TRACE ModelFactory addObject
2012-01-10 11:58:34,617 TRACE ModelFactory addObject
2012-01-10 11:58:34,617 TRACE ModelFactory addObject
2012-01-10 11:58:34,617 TRACE ModelFactory addObject
2012-01-10 11:58:34,617 TRACE ModelFactory addObject
2012-01-10 11:58:34,618 TRACE ModelFactory addObject
2012-01-10 11:58:34,618 TRACE ModelFactory addObject
2012-01-10 11:58:34,618 TRACE ModelFactory addObject
2012-01-10 11:58:34,618 TRACE ModelFactory addObject
2012-01-10 11:58:34,618 TRACE ModelFactory addObject
2012-01-10 11:58:34,619 TRACE ModelFactory addObject
2012-01-10 11:58:34,619 TRACE ModelFactory addObject
2012-01-10 11:58:34,619 TRACE ModelFactory addObject
2012-01-10 11:58:34,619 TRACE ModelFactory addObject
2012-01-10 11:58:34,619 TRACE ModelFactory addObject
2012-01-10 11:58:34,620 TRACE ModelFactory addObject
2012-01-10 11:58:34,620 TRACE ModelFactory addObject
2012-01-10 11:58:34,620 TRACE ModelFactory addObject
2012-01-10 11:58:34,620 TRACE ModelFactory addObject
2012-01-10 11:58:34,620 TRACE ModelFactory addObject
2012-01-10 11:58:34,621 TRACE ModelFactory addObject
2012-01-10 11:58:34,621 TRACE ModelFactory addObject
2012-01-10 11:58:34,621 TRACE ModelFactory addObject
2012-01-10 11:58:34,621 TRACE ModelFactory addObject
2012-01-10 11:58:34,622 TRACE ModelFactory addObject
2012-01-10 11:58:34,622 TRACE ModelFactory addObject
2012-01-10 11:58:34,622 TRACE ModelFactory addObject
2012-01-10 11:58:34,623 TRACE ModelFactory addObject
2012-01-10 11:58:34,623 TRACE ModelFactory addObject
2012-01-10 11:58:34,623 TRACE ModelFactory addObject
2012-01-10 11:58:34,623 TRACE ModelFactory addObject
2012-01-10 11:58:34,624 TRACE ModelFactory addObject
2012-01-10 11:58:34,624 TRACE ModelFactory addObject
2012-01-10 11:58:34,624 TRACE ModelFactory addObject
2012-01-10 11:58:34,625 TRACE ModelFactory addObject
2012-01-10 11:58:34,625 TRACE ModelFactory addObject
2012-01-10 11:58:34,625 TRACE ModelFactory addObject
2012-01-10 11:58:34,625 TRACE ModelFactory addObject
2012-01-10 11:58:34,626 INFO KBuildMinerMain$ === PostProcessing miscutils/Kbuild
2012-01-10 11:58:34,650 INFO KBuildMinerMain$ === PreProcessing modutils/Kbuild
2012-01-10 11:58:34,650 INFO KBuildMinerMain$ === Processing modutils/Kbuild
2012-01-10 11:58:34,652 TRACE ModelFactory addObject
2012-01-10 11:58:34,652 TRACE ModelFactory addObject
2012-01-10 11:58:34,653 TRACE ModelFactory addObject
2012-01-10 11:58:34,653 TRACE ModelFactory addObject
2012-01-10 11:58:34,653 TRACE ModelFactory addObject
2012-01-10 11:58:34,654 TRACE ModelFactory addObject
2012-01-10 11:58:34,654 TRACE ModelFactory addObject
2012-01-10 11:58:34,655 TRACE ModelFactory addObject
2012-01-10 11:58:34,655 TRACE ModelFactory addObject
2012-01-10 11:58:34,655 TRACE ModelFactory addObject
2012-01-10 11:58:34,655 TRACE ModelFactory addObject
2012-01-10 11:58:34,655 TRACE ModelFactory addObject
2012-01-10 11:58:34,656 TRACE ModelFactory addObject
2012-01-10 11:58:34,656 TRACE ModelFactory addObject
2012-01-10 11:58:34,656 INFO KBuildMinerMain$ === PostProcessing modutils/Kbuild
2012-01-10 11:58:34,661 INFO KBuildMinerMain$ === PreProcessing networking/Kbuild
2012-01-10 11:58:34,661 INFO KBuildMinerMain$ === Processing networking/Kbuild
2012-01-10 11:58:34,663 TRACE ModelFactory addObject
2012-01-10 11:58:34,663 TRACE ModelFactory addObject
2012-01-10 11:58:34,663 TRACE ModelFactory addObject
2012-01-10 11:58:34,663 TRACE ModelFactory addObject
2012-01-10 11:58:34,664 TRACE ModelFactory addObject
2012-01-10 11:58:34,664 TRACE ModelFactory addObject
2012-01-10 11:58:34,664 TRACE ModelFactory addObject
2012-01-10 11:58:34,664 TRACE ModelFactory addObject
2012-01-10 11:58:34,664 TRACE ModelFactory addObject
2012-01-10 11:58:34,665 TRACE ModelFactory addObject
2012-01-10 11:58:34,665 TRACE ModelFactory addObject
2012-01-10 11:58:34,665 TRACE ModelFactory addObject
2012-01-10 11:58:34,665 TRACE ModelFactory addObject
2012-01-10 11:58:34,665 TRACE ModelFactory addObject
2012-01-10 11:58:34,666 TRACE ModelFactory addObject
2012-01-10 11:58:34,666 TRACE ModelFactory addObject
2012-01-10 11:58:34,666 TRACE ModelFactory addObject
2012-01-10 11:58:34,666 TRACE ModelFactory addObject
2012-01-10 11:58:34,666 TRACE ModelFactory addObject
2012-01-10 11:58:34,666 TRACE ModelFactory addObject
2012-01-10 11:58:34,667 TRACE ModelFactory addObject
2012-01-10 11:58:34,667 TRACE ModelFactory addObject
2012-01-10 11:58:34,667 TRACE ModelFactory addObject
2012-01-10 11:58:34,667 TRACE ModelFactory addObject
2012-01-10 11:58:34,667 TRACE ModelFactory addObject
2012-01-10 11:58:34,668 TRACE ModelFactory addObject
2012-01-10 11:58:34,668 TRACE ModelFactory addObject
2012-01-10 11:58:34,668 TRACE ModelFactory addObject
2012-01-10 11:58:34,668 TRACE ModelFactory addObject
2012-01-10 11:58:34,668 TRACE ModelFactory addObject
2012-01-10 11:58:34,669 TRACE ModelFactory addObject
2012-01-10 11:58:34,669 TRACE ModelFactory addObject
2012-01-10 11:58:34,669 TRACE ModelFactory addObject
2012-01-10 11:58:34,669 TRACE ModelFactory addObject
2012-01-10 11:58:34,669 TRACE ModelFactory addObject
2012-01-10 11:58:34,670 TRACE ModelFactory addObject
2012-01-10 11:58:34,670 TRACE ModelFactory addObject
2012-01-10 11:58:34,670 TRACE ModelFactory addObject
2012-01-10 11:58:34,670 TRACE ModelFactory addObject
2012-01-10 11:58:34,671 TRACE ModelFactory addObject
2012-01-10 11:58:34,671 TRACE ModelFactory addObject
2012-01-10 11:58:34,671 TRACE ModelFactory addObject
2012-01-10 11:58:34,671 TRACE ModelFactory addObject
2012-01-10 11:58:34,671 TRACE ModelFactory addObject
2012-01-10 11:58:34,672 TRACE ModelFactory addObject
2012-01-10 11:58:34,672 TRACE ModelFactory addObject
2012-01-10 11:58:34,672 TRACE ModelFactory addObject
2012-01-10 11:58:34,672 TRACE ModelFactory addObject
2012-01-10 11:58:34,672 INFO KBuildMinerMain$ === PostProcessing networking/Kbuild
2012-01-10 11:58:34,694 INFO KBuildMinerMain$ === PreProcessing networking/libiproute/Kbuild
2012-01-10 11:58:34,695 INFO KBuildMinerMain$ === Processing networking/libiproute/Kbuild
2012-01-10 11:58:34,697 TRACE ModelFactory addObject
2012-01-10 11:58:34,698 TRACE ModelFactory addObject
2012-01-10 11:58:34,698 TRACE ModelFactory addObject
2012-01-10 11:58:34,698 TRACE ModelFactory addObject
2012-01-10 11:58:34,698 TRACE ModelFactory addObject
2012-01-10 11:58:34,698 TRACE ModelFactory addObject
2012-01-10 11:58:34,698 TRACE ModelFactory addObject
2012-01-10 11:58:34,698 TRACE ModelFactory addObject
2012-01-10 11:58:34,698 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,699 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,700 TRACE ModelFactory addObject
2012-01-10 11:58:34,701 TRACE ModelFactory addObject
2012-01-10 11:58:34,701 TRACE ModelFactory addObject
2012-01-10 11:58:34,701 TRACE ModelFactory addObject
2012-01-10 11:58:34,701 TRACE ModelFactory addObject
2012-01-10 11:58:34,701 INFO KBuildMinerMain$ === PostProcessing networking/libiproute/Kbuild
2012-01-10 11:58:34,710 INFO KBuildMinerMain$ === PreProcessing networking/udhcp/Kbuild
2012-01-10 11:58:34,710 INFO KBuildMinerMain$ === Processing networking/udhcp/Kbuild
2012-01-10 11:58:34,712 TRACE ModelFactory addObject
2012-01-10 11:58:34,712 TRACE ModelFactory addObject
2012-01-10 11:58:34,712 TRACE ModelFactory addObject
2012-01-10 11:58:34,712 TRACE ModelFactory addObject
2012-01-10 11:58:34,712 TRACE ModelFactory addObject
2012-01-10 11:58:34,712 TRACE ModelFactory addObject
2012-01-10 11:58:34,712 TRACE ModelFactory addObject
2012-01-10 11:58:34,712 TRACE ModelFactory addObject
2012-01-10 11:58:34,713 TRACE ModelFactory addObject
2012-01-10 11:58:34,713 TRACE ModelFactory addObject
2012-01-10 11:58:34,713 TRACE ModelFactory addObject
2012-01-10 11:58:34,713 TRACE ModelFactory addObject
2012-01-10 11:58:34,713 TRACE ModelFactory addObject
2012-01-10 11:58:34,714 TRACE ModelFactory addObject
2012-01-10 11:58:34,714 TRACE ModelFactory addObject
2012-01-10 11:58:34,714 TRACE ModelFactory addObject
2012-01-10 11:58:34,714 TRACE ModelFactory addObject
2012-01-10 11:58:34,714 TRACE ModelFactory addObject
2012-01-10 11:58:34,714 TRACE ModelFactory addObject
2012-01-10 11:58:34,714 TRACE ModelFactory addObject
2012-01-10 11:58:34,715 TRACE ModelFactory addObject
2012-01-10 11:58:34,715 TRACE ModelFactory addObject
2012-01-10 11:58:34,715 INFO KBuildMinerMain$ === PostProcessing networking/udhcp/Kbuild
2012-01-10 11:58:34,724 INFO KBuildMinerMain$ === PreProcessing printutils/Kbuild
2012-01-10 11:58:34,724 INFO KBuildMinerMain$ === Processing printutils/Kbuild
2012-01-10 11:58:34,725 TRACE ModelFactory addObject
2012-01-10 11:58:34,726 TRACE ModelFactory addObject
2012-01-10 11:58:34,726 TRACE ModelFactory addObject
2012-01-10 11:58:34,726 INFO KBuildMinerMain$ === PostProcessing printutils/Kbuild
2012-01-10 11:58:34,729 INFO KBuildMinerMain$ === PreProcessing procps/Kbuild
2012-01-10 11:58:34,729 INFO KBuildMinerMain$ === Processing procps/Kbuild
2012-01-10 11:58:34,730 TRACE ModelFactory addObject
2012-01-10 11:58:34,730 TRACE ModelFactory addObject
2012-01-10 11:58:34,731 TRACE ModelFactory addObject
2012-01-10 11:58:34,731 TRACE ModelFactory addObject
2012-01-10 11:58:34,731 TRACE ModelFactory addObject
2012-01-10 11:58:34,732 TRACE ModelFactory addObject
2012-01-10 11:58:34,732 TRACE ModelFactory addObject
2012-01-10 11:58:34,732 TRACE ModelFactory addObject
2012-01-10 11:58:34,732 TRACE ModelFactory addObject
2012-01-10 11:58:34,733 TRACE ModelFactory addObject
2012-01-10 11:58:34,733 TRACE ModelFactory addObject
2012-01-10 11:58:34,733 TRACE ModelFactory addObject
2012-01-10 11:58:34,734 TRACE ModelFactory addObject
2012-01-10 11:58:34,734 TRACE ModelFactory addObject
2012-01-10 11:58:34,734 TRACE ModelFactory addObject
2012-01-10 11:58:34,735 TRACE ModelFactory addObject
2012-01-10 11:58:34,735 TRACE ModelFactory addObject
2012-01-10 11:58:34,735 TRACE ModelFactory addObject
2012-01-10 11:58:34,736 TRACE ModelFactory addObject
2012-01-10 11:58:34,736 TRACE ModelFactory addObject
2012-01-10 11:58:34,736 TRACE ModelFactory addObject
2012-01-10 11:58:34,736 INFO KBuildMinerMain$ === PostProcessing procps/Kbuild
2012-01-10 11:58:34,748 INFO KBuildMinerMain$ === PreProcessing runit/Kbuild
2012-01-10 11:58:34,748 INFO KBuildMinerMain$ === Processing runit/Kbuild
2012-01-10 11:58:34,750 TRACE ModelFactory addObject
2012-01-10 11:58:34,751 TRACE ModelFactory addObject
2012-01-10 11:58:34,752 TRACE ModelFactory addObject
2012-01-10 11:58:34,752 TRACE ModelFactory addObject
2012-01-10 11:58:34,753 TRACE ModelFactory addObject
2012-01-10 11:58:34,754 TRACE ModelFactory addObject
2012-01-10 11:58:34,754 TRACE ModelFactory addObject
2012-01-10 11:58:34,755 TRACE ModelFactory addObject
2012-01-10 11:58:34,756 TRACE ModelFactory addObject
2012-01-10 11:58:34,756 INFO KBuildMinerMain$ === PostProcessing runit/Kbuild
2012-01-10 11:58:34,762 INFO KBuildMinerMain$ === PreProcessing selinux/Kbuild
2012-01-10 11:58:34,762 INFO KBuildMinerMain$ === Processing selinux/Kbuild
2012-01-10 11:58:34,764 TRACE ModelFactory addObject
2012-01-10 11:58:34,765 TRACE ModelFactory addObject
2012-01-10 11:58:34,765 TRACE ModelFactory addObject
2012-01-10 11:58:34,766 TRACE ModelFactory addObject
2012-01-10 11:58:34,767 TRACE ModelFactory addObject
2012-01-10 11:58:34,767 TRACE ModelFactory addObject
2012-01-10 11:58:34,768 TRACE ModelFactory addObject
2012-01-10 11:58:34,769 TRACE ModelFactory addObject
2012-01-10 11:58:34,769 TRACE ModelFactory addObject
2012-01-10 11:58:34,770 TRACE ModelFactory addObject
2012-01-10 11:58:34,771 TRACE ModelFactory addObject
2012-01-10 11:58:34,771 TRACE ModelFactory addObject
2012-01-10 11:58:34,771 INFO KBuildMinerMain$ === PostProcessing selinux/Kbuild
2012-01-10 11:58:34,780 INFO KBuildMinerMain$ === PreProcessing shell/Kbuild
2012-01-10 11:58:34,780 INFO KBuildMinerMain$ === Processing shell/Kbuild
2012-01-10 11:58:34,782 TRACE ModelFactory addObject
2012-01-10 11:58:34,782 TRACE ModelFactory addObject
2012-01-10 11:58:34,782 TRACE ModelFactory addObject
2012-01-10 11:58:34,783 TRACE ModelFactory addObject
2012-01-10 11:58:34,784 TRACE ModelFactory addObject
2012-01-10 11:58:34,784 TRACE ModelFactory addObject
2012-01-10 11:58:34,785 TRACE ModelFactory addObject
2012-01-10 11:58:34,785 TRACE ModelFactory addObject
2012-01-10 11:58:34,785 TRACE ModelFactory addObject
2012-01-10 11:58:34,786 TRACE ModelFactory addObject
2012-01-10 11:58:34,786 INFO KBuildMinerMain$ === PostProcessing shell/Kbuild
2012-01-10 11:58:34,793 INFO KBuildMinerMain$ === PreProcessing sysklogd/Kbuild
2012-01-10 11:58:34,793 INFO KBuildMinerMain$ === Processing sysklogd/Kbuild
2012-01-10 11:58:34,795 TRACE ModelFactory addObject
2012-01-10 11:58:34,796 TRACE ModelFactory addObject
2012-01-10 11:58:34,796 TRACE ModelFactory addObject
2012-01-10 11:58:34,797 TRACE ModelFactory addObject
2012-01-10 11:58:34,797 INFO KBuildMinerMain$ === PostProcessing sysklogd/Kbuild
2012-01-10 11:58:34,801 INFO KBuildMinerMain$ === PreProcessing util-linux/Kbuild
2012-01-10 11:58:34,801 INFO KBuildMinerMain$ === Processing util-linux/Kbuild
2012-01-10 11:58:34,803 TRACE ModelFactory addObject
2012-01-10 11:58:34,804 TRACE ModelFactory addObject
2012-01-10 11:58:34,805 TRACE ModelFactory addObject
2012-01-10 11:58:34,805 TRACE ModelFactory addObject
2012-01-10 11:58:34,806 TRACE ModelFactory addObject
2012-01-10 11:58:34,807 TRACE ModelFactory addObject
2012-01-10 11:58:34,808 TRACE ModelFactory addObject
2012-01-10 11:58:34,808 TRACE ModelFactory addObject
2012-01-10 11:58:34,809 TRACE ModelFactory addObject
2012-01-10 11:58:34,810 TRACE ModelFactory addObject
2012-01-10 11:58:34,810 TRACE ModelFactory addObject
2012-01-10 11:58:34,811 TRACE ModelFactory addObject
2012-01-10 11:58:34,812 TRACE ModelFactory addObject
2012-01-10 11:58:34,812 TRACE ModelFactory addObject
2012-01-10 11:58:34,813 TRACE ModelFactory addObject
2012-01-10 11:58:34,814 TRACE ModelFactory addObject
2012-01-10 11:58:34,814 TRACE ModelFactory addObject
2012-01-10 11:58:34,815 TRACE ModelFactory addObject
2012-01-10 11:58:34,816 TRACE ModelFactory addObject
2012-01-10 11:58:34,817 TRACE ModelFactory addObject
2012-01-10 11:58:34,817 TRACE ModelFactory addObject
2012-01-10 11:58:34,818 TRACE ModelFactory addObject
2012-01-10 11:58:34,818 TRACE ModelFactory addObject
2012-01-10 11:58:34,819 TRACE ModelFactory addObject
2012-01-10 11:58:34,819 TRACE ModelFactory addObject
2012-01-10 11:58:34,819 TRACE ModelFactory addObject
2012-01-10 11:58:34,819 TRACE ModelFactory addObject
2012-01-10 11:58:34,820 TRACE ModelFactory addObject
2012-01-10 11:58:34,820 TRACE ModelFactory addObject
2012-01-10 11:58:34,820 TRACE ModelFactory addObject
2012-01-10 11:58:34,820 TRACE ModelFactory addObject
2012-01-10 11:58:34,821 TRACE ModelFactory addObject
2012-01-10 11:58:34,821 TRACE ModelFactory addObject
2012-01-10 11:58:34,821 TRACE ModelFactory addObject
2012-01-10 11:58:34,821 TRACE ModelFactory addObject
2012-01-10 11:58:34,821 TRACE ModelFactory addObject
2012-01-10 11:58:34,822 TRACE ModelFactory addObject
2012-01-10 11:58:34,822 TRACE ModelFactory addObject
2012-01-10 11:58:34,822 TRACE ModelFactory addObject
2012-01-10 11:58:34,822 TRACE ModelFactory addObject
2012-01-10 11:58:34,822 INFO KBuildMinerMain$ === PostProcessing util-linux/Kbuild
2012-01-10 11:58:34,842 INFO KBuildMinerMain$ === PreProcessing util-linux/volume_id/Kbuild
2012-01-10 11:58:34,842 INFO KBuildMinerMain$ === Processing util-linux/volume_id/Kbuild
2012-01-10 11:58:34,844 TRACE ModelFactory addObject
2012-01-10 11:58:34,844 TRACE ModelFactory addObject
2012-01-10 11:58:34,845 TRACE ModelFactory addObject
2012-01-10 11:58:34,845 TRACE ModelFactory addObject
2012-01-10 11:58:34,845 TRACE ModelFactory addObject
2012-01-10 11:58:34,845 TRACE ModelFactory addObject
2012-01-10 11:58:34,846 TRACE ModelFactory addObject
2012-01-10 11:58:34,846 TRACE ModelFactory addObject
2012-01-10 11:58:34,846 TRACE ModelFactory addObject
2012-01-10 11:58:34,847 TRACE ModelFactory addObject
2012-01-10 11:58:34,847 TRACE ModelFactory addObject
2012-01-10 11:58:34,848 TRACE ModelFactory addObject
2012-01-10 11:58:34,848 TRACE ModelFactory addObject
2012-01-10 11:58:34,848 TRACE ModelFactory addObject
2012-01-10 11:58:34,849 TRACE ModelFactory addObject
2012-01-10 11:58:34,849 TRACE ModelFactory addObject
2012-01-10 11:58:34,849 TRACE ModelFactory addObject
2012-01-10 11:58:34,850 TRACE ModelFactory addObject
2012-01-10 11:58:34,850 TRACE ModelFactory addObject
2012-01-10 11:58:34,850 TRACE ModelFactory addObject
2012-01-10 11:58:34,851 TRACE ModelFactory addObject
2012-01-10 11:58:34,851 TRACE ModelFactory addObject
2012-01-10 11:58:34,851 INFO KBuildMinerMain$ === PostProcessing util-linux/volume_id/Kbuild
2012-01-10 11:58:34,870 INFO PersistenceManager$ Saving Build AST to: ast.xml
2012-01-10 11:58:35,597 INFO KBuildMinerMain$ Deriving file presence conditions...
2012-01-10 11:58:36,706 DEBUG PCDerivation$ Trying to find path for: [Object: applets]
2012-01-10 11:58:36,710 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> applets/applets.c, builtAs -> y, generated -> false, objectFile -> applets, listName -> obj)
2012-01-10 11:58:36,713 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> applets/applets.c, builtAs -> y, generated -> false, objectFile -> applets, listName -> obj) is: MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild)
2012-01-10 11:58:36,713 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild)
2012-01-10 11:58:36,713 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> applets/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,713 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,722 DEBUG PCDerivation$ Expression of path for object occurrence applets/applets.c: [TRUE]
2012-01-10 11:58:36,722 DEBUG PCDerivation$ Trying to find path for: [Object: data_skip]
2012-01-10 11:58:36,722 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES)
2012-01-10 11:58:36,722 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,723 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,724 TRACE PCDerivation$ trying to find variable reference, var: COMMON_FILES
2012-01-10 11:58:36,729 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:58:36,749 TRACE PCDerivation$    # collecting: [VariableReference: COMMON_FILES]
2012-01-10 11:58:36,749 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,749 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES) is: IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,749 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,749 TRACE PCDerivation$ parent of IfBNode --> Map(expr -> Unknown(!(lib-y == ""))) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,749 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,750 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,752 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,752 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,752 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,755 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,755 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_all]
2012-01-10 11:58:36,756 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES)
2012-01-10 11:58:36,756 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,756 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,756 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,756 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,756 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,756 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,757 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,757 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,757 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_stdout]
2012-01-10 11:58:36,757 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES)
2012-01-10 11:58:36,757 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,757 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,757 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,757 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,757 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,757 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,758 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,758 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_stdout.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,758 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_all]
2012-01-10 11:58:36,758 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES)
2012-01-10 11:58:36,758 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,758 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,758 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,758 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,758 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,759 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,759 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,759 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,759 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list]
2012-01-10 11:58:36,759 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES)
2012-01-10 11:58:36,759 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,759 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,759 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,760 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,760 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,760 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,760 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,760 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,760 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_reject_list]
2012-01-10 11:58:36,760 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES)
2012-01-10 11:58:36,761 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,761 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,761 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,761 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,761 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,761 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,761 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,762 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_reject_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,762 DEBUG PCDerivation$ Trying to find path for: [Object: header_skip]
2012-01-10 11:58:36,762 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES)
2012-01-10 11:58:36,762 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,762 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,762 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,762 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,762 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,762 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,763 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,763 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,763 DEBUG PCDerivation$ Trying to find path for: [Object: header_list]
2012-01-10 11:58:36,763 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES)
2012-01-10 11:58:36,763 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,763 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,763 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,763 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,763 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,763 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,764 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,764 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,764 DEBUG PCDerivation$ Trying to find path for: [Object: header_verbose_list]
2012-01-10 11:58:36,764 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES)
2012-01-10 11:58:36,764 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,764 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,764 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,764 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,764 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,765 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,765 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,765 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_verbose_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,765 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_read]
2012-01-10 11:58:36,765 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES)
2012-01-10 11:58:36,765 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,765 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,765 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,766 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,766 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,766 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,766 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,766 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_read.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,766 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_jump]
2012-01-10 11:58:36,766 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES)
2012-01-10 11:58:36,767 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,767 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,767 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,767 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,767 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,767 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,767 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,768 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_jump.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,768 DEBUG PCDerivation$ Trying to find path for: [Object: data_align]
2012-01-10 11:58:36,768 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES)
2012-01-10 11:58:36,768 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,768 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,768 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,768 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,768 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,768 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,769 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,769 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_align.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,769 DEBUG PCDerivation$ Trying to find path for: [Object: find_list_entry]
2012-01-10 11:58:36,769 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES)
2012-01-10 11:58:36,769 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,769 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,769 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,769 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,769 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,769 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,770 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,770 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/find_list_entry.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,770 DEBUG PCDerivation$ Trying to find path for: [Object: init_handle]
2012-01-10 11:58:36,770 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES)
2012-01-10 11:58:36,770 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,770 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,770 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,770 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,770 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,771 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,771 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,771 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/init_handle.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,771 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:58:36,771 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES)
2012-01-10 11:58:36,771 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,771 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,771 TRACE PCDerivation$ trying to find variable reference, var: DPKG_FILES
2012-01-10 11:58:36,771 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:58:36,775 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:58:36,776 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:58:36,781 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,781 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,781 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,782 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,782 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,782 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,782 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,782 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,782 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,783 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,783 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:58:36,783 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:58:36,783 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES)
2012-01-10 11:58:36,783 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,783 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,784 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,784 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,784 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,784 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,784 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,784 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,784 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,785 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,785 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:58:36,785 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:58:36,785 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES)
2012-01-10 11:58:36,785 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,785 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,785 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,785 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,785 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,786 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,786 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,786 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,786 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,787 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,787 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:58:36,787 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list_reassign]
2012-01-10 11:58:36,787 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES)
2012-01-10 11:58:36,787 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,787 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,787 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,787 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,787 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,788 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,788 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,788 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,788 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,789 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,789 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list_reassign.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:58:36,789 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:58:36,789 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib)
2012-01-10 11:58:36,789 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,789 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,789 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,789 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,790 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:58:36,790 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:58:36,790 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib)
2012-01-10 11:58:36,790 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,790 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,790 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,790 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,790 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:58:36,790 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_bunzip2]
2012-01-10 11:58:36,790 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib)
2012-01-10 11:58:36,790 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,790 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,790 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,790 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,791 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_bunzip2.c: (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m")))
2012-01-10 11:58:36,791 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unlzma]
2012-01-10 11:58:36,791 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib)
2012-01-10 11:58:36,791 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,791 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,791 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,791 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,791 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unlzma.c: (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")))
2012-01-10 11:58:36,791 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unxz]
2012-01-10 11:58:36,791 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib)
2012-01-10 11:58:36,791 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,791 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,791 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,791 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,791 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unxz.c: (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:58:36,792 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_cpio]
2012-01-10 11:58:36,792 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib)
2012-01-10 11:58:36,792 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,792 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,792 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,792 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,792 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_cpio.c: ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")))
2012-01-10 11:58:36,792 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unzip]
2012-01-10 11:58:36,792 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib)
2012-01-10 11:58:36,792 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,792 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,792 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,792 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,792 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unzip.c: ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")))
2012-01-10 11:58:36,792 DEBUG PCDerivation$ Trying to find path for: [Object: open_transformer]
2012-01-10 11:58:36,793 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib)
2012-01-10 11:58:36,793 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,793 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,793 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,793 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,793 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/open_transformer.c: (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:58:36,793 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:58:36,793 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib)
2012-01-10 11:58:36,793 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,793 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,793 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,793 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,793 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-10 11:58:36,793 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_uncompress]
2012-01-10 11:58:36,794 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib)
2012-01-10 11:58:36,794 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,794 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,794 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,794 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,794 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_uncompress.c: (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m")))
2012-01-10 11:58:36,794 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1]
2012-01-10 11:58:36,794 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib)
2012-01-10 11:58:36,794 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,794 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,794 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,794 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,794 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:58:36,794 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1o]
2012-01-10 11:58:36,794 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib)
2012-01-10 11:58:36,794 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,795 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,795 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,795 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,795 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1o.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:58:36,795 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_d]
2012-01-10 11:58:36,795 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib)
2012-01-10 11:58:36,795 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,795 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,795 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,795 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,795 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_d.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:58:36,795 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_9x]
2012-01-10 11:58:36,795 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib)
2012-01-10 11:58:36,795 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,795 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,796 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_9x.c: ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m"))
2012-01-10 11:58:36,796 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_gz]
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib)
2012-01-10 11:58:36,796 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,796 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_gz.c: ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))
2012-01-10 11:58:36,796 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_bz2]
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib)
2012-01-10 11:58:36,796 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,796 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,797 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_bz2.c: ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))
2012-01-10 11:58:36,797 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_lzma]
2012-01-10 11:58:36,797 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib)
2012-01-10 11:58:36,797 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,797 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,797 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,797 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,797 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_lzma.c: ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))
2012-01-10 11:58:36,797 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_command]
2012-01-10 11:58:36,797 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib)
2012-01-10 11:58:36,797 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,797 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,797 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,797 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,797 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_command.c: ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m"))
2012-01-10 11:58:36,797 DEBUG PCDerivation$ Trying to find path for: [Object: ar]
2012-01-10 11:58:36,798 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/ar.c, generated -> false, objectFile -> ar, listName -> lib)
2012-01-10 11:58:36,798 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/ar.c, generated -> false, objectFile -> ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,798 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,798 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,798 DEBUG PCDerivation$ Expression of path for object occurrence archival/ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:58:36,798 DEBUG PCDerivation$ Trying to find path for: [Object: cpio]
2012-01-10 11:58:36,798 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")), sourceFile -> archival/cpio.c, generated -> false, objectFile -> cpio, listName -> lib)
2012-01-10 11:58:36,798 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")), sourceFile -> archival/cpio.c, generated -> false, objectFile -> cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,798 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,798 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,798 DEBUG PCDerivation$ Expression of path for object occurrence archival/cpio.c: ((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m"))
2012-01-10 11:58:36,798 DEBUG PCDerivation$ Trying to find path for: [Object: dpkg]
2012-01-10 11:58:36,798 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), sourceFile -> archival/dpkg.c, generated -> false, objectFile -> dpkg, listName -> lib)
2012-01-10 11:58:36,798 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), sourceFile -> archival/dpkg.c, generated -> false, objectFile -> dpkg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,798 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,799 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,799 DEBUG PCDerivation$ Expression of path for object occurrence archival/dpkg.c: ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m"))
2012-01-10 11:58:36,799 DEBUG PCDerivation$ Trying to find path for: [Object: dpkg_deb]
2012-01-10 11:58:36,799 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), sourceFile -> archival/dpkg_deb.c, generated -> false, objectFile -> dpkg_deb, listName -> lib)
2012-01-10 11:58:36,799 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), sourceFile -> archival/dpkg_deb.c, generated -> false, objectFile -> dpkg_deb, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,799 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,799 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,799 DEBUG PCDerivation$ Expression of path for object occurrence archival/dpkg_deb.c: ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m"))
2012-01-10 11:58:36,799 DEBUG PCDerivation$ Trying to find path for: [Object: rpm2cpio]
2012-01-10 11:58:36,799 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m")), sourceFile -> archival/rpm2cpio.c, generated -> false, objectFile -> rpm2cpio, listName -> lib)
2012-01-10 11:58:36,799 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m")), sourceFile -> archival/rpm2cpio.c, generated -> false, objectFile -> rpm2cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,799 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,799 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,799 DEBUG PCDerivation$ Expression of path for object occurrence archival/rpm2cpio.c: ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))
2012-01-10 11:58:36,799 DEBUG PCDerivation$ Trying to find path for: [Object: rpm]
2012-01-10 11:58:36,799 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")), sourceFile -> archival/rpm.c, generated -> false, objectFile -> rpm, listName -> lib)
2012-01-10 11:58:36,800 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")), sourceFile -> archival/rpm.c, generated -> false, objectFile -> rpm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,800 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,800 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,800 DEBUG PCDerivation$ Expression of path for object occurrence archival/rpm.c: ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))
2012-01-10 11:58:36,800 DEBUG PCDerivation$ Trying to find path for: [Object: tar]
2012-01-10 11:58:36,800 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/tar.c, generated -> false, objectFile -> tar, listName -> lib)
2012-01-10 11:58:36,800 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/tar.c, generated -> false, objectFile -> tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,800 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,800 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,800 DEBUG PCDerivation$ Expression of path for object occurrence archival/tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-10 11:58:36,800 DEBUG PCDerivation$ Trying to find path for: [Object: unzip]
2012-01-10 11:58:36,800 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m")), sourceFile -> archival/unzip.c, generated -> false, objectFile -> unzip, listName -> lib)
2012-01-10 11:58:36,800 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m")), sourceFile -> archival/unzip.c, generated -> false, objectFile -> unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,800 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,800 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,801 DEBUG PCDerivation$ Expression of path for object occurrence archival/unzip.c: ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))
2012-01-10 11:58:36,801 DEBUG PCDerivation$ Trying to find path for: [Object: lzop]
2012-01-10 11:58:36,801 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/lzop.c, generated -> false, objectFile -> lzop, listName -> lib)
2012-01-10 11:58:36,801 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/lzop.c, generated -> false, objectFile -> lzop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,801 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,801 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,801 DEBUG PCDerivation$ Expression of path for object occurrence archival/lzop.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:58:36,801 DEBUG PCDerivation$ Trying to find path for: [Object: bbunzip]
2012-01-10 11:58:36,801 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m"))), sourceFile -> archival/bbunzip.c, generated -> false, objectFile -> bbunzip, listName -> lib)
2012-01-10 11:58:36,801 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m"))), sourceFile -> archival/bbunzip.c, generated -> false, objectFile -> bbunzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,801 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,801 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,801 DEBUG PCDerivation$ Expression of path for object occurrence archival/bbunzip.c: (((((((((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")) || ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))) || ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))) || ((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m"))) || ((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m"))) || ((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m"))) || ((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m"))) || ((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")))
2012-01-10 11:58:36,801 DEBUG PCDerivation$ Trying to find path for: [Object: gzip]
2012-01-10 11:58:36,801 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m")), sourceFile -> archival/gzip.c, generated -> false, objectFile -> gzip, listName -> lib)
2012-01-10 11:58:36,802 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m")), sourceFile -> archival/gzip.c, generated -> false, objectFile -> gzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,802 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,802 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,802 DEBUG PCDerivation$ Expression of path for object occurrence archival/gzip.c: ((CONFIG_GZIP == "y") || (CONFIG_GZIP == "m"))
2012-01-10 11:58:36,802 DEBUG PCDerivation$ Trying to find path for: [Object: bzip2]
2012-01-10 11:58:36,802 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m")), sourceFile -> archival/bzip2.c, generated -> false, objectFile -> bzip2, listName -> lib)
2012-01-10 11:58:36,802 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m")), sourceFile -> archival/bzip2.c, generated -> false, objectFile -> bzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,802 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/Kbuild)
2012-01-10 11:58:36,802 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,802 DEBUG PCDerivation$ Expression of path for object occurrence archival/bzip2.c: ((CONFIG_BZIP2 == "y") || (CONFIG_BZIP2 == "m"))
2012-01-10 11:58:36,802 DEBUG PCDerivation$ Trying to find path for: [Object: data_skip]
2012-01-10 11:58:36,802 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES)
2012-01-10 11:58:36,802 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_skip.c, generated -> false, objectFile -> data_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,802 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,802 TRACE PCDerivation$ trying to find variable reference, var: COMMON_FILES
2012-01-10 11:58:36,802 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:58:36,812 TRACE PCDerivation$    # collecting: [VariableReference: COMMON_FILES]
2012-01-10 11:58:36,812 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,812 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES) is: IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,813 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,813 TRACE PCDerivation$ parent of IfBNode --> Map(expr -> Unknown(!(lib-y == ""))) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,813 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,813 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,813 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,813 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,813 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_all]
2012-01-10 11:58:36,813 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES)
2012-01-10 11:58:36,813 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_all.c, generated -> false, objectFile -> data_extract_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,814 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,814 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,814 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,814 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,814 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,814 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,814 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_stdout]
2012-01-10 11:58:36,814 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES)
2012-01-10 11:58:36,814 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_extract_to_stdout.c, generated -> false, objectFile -> data_extract_to_stdout, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,815 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,815 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,815 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,815 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,815 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,815 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_stdout.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,815 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_all]
2012-01-10 11:58:36,815 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES)
2012-01-10 11:58:36,815 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_all.c, generated -> false, objectFile -> filter_accept_all, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,816 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,816 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,816 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,816 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,816 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,816 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_all.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,816 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list]
2012-01-10 11:58:36,816 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES)
2012-01-10 11:58:36,817 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list.c, generated -> false, objectFile -> filter_accept_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,817 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,817 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,817 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,817 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,817 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,817 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,817 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_reject_list]
2012-01-10 11:58:36,817 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES)
2012-01-10 11:58:36,818 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_reject_list.c, generated -> false, objectFile -> filter_accept_reject_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,818 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,818 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,818 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,818 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,818 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,818 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_reject_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,818 DEBUG PCDerivation$ Trying to find path for: [Object: header_skip]
2012-01-10 11:58:36,818 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES)
2012-01-10 11:58:36,819 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_skip.c, generated -> false, objectFile -> header_skip, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,819 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,819 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,819 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,819 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,819 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,819 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_skip.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,819 DEBUG PCDerivation$ Trying to find path for: [Object: header_list]
2012-01-10 11:58:36,819 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES)
2012-01-10 11:58:36,820 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_list.c, generated -> false, objectFile -> header_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,820 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,820 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,820 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,820 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,820 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,820 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,820 DEBUG PCDerivation$ Trying to find path for: [Object: header_verbose_list]
2012-01-10 11:58:36,821 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES)
2012-01-10 11:58:36,821 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/header_verbose_list.c, generated -> false, objectFile -> header_verbose_list, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,821 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,821 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,821 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,821 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,821 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,821 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/header_verbose_list.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,821 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_read]
2012-01-10 11:58:36,822 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES)
2012-01-10 11:58:36,822 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_read.c, generated -> false, objectFile -> seek_by_read, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,822 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,822 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,822 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,822 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,822 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,823 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_read.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,823 DEBUG PCDerivation$ Trying to find path for: [Object: seek_by_jump]
2012-01-10 11:58:36,823 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES)
2012-01-10 11:58:36,823 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/seek_by_jump.c, generated -> false, objectFile -> seek_by_jump, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,823 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,823 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,823 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,823 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,823 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,824 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/seek_by_jump.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,824 DEBUG PCDerivation$ Trying to find path for: [Object: data_align]
2012-01-10 11:58:36,824 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES)
2012-01-10 11:58:36,824 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/data_align.c, generated -> false, objectFile -> data_align, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,824 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,824 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,824 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,824 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,824 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,825 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_align.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,825 DEBUG PCDerivation$ Trying to find path for: [Object: find_list_entry]
2012-01-10 11:58:36,825 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES)
2012-01-10 11:58:36,825 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/find_list_entry.c, generated -> false, objectFile -> find_list_entry, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,825 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,825 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,825 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,825 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,826 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,826 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/find_list_entry.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,826 DEBUG PCDerivation$ Trying to find path for: [Object: init_handle]
2012-01-10 11:58:36,826 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES)
2012-01-10 11:58:36,826 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/init_handle.c, generated -> false, objectFile -> init_handle, listName -> COMMON_FILES) is: VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,826 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> COMMON_FILES)
2012-01-10 11:58:36,826 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> [TRUE], varName -> COMMON_FILES)
2012-01-10 11:58:36,826 TRACE PCDerivation$ moveUpStrategy: visiting IfBNode --> Map(expr -> Unknown(!(lib-y == "")))
2012-01-10 11:58:36,826 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,827 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,827 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/init_handle.c: Unknown(!(lib-y == ""))
2012-01-10 11:58:36,827 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:58:36,827 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES)
2012-01-10 11:58:36,827 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,827 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,827 TRACE PCDerivation$ trying to find variable reference, var: DPKG_FILES
2012-01-10 11:58:36,827 TRACE PCDerivation$ # traversing archival/libarchive/Kbuild
2012-01-10 11:58:36,832 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:58:36,832 TRACE PCDerivation$    # collecting: [VariableReference: DPKG_FILES]
2012-01-10 11:58:36,838 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,838 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,838 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,838 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,838 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,838 TRACE PCDerivation$ parent of VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,838 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,838 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,839 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:58:36,839 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:58:36,839 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES)
2012-01-10 11:58:36,839 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,839 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,839 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,839 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,839 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,839 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,839 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,839 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,839 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:58:36,839 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:58:36,840 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES)
2012-01-10 11:58:36,840 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,840 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,840 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,840 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,840 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,840 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,840 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,840 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,840 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:58:36,840 DEBUG PCDerivation$ Trying to find path for: [Object: filter_accept_list_reassign]
2012-01-10 11:58:36,840 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES)
2012-01-10 11:58:36,841 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> archival/libarchive/filter_accept_list_reassign.c, generated -> false, objectFile -> filter_accept_list_reassign, listName -> DPKG_FILES) is: VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,841 TRACE PCDerivation$ moveUpStrategy: visiting VariableDefinitionBNode --> Map(varName -> DPKG_FILES)
2012-01-10 11:58:36,841 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,841 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,841 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,841 TRACE PCDerivation$ moveUpStrategy: visiting VariableReferenceBNode --> Map(expr -> ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")), varName -> DPKG_FILES)
2012-01-10 11:58:36,841 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,841 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,841 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/filter_accept_list_reassign.c: (((CONFIG_DPKG == "y") || (CONFIG_DPKG == "m")) || ((CONFIG_DPKG_DEB == "y") || (CONFIG_DPKG_DEB == "m")))
2012-01-10 11:58:36,841 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_ar]
2012-01-10 11:58:36,841 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib)
2012-01-10 11:58:36,841 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/get_header_ar.c, generated -> false, objectFile -> get_header_ar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,842 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,842 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,842 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_ar.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:58:36,842 DEBUG PCDerivation$ Trying to find path for: [Object: unpack_ar_archive]
2012-01-10 11:58:36,842 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib)
2012-01-10 11:58:36,842 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AR == "y") || (CONFIG_AR == "m")), sourceFile -> archival/libarchive/unpack_ar_archive.c, generated -> false, objectFile -> unpack_ar_archive, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,842 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,842 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,842 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/unpack_ar_archive.c: ((CONFIG_AR == "y") || (CONFIG_AR == "m"))
2012-01-10 11:58:36,842 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_bunzip2]
2012-01-10 11:58:36,842 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib)
2012-01-10 11:58:36,842 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m"))), sourceFile -> archival/libarchive/decompress_bunzip2.c, generated -> false, objectFile -> decompress_bunzip2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,843 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,843 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,843 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_bunzip2.c: (((((CONFIG_BUNZIP2 == "y") || (CONFIG_BUNZIP2 == "m")) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_COMPRESS_USAGE == "y") || (CONFIG_FEATURE_COMPRESS_USAGE == "m"))) || ((CONFIG_FEATURE_COMPRESS_BBCONFIG == "y") || (CONFIG_FEATURE_COMPRESS_BBCONFIG == "m")))
2012-01-10 11:58:36,843 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unlzma]
2012-01-10 11:58:36,843 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib)
2012-01-10 11:58:36,843 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))), sourceFile -> archival/libarchive/decompress_unlzma.c, generated -> false, objectFile -> decompress_unlzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,843 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,843 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,843 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unlzma.c: (((CONFIG_UNLZMA == "y") || (CONFIG_UNLZMA == "m")) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")))
2012-01-10 11:58:36,843 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unxz]
2012-01-10 11:58:36,843 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib)
2012-01-10 11:58:36,843 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/decompress_unxz.c, generated -> false, objectFile -> decompress_unxz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,843 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,844 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,844 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unxz.c: (((CONFIG_UNXZ == "y") || (CONFIG_UNXZ == "m")) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:58:36,844 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_cpio]
2012-01-10 11:58:36,844 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib)
2012-01-10 11:58:36,844 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))), sourceFile -> archival/libarchive/get_header_cpio.c, generated -> false, objectFile -> get_header_cpio, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,844 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,844 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,844 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_cpio.c: ((((CONFIG_CPIO == "y") || (CONFIG_CPIO == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m")))
2012-01-10 11:58:36,844 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_unzip]
2012-01-10 11:58:36,844 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib)
2012-01-10 11:58:36,844 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))), sourceFile -> archival/libarchive/decompress_unzip.c, generated -> false, objectFile -> decompress_unzip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,845 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,845 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,845 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_unzip.c: ((((((CONFIG_GUNZIP == "y") || (CONFIG_GUNZIP == "m")) || ((CONFIG_RPM2CPIO == "y") || (CONFIG_RPM2CPIO == "m"))) || ((CONFIG_RPM == "y") || (CONFIG_RPM == "m"))) || ((CONFIG_UNZIP == "y") || (CONFIG_UNZIP == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")))
2012-01-10 11:58:36,845 DEBUG PCDerivation$ Trying to find path for: [Object: open_transformer]
2012-01-10 11:58:36,845 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib)
2012-01-10 11:58:36,845 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m"))), sourceFile -> archival/libarchive/open_transformer.c, generated -> false, objectFile -> open_transformer, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,845 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,845 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,845 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/open_transformer.c: (((((((CONFIG_RPM == "y") || (CONFIG_RPM == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))) || ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))) || ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))) || ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))) || ((CONFIG_FEATURE_SEAMLESS_XZ == "y") || (CONFIG_FEATURE_SEAMLESS_XZ == "m")))
2012-01-10 11:58:36,845 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar]
2012-01-10 11:58:36,845 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib)
2012-01-10 11:58:36,845 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAR == "y") || (CONFIG_TAR == "m")), sourceFile -> archival/libarchive/get_header_tar.c, generated -> false, objectFile -> get_header_tar, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,846 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,846 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,846 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar.c: ((CONFIG_TAR == "y") || (CONFIG_TAR == "m"))
2012-01-10 11:58:36,846 DEBUG PCDerivation$ Trying to find path for: [Object: decompress_uncompress]
2012-01-10 11:58:36,846 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib)
2012-01-10 11:58:36,846 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m"))), sourceFile -> archival/libarchive/decompress_uncompress.c, generated -> false, objectFile -> decompress_uncompress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,846 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,846 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,846 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/decompress_uncompress.c: (((CONFIG_UNCOMPRESS == "y") || (CONFIG_UNCOMPRESS == "m")) || ((CONFIG_FEATURE_SEAMLESS_Z == "y") || (CONFIG_FEATURE_SEAMLESS_Z == "m")))
2012-01-10 11:58:36,846 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1]
2012-01-10 11:58:36,846 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib)
2012-01-10 11:58:36,846 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1.c, generated -> false, objectFile -> lzo1x_1, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,846 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,847 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,847 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:58:36,847 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_1o]
2012-01-10 11:58:36,847 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib)
2012-01-10 11:58:36,847 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_1o.c, generated -> false, objectFile -> lzo1x_1o, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,847 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,847 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,847 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_1o.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:58:36,847 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_d]
2012-01-10 11:58:36,847 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib)
2012-01-10 11:58:36,847 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m")), sourceFile -> archival/libarchive/lzo1x_d.c, generated -> false, objectFile -> lzo1x_d, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,847 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,847 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,848 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_d.c: ((CONFIG_LZOP == "y") || (CONFIG_LZOP == "m"))
2012-01-10 11:58:36,848 DEBUG PCDerivation$ Trying to find path for: [Object: lzo1x_9x]
2012-01-10 11:58:36,848 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib)
2012-01-10 11:58:36,848 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m")), sourceFile -> archival/libarchive/lzo1x_9x.c, generated -> false, objectFile -> lzo1x_9x, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,848 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,848 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,848 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/lzo1x_9x.c: ((CONFIG_LZOP_COMPR_HIGH == "y") || (CONFIG_LZOP_COMPR_HIGH == "m"))
2012-01-10 11:58:36,848 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_gz]
2012-01-10 11:58:36,848 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib)
2012-01-10 11:58:36,848 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m")), sourceFile -> archival/libarchive/get_header_tar_gz.c, generated -> false, objectFile -> get_header_tar_gz, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,848 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,848 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,849 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_gz.c: ((CONFIG_FEATURE_SEAMLESS_GZ == "y") || (CONFIG_FEATURE_SEAMLESS_GZ == "m"))
2012-01-10 11:58:36,849 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_bz2]
2012-01-10 11:58:36,849 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib)
2012-01-10 11:58:36,849 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m")), sourceFile -> archival/libarchive/get_header_tar_bz2.c, generated -> false, objectFile -> get_header_tar_bz2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,849 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,849 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,849 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_bz2.c: ((CONFIG_FEATURE_SEAMLESS_BZ2 == "y") || (CONFIG_FEATURE_SEAMLESS_BZ2 == "m"))
2012-01-10 11:58:36,849 DEBUG PCDerivation$ Trying to find path for: [Object: get_header_tar_lzma]
2012-01-10 11:58:36,849 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib)
2012-01-10 11:58:36,849 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m")), sourceFile -> archival/libarchive/get_header_tar_lzma.c, generated -> false, objectFile -> get_header_tar_lzma, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,849 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,849 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,849 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/get_header_tar_lzma.c: ((CONFIG_FEATURE_SEAMLESS_LZMA == "y") || (CONFIG_FEATURE_SEAMLESS_LZMA == "m"))
2012-01-10 11:58:36,850 DEBUG PCDerivation$ Trying to find path for: [Object: data_extract_to_command]
2012-01-10 11:58:36,850 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib)
2012-01-10 11:58:36,850 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m")), sourceFile -> archival/libarchive/data_extract_to_command.c, generated -> false, objectFile -> data_extract_to_command, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,850 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> archival/libarchive/Kbuild)
2012-01-10 11:58:36,850 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,850 DEBUG PCDerivation$ Expression of path for object occurrence archival/libarchive/data_extract_to_command.c: ((CONFIG_FEATURE_TAR_TO_COMMAND == "y") || (CONFIG_FEATURE_TAR_TO_COMMAND == "m"))
2012-01-10 11:58:36,850 DEBUG PCDerivation$ Trying to find path for: [Object: chvt]
2012-01-10 11:58:36,850 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m")), sourceFile -> console-tools/chvt.c, generated -> false, objectFile -> chvt, listName -> lib)
2012-01-10 11:58:36,850 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m")), sourceFile -> console-tools/chvt.c, generated -> false, objectFile -> chvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,850 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,850 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,850 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,851 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/chvt.c: ((CONFIG_CHVT == "y") || (CONFIG_CHVT == "m"))
2012-01-10 11:58:36,851 DEBUG PCDerivation$ Trying to find path for: [Object: fgconsole]
2012-01-10 11:58:36,851 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m")), sourceFile -> console-tools/fgconsole.c, generated -> false, objectFile -> fgconsole, listName -> lib)
2012-01-10 11:58:36,851 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m")), sourceFile -> console-tools/fgconsole.c, generated -> false, objectFile -> fgconsole, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,851 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,851 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,851 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/fgconsole.c: ((CONFIG_FGCONSOLE == "y") || (CONFIG_FGCONSOLE == "m"))
2012-01-10 11:58:36,851 DEBUG PCDerivation$ Trying to find path for: [Object: clear]
2012-01-10 11:58:36,851 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m")), sourceFile -> console-tools/clear.c, generated -> false, objectFile -> clear, listName -> lib)
2012-01-10 11:58:36,851 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m")), sourceFile -> console-tools/clear.c, generated -> false, objectFile -> clear, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,851 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,851 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,852 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/clear.c: ((CONFIG_CLEAR == "y") || (CONFIG_CLEAR == "m"))
2012-01-10 11:58:36,852 DEBUG PCDerivation$ Trying to find path for: [Object: deallocvt]
2012-01-10 11:58:36,852 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m")), sourceFile -> console-tools/deallocvt.c, generated -> false, objectFile -> deallocvt, listName -> lib)
2012-01-10 11:58:36,852 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m")), sourceFile -> console-tools/deallocvt.c, generated -> false, objectFile -> deallocvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,852 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,852 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,852 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/deallocvt.c: ((CONFIG_DEALLOCVT == "y") || (CONFIG_DEALLOCVT == "m"))
2012-01-10 11:58:36,852 DEBUG PCDerivation$ Trying to find path for: [Object: dumpkmap]
2012-01-10 11:58:36,852 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m")), sourceFile -> console-tools/dumpkmap.c, generated -> false, objectFile -> dumpkmap, listName -> lib)
2012-01-10 11:58:36,852 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m")), sourceFile -> console-tools/dumpkmap.c, generated -> false, objectFile -> dumpkmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,852 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,852 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,852 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/dumpkmap.c: ((CONFIG_DUMPKMAP == "y") || (CONFIG_DUMPKMAP == "m"))
2012-01-10 11:58:36,853 DEBUG PCDerivation$ Trying to find path for: [Object: setconsole]
2012-01-10 11:58:36,853 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m")), sourceFile -> console-tools/setconsole.c, generated -> false, objectFile -> setconsole, listName -> lib)
2012-01-10 11:58:36,853 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m")), sourceFile -> console-tools/setconsole.c, generated -> false, objectFile -> setconsole, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,853 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,853 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,853 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setconsole.c: ((CONFIG_SETCONSOLE == "y") || (CONFIG_SETCONSOLE == "m"))
2012-01-10 11:58:36,853 DEBUG PCDerivation$ Trying to find path for: [Object: kbd_mode]
2012-01-10 11:58:36,853 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m")), sourceFile -> console-tools/kbd_mode.c, generated -> false, objectFile -> kbd_mode, listName -> lib)
2012-01-10 11:58:36,853 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m")), sourceFile -> console-tools/kbd_mode.c, generated -> false, objectFile -> kbd_mode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,853 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,853 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,853 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/kbd_mode.c: ((CONFIG_KBD_MODE == "y") || (CONFIG_KBD_MODE == "m"))
2012-01-10 11:58:36,853 DEBUG PCDerivation$ Trying to find path for: [Object: loadfont]
2012-01-10 11:58:36,854 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m"))), sourceFile -> console-tools/loadfont.c, generated -> false, objectFile -> loadfont, listName -> lib)
2012-01-10 11:58:36,854 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m"))), sourceFile -> console-tools/loadfont.c, generated -> false, objectFile -> loadfont, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,854 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,854 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,854 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/loadfont.c: (((CONFIG_LOADFONT == "y") || (CONFIG_LOADFONT == "m")) || ((CONFIG_SETFONT == "y") || (CONFIG_SETFONT == "m")))
2012-01-10 11:58:36,854 DEBUG PCDerivation$ Trying to find path for: [Object: loadkmap]
2012-01-10 11:58:36,854 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m")), sourceFile -> console-tools/loadkmap.c, generated -> false, objectFile -> loadkmap, listName -> lib)
2012-01-10 11:58:36,854 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m")), sourceFile -> console-tools/loadkmap.c, generated -> false, objectFile -> loadkmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,854 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,854 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,854 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/loadkmap.c: ((CONFIG_LOADKMAP == "y") || (CONFIG_LOADKMAP == "m"))
2012-01-10 11:58:36,854 DEBUG PCDerivation$ Trying to find path for: [Object: openvt]
2012-01-10 11:58:36,855 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m")), sourceFile -> console-tools/openvt.c, generated -> false, objectFile -> openvt, listName -> lib)
2012-01-10 11:58:36,855 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m")), sourceFile -> console-tools/openvt.c, generated -> false, objectFile -> openvt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,855 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,855 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,855 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/openvt.c: ((CONFIG_OPENVT == "y") || (CONFIG_OPENVT == "m"))
2012-01-10 11:58:36,855 DEBUG PCDerivation$ Trying to find path for: [Object: reset]
2012-01-10 11:58:36,855 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESET == "y") || (CONFIG_RESET == "m")), sourceFile -> console-tools/reset.c, generated -> false, objectFile -> reset, listName -> lib)
2012-01-10 11:58:36,855 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESET == "y") || (CONFIG_RESET == "m")), sourceFile -> console-tools/reset.c, generated -> false, objectFile -> reset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,855 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,855 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,855 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/reset.c: ((CONFIG_RESET == "y") || (CONFIG_RESET == "m"))
2012-01-10 11:58:36,855 DEBUG PCDerivation$ Trying to find path for: [Object: resize]
2012-01-10 11:58:36,855 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m")), sourceFile -> console-tools/resize.c, generated -> false, objectFile -> resize, listName -> lib)
2012-01-10 11:58:36,856 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m")), sourceFile -> console-tools/resize.c, generated -> false, objectFile -> resize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,856 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,856 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,856 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/resize.c: ((CONFIG_RESIZE == "y") || (CONFIG_RESIZE == "m"))
2012-01-10 11:58:36,856 DEBUG PCDerivation$ Trying to find path for: [Object: setkeycodes]
2012-01-10 11:58:36,856 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m")), sourceFile -> console-tools/setkeycodes.c, generated -> false, objectFile -> setkeycodes, listName -> lib)
2012-01-10 11:58:36,856 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m")), sourceFile -> console-tools/setkeycodes.c, generated -> false, objectFile -> setkeycodes, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,856 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,856 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,856 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setkeycodes.c: ((CONFIG_SETKEYCODES == "y") || (CONFIG_SETKEYCODES == "m"))
2012-01-10 11:58:36,856 DEBUG PCDerivation$ Trying to find path for: [Object: setlogcons]
2012-01-10 11:58:36,856 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m")), sourceFile -> console-tools/setlogcons.c, generated -> false, objectFile -> setlogcons, listName -> lib)
2012-01-10 11:58:36,857 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m")), sourceFile -> console-tools/setlogcons.c, generated -> false, objectFile -> setlogcons, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,857 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,857 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,857 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/setlogcons.c: ((CONFIG_SETLOGCONS == "y") || (CONFIG_SETLOGCONS == "m"))
2012-01-10 11:58:36,857 DEBUG PCDerivation$ Trying to find path for: [Object: showkey]
2012-01-10 11:58:36,857 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m")), sourceFile -> console-tools/showkey.c, generated -> false, objectFile -> showkey, listName -> lib)
2012-01-10 11:58:36,857 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m")), sourceFile -> console-tools/showkey.c, generated -> false, objectFile -> showkey, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,857 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> console-tools/Kbuild)
2012-01-10 11:58:36,857 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,857 DEBUG PCDerivation$ Expression of path for object occurrence console-tools/showkey.c: ((CONFIG_SHOWKEY == "y") || (CONFIG_SHOWKEY == "m"))
2012-01-10 11:58:36,857 DEBUG PCDerivation$ Trying to find path for: [Object: getopt_mk_fifo_nod]
2012-01-10 11:58:36,857 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib)
2012-01-10 11:58:36,858 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:58:36,858 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:58:36,858 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,858 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,858 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,858 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,858 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/getopt_mk_fifo_nod.c: (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")))
2012-01-10 11:58:36,858 DEBUG PCDerivation$ Trying to find path for: [Object: cp_mv_stat]
2012-01-10 11:58:36,858 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib)
2012-01-10 11:58:36,858 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:58:36,858 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:58:36,858 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,859 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,859 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/cp_mv_stat.c: ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m")))
2012-01-10 11:58:36,859 DEBUG PCDerivation$ Trying to find path for: [Object: basename]
2012-01-10 11:58:36,859 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m")), sourceFile -> coreutils/basename.c, generated -> false, objectFile -> basename, listName -> lib)
2012-01-10 11:58:36,859 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m")), sourceFile -> coreutils/basename.c, generated -> false, objectFile -> basename, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,859 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,859 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,859 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/basename.c: ((CONFIG_BASENAME == "y") || (CONFIG_BASENAME == "m"))
2012-01-10 11:58:36,859 DEBUG PCDerivation$ Trying to find path for: [Object: cat]
2012-01-10 11:58:36,859 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))), sourceFile -> coreutils/cat.c, generated -> false, objectFile -> cat, listName -> lib)
2012-01-10 11:58:36,860 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))), sourceFile -> coreutils/cat.c, generated -> false, objectFile -> cat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,860 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,860 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,860 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cat.c: (((((CONFIG_CAT == "y") || (CONFIG_CAT == "m")) || ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")))
2012-01-10 11:58:36,860 DEBUG PCDerivation$ Trying to find path for: [Object: date]
2012-01-10 11:58:36,860 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DATE == "y") || (CONFIG_DATE == "m")), sourceFile -> coreutils/date.c, generated -> false, objectFile -> date, listName -> lib)
2012-01-10 11:58:36,860 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DATE == "y") || (CONFIG_DATE == "m")), sourceFile -> coreutils/date.c, generated -> false, objectFile -> date, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,860 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,860 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,860 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/date.c: ((CONFIG_DATE == "y") || (CONFIG_DATE == "m"))
2012-01-10 11:58:36,860 DEBUG PCDerivation$ Trying to find path for: [Object: hostid]
2012-01-10 11:58:36,860 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m")), sourceFile -> coreutils/hostid.c, generated -> false, objectFile -> hostid, listName -> lib)
2012-01-10 11:58:36,860 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m")), sourceFile -> coreutils/hostid.c, generated -> false, objectFile -> hostid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,861 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,861 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,861 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/hostid.c: ((CONFIG_HOSTID == "y") || (CONFIG_HOSTID == "m"))
2012-01-10 11:58:36,861 DEBUG PCDerivation$ Trying to find path for: [Object: id]
2012-01-10 11:58:36,861 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m"))), sourceFile -> coreutils/id.c, generated -> false, objectFile -> id, listName -> lib)
2012-01-10 11:58:36,861 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m"))), sourceFile -> coreutils/id.c, generated -> false, objectFile -> id, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,861 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,861 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,861 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/id.c: (((CONFIG_GROUPS == "y") || (CONFIG_GROUPS == "m")) || ((CONFIG_ID == "y") || (CONFIG_ID == "m")))
2012-01-10 11:58:36,861 DEBUG PCDerivation$ Trying to find path for: [Object: test]
2012-01-10 11:58:36,861 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test.c, generated -> false, objectFile -> test, listName -> lib)
2012-01-10 11:58:36,861 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test.c, generated -> false, objectFile -> test, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,862 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,862 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,862 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/test.c: ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:58:36,862 DEBUG PCDerivation$ Trying to find path for: [Object: test_ptr_hack]
2012-01-10 11:58:36,862 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test_ptr_hack.c, generated -> false, objectFile -> test_ptr_hack, listName -> lib)
2012-01-10 11:58:36,862 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/test_ptr_hack.c, generated -> false, objectFile -> test_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,862 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,862 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,862 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/test_ptr_hack.c: ((((CONFIG_TEST == "y") || (CONFIG_TEST == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:58:36,862 DEBUG PCDerivation$ Trying to find path for: [Object: touch]
2012-01-10 11:58:36,862 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m")), sourceFile -> coreutils/touch.c, generated -> false, objectFile -> touch, listName -> lib)
2012-01-10 11:58:36,862 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m")), sourceFile -> coreutils/touch.c, generated -> false, objectFile -> touch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,863 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,863 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,863 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/touch.c: ((CONFIG_TOUCH == "y") || (CONFIG_TOUCH == "m"))
2012-01-10 11:58:36,863 DEBUG PCDerivation$ Trying to find path for: [Object: tr]
2012-01-10 11:58:36,863 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TR == "y") || (CONFIG_TR == "m")), sourceFile -> coreutils/tr.c, generated -> false, objectFile -> tr, listName -> lib)
2012-01-10 11:58:36,863 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TR == "y") || (CONFIG_TR == "m")), sourceFile -> coreutils/tr.c, generated -> false, objectFile -> tr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,863 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,863 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,863 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tr.c: ((CONFIG_TR == "y") || (CONFIG_TR == "m"))
2012-01-10 11:58:36,863 DEBUG PCDerivation$ Trying to find path for: [Object: uudecode]
2012-01-10 11:58:36,863 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m"))), sourceFile -> coreutils/uudecode.c, generated -> false, objectFile -> uudecode, listName -> lib)
2012-01-10 11:58:36,863 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m"))), sourceFile -> coreutils/uudecode.c, generated -> false, objectFile -> uudecode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,863 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,864 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,864 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uudecode.c: (((CONFIG_BASE64 == "y") || (CONFIG_BASE64 == "m")) || ((CONFIG_UUDECODE == "y") || (CONFIG_UUDECODE == "m")))
2012-01-10 11:58:36,864 DEBUG PCDerivation$ Trying to find path for: [Object: who]
2012-01-10 11:58:36,864 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m"))), sourceFile -> coreutils/who.c, generated -> false, objectFile -> who, listName -> lib)
2012-01-10 11:58:36,864 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m"))), sourceFile -> coreutils/who.c, generated -> false, objectFile -> who, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,864 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,864 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,864 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/who.c: (((CONFIG_USERS == "y") || (CONFIG_USERS == "m")) || ((CONFIG_WHO == "y") || (CONFIG_WHO == "m")))
2012-01-10 11:58:36,864 DEBUG PCDerivation$ Trying to find path for: [Object: cal]
2012-01-10 11:58:36,864 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CAL == "y") || (CONFIG_CAL == "m")), sourceFile -> coreutils/cal.c, generated -> false, objectFile -> cal, listName -> lib)
2012-01-10 11:58:36,864 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CAL == "y") || (CONFIG_CAL == "m")), sourceFile -> coreutils/cal.c, generated -> false, objectFile -> cal, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,864 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,865 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,865 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cal.c: ((CONFIG_CAL == "y") || (CONFIG_CAL == "m"))
2012-01-10 11:58:36,865 DEBUG PCDerivation$ Trying to find path for: [Object: catv]
2012-01-10 11:58:36,865 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CATV == "y") || (CONFIG_CATV == "m")), sourceFile -> coreutils/catv.c, generated -> false, objectFile -> catv, listName -> lib)
2012-01-10 11:58:36,865 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CATV == "y") || (CONFIG_CATV == "m")), sourceFile -> coreutils/catv.c, generated -> false, objectFile -> catv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,865 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,865 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,865 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/catv.c: ((CONFIG_CATV == "y") || (CONFIG_CATV == "m"))
2012-01-10 11:58:36,865 DEBUG PCDerivation$ Trying to find path for: [Object: chgrp]
2012-01-10 11:58:36,865 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")), sourceFile -> coreutils/chgrp.c, generated -> false, objectFile -> chgrp, listName -> lib)
2012-01-10 11:58:36,865 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")), sourceFile -> coreutils/chgrp.c, generated -> false, objectFile -> chgrp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,865 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,865 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,866 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chgrp.c: ((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m"))
2012-01-10 11:58:36,866 DEBUG PCDerivation$ Trying to find path for: [Object: chown]
2012-01-10 11:58:36,866 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))), sourceFile -> coreutils/chown.c, generated -> false, objectFile -> chown, listName -> lib)
2012-01-10 11:58:36,866 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))), sourceFile -> coreutils/chown.c, generated -> false, objectFile -> chown, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,866 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,866 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,866 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chown.c: (((((CONFIG_CHGRP == "y") || (CONFIG_CHGRP == "m")) || ((CONFIG_CHOWN == "y") || (CONFIG_CHOWN == "m"))) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")))
2012-01-10 11:58:36,866 DEBUG PCDerivation$ Trying to find path for: [Object: chmod]
2012-01-10 11:58:36,866 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m")), sourceFile -> coreutils/chmod.c, generated -> false, objectFile -> chmod, listName -> lib)
2012-01-10 11:58:36,866 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m")), sourceFile -> coreutils/chmod.c, generated -> false, objectFile -> chmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,866 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,866 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,867 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chmod.c: ((CONFIG_CHMOD == "y") || (CONFIG_CHMOD == "m"))
2012-01-10 11:58:36,867 DEBUG PCDerivation$ Trying to find path for: [Object: chroot]
2012-01-10 11:58:36,867 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m")), sourceFile -> coreutils/chroot.c, generated -> false, objectFile -> chroot, listName -> lib)
2012-01-10 11:58:36,867 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m")), sourceFile -> coreutils/chroot.c, generated -> false, objectFile -> chroot, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,867 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,867 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,867 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/chroot.c: ((CONFIG_CHROOT == "y") || (CONFIG_CHROOT == "m"))
2012-01-10 11:58:36,867 DEBUG PCDerivation$ Trying to find path for: [Object: cksum]
2012-01-10 11:58:36,867 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m")), sourceFile -> coreutils/cksum.c, generated -> false, objectFile -> cksum, listName -> lib)
2012-01-10 11:58:36,867 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m")), sourceFile -> coreutils/cksum.c, generated -> false, objectFile -> cksum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,867 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,867 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,867 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cksum.c: ((CONFIG_CKSUM == "y") || (CONFIG_CKSUM == "m"))
2012-01-10 11:58:36,868 DEBUG PCDerivation$ Trying to find path for: [Object: comm]
2012-01-10 11:58:36,868 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_COMM == "y") || (CONFIG_COMM == "m")), sourceFile -> coreutils/comm.c, generated -> false, objectFile -> comm, listName -> lib)
2012-01-10 11:58:36,868 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_COMM == "y") || (CONFIG_COMM == "m")), sourceFile -> coreutils/comm.c, generated -> false, objectFile -> comm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,868 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,868 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,868 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/comm.c: ((CONFIG_COMM == "y") || (CONFIG_COMM == "m"))
2012-01-10 11:58:36,868 DEBUG PCDerivation$ Trying to find path for: [Object: cp]
2012-01-10 11:58:36,868 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CP == "y") || (CONFIG_CP == "m")), sourceFile -> coreutils/cp.c, generated -> false, objectFile -> cp, listName -> lib)
2012-01-10 11:58:36,868 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CP == "y") || (CONFIG_CP == "m")), sourceFile -> coreutils/cp.c, generated -> false, objectFile -> cp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,868 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,868 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,868 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cp.c: ((CONFIG_CP == "y") || (CONFIG_CP == "m"))
2012-01-10 11:58:36,868 DEBUG PCDerivation$ Trying to find path for: [Object: cut]
2012-01-10 11:58:36,869 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CUT == "y") || (CONFIG_CUT == "m")), sourceFile -> coreutils/cut.c, generated -> false, objectFile -> cut, listName -> lib)
2012-01-10 11:58:36,869 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CUT == "y") || (CONFIG_CUT == "m")), sourceFile -> coreutils/cut.c, generated -> false, objectFile -> cut, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,869 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,869 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,869 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/cut.c: ((CONFIG_CUT == "y") || (CONFIG_CUT == "m"))
2012-01-10 11:58:36,869 DEBUG PCDerivation$ Trying to find path for: [Object: dd]
2012-01-10 11:58:36,869 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DD == "y") || (CONFIG_DD == "m")), sourceFile -> coreutils/dd.c, generated -> false, objectFile -> dd, listName -> lib)
2012-01-10 11:58:36,869 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DD == "y") || (CONFIG_DD == "m")), sourceFile -> coreutils/dd.c, generated -> false, objectFile -> dd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,869 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,869 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,869 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dd.c: ((CONFIG_DD == "y") || (CONFIG_DD == "m"))
2012-01-10 11:58:36,869 DEBUG PCDerivation$ Trying to find path for: [Object: df]
2012-01-10 11:58:36,870 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DF == "y") || (CONFIG_DF == "m")), sourceFile -> coreutils/df.c, generated -> false, objectFile -> df, listName -> lib)
2012-01-10 11:58:36,870 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DF == "y") || (CONFIG_DF == "m")), sourceFile -> coreutils/df.c, generated -> false, objectFile -> df, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,870 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,870 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,870 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/df.c: ((CONFIG_DF == "y") || (CONFIG_DF == "m"))
2012-01-10 11:58:36,870 DEBUG PCDerivation$ Trying to find path for: [Object: dirname]
2012-01-10 11:58:36,870 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m")), sourceFile -> coreutils/dirname.c, generated -> false, objectFile -> dirname, listName -> lib)
2012-01-10 11:58:36,870 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m")), sourceFile -> coreutils/dirname.c, generated -> false, objectFile -> dirname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,870 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,870 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,870 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dirname.c: ((CONFIG_DIRNAME == "y") || (CONFIG_DIRNAME == "m"))
2012-01-10 11:58:36,870 DEBUG PCDerivation$ Trying to find path for: [Object: dos2unix]
2012-01-10 11:58:36,870 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m")), sourceFile -> coreutils/dos2unix.c, generated -> false, objectFile -> dos2unix, listName -> lib)
2012-01-10 11:58:36,871 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m")), sourceFile -> coreutils/dos2unix.c, generated -> false, objectFile -> dos2unix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,871 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,871 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,871 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/dos2unix.c: ((CONFIG_DOS2UNIX == "y") || (CONFIG_DOS2UNIX == "m"))
2012-01-10 11:58:36,871 DEBUG PCDerivation$ Trying to find path for: [Object: du]
2012-01-10 11:58:36,871 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DU == "y") || (CONFIG_DU == "m")), sourceFile -> coreutils/du.c, generated -> false, objectFile -> du, listName -> lib)
2012-01-10 11:58:36,871 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DU == "y") || (CONFIG_DU == "m")), sourceFile -> coreutils/du.c, generated -> false, objectFile -> du, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,871 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,871 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,871 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/du.c: ((CONFIG_DU == "y") || (CONFIG_DU == "m"))
2012-01-10 11:58:36,871 DEBUG PCDerivation$ Trying to find path for: [Object: echo]
2012-01-10 11:58:36,871 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/echo.c, generated -> false, objectFile -> echo, listName -> lib)
2012-01-10 11:58:36,872 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> coreutils/echo.c, generated -> false, objectFile -> echo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,872 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,872 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,872 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/echo.c: ((((CONFIG_ECHO == "y") || (CONFIG_ECHO == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:58:36,872 DEBUG PCDerivation$ Trying to find path for: [Object: env]
2012-01-10 11:58:36,872 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ENV == "y") || (CONFIG_ENV == "m")), sourceFile -> coreutils/env.c, generated -> false, objectFile -> env, listName -> lib)
2012-01-10 11:58:36,872 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ENV == "y") || (CONFIG_ENV == "m")), sourceFile -> coreutils/env.c, generated -> false, objectFile -> env, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,872 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,872 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,872 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/env.c: ((CONFIG_ENV == "y") || (CONFIG_ENV == "m"))
2012-01-10 11:58:36,872 DEBUG PCDerivation$ Trying to find path for: [Object: expr]
2012-01-10 11:58:36,872 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m")), sourceFile -> coreutils/expr.c, generated -> false, objectFile -> expr, listName -> lib)
2012-01-10 11:58:36,873 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m")), sourceFile -> coreutils/expr.c, generated -> false, objectFile -> expr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,873 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,873 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,873 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/expr.c: ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))
2012-01-10 11:58:36,873 DEBUG PCDerivation$ Trying to find path for: [Object: expand]
2012-01-10 11:58:36,873 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m"))), sourceFile -> coreutils/expand.c, generated -> false, objectFile -> expand, listName -> lib)
2012-01-10 11:58:36,873 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m"))), sourceFile -> coreutils/expand.c, generated -> false, objectFile -> expand, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,873 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,873 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,873 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/expand.c: (((CONFIG_EXPAND == "y") || (CONFIG_EXPAND == "m")) || ((CONFIG_UNEXPAND == "y") || (CONFIG_UNEXPAND == "m")))
2012-01-10 11:58:36,873 DEBUG PCDerivation$ Trying to find path for: [Object: false]
2012-01-10 11:58:36,873 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m")), sourceFile -> coreutils/false.c, generated -> false, objectFile -> false, listName -> lib)
2012-01-10 11:58:36,873 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m")), sourceFile -> coreutils/false.c, generated -> false, objectFile -> false, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,874 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,874 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,874 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/false.c: ((CONFIG_FALSE == "y") || (CONFIG_FALSE == "m"))
2012-01-10 11:58:36,874 DEBUG PCDerivation$ Trying to find path for: [Object: fold]
2012-01-10 11:58:36,874 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m")), sourceFile -> coreutils/fold.c, generated -> false, objectFile -> fold, listName -> lib)
2012-01-10 11:58:36,874 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m")), sourceFile -> coreutils/fold.c, generated -> false, objectFile -> fold, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,874 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,874 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,874 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/fold.c: ((CONFIG_FOLD == "y") || (CONFIG_FOLD == "m"))
2012-01-10 11:58:36,874 DEBUG PCDerivation$ Trying to find path for: [Object: fsync]
2012-01-10 11:58:36,874 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m")), sourceFile -> coreutils/fsync.c, generated -> false, objectFile -> fsync, listName -> lib)
2012-01-10 11:58:36,874 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m")), sourceFile -> coreutils/fsync.c, generated -> false, objectFile -> fsync, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,874 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,875 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,875 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/fsync.c: ((CONFIG_FSYNC == "y") || (CONFIG_FSYNC == "m"))
2012-01-10 11:58:36,875 DEBUG PCDerivation$ Trying to find path for: [Object: head]
2012-01-10 11:58:36,875 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m")), sourceFile -> coreutils/head.c, generated -> false, objectFile -> head, listName -> lib)
2012-01-10 11:58:36,875 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m")), sourceFile -> coreutils/head.c, generated -> false, objectFile -> head, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,875 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,875 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,875 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/head.c: ((CONFIG_HEAD == "y") || (CONFIG_HEAD == "m"))
2012-01-10 11:58:36,875 DEBUG PCDerivation$ Trying to find path for: [Object: install]
2012-01-10 11:58:36,875 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")), sourceFile -> coreutils/install.c, generated -> false, objectFile -> install, listName -> lib)
2012-01-10 11:58:36,875 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")), sourceFile -> coreutils/install.c, generated -> false, objectFile -> install, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,875 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,876 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,876 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/install.c: ((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m"))
2012-01-10 11:58:36,876 DEBUG PCDerivation$ Trying to find path for: [Object: ln]
2012-01-10 11:58:36,876 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LN == "y") || (CONFIG_LN == "m")), sourceFile -> coreutils/ln.c, generated -> false, objectFile -> ln, listName -> lib)
2012-01-10 11:58:36,876 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LN == "y") || (CONFIG_LN == "m")), sourceFile -> coreutils/ln.c, generated -> false, objectFile -> ln, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,876 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,876 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,876 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/ln.c: ((CONFIG_LN == "y") || (CONFIG_LN == "m"))
2012-01-10 11:58:36,876 DEBUG PCDerivation$ Trying to find path for: [Object: logname]
2012-01-10 11:58:36,876 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m")), sourceFile -> coreutils/logname.c, generated -> false, objectFile -> logname, listName -> lib)
2012-01-10 11:58:36,876 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m")), sourceFile -> coreutils/logname.c, generated -> false, objectFile -> logname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,876 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,876 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,877 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/logname.c: ((CONFIG_LOGNAME == "y") || (CONFIG_LOGNAME == "m"))
2012-01-10 11:58:36,877 DEBUG PCDerivation$ Trying to find path for: [Object: ls]
2012-01-10 11:58:36,877 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))), sourceFile -> coreutils/ls.c, generated -> false, objectFile -> ls, listName -> lib)
2012-01-10 11:58:36,877 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))), sourceFile -> coreutils/ls.c, generated -> false, objectFile -> ls, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,877 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,877 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,877 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/ls.c: (((CONFIG_LS == "y") || (CONFIG_LS == "m")) || ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")))
2012-01-10 11:58:36,877 DEBUG PCDerivation$ Trying to find path for: [Object: md5_sha1_sum]
2012-01-10 11:58:36,877 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m"))), sourceFile -> coreutils/md5_sha1_sum.c, generated -> false, objectFile -> md5_sha1_sum, listName -> lib)
2012-01-10 11:58:36,877 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m"))), sourceFile -> coreutils/md5_sha1_sum.c, generated -> false, objectFile -> md5_sha1_sum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,877 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,877 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,878 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/md5_sha1_sum.c: (((((CONFIG_MD5SUM == "y") || (CONFIG_MD5SUM == "m")) || ((CONFIG_SHA1SUM == "y") || (CONFIG_SHA1SUM == "m"))) || ((CONFIG_SHA256SUM == "y") || (CONFIG_SHA256SUM == "m"))) || ((CONFIG_SHA512SUM == "y") || (CONFIG_SHA512SUM == "m")))
2012-01-10 11:58:36,878 DEBUG PCDerivation$ Trying to find path for: [Object: mkdir]
2012-01-10 11:58:36,878 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m")), sourceFile -> coreutils/mkdir.c, generated -> false, objectFile -> mkdir, listName -> lib)
2012-01-10 11:58:36,878 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m")), sourceFile -> coreutils/mkdir.c, generated -> false, objectFile -> mkdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,878 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,878 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,878 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mkdir.c: ((CONFIG_MKDIR == "y") || (CONFIG_MKDIR == "m"))
2012-01-10 11:58:36,878 DEBUG PCDerivation$ Trying to find path for: [Object: mkfifo]
2012-01-10 11:58:36,878 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")), sourceFile -> coreutils/mkfifo.c, generated -> false, objectFile -> mkfifo, listName -> lib)
2012-01-10 11:58:36,878 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")), sourceFile -> coreutils/mkfifo.c, generated -> false, objectFile -> mkfifo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,878 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,878 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,879 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mkfifo.c: ((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m"))
2012-01-10 11:58:36,879 DEBUG PCDerivation$ Trying to find path for: [Object: mknod]
2012-01-10 11:58:36,879 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")), sourceFile -> coreutils/mknod.c, generated -> false, objectFile -> mknod, listName -> lib)
2012-01-10 11:58:36,879 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")), sourceFile -> coreutils/mknod.c, generated -> false, objectFile -> mknod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,879 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,879 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,879 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mknod.c: ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))
2012-01-10 11:58:36,879 DEBUG PCDerivation$ Trying to find path for: [Object: mv]
2012-01-10 11:58:36,879 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MV == "y") || (CONFIG_MV == "m")), sourceFile -> coreutils/mv.c, generated -> false, objectFile -> mv, listName -> lib)
2012-01-10 11:58:36,879 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MV == "y") || (CONFIG_MV == "m")), sourceFile -> coreutils/mv.c, generated -> false, objectFile -> mv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,879 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,879 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,879 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/mv.c: ((CONFIG_MV == "y") || (CONFIG_MV == "m"))
2012-01-10 11:58:36,880 DEBUG PCDerivation$ Trying to find path for: [Object: nice]
2012-01-10 11:58:36,880 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NICE == "y") || (CONFIG_NICE == "m")), sourceFile -> coreutils/nice.c, generated -> false, objectFile -> nice, listName -> lib)
2012-01-10 11:58:36,880 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NICE == "y") || (CONFIG_NICE == "m")), sourceFile -> coreutils/nice.c, generated -> false, objectFile -> nice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,880 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,880 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,880 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/nice.c: ((CONFIG_NICE == "y") || (CONFIG_NICE == "m"))
2012-01-10 11:58:36,880 DEBUG PCDerivation$ Trying to find path for: [Object: nohup]
2012-01-10 11:58:36,880 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m")), sourceFile -> coreutils/nohup.c, generated -> false, objectFile -> nohup, listName -> lib)
2012-01-10 11:58:36,880 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m")), sourceFile -> coreutils/nohup.c, generated -> false, objectFile -> nohup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,880 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,880 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,880 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/nohup.c: ((CONFIG_NOHUP == "y") || (CONFIG_NOHUP == "m"))
2012-01-10 11:58:36,880 DEBUG PCDerivation$ Trying to find path for: [Object: od]
2012-01-10 11:58:36,881 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OD == "y") || (CONFIG_OD == "m")), sourceFile -> coreutils/od.c, generated -> false, objectFile -> od, listName -> lib)
2012-01-10 11:58:36,881 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_OD == "y") || (CONFIG_OD == "m")), sourceFile -> coreutils/od.c, generated -> false, objectFile -> od, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,881 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,881 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,881 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/od.c: ((CONFIG_OD == "y") || (CONFIG_OD == "m"))
2012-01-10 11:58:36,881 DEBUG PCDerivation$ Trying to find path for: [Object: printenv]
2012-01-10 11:58:36,881 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m")), sourceFile -> coreutils/printenv.c, generated -> false, objectFile -> printenv, listName -> lib)
2012-01-10 11:58:36,881 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m")), sourceFile -> coreutils/printenv.c, generated -> false, objectFile -> printenv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,881 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,881 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,881 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/printenv.c: ((CONFIG_PRINTENV == "y") || (CONFIG_PRINTENV == "m"))
2012-01-10 11:58:36,881 DEBUG PCDerivation$ Trying to find path for: [Object: printf]
2012-01-10 11:58:36,881 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m"))), sourceFile -> coreutils/printf.c, generated -> false, objectFile -> printf, listName -> lib)
2012-01-10 11:58:36,882 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m"))), sourceFile -> coreutils/printf.c, generated -> false, objectFile -> printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,882 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,882 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,882 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/printf.c: (((CONFIG_PRINTF == "y") || (CONFIG_PRINTF == "m")) || ((CONFIG_ASH_BUILTIN_PRINTF == "y") || (CONFIG_ASH_BUILTIN_PRINTF == "m")))
2012-01-10 11:58:36,882 DEBUG PCDerivation$ Trying to find path for: [Object: pwd]
2012-01-10 11:58:36,882 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWD == "y") || (CONFIG_PWD == "m")), sourceFile -> coreutils/pwd.c, generated -> false, objectFile -> pwd, listName -> lib)
2012-01-10 11:58:36,882 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWD == "y") || (CONFIG_PWD == "m")), sourceFile -> coreutils/pwd.c, generated -> false, objectFile -> pwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,882 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,882 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,882 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/pwd.c: ((CONFIG_PWD == "y") || (CONFIG_PWD == "m"))
2012-01-10 11:58:36,882 DEBUG PCDerivation$ Trying to find path for: [Object: readlink]
2012-01-10 11:58:36,883 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m")), sourceFile -> coreutils/readlink.c, generated -> false, objectFile -> readlink, listName -> lib)
2012-01-10 11:58:36,883 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m")), sourceFile -> coreutils/readlink.c, generated -> false, objectFile -> readlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,883 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,883 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,883 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/readlink.c: ((CONFIG_READLINK == "y") || (CONFIG_READLINK == "m"))
2012-01-10 11:58:36,883 DEBUG PCDerivation$ Trying to find path for: [Object: realpath]
2012-01-10 11:58:36,883 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m")), sourceFile -> coreutils/realpath.c, generated -> false, objectFile -> realpath, listName -> lib)
2012-01-10 11:58:36,883 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m")), sourceFile -> coreutils/realpath.c, generated -> false, objectFile -> realpath, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,883 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,883 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,883 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/realpath.c: ((CONFIG_REALPATH == "y") || (CONFIG_REALPATH == "m"))
2012-01-10 11:58:36,883 DEBUG PCDerivation$ Trying to find path for: [Object: rm]
2012-01-10 11:58:36,883 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RM == "y") || (CONFIG_RM == "m")), sourceFile -> coreutils/rm.c, generated -> false, objectFile -> rm, listName -> lib)
2012-01-10 11:58:36,884 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RM == "y") || (CONFIG_RM == "m")), sourceFile -> coreutils/rm.c, generated -> false, objectFile -> rm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,884 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,884 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,884 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/rm.c: ((CONFIG_RM == "y") || (CONFIG_RM == "m"))
2012-01-10 11:58:36,884 DEBUG PCDerivation$ Trying to find path for: [Object: rmdir]
2012-01-10 11:58:36,884 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m")), sourceFile -> coreutils/rmdir.c, generated -> false, objectFile -> rmdir, listName -> lib)
2012-01-10 11:58:36,884 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m")), sourceFile -> coreutils/rmdir.c, generated -> false, objectFile -> rmdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,884 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,884 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,884 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/rmdir.c: ((CONFIG_RMDIR == "y") || (CONFIG_RMDIR == "m"))
2012-01-10 11:58:36,884 DEBUG PCDerivation$ Trying to find path for: [Object: seq]
2012-01-10 11:58:36,884 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m")), sourceFile -> coreutils/seq.c, generated -> false, objectFile -> seq, listName -> lib)
2012-01-10 11:58:36,885 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m")), sourceFile -> coreutils/seq.c, generated -> false, objectFile -> seq, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,885 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,885 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,885 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/seq.c: ((CONFIG_SEQ == "y") || (CONFIG_SEQ == "m"))
2012-01-10 11:58:36,885 DEBUG PCDerivation$ Trying to find path for: [Object: sleep]
2012-01-10 11:58:36,885 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m")), sourceFile -> coreutils/sleep.c, generated -> false, objectFile -> sleep, listName -> lib)
2012-01-10 11:58:36,885 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m")), sourceFile -> coreutils/sleep.c, generated -> false, objectFile -> sleep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,885 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,885 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,885 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sleep.c: ((CONFIG_SLEEP == "y") || (CONFIG_SLEEP == "m"))
2012-01-10 11:58:36,885 DEBUG PCDerivation$ Trying to find path for: [Object: split]
2012-01-10 11:58:36,885 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m")), sourceFile -> coreutils/split.c, generated -> false, objectFile -> split, listName -> lib)
2012-01-10 11:58:36,885 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m")), sourceFile -> coreutils/split.c, generated -> false, objectFile -> split, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,886 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,886 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,886 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/split.c: ((CONFIG_SPLIT == "y") || (CONFIG_SPLIT == "m"))
2012-01-10 11:58:36,886 DEBUG PCDerivation$ Trying to find path for: [Object: sort]
2012-01-10 11:58:36,886 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SORT == "y") || (CONFIG_SORT == "m")), sourceFile -> coreutils/sort.c, generated -> false, objectFile -> sort, listName -> lib)
2012-01-10 11:58:36,886 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SORT == "y") || (CONFIG_SORT == "m")), sourceFile -> coreutils/sort.c, generated -> false, objectFile -> sort, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,886 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,886 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,886 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sort.c: ((CONFIG_SORT == "y") || (CONFIG_SORT == "m"))
2012-01-10 11:58:36,886 DEBUG PCDerivation$ Trying to find path for: [Object: stat]
2012-01-10 11:58:36,886 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STAT == "y") || (CONFIG_STAT == "m")), sourceFile -> coreutils/stat.c, generated -> false, objectFile -> stat, listName -> lib)
2012-01-10 11:58:36,886 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STAT == "y") || (CONFIG_STAT == "m")), sourceFile -> coreutils/stat.c, generated -> false, objectFile -> stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,887 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,887 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,887 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/stat.c: ((CONFIG_STAT == "y") || (CONFIG_STAT == "m"))
2012-01-10 11:58:36,887 DEBUG PCDerivation$ Trying to find path for: [Object: stty]
2012-01-10 11:58:36,887 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STTY == "y") || (CONFIG_STTY == "m")), sourceFile -> coreutils/stty.c, generated -> false, objectFile -> stty, listName -> lib)
2012-01-10 11:58:36,887 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STTY == "y") || (CONFIG_STTY == "m")), sourceFile -> coreutils/stty.c, generated -> false, objectFile -> stty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,887 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,887 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,887 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/stty.c: ((CONFIG_STTY == "y") || (CONFIG_STTY == "m"))
2012-01-10 11:58:36,887 DEBUG PCDerivation$ Trying to find path for: [Object: sum]
2012-01-10 11:58:36,887 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SUM == "y") || (CONFIG_SUM == "m")), sourceFile -> coreutils/sum.c, generated -> false, objectFile -> sum, listName -> lib)
2012-01-10 11:58:36,887 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SUM == "y") || (CONFIG_SUM == "m")), sourceFile -> coreutils/sum.c, generated -> false, objectFile -> sum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,887 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,888 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,888 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sum.c: ((CONFIG_SUM == "y") || (CONFIG_SUM == "m"))
2012-01-10 11:58:36,888 DEBUG PCDerivation$ Trying to find path for: [Object: sync]
2012-01-10 11:58:36,888 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m")), sourceFile -> coreutils/sync.c, generated -> false, objectFile -> sync, listName -> lib)
2012-01-10 11:58:36,888 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m")), sourceFile -> coreutils/sync.c, generated -> false, objectFile -> sync, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,888 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,888 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,888 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/sync.c: ((CONFIG_SYNC == "y") || (CONFIG_SYNC == "m"))
2012-01-10 11:58:36,888 DEBUG PCDerivation$ Trying to find path for: [Object: tac]
2012-01-10 11:58:36,888 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAC == "y") || (CONFIG_TAC == "m")), sourceFile -> coreutils/tac.c, generated -> false, objectFile -> tac, listName -> lib)
2012-01-10 11:58:36,888 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAC == "y") || (CONFIG_TAC == "m")), sourceFile -> coreutils/tac.c, generated -> false, objectFile -> tac, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,888 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,888 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,889 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tac.c: ((CONFIG_TAC == "y") || (CONFIG_TAC == "m"))
2012-01-10 11:58:36,889 DEBUG PCDerivation$ Trying to find path for: [Object: tail]
2012-01-10 11:58:36,889 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m")), sourceFile -> coreutils/tail.c, generated -> false, objectFile -> tail, listName -> lib)
2012-01-10 11:58:36,889 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m")), sourceFile -> coreutils/tail.c, generated -> false, objectFile -> tail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,889 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,889 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,889 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tail.c: ((CONFIG_TAIL == "y") || (CONFIG_TAIL == "m"))
2012-01-10 11:58:36,889 DEBUG PCDerivation$ Trying to find path for: [Object: tee]
2012-01-10 11:58:36,889 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TEE == "y") || (CONFIG_TEE == "m")), sourceFile -> coreutils/tee.c, generated -> false, objectFile -> tee, listName -> lib)
2012-01-10 11:58:36,889 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TEE == "y") || (CONFIG_TEE == "m")), sourceFile -> coreutils/tee.c, generated -> false, objectFile -> tee, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,889 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,889 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,890 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tee.c: ((CONFIG_TEE == "y") || (CONFIG_TEE == "m"))
2012-01-10 11:58:36,890 DEBUG PCDerivation$ Trying to find path for: [Object: true]
2012-01-10 11:58:36,890 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m")), sourceFile -> coreutils/true.c, generated -> false, objectFile -> true, listName -> lib)
2012-01-10 11:58:36,890 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m")), sourceFile -> coreutils/true.c, generated -> false, objectFile -> true, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,890 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,890 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,890 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/true.c: ((CONFIG_TRUE == "y") || (CONFIG_TRUE == "m"))
2012-01-10 11:58:36,890 DEBUG PCDerivation$ Trying to find path for: [Object: tty]
2012-01-10 11:58:36,890 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTY == "y") || (CONFIG_TTY == "m")), sourceFile -> coreutils/tty.c, generated -> false, objectFile -> tty, listName -> lib)
2012-01-10 11:58:36,890 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTY == "y") || (CONFIG_TTY == "m")), sourceFile -> coreutils/tty.c, generated -> false, objectFile -> tty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,890 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,890 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,890 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/tty.c: ((CONFIG_TTY == "y") || (CONFIG_TTY == "m"))
2012-01-10 11:58:36,891 DEBUG PCDerivation$ Trying to find path for: [Object: uname]
2012-01-10 11:58:36,891 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m")), sourceFile -> coreutils/uname.c, generated -> false, objectFile -> uname, listName -> lib)
2012-01-10 11:58:36,891 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m")), sourceFile -> coreutils/uname.c, generated -> false, objectFile -> uname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,891 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,891 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,891 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uname.c: ((CONFIG_UNAME == "y") || (CONFIG_UNAME == "m"))
2012-01-10 11:58:36,891 DEBUG PCDerivation$ Trying to find path for: [Object: uniq]
2012-01-10 11:58:36,891 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m")), sourceFile -> coreutils/uniq.c, generated -> false, objectFile -> uniq, listName -> lib)
2012-01-10 11:58:36,891 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m")), sourceFile -> coreutils/uniq.c, generated -> false, objectFile -> uniq, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,891 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,891 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,891 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uniq.c: ((CONFIG_UNIQ == "y") || (CONFIG_UNIQ == "m"))
2012-01-10 11:58:36,891 DEBUG PCDerivation$ Trying to find path for: [Object: usleep]
2012-01-10 11:58:36,892 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m")), sourceFile -> coreutils/usleep.c, generated -> false, objectFile -> usleep, listName -> lib)
2012-01-10 11:58:36,892 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m")), sourceFile -> coreutils/usleep.c, generated -> false, objectFile -> usleep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,892 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,892 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,892 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/usleep.c: ((CONFIG_USLEEP == "y") || (CONFIG_USLEEP == "m"))
2012-01-10 11:58:36,892 DEBUG PCDerivation$ Trying to find path for: [Object: uuencode]
2012-01-10 11:58:36,892 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m")), sourceFile -> coreutils/uuencode.c, generated -> false, objectFile -> uuencode, listName -> lib)
2012-01-10 11:58:36,892 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m")), sourceFile -> coreutils/uuencode.c, generated -> false, objectFile -> uuencode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,892 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,892 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,892 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/uuencode.c: ((CONFIG_UUENCODE == "y") || (CONFIG_UUENCODE == "m"))
2012-01-10 11:58:36,892 DEBUG PCDerivation$ Trying to find path for: [Object: wc]
2012-01-10 11:58:36,892 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WC == "y") || (CONFIG_WC == "m")), sourceFile -> coreutils/wc.c, generated -> false, objectFile -> wc, listName -> lib)
2012-01-10 11:58:36,893 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WC == "y") || (CONFIG_WC == "m")), sourceFile -> coreutils/wc.c, generated -> false, objectFile -> wc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,893 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,893 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,893 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/wc.c: ((CONFIG_WC == "y") || (CONFIG_WC == "m"))
2012-01-10 11:58:36,893 DEBUG PCDerivation$ Trying to find path for: [Object: whoami]
2012-01-10 11:58:36,893 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m")), sourceFile -> coreutils/whoami.c, generated -> false, objectFile -> whoami, listName -> lib)
2012-01-10 11:58:36,893 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m")), sourceFile -> coreutils/whoami.c, generated -> false, objectFile -> whoami, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,893 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,893 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,893 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/whoami.c: ((CONFIG_WHOAMI == "y") || (CONFIG_WHOAMI == "m"))
2012-01-10 11:58:36,893 DEBUG PCDerivation$ Trying to find path for: [Object: yes]
2012-01-10 11:58:36,893 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_YES == "y") || (CONFIG_YES == "m")), sourceFile -> coreutils/yes.c, generated -> false, objectFile -> yes, listName -> lib)
2012-01-10 11:58:36,894 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_YES == "y") || (CONFIG_YES == "m")), sourceFile -> coreutils/yes.c, generated -> false, objectFile -> yes, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,894 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/Kbuild)
2012-01-10 11:58:36,894 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,894 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/yes.c: ((CONFIG_YES == "y") || (CONFIG_YES == "m"))
2012-01-10 11:58:36,894 DEBUG PCDerivation$ Trying to find path for: [Object: getopt_mk_fifo_nod]
2012-01-10 11:58:36,894 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib)
2012-01-10 11:58:36,894 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m"))), sourceFile -> coreutils/libcoreutils/getopt_mk_fifo_nod.c, generated -> false, objectFile -> getopt_mk_fifo_nod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:58:36,894 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:58:36,894 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,894 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,894 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/getopt_mk_fifo_nod.c: (((CONFIG_MKFIFO == "y") || (CONFIG_MKFIFO == "m")) || ((CONFIG_MKNOD == "y") || (CONFIG_MKNOD == "m")))
2012-01-10 11:58:36,894 DEBUG PCDerivation$ Trying to find path for: [Object: cp_mv_stat]
2012-01-10 11:58:36,895 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib)
2012-01-10 11:58:36,895 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m"))), sourceFile -> coreutils/libcoreutils/cp_mv_stat.c, generated -> false, objectFile -> cp_mv_stat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:58:36,895 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> coreutils/libcoreutils/Kbuild)
2012-01-10 11:58:36,895 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,895 DEBUG PCDerivation$ Expression of path for object occurrence coreutils/libcoreutils/cp_mv_stat.c: ((((CONFIG_INSTALL == "y") || (CONFIG_INSTALL == "m")) || ((CONFIG_CP == "y") || (CONFIG_CP == "m"))) || ((CONFIG_MV == "y") || (CONFIG_MV == "m")))
2012-01-10 11:58:36,895 DEBUG PCDerivation$ Trying to find path for: [Object: mktemp]
2012-01-10 11:58:36,895 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m")), sourceFile -> debianutils/mktemp.c, generated -> false, objectFile -> mktemp, listName -> lib)
2012-01-10 11:58:36,895 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m")), sourceFile -> debianutils/mktemp.c, generated -> false, objectFile -> mktemp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,895 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,895 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,895 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,895 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/mktemp.c: ((CONFIG_MKTEMP == "y") || (CONFIG_MKTEMP == "m"))
2012-01-10 11:58:36,895 DEBUG PCDerivation$ Trying to find path for: [Object: pipe_progress]
2012-01-10 11:58:36,896 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m")), sourceFile -> debianutils/pipe_progress.c, generated -> false, objectFile -> pipe_progress, listName -> lib)
2012-01-10 11:58:36,896 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m")), sourceFile -> debianutils/pipe_progress.c, generated -> false, objectFile -> pipe_progress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,896 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,896 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,896 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/pipe_progress.c: ((CONFIG_PIPE_PROGRESS == "y") || (CONFIG_PIPE_PROGRESS == "m"))
2012-01-10 11:58:36,896 DEBUG PCDerivation$ Trying to find path for: [Object: run_parts]
2012-01-10 11:58:36,896 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m")), sourceFile -> debianutils/run_parts.c, generated -> false, objectFile -> run_parts, listName -> lib)
2012-01-10 11:58:36,896 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m")), sourceFile -> debianutils/run_parts.c, generated -> false, objectFile -> run_parts, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,896 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,896 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,896 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/run_parts.c: ((CONFIG_RUN_PARTS == "y") || (CONFIG_RUN_PARTS == "m"))
2012-01-10 11:58:36,896 DEBUG PCDerivation$ Trying to find path for: [Object: start_stop_daemon]
2012-01-10 11:58:36,897 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m")), sourceFile -> debianutils/start_stop_daemon.c, generated -> false, objectFile -> start_stop_daemon, listName -> lib)
2012-01-10 11:58:36,897 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m")), sourceFile -> debianutils/start_stop_daemon.c, generated -> false, objectFile -> start_stop_daemon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,897 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,897 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,897 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/start_stop_daemon.c: ((CONFIG_START_STOP_DAEMON == "y") || (CONFIG_START_STOP_DAEMON == "m"))
2012-01-10 11:58:36,897 DEBUG PCDerivation$ Trying to find path for: [Object: which]
2012-01-10 11:58:36,897 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m")), sourceFile -> debianutils/which.c, generated -> false, objectFile -> which, listName -> lib)
2012-01-10 11:58:36,897 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m")), sourceFile -> debianutils/which.c, generated -> false, objectFile -> which, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,897 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> debianutils/Kbuild)
2012-01-10 11:58:36,897 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,897 DEBUG PCDerivation$ Expression of path for object occurrence debianutils/which.c: ((CONFIG_WHICH == "y") || (CONFIG_WHICH == "m"))
2012-01-10 11:58:36,897 DEBUG PCDerivation$ Trying to find path for: [Object: chattr]
2012-01-10 11:58:36,898 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")), sourceFile -> e2fsprogs/chattr.c, generated -> false, objectFile -> chattr, listName -> lib)
2012-01-10 11:58:36,898 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")), sourceFile -> e2fsprogs/chattr.c, generated -> false, objectFile -> chattr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,898 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,898 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,898 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,898 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/chattr.c: ((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m"))
2012-01-10 11:58:36,898 DEBUG PCDerivation$ Trying to find path for: [Object: e2fs_lib]
2012-01-10 11:58:36,898 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))), sourceFile -> e2fsprogs/e2fs_lib.c, generated -> false, objectFile -> e2fs_lib, listName -> lib)
2012-01-10 11:58:36,898 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))), sourceFile -> e2fsprogs/e2fs_lib.c, generated -> false, objectFile -> e2fs_lib, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,898 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,898 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,898 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/e2fs_lib.c: (((CONFIG_CHATTR == "y") || (CONFIG_CHATTR == "m")) || ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")))
2012-01-10 11:58:36,898 DEBUG PCDerivation$ Trying to find path for: [Object: lsattr]
2012-01-10 11:58:36,899 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")), sourceFile -> e2fsprogs/lsattr.c, generated -> false, objectFile -> lsattr, listName -> lib)
2012-01-10 11:58:36,899 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m")), sourceFile -> e2fsprogs/lsattr.c, generated -> false, objectFile -> lsattr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,899 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,899 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,899 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/lsattr.c: ((CONFIG_LSATTR == "y") || (CONFIG_LSATTR == "m"))
2012-01-10 11:58:36,899 DEBUG PCDerivation$ Trying to find path for: [Object: fsck]
2012-01-10 11:58:36,899 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m")), sourceFile -> e2fsprogs/fsck.c, generated -> false, objectFile -> fsck, listName -> lib)
2012-01-10 11:58:36,899 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m")), sourceFile -> e2fsprogs/fsck.c, generated -> false, objectFile -> fsck, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,899 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,899 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,899 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/fsck.c: ((CONFIG_FSCK == "y") || (CONFIG_FSCK == "m"))
2012-01-10 11:58:36,899 DEBUG PCDerivation$ Trying to find path for: [Object: tune2fs]
2012-01-10 11:58:36,900 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m")), sourceFile -> e2fsprogs/tune2fs.c, generated -> false, objectFile -> tune2fs, listName -> lib)
2012-01-10 11:58:36,900 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m")), sourceFile -> e2fsprogs/tune2fs.c, generated -> false, objectFile -> tune2fs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,900 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> e2fsprogs/Kbuild)
2012-01-10 11:58:36,900 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,900 DEBUG PCDerivation$ Expression of path for object occurrence e2fsprogs/tune2fs.c: ((CONFIG_TUNE2FS == "y") || (CONFIG_TUNE2FS == "m"))
2012-01-10 11:58:36,900 DEBUG PCDerivation$ Trying to find path for: [Object: patch]
2012-01-10 11:58:36,900 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m")), sourceFile -> editors/patch.c, generated -> false, objectFile -> patch, listName -> lib)
2012-01-10 11:58:36,900 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m")), sourceFile -> editors/patch.c, generated -> false, objectFile -> patch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,900 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,900 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,900 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,900 DEBUG PCDerivation$ Expression of path for object occurrence editors/patch.c: ((CONFIG_PATCH == "y") || (CONFIG_PATCH == "m"))
2012-01-10 11:58:36,900 DEBUG PCDerivation$ Trying to find path for: [Object: vi]
2012-01-10 11:58:36,901 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VI == "y") || (CONFIG_VI == "m")), sourceFile -> editors/vi.c, generated -> false, objectFile -> vi, listName -> lib)
2012-01-10 11:58:36,901 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VI == "y") || (CONFIG_VI == "m")), sourceFile -> editors/vi.c, generated -> false, objectFile -> vi, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,901 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,901 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,901 DEBUG PCDerivation$ Expression of path for object occurrence editors/vi.c: ((CONFIG_VI == "y") || (CONFIG_VI == "m"))
2012-01-10 11:58:36,901 DEBUG PCDerivation$ Trying to find path for: [Object: awk]
2012-01-10 11:58:36,901 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AWK == "y") || (CONFIG_AWK == "m")), sourceFile -> editors/awk.c, generated -> false, objectFile -> awk, listName -> lib)
2012-01-10 11:58:36,901 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_AWK == "y") || (CONFIG_AWK == "m")), sourceFile -> editors/awk.c, generated -> false, objectFile -> awk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,901 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,901 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,901 DEBUG PCDerivation$ Expression of path for object occurrence editors/awk.c: ((CONFIG_AWK == "y") || (CONFIG_AWK == "m"))
2012-01-10 11:58:36,901 DEBUG PCDerivation$ Trying to find path for: [Object: cmp]
2012-01-10 11:58:36,902 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CMP == "y") || (CONFIG_CMP == "m")), sourceFile -> editors/cmp.c, generated -> false, objectFile -> cmp, listName -> lib)
2012-01-10 11:58:36,902 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CMP == "y") || (CONFIG_CMP == "m")), sourceFile -> editors/cmp.c, generated -> false, objectFile -> cmp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,902 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,902 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,902 DEBUG PCDerivation$ Expression of path for object occurrence editors/cmp.c: ((CONFIG_CMP == "y") || (CONFIG_CMP == "m"))
2012-01-10 11:58:36,902 DEBUG PCDerivation$ Trying to find path for: [Object: diff]
2012-01-10 11:58:36,902 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m")), sourceFile -> editors/diff.c, generated -> false, objectFile -> diff, listName -> lib)
2012-01-10 11:58:36,902 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m")), sourceFile -> editors/diff.c, generated -> false, objectFile -> diff, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,902 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,902 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,902 DEBUG PCDerivation$ Expression of path for object occurrence editors/diff.c: ((CONFIG_DIFF == "y") || (CONFIG_DIFF == "m"))
2012-01-10 11:58:36,902 DEBUG PCDerivation$ Trying to find path for: [Object: ed]
2012-01-10 11:58:36,902 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ED == "y") || (CONFIG_ED == "m")), sourceFile -> editors/ed.c, generated -> false, objectFile -> ed, listName -> lib)
2012-01-10 11:58:36,903 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ED == "y") || (CONFIG_ED == "m")), sourceFile -> editors/ed.c, generated -> false, objectFile -> ed, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,903 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,903 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,903 DEBUG PCDerivation$ Expression of path for object occurrence editors/ed.c: ((CONFIG_ED == "y") || (CONFIG_ED == "m"))
2012-01-10 11:58:36,903 DEBUG PCDerivation$ Trying to find path for: [Object: sed]
2012-01-10 11:58:36,903 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SED == "y") || (CONFIG_SED == "m")), sourceFile -> editors/sed.c, generated -> false, objectFile -> sed, listName -> lib)
2012-01-10 11:58:36,903 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SED == "y") || (CONFIG_SED == "m")), sourceFile -> editors/sed.c, generated -> false, objectFile -> sed, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,903 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> editors/Kbuild)
2012-01-10 11:58:36,903 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,903 DEBUG PCDerivation$ Expression of path for object occurrence editors/sed.c: ((CONFIG_SED == "y") || (CONFIG_SED == "m"))
2012-01-10 11:58:36,903 DEBUG PCDerivation$ Trying to find path for: [Object: find]
2012-01-10 11:58:36,903 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FIND == "y") || (CONFIG_FIND == "m")), sourceFile -> findutils/find.c, generated -> false, objectFile -> find, listName -> lib)
2012-01-10 11:58:36,904 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FIND == "y") || (CONFIG_FIND == "m")), sourceFile -> findutils/find.c, generated -> false, objectFile -> find, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:58:36,904 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:58:36,904 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,904 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,904 DEBUG PCDerivation$ Expression of path for object occurrence findutils/find.c: ((CONFIG_FIND == "y") || (CONFIG_FIND == "m"))
2012-01-10 11:58:36,904 DEBUG PCDerivation$ Trying to find path for: [Object: grep]
2012-01-10 11:58:36,904 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GREP == "y") || (CONFIG_GREP == "m")), sourceFile -> findutils/grep.c, generated -> false, objectFile -> grep, listName -> lib)
2012-01-10 11:58:36,904 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GREP == "y") || (CONFIG_GREP == "m")), sourceFile -> findutils/grep.c, generated -> false, objectFile -> grep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:58:36,904 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:58:36,904 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,904 DEBUG PCDerivation$ Expression of path for object occurrence findutils/grep.c: ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))
2012-01-10 11:58:36,904 DEBUG PCDerivation$ Trying to find path for: [Object: xargs]
2012-01-10 11:58:36,904 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m")), sourceFile -> findutils/xargs.c, generated -> false, objectFile -> xargs, listName -> lib)
2012-01-10 11:58:36,905 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m")), sourceFile -> findutils/xargs.c, generated -> false, objectFile -> xargs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:58:36,905 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> findutils/Kbuild)
2012-01-10 11:58:36,905 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,905 DEBUG PCDerivation$ Expression of path for object occurrence findutils/xargs.c: ((CONFIG_XARGS == "y") || (CONFIG_XARGS == "m"))
2012-01-10 11:58:36,905 DEBUG PCDerivation$ Trying to find path for: [Object: bootchartd]
2012-01-10 11:58:36,905 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m")), sourceFile -> init/bootchartd.c, generated -> false, objectFile -> bootchartd, listName -> lib)
2012-01-10 11:58:36,905 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m")), sourceFile -> init/bootchartd.c, generated -> false, objectFile -> bootchartd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:58:36,905 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:58:36,905 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,905 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,905 DEBUG PCDerivation$ Expression of path for object occurrence init/bootchartd.c: ((CONFIG_BOOTCHARTD == "y") || (CONFIG_BOOTCHARTD == "m"))
2012-01-10 11:58:36,905 DEBUG PCDerivation$ Trying to find path for: [Object: halt]
2012-01-10 11:58:36,906 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HALT == "y") || (CONFIG_HALT == "m")), sourceFile -> init/halt.c, generated -> false, objectFile -> halt, listName -> lib)
2012-01-10 11:58:36,906 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HALT == "y") || (CONFIG_HALT == "m")), sourceFile -> init/halt.c, generated -> false, objectFile -> halt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:58:36,906 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:58:36,906 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,906 DEBUG PCDerivation$ Expression of path for object occurrence init/halt.c: ((CONFIG_HALT == "y") || (CONFIG_HALT == "m"))
2012-01-10 11:58:36,906 DEBUG PCDerivation$ Trying to find path for: [Object: init]
2012-01-10 11:58:36,906 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INIT == "y") || (CONFIG_INIT == "m")), sourceFile -> init/init.c, generated -> false, objectFile -> init, listName -> lib)
2012-01-10 11:58:36,906 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INIT == "y") || (CONFIG_INIT == "m")), sourceFile -> init/init.c, generated -> false, objectFile -> init, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:58:36,906 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:58:36,906 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,906 DEBUG PCDerivation$ Expression of path for object occurrence init/init.c: ((CONFIG_INIT == "y") || (CONFIG_INIT == "m"))
2012-01-10 11:58:36,906 DEBUG PCDerivation$ Trying to find path for: [Object: mesg]
2012-01-10 11:58:36,906 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MESG == "y") || (CONFIG_MESG == "m")), sourceFile -> init/mesg.c, generated -> false, objectFile -> mesg, listName -> lib)
2012-01-10 11:58:36,907 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MESG == "y") || (CONFIG_MESG == "m")), sourceFile -> init/mesg.c, generated -> false, objectFile -> mesg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:58:36,907 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> init/Kbuild)
2012-01-10 11:58:36,907 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,907 DEBUG PCDerivation$ Expression of path for object occurrence init/mesg.c: ((CONFIG_MESG == "y") || (CONFIG_MESG == "m"))
2012-01-10 11:58:36,907 DEBUG PCDerivation$ Trying to find path for: [Object: get_shell_name]
2012-01-10 11:58:36,907 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_shell_name.c, builtAs -> y, generated -> false, objectFile -> get_shell_name, listName -> lib)
2012-01-10 11:58:36,907 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_shell_name.c, builtAs -> y, generated -> false, objectFile -> get_shell_name, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,907 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,907 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,907 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,907 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_shell_name.c: [TRUE]
2012-01-10 11:58:36,907 DEBUG PCDerivation$ Trying to find path for: [Object: parse_config]
2012-01-10 11:58:36,907 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_config.c, builtAs -> y, generated -> false, objectFile -> parse_config, listName -> lib)
2012-01-10 11:58:36,908 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_config.c, builtAs -> y, generated -> false, objectFile -> parse_config, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,908 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,908 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,908 DEBUG PCDerivation$ Expression of path for object occurrence libbb/parse_config.c: [TRUE]
2012-01-10 11:58:36,908 DEBUG PCDerivation$ Trying to find path for: [Object: percent_decode]
2012-01-10 11:58:36,908 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/percent_decode.c, builtAs -> y, generated -> false, objectFile -> percent_decode, listName -> lib)
2012-01-10 11:58:36,908 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/percent_decode.c, builtAs -> y, generated -> false, objectFile -> percent_decode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,908 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,908 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,908 DEBUG PCDerivation$ Expression of path for object occurrence libbb/percent_decode.c: [TRUE]
2012-01-10 11:58:36,908 DEBUG PCDerivation$ Trying to find path for: [Object: systemd_support]
2012-01-10 11:58:36,908 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m")), sourceFile -> libbb/systemd_support.c, generated -> false, objectFile -> systemd_support, listName -> lib)
2012-01-10 11:58:36,909 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m")), sourceFile -> libbb/systemd_support.c, generated -> false, objectFile -> systemd_support, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,909 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,909 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,909 DEBUG PCDerivation$ Expression of path for object occurrence libbb/systemd_support.c: ((CONFIG_FEATURE_SYSTEMD == "y") || (CONFIG_FEATURE_SYSTEMD == "m"))
2012-01-10 11:58:36,909 DEBUG PCDerivation$ Trying to find path for: [Object: appletlib]
2012-01-10 11:58:36,909 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/appletlib.c, builtAs -> y, generated -> false, objectFile -> appletlib, listName -> lib)
2012-01-10 11:58:36,909 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/appletlib.c, builtAs -> y, generated -> false, objectFile -> appletlib, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,909 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,909 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,909 DEBUG PCDerivation$ Expression of path for object occurrence libbb/appletlib.c: [TRUE]
2012-01-10 11:58:36,909 DEBUG PCDerivation$ Trying to find path for: [Object: ask_confirmation]
2012-01-10 11:58:36,909 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ask_confirmation.c, builtAs -> y, generated -> false, objectFile -> ask_confirmation, listName -> lib)
2012-01-10 11:58:36,910 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ask_confirmation.c, builtAs -> y, generated -> false, objectFile -> ask_confirmation, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,910 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,910 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,910 DEBUG PCDerivation$ Expression of path for object occurrence libbb/ask_confirmation.c: [TRUE]
2012-01-10 11:58:36,910 DEBUG PCDerivation$ Trying to find path for: [Object: bb_askpass]
2012-01-10 11:58:36,910 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_askpass.c, builtAs -> y, generated -> false, objectFile -> bb_askpass, listName -> lib)
2012-01-10 11:58:36,910 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_askpass.c, builtAs -> y, generated -> false, objectFile -> bb_askpass, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,910 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,910 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,910 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_askpass.c: [TRUE]
2012-01-10 11:58:36,910 DEBUG PCDerivation$ Trying to find path for: [Object: bb_bswap_64]
2012-01-10 11:58:36,910 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_bswap_64.c, builtAs -> y, generated -> false, objectFile -> bb_bswap_64, listName -> lib)
2012-01-10 11:58:36,910 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_bswap_64.c, builtAs -> y, generated -> false, objectFile -> bb_bswap_64, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,911 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,911 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,911 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_bswap_64.c: [TRUE]
2012-01-10 11:58:36,911 DEBUG PCDerivation$ Trying to find path for: [Object: bb_do_delay]
2012-01-10 11:58:36,911 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_do_delay.c, builtAs -> y, generated -> false, objectFile -> bb_do_delay, listName -> lib)
2012-01-10 11:58:36,911 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_do_delay.c, builtAs -> y, generated -> false, objectFile -> bb_do_delay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,911 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,911 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,911 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_do_delay.c: [TRUE]
2012-01-10 11:58:36,911 DEBUG PCDerivation$ Trying to find path for: [Object: bb_pwd]
2012-01-10 11:58:36,911 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_pwd.c, builtAs -> y, generated -> false, objectFile -> bb_pwd, listName -> lib)
2012-01-10 11:58:36,911 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_pwd.c, builtAs -> y, generated -> false, objectFile -> bb_pwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,911 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,912 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,912 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_pwd.c: [TRUE]
2012-01-10 11:58:36,912 DEBUG PCDerivation$ Trying to find path for: [Object: bb_qsort]
2012-01-10 11:58:36,912 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_qsort.c, builtAs -> y, generated -> false, objectFile -> bb_qsort, listName -> lib)
2012-01-10 11:58:36,912 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_qsort.c, builtAs -> y, generated -> false, objectFile -> bb_qsort, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,912 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,912 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,912 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_qsort.c: [TRUE]
2012-01-10 11:58:36,912 DEBUG PCDerivation$ Trying to find path for: [Object: bb_strtonum]
2012-01-10 11:58:36,912 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_strtonum.c, builtAs -> y, generated -> false, objectFile -> bb_strtonum, listName -> lib)
2012-01-10 11:58:36,912 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/bb_strtonum.c, builtAs -> y, generated -> false, objectFile -> bb_strtonum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,912 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,912 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,913 DEBUG PCDerivation$ Expression of path for object occurrence libbb/bb_strtonum.c: [TRUE]
2012-01-10 11:58:36,913 DEBUG PCDerivation$ Trying to find path for: [Object: change_identity]
2012-01-10 11:58:36,913 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/change_identity.c, builtAs -> y, generated -> false, objectFile -> change_identity, listName -> lib)
2012-01-10 11:58:36,913 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/change_identity.c, builtAs -> y, generated -> false, objectFile -> change_identity, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,913 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,913 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,913 DEBUG PCDerivation$ Expression of path for object occurrence libbb/change_identity.c: [TRUE]
2012-01-10 11:58:36,913 DEBUG PCDerivation$ Trying to find path for: [Object: chomp]
2012-01-10 11:58:36,913 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/chomp.c, builtAs -> y, generated -> false, objectFile -> chomp, listName -> lib)
2012-01-10 11:58:36,913 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/chomp.c, builtAs -> y, generated -> false, objectFile -> chomp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,913 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,913 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,914 DEBUG PCDerivation$ Expression of path for object occurrence libbb/chomp.c: [TRUE]
2012-01-10 11:58:36,914 DEBUG PCDerivation$ Trying to find path for: [Object: compare_string_array]
2012-01-10 11:58:36,914 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/compare_string_array.c, builtAs -> y, generated -> false, objectFile -> compare_string_array, listName -> lib)
2012-01-10 11:58:36,914 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/compare_string_array.c, builtAs -> y, generated -> false, objectFile -> compare_string_array, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,914 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,914 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,914 DEBUG PCDerivation$ Expression of path for object occurrence libbb/compare_string_array.c: [TRUE]
2012-01-10 11:58:36,914 DEBUG PCDerivation$ Trying to find path for: [Object: concat_path_file]
2012-01-10 11:58:36,914 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_path_file.c, builtAs -> y, generated -> false, objectFile -> concat_path_file, listName -> lib)
2012-01-10 11:58:36,914 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_path_file.c, builtAs -> y, generated -> false, objectFile -> concat_path_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,914 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,914 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,914 DEBUG PCDerivation$ Expression of path for object occurrence libbb/concat_path_file.c: [TRUE]
2012-01-10 11:58:36,914 DEBUG PCDerivation$ Trying to find path for: [Object: concat_subpath_file]
2012-01-10 11:58:36,915 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_subpath_file.c, builtAs -> y, generated -> false, objectFile -> concat_subpath_file, listName -> lib)
2012-01-10 11:58:36,915 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/concat_subpath_file.c, builtAs -> y, generated -> false, objectFile -> concat_subpath_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,915 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,915 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,915 DEBUG PCDerivation$ Expression of path for object occurrence libbb/concat_subpath_file.c: [TRUE]
2012-01-10 11:58:36,915 DEBUG PCDerivation$ Trying to find path for: [Object: copy_file]
2012-01-10 11:58:36,915 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copy_file.c, builtAs -> y, generated -> false, objectFile -> copy_file, listName -> lib)
2012-01-10 11:58:36,915 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copy_file.c, builtAs -> y, generated -> false, objectFile -> copy_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,915 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,915 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,915 DEBUG PCDerivation$ Expression of path for object occurrence libbb/copy_file.c: [TRUE]
2012-01-10 11:58:36,915 DEBUG PCDerivation$ Trying to find path for: [Object: copyfd]
2012-01-10 11:58:36,916 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copyfd.c, builtAs -> y, generated -> false, objectFile -> copyfd, listName -> lib)
2012-01-10 11:58:36,916 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/copyfd.c, builtAs -> y, generated -> false, objectFile -> copyfd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,916 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,916 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,916 DEBUG PCDerivation$ Expression of path for object occurrence libbb/copyfd.c: [TRUE]
2012-01-10 11:58:36,916 DEBUG PCDerivation$ Trying to find path for: [Object: crc32]
2012-01-10 11:58:36,916 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/crc32.c, builtAs -> y, generated -> false, objectFile -> crc32, listName -> lib)
2012-01-10 11:58:36,916 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/crc32.c, builtAs -> y, generated -> false, objectFile -> crc32, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,916 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,916 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,916 DEBUG PCDerivation$ Expression of path for object occurrence libbb/crc32.c: [TRUE]
2012-01-10 11:58:36,916 DEBUG PCDerivation$ Trying to find path for: [Object: create_icmp6_socket]
2012-01-10 11:58:36,916 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp6_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp6_socket, listName -> lib)
2012-01-10 11:58:36,917 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp6_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp6_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,917 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,917 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,917 DEBUG PCDerivation$ Expression of path for object occurrence libbb/create_icmp6_socket.c: [TRUE]
2012-01-10 11:58:36,917 DEBUG PCDerivation$ Trying to find path for: [Object: create_icmp_socket]
2012-01-10 11:58:36,917 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp_socket, listName -> lib)
2012-01-10 11:58:36,917 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/create_icmp_socket.c, builtAs -> y, generated -> false, objectFile -> create_icmp_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,917 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,917 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,917 DEBUG PCDerivation$ Expression of path for object occurrence libbb/create_icmp_socket.c: [TRUE]
2012-01-10 11:58:36,917 DEBUG PCDerivation$ Trying to find path for: [Object: default_error_retval]
2012-01-10 11:58:36,917 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/default_error_retval.c, builtAs -> y, generated -> false, objectFile -> default_error_retval, listName -> lib)
2012-01-10 11:58:36,918 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/default_error_retval.c, builtAs -> y, generated -> false, objectFile -> default_error_retval, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,918 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,918 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,918 DEBUG PCDerivation$ Expression of path for object occurrence libbb/default_error_retval.c: [TRUE]
2012-01-10 11:58:36,918 DEBUG PCDerivation$ Trying to find path for: [Object: device_open]
2012-01-10 11:58:36,918 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/device_open.c, builtAs -> y, generated -> false, objectFile -> device_open, listName -> lib)
2012-01-10 11:58:36,918 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/device_open.c, builtAs -> y, generated -> false, objectFile -> device_open, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,918 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,918 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,918 DEBUG PCDerivation$ Expression of path for object occurrence libbb/device_open.c: [TRUE]
2012-01-10 11:58:36,918 DEBUG PCDerivation$ Trying to find path for: [Object: dump]
2012-01-10 11:58:36,918 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/dump.c, builtAs -> y, generated -> false, objectFile -> dump, listName -> lib)
2012-01-10 11:58:36,918 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/dump.c, builtAs -> y, generated -> false, objectFile -> dump, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,919 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,919 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,919 DEBUG PCDerivation$ Expression of path for object occurrence libbb/dump.c: [TRUE]
2012-01-10 11:58:36,919 DEBUG PCDerivation$ Trying to find path for: [Object: execable]
2012-01-10 11:58:36,919 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/execable.c, builtAs -> y, generated -> false, objectFile -> execable, listName -> lib)
2012-01-10 11:58:36,919 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/execable.c, builtAs -> y, generated -> false, objectFile -> execable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,919 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,919 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,919 DEBUG PCDerivation$ Expression of path for object occurrence libbb/execable.c: [TRUE]
2012-01-10 11:58:36,919 DEBUG PCDerivation$ Trying to find path for: [Object: fclose_nonstdin]
2012-01-10 11:58:36,919 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fclose_nonstdin.c, builtAs -> y, generated -> false, objectFile -> fclose_nonstdin, listName -> lib)
2012-01-10 11:58:36,919 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fclose_nonstdin.c, builtAs -> y, generated -> false, objectFile -> fclose_nonstdin, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,919 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,919 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,920 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fclose_nonstdin.c: [TRUE]
2012-01-10 11:58:36,920 DEBUG PCDerivation$ Trying to find path for: [Object: fflush_stdout_and_exit]
2012-01-10 11:58:36,920 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fflush_stdout_and_exit.c, builtAs -> y, generated -> false, objectFile -> fflush_stdout_and_exit, listName -> lib)
2012-01-10 11:58:36,920 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fflush_stdout_and_exit.c, builtAs -> y, generated -> false, objectFile -> fflush_stdout_and_exit, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,920 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,920 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,920 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fflush_stdout_and_exit.c: [TRUE]
2012-01-10 11:58:36,920 DEBUG PCDerivation$ Trying to find path for: [Object: fgets_str]
2012-01-10 11:58:36,920 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fgets_str.c, builtAs -> y, generated -> false, objectFile -> fgets_str, listName -> lib)
2012-01-10 11:58:36,920 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/fgets_str.c, builtAs -> y, generated -> false, objectFile -> fgets_str, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,920 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,920 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,920 DEBUG PCDerivation$ Expression of path for object occurrence libbb/fgets_str.c: [TRUE]
2012-01-10 11:58:36,920 DEBUG PCDerivation$ Trying to find path for: [Object: find_pid_by_name]
2012-01-10 11:58:36,920 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_pid_by_name.c, builtAs -> y, generated -> false, objectFile -> find_pid_by_name, listName -> lib)
2012-01-10 11:58:36,921 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_pid_by_name.c, builtAs -> y, generated -> false, objectFile -> find_pid_by_name, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,921 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,921 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,921 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_pid_by_name.c: [TRUE]
2012-01-10 11:58:36,921 DEBUG PCDerivation$ Trying to find path for: [Object: find_root_device]
2012-01-10 11:58:36,921 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_root_device.c, builtAs -> y, generated -> false, objectFile -> find_root_device, listName -> lib)
2012-01-10 11:58:36,921 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/find_root_device.c, builtAs -> y, generated -> false, objectFile -> find_root_device, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,921 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,921 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,921 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_root_device.c: [TRUE]
2012-01-10 11:58:36,921 DEBUG PCDerivation$ Trying to find path for: [Object: full_write]
2012-01-10 11:58:36,921 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/full_write.c, builtAs -> y, generated -> false, objectFile -> full_write, listName -> lib)
2012-01-10 11:58:36,921 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/full_write.c, builtAs -> y, generated -> false, objectFile -> full_write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,921 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,921 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,922 DEBUG PCDerivation$ Expression of path for object occurrence libbb/full_write.c: [TRUE]
2012-01-10 11:58:36,922 DEBUG PCDerivation$ Trying to find path for: [Object: get_console]
2012-01-10 11:58:36,922 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_console.c, builtAs -> y, generated -> false, objectFile -> get_console, listName -> lib)
2012-01-10 11:58:36,922 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_console.c, builtAs -> y, generated -> false, objectFile -> get_console, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,922 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,922 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,922 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_console.c: [TRUE]
2012-01-10 11:58:36,922 DEBUG PCDerivation$ Trying to find path for: [Object: get_last_path_component]
2012-01-10 11:58:36,922 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_last_path_component.c, builtAs -> y, generated -> false, objectFile -> get_last_path_component, listName -> lib)
2012-01-10 11:58:36,922 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_last_path_component.c, builtAs -> y, generated -> false, objectFile -> get_last_path_component, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,922 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,922 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,922 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_last_path_component.c: [TRUE]
2012-01-10 11:58:36,922 DEBUG PCDerivation$ Trying to find path for: [Object: get_line_from_file]
2012-01-10 11:58:36,922 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_line_from_file.c, builtAs -> y, generated -> false, objectFile -> get_line_from_file, listName -> lib)
2012-01-10 11:58:36,923 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_line_from_file.c, builtAs -> y, generated -> false, objectFile -> get_line_from_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,923 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,923 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,923 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_line_from_file.c: [TRUE]
2012-01-10 11:58:36,923 DEBUG PCDerivation$ Trying to find path for: [Object: getopt32]
2012-01-10 11:58:36,923 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getopt32.c, builtAs -> y, generated -> false, objectFile -> getopt32, listName -> lib)
2012-01-10 11:58:36,923 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getopt32.c, builtAs -> y, generated -> false, objectFile -> getopt32, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,923 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,923 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,923 DEBUG PCDerivation$ Expression of path for object occurrence libbb/getopt32.c: [TRUE]
2012-01-10 11:58:36,923 DEBUG PCDerivation$ Trying to find path for: [Object: getpty]
2012-01-10 11:58:36,923 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getpty.c, builtAs -> y, generated -> false, objectFile -> getpty, listName -> lib)
2012-01-10 11:58:36,923 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/getpty.c, builtAs -> y, generated -> false, objectFile -> getpty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,923 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,923 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,924 DEBUG PCDerivation$ Expression of path for object occurrence libbb/getpty.c: [TRUE]
2012-01-10 11:58:36,924 DEBUG PCDerivation$ Trying to find path for: [Object: get_volsize]
2012-01-10 11:58:36,924 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_volsize.c, builtAs -> y, generated -> false, objectFile -> get_volsize, listName -> lib)
2012-01-10 11:58:36,924 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/get_volsize.c, builtAs -> y, generated -> false, objectFile -> get_volsize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,924 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,924 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,924 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_volsize.c: [TRUE]
2012-01-10 11:58:36,924 DEBUG PCDerivation$ Trying to find path for: [Object: herror_msg]
2012-01-10 11:58:36,924 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/herror_msg.c, builtAs -> y, generated -> false, objectFile -> herror_msg, listName -> lib)
2012-01-10 11:58:36,924 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/herror_msg.c, builtAs -> y, generated -> false, objectFile -> herror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,924 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,924 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,924 DEBUG PCDerivation$ Expression of path for object occurrence libbb/herror_msg.c: [TRUE]
2012-01-10 11:58:36,924 DEBUG PCDerivation$ Trying to find path for: [Object: human_readable]
2012-01-10 11:58:36,924 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/human_readable.c, builtAs -> y, generated -> false, objectFile -> human_readable, listName -> lib)
2012-01-10 11:58:36,924 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/human_readable.c, builtAs -> y, generated -> false, objectFile -> human_readable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,924 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,925 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,925 DEBUG PCDerivation$ Expression of path for object occurrence libbb/human_readable.c: [TRUE]
2012-01-10 11:58:36,925 DEBUG PCDerivation$ Trying to find path for: [Object: inet_common]
2012-01-10 11:58:36,925 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inet_common.c, builtAs -> y, generated -> false, objectFile -> inet_common, listName -> lib)
2012-01-10 11:58:36,925 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inet_common.c, builtAs -> y, generated -> false, objectFile -> inet_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,925 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,925 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,925 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inet_common.c: [TRUE]
2012-01-10 11:58:36,925 DEBUG PCDerivation$ Trying to find path for: [Object: info_msg]
2012-01-10 11:58:36,925 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/info_msg.c, builtAs -> y, generated -> false, objectFile -> info_msg, listName -> lib)
2012-01-10 11:58:36,925 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/info_msg.c, builtAs -> y, generated -> false, objectFile -> info_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,925 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,925 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,925 DEBUG PCDerivation$ Expression of path for object occurrence libbb/info_msg.c: [TRUE]
2012-01-10 11:58:36,925 DEBUG PCDerivation$ Trying to find path for: [Object: inode_hash]
2012-01-10 11:58:36,925 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inode_hash.c, builtAs -> y, generated -> false, objectFile -> inode_hash, listName -> lib)
2012-01-10 11:58:36,926 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/inode_hash.c, builtAs -> y, generated -> false, objectFile -> inode_hash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,926 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,926 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,926 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inode_hash.c: [TRUE]
2012-01-10 11:58:36,926 DEBUG PCDerivation$ Trying to find path for: [Object: isdirectory]
2012-01-10 11:58:36,926 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/isdirectory.c, builtAs -> y, generated -> false, objectFile -> isdirectory, listName -> lib)
2012-01-10 11:58:36,926 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/isdirectory.c, builtAs -> y, generated -> false, objectFile -> isdirectory, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,926 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,926 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,926 DEBUG PCDerivation$ Expression of path for object occurrence libbb/isdirectory.c: [TRUE]
2012-01-10 11:58:36,926 DEBUG PCDerivation$ Trying to find path for: [Object: kernel_version]
2012-01-10 11:58:36,926 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/kernel_version.c, builtAs -> y, generated -> false, objectFile -> kernel_version, listName -> lib)
2012-01-10 11:58:36,926 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/kernel_version.c, builtAs -> y, generated -> false, objectFile -> kernel_version, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,926 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,926 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,926 DEBUG PCDerivation$ Expression of path for object occurrence libbb/kernel_version.c: [TRUE]
2012-01-10 11:58:36,927 DEBUG PCDerivation$ Trying to find path for: [Object: last_char_is]
2012-01-10 11:58:36,927 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/last_char_is.c, builtAs -> y, generated -> false, objectFile -> last_char_is, listName -> lib)
2012-01-10 11:58:36,927 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/last_char_is.c, builtAs -> y, generated -> false, objectFile -> last_char_is, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,927 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,927 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,927 DEBUG PCDerivation$ Expression of path for object occurrence libbb/last_char_is.c: [TRUE]
2012-01-10 11:58:36,927 DEBUG PCDerivation$ Trying to find path for: [Object: lineedit]
2012-01-10 11:58:36,927 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit.c, builtAs -> y, generated -> false, objectFile -> lineedit, listName -> lib)
2012-01-10 11:58:36,927 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit.c, builtAs -> y, generated -> false, objectFile -> lineedit, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,927 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,927 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,927 DEBUG PCDerivation$ Expression of path for object occurrence libbb/lineedit.c: [TRUE]
2012-01-10 11:58:36,927 DEBUG PCDerivation$ Trying to find path for: [Object: lineedit_ptr_hack]
2012-01-10 11:58:36,927 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit_ptr_hack.c, builtAs -> y, generated -> false, objectFile -> lineedit_ptr_hack, listName -> lib)
2012-01-10 11:58:36,927 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/lineedit_ptr_hack.c, builtAs -> y, generated -> false, objectFile -> lineedit_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,927 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,928 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,928 DEBUG PCDerivation$ Expression of path for object occurrence libbb/lineedit_ptr_hack.c: [TRUE]
2012-01-10 11:58:36,928 DEBUG PCDerivation$ Trying to find path for: [Object: llist]
2012-01-10 11:58:36,928 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/llist.c, builtAs -> y, generated -> false, objectFile -> llist, listName -> lib)
2012-01-10 11:58:36,928 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/llist.c, builtAs -> y, generated -> false, objectFile -> llist, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,928 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,928 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,928 DEBUG PCDerivation$ Expression of path for object occurrence libbb/llist.c: [TRUE]
2012-01-10 11:58:36,928 DEBUG PCDerivation$ Trying to find path for: [Object: login]
2012-01-10 11:58:36,928 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/login.c, builtAs -> y, generated -> false, objectFile -> login, listName -> lib)
2012-01-10 11:58:36,928 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/login.c, builtAs -> y, generated -> false, objectFile -> login, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,928 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,928 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,928 DEBUG PCDerivation$ Expression of path for object occurrence libbb/login.c: [TRUE]
2012-01-10 11:58:36,928 DEBUG PCDerivation$ Trying to find path for: [Object: make_directory]
2012-01-10 11:58:36,928 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/make_directory.c, builtAs -> y, generated -> false, objectFile -> make_directory, listName -> lib)
2012-01-10 11:58:36,929 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/make_directory.c, builtAs -> y, generated -> false, objectFile -> make_directory, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,929 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,929 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,929 DEBUG PCDerivation$ Expression of path for object occurrence libbb/make_directory.c: [TRUE]
2012-01-10 11:58:36,929 DEBUG PCDerivation$ Trying to find path for: [Object: makedev]
2012-01-10 11:58:36,929 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/makedev.c, builtAs -> y, generated -> false, objectFile -> makedev, listName -> lib)
2012-01-10 11:58:36,929 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/makedev.c, builtAs -> y, generated -> false, objectFile -> makedev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,929 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,929 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,929 DEBUG PCDerivation$ Expression of path for object occurrence libbb/makedev.c: [TRUE]
2012-01-10 11:58:36,929 DEBUG PCDerivation$ Trying to find path for: [Object: hash_md5_sha]
2012-01-10 11:58:36,929 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/hash_md5_sha.c, builtAs -> y, generated -> false, objectFile -> hash_md5_sha, listName -> lib)
2012-01-10 11:58:36,929 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/hash_md5_sha.c, builtAs -> y, generated -> false, objectFile -> hash_md5_sha, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,929 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,929 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,929 DEBUG PCDerivation$ Expression of path for object occurrence libbb/hash_md5_sha.c: [TRUE]
2012-01-10 11:58:36,929 DEBUG PCDerivation$ Trying to find path for: [Object: messages]
2012-01-10 11:58:36,930 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/messages.c, builtAs -> y, generated -> false, objectFile -> messages, listName -> lib)
2012-01-10 11:58:36,930 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/messages.c, builtAs -> y, generated -> false, objectFile -> messages, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,930 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,930 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,930 DEBUG PCDerivation$ Expression of path for object occurrence libbb/messages.c: [TRUE]
2012-01-10 11:58:36,930 DEBUG PCDerivation$ Trying to find path for: [Object: mode_string]
2012-01-10 11:58:36,930 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/mode_string.c, builtAs -> y, generated -> false, objectFile -> mode_string, listName -> lib)
2012-01-10 11:58:36,930 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/mode_string.c, builtAs -> y, generated -> false, objectFile -> mode_string, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,930 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,930 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,930 DEBUG PCDerivation$ Expression of path for object occurrence libbb/mode_string.c: [TRUE]
2012-01-10 11:58:36,930 DEBUG PCDerivation$ Trying to find path for: [Object: parse_mode]
2012-01-10 11:58:36,930 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_mode.c, builtAs -> y, generated -> false, objectFile -> parse_mode, listName -> lib)
2012-01-10 11:58:36,930 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/parse_mode.c, builtAs -> y, generated -> false, objectFile -> parse_mode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,930 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,930 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,931 DEBUG PCDerivation$ Expression of path for object occurrence libbb/parse_mode.c: [TRUE]
2012-01-10 11:58:36,931 DEBUG PCDerivation$ Trying to find path for: [Object: perror_msg]
2012-01-10 11:58:36,931 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_msg.c, builtAs -> y, generated -> false, objectFile -> perror_msg, listName -> lib)
2012-01-10 11:58:36,931 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_msg.c, builtAs -> y, generated -> false, objectFile -> perror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,931 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,931 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,931 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_msg.c: [TRUE]
2012-01-10 11:58:36,931 DEBUG PCDerivation$ Trying to find path for: [Object: perror_nomsg]
2012-01-10 11:58:36,931 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg, listName -> lib)
2012-01-10 11:58:36,931 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,931 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,931 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,931 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_nomsg.c: [TRUE]
2012-01-10 11:58:36,931 DEBUG PCDerivation$ Trying to find path for: [Object: perror_nomsg_and_die]
2012-01-10 11:58:36,931 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg_and_die.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg_and_die, listName -> lib)
2012-01-10 11:58:36,931 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/perror_nomsg_and_die.c, builtAs -> y, generated -> false, objectFile -> perror_nomsg_and_die, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,932 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,932 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,932 DEBUG PCDerivation$ Expression of path for object occurrence libbb/perror_nomsg_and_die.c: [TRUE]
2012-01-10 11:58:36,932 DEBUG PCDerivation$ Trying to find path for: [Object: pidfile]
2012-01-10 11:58:36,932 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/pidfile.c, builtAs -> y, generated -> false, objectFile -> pidfile, listName -> lib)
2012-01-10 11:58:36,932 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/pidfile.c, builtAs -> y, generated -> false, objectFile -> pidfile, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,932 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,932 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,932 DEBUG PCDerivation$ Expression of path for object occurrence libbb/pidfile.c: [TRUE]
2012-01-10 11:58:36,932 DEBUG PCDerivation$ Trying to find path for: [Object: platform]
2012-01-10 11:58:36,932 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/platform.c, builtAs -> y, generated -> false, objectFile -> platform, listName -> lib)
2012-01-10 11:58:36,932 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/platform.c, builtAs -> y, generated -> false, objectFile -> platform, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,932 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,932 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,932 DEBUG PCDerivation$ Expression of path for object occurrence libbb/platform.c: [TRUE]
2012-01-10 11:58:36,933 DEBUG PCDerivation$ Trying to find path for: [Object: printable]
2012-01-10 11:58:36,933 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable.c, builtAs -> y, generated -> false, objectFile -> printable, listName -> lib)
2012-01-10 11:58:36,933 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable.c, builtAs -> y, generated -> false, objectFile -> printable, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,933 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,933 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,933 DEBUG PCDerivation$ Expression of path for object occurrence libbb/printable.c: [TRUE]
2012-01-10 11:58:36,933 DEBUG PCDerivation$ Trying to find path for: [Object: printable_string]
2012-01-10 11:58:36,933 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable_string.c, builtAs -> y, generated -> false, objectFile -> printable_string, listName -> lib)
2012-01-10 11:58:36,933 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/printable_string.c, builtAs -> y, generated -> false, objectFile -> printable_string, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,933 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,933 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,933 DEBUG PCDerivation$ Expression of path for object occurrence libbb/printable_string.c: [TRUE]
2012-01-10 11:58:36,933 DEBUG PCDerivation$ Trying to find path for: [Object: print_flags]
2012-01-10 11:58:36,933 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/print_flags.c, builtAs -> y, generated -> false, objectFile -> print_flags, listName -> lib)
2012-01-10 11:58:36,934 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/print_flags.c, builtAs -> y, generated -> false, objectFile -> print_flags, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,934 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,934 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,934 DEBUG PCDerivation$ Expression of path for object occurrence libbb/print_flags.c: [TRUE]
2012-01-10 11:58:36,934 DEBUG PCDerivation$ Trying to find path for: [Object: process_escape_sequence]
2012-01-10 11:58:36,934 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/process_escape_sequence.c, builtAs -> y, generated -> false, objectFile -> process_escape_sequence, listName -> lib)
2012-01-10 11:58:36,934 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/process_escape_sequence.c, builtAs -> y, generated -> false, objectFile -> process_escape_sequence, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,934 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,934 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,934 DEBUG PCDerivation$ Expression of path for object occurrence libbb/process_escape_sequence.c: [TRUE]
2012-01-10 11:58:36,934 DEBUG PCDerivation$ Trying to find path for: [Object: procps]
2012-01-10 11:58:36,934 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/procps.c, builtAs -> y, generated -> false, objectFile -> procps, listName -> lib)
2012-01-10 11:58:36,934 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/procps.c, builtAs -> y, generated -> false, objectFile -> procps, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,934 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,934 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,934 DEBUG PCDerivation$ Expression of path for object occurrence libbb/procps.c: [TRUE]
2012-01-10 11:58:36,935 DEBUG PCDerivation$ Trying to find path for: [Object: progress]
2012-01-10 11:58:36,935 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/progress.c, builtAs -> y, generated -> false, objectFile -> progress, listName -> lib)
2012-01-10 11:58:36,935 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/progress.c, builtAs -> y, generated -> false, objectFile -> progress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,935 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,935 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,935 DEBUG PCDerivation$ Expression of path for object occurrence libbb/progress.c: [TRUE]
2012-01-10 11:58:36,935 DEBUG PCDerivation$ Trying to find path for: [Object: ptr_to_globals]
2012-01-10 11:58:36,935 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ptr_to_globals.c, builtAs -> y, generated -> false, objectFile -> ptr_to_globals, listName -> lib)
2012-01-10 11:58:36,935 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/ptr_to_globals.c, builtAs -> y, generated -> false, objectFile -> ptr_to_globals, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,935 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,935 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,935 DEBUG PCDerivation$ Expression of path for object occurrence libbb/ptr_to_globals.c: [TRUE]
2012-01-10 11:58:36,935 DEBUG PCDerivation$ Trying to find path for: [Object: read]
2012-01-10 11:58:36,935 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read.c, builtAs -> y, generated -> false, objectFile -> read, listName -> lib)
2012-01-10 11:58:36,935 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read.c, builtAs -> y, generated -> false, objectFile -> read, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,936 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,936 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,936 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read.c: [TRUE]
2012-01-10 11:58:36,936 DEBUG PCDerivation$ Trying to find path for: [Object: read_printf]
2012-01-10 11:58:36,936 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_printf.c, builtAs -> y, generated -> false, objectFile -> read_printf, listName -> lib)
2012-01-10 11:58:36,936 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_printf.c, builtAs -> y, generated -> false, objectFile -> read_printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,936 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,936 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,936 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read_printf.c: [TRUE]
2012-01-10 11:58:36,936 DEBUG PCDerivation$ Trying to find path for: [Object: read_key]
2012-01-10 11:58:36,936 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_key.c, builtAs -> y, generated -> false, objectFile -> read_key, listName -> lib)
2012-01-10 11:58:36,936 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/read_key.c, builtAs -> y, generated -> false, objectFile -> read_key, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,936 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,936 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,936 DEBUG PCDerivation$ Expression of path for object occurrence libbb/read_key.c: [TRUE]
2012-01-10 11:58:36,936 DEBUG PCDerivation$ Trying to find path for: [Object: recursive_action]
2012-01-10 11:58:36,936 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/recursive_action.c, builtAs -> y, generated -> false, objectFile -> recursive_action, listName -> lib)
2012-01-10 11:58:36,937 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/recursive_action.c, builtAs -> y, generated -> false, objectFile -> recursive_action, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,937 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,937 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,937 DEBUG PCDerivation$ Expression of path for object occurrence libbb/recursive_action.c: [TRUE]
2012-01-10 11:58:36,937 DEBUG PCDerivation$ Trying to find path for: [Object: remove_file]
2012-01-10 11:58:36,937 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/remove_file.c, builtAs -> y, generated -> false, objectFile -> remove_file, listName -> lib)
2012-01-10 11:58:36,937 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/remove_file.c, builtAs -> y, generated -> false, objectFile -> remove_file, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,937 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,937 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,937 DEBUG PCDerivation$ Expression of path for object occurrence libbb/remove_file.c: [TRUE]
2012-01-10 11:58:36,937 DEBUG PCDerivation$ Trying to find path for: [Object: run_shell]
2012-01-10 11:58:36,937 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/run_shell.c, builtAs -> y, generated -> false, objectFile -> run_shell, listName -> lib)
2012-01-10 11:58:36,937 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/run_shell.c, builtAs -> y, generated -> false, objectFile -> run_shell, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,937 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,937 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,937 DEBUG PCDerivation$ Expression of path for object occurrence libbb/run_shell.c: [TRUE]
2012-01-10 11:58:36,937 DEBUG PCDerivation$ Trying to find path for: [Object: safe_gethostname]
2012-01-10 11:58:36,937 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_gethostname.c, builtAs -> y, generated -> false, objectFile -> safe_gethostname, listName -> lib)
2012-01-10 11:58:36,938 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_gethostname.c, builtAs -> y, generated -> false, objectFile -> safe_gethostname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,938 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,938 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,938 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_gethostname.c: [TRUE]
2012-01-10 11:58:36,938 DEBUG PCDerivation$ Trying to find path for: [Object: safe_poll]
2012-01-10 11:58:36,938 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_poll.c, builtAs -> y, generated -> false, objectFile -> safe_poll, listName -> lib)
2012-01-10 11:58:36,938 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_poll.c, builtAs -> y, generated -> false, objectFile -> safe_poll, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,938 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,938 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,938 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_poll.c: [TRUE]
2012-01-10 11:58:36,938 DEBUG PCDerivation$ Trying to find path for: [Object: safe_strncpy]
2012-01-10 11:58:36,938 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_strncpy.c, builtAs -> y, generated -> false, objectFile -> safe_strncpy, listName -> lib)
2012-01-10 11:58:36,938 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_strncpy.c, builtAs -> y, generated -> false, objectFile -> safe_strncpy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,938 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,938 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,938 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_strncpy.c: [TRUE]
2012-01-10 11:58:36,938 DEBUG PCDerivation$ Trying to find path for: [Object: safe_write]
2012-01-10 11:58:36,939 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_write.c, builtAs -> y, generated -> false, objectFile -> safe_write, listName -> lib)
2012-01-10 11:58:36,939 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/safe_write.c, builtAs -> y, generated -> false, objectFile -> safe_write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,939 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,939 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,939 DEBUG PCDerivation$ Expression of path for object occurrence libbb/safe_write.c: [TRUE]
2012-01-10 11:58:36,939 DEBUG PCDerivation$ Trying to find path for: [Object: setup_environment]
2012-01-10 11:58:36,939 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/setup_environment.c, builtAs -> y, generated -> false, objectFile -> setup_environment, listName -> lib)
2012-01-10 11:58:36,939 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/setup_environment.c, builtAs -> y, generated -> false, objectFile -> setup_environment, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,939 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,939 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,939 DEBUG PCDerivation$ Expression of path for object occurrence libbb/setup_environment.c: [TRUE]
2012-01-10 11:58:36,939 DEBUG PCDerivation$ Trying to find path for: [Object: signals]
2012-01-10 11:58:36,939 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/signals.c, builtAs -> y, generated -> false, objectFile -> signals, listName -> lib)
2012-01-10 11:58:36,939 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/signals.c, builtAs -> y, generated -> false, objectFile -> signals, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,939 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,939 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,939 DEBUG PCDerivation$ Expression of path for object occurrence libbb/signals.c: [TRUE]
2012-01-10 11:58:36,940 DEBUG PCDerivation$ Trying to find path for: [Object: simplify_path]
2012-01-10 11:58:36,940 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/simplify_path.c, builtAs -> y, generated -> false, objectFile -> simplify_path, listName -> lib)
2012-01-10 11:58:36,940 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/simplify_path.c, builtAs -> y, generated -> false, objectFile -> simplify_path, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,940 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,940 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,940 DEBUG PCDerivation$ Expression of path for object occurrence libbb/simplify_path.c: [TRUE]
2012-01-10 11:58:36,940 DEBUG PCDerivation$ Trying to find path for: [Object: single_argv]
2012-01-10 11:58:36,940 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/single_argv.c, builtAs -> y, generated -> false, objectFile -> single_argv, listName -> lib)
2012-01-10 11:58:36,940 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/single_argv.c, builtAs -> y, generated -> false, objectFile -> single_argv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,940 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,940 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,940 DEBUG PCDerivation$ Expression of path for object occurrence libbb/single_argv.c: [TRUE]
2012-01-10 11:58:36,940 DEBUG PCDerivation$ Trying to find path for: [Object: skip_whitespace]
2012-01-10 11:58:36,940 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/skip_whitespace.c, builtAs -> y, generated -> false, objectFile -> skip_whitespace, listName -> lib)
2012-01-10 11:58:36,940 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/skip_whitespace.c, builtAs -> y, generated -> false, objectFile -> skip_whitespace, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,940 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,940 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,941 DEBUG PCDerivation$ Expression of path for object occurrence libbb/skip_whitespace.c: [TRUE]
2012-01-10 11:58:36,941 DEBUG PCDerivation$ Trying to find path for: [Object: speed_table]
2012-01-10 11:58:36,941 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/speed_table.c, builtAs -> y, generated -> false, objectFile -> speed_table, listName -> lib)
2012-01-10 11:58:36,941 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/speed_table.c, builtAs -> y, generated -> false, objectFile -> speed_table, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,941 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,941 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,941 DEBUG PCDerivation$ Expression of path for object occurrence libbb/speed_table.c: [TRUE]
2012-01-10 11:58:36,941 DEBUG PCDerivation$ Trying to find path for: [Object: str_tolower]
2012-01-10 11:58:36,941 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/str_tolower.c, builtAs -> y, generated -> false, objectFile -> str_tolower, listName -> lib)
2012-01-10 11:58:36,941 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/str_tolower.c, builtAs -> y, generated -> false, objectFile -> str_tolower, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,941 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,941 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,941 DEBUG PCDerivation$ Expression of path for object occurrence libbb/str_tolower.c: [TRUE]
2012-01-10 11:58:36,941 DEBUG PCDerivation$ Trying to find path for: [Object: strrstr]
2012-01-10 11:58:36,941 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/strrstr.c, builtAs -> y, generated -> false, objectFile -> strrstr, listName -> lib)
2012-01-10 11:58:36,941 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/strrstr.c, builtAs -> y, generated -> false, objectFile -> strrstr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,941 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,941 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,942 DEBUG PCDerivation$ Expression of path for object occurrence libbb/strrstr.c: [TRUE]
2012-01-10 11:58:36,942 DEBUG PCDerivation$ Trying to find path for: [Object: time]
2012-01-10 11:58:36,942 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/time.c, builtAs -> y, generated -> false, objectFile -> time, listName -> lib)
2012-01-10 11:58:36,942 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/time.c, builtAs -> y, generated -> false, objectFile -> time, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,942 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,942 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,942 DEBUG PCDerivation$ Expression of path for object occurrence libbb/time.c: [TRUE]
2012-01-10 11:58:36,942 DEBUG PCDerivation$ Trying to find path for: [Object: trim]
2012-01-10 11:58:36,942 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/trim.c, builtAs -> y, generated -> false, objectFile -> trim, listName -> lib)
2012-01-10 11:58:36,942 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/trim.c, builtAs -> y, generated -> false, objectFile -> trim, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,942 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,942 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,942 DEBUG PCDerivation$ Expression of path for object occurrence libbb/trim.c: [TRUE]
2012-01-10 11:58:36,942 DEBUG PCDerivation$ Trying to find path for: [Object: u_signal_names]
2012-01-10 11:58:36,942 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/u_signal_names.c, builtAs -> y, generated -> false, objectFile -> u_signal_names, listName -> lib)
2012-01-10 11:58:36,942 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/u_signal_names.c, builtAs -> y, generated -> false, objectFile -> u_signal_names, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,942 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,943 DEBUG PCDerivation$ Expression of path for object occurrence libbb/u_signal_names.c: [TRUE]
2012-01-10 11:58:36,943 DEBUG PCDerivation$ Trying to find path for: [Object: uuencode]
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/uuencode.c, builtAs -> y, generated -> false, objectFile -> uuencode, listName -> lib)
2012-01-10 11:58:36,943 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/uuencode.c, builtAs -> y, generated -> false, objectFile -> uuencode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,943 DEBUG PCDerivation$ Expression of path for object occurrence libbb/uuencode.c: [TRUE]
2012-01-10 11:58:36,943 DEBUG PCDerivation$ Trying to find path for: [Object: vdprintf]
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vdprintf.c, builtAs -> y, generated -> false, objectFile -> vdprintf, listName -> lib)
2012-01-10 11:58:36,943 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vdprintf.c, builtAs -> y, generated -> false, objectFile -> vdprintf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,943 DEBUG PCDerivation$ Expression of path for object occurrence libbb/vdprintf.c: [TRUE]
2012-01-10 11:58:36,943 DEBUG PCDerivation$ Trying to find path for: [Object: verror_msg]
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/verror_msg.c, builtAs -> y, generated -> false, objectFile -> verror_msg, listName -> lib)
2012-01-10 11:58:36,943 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/verror_msg.c, builtAs -> y, generated -> false, objectFile -> verror_msg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,943 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,944 DEBUG PCDerivation$ Expression of path for object occurrence libbb/verror_msg.c: [TRUE]
2012-01-10 11:58:36,944 DEBUG PCDerivation$ Trying to find path for: [Object: vfork_daemon_rexec]
2012-01-10 11:58:36,944 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vfork_daemon_rexec.c, builtAs -> y, generated -> false, objectFile -> vfork_daemon_rexec, listName -> lib)
2012-01-10 11:58:36,944 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/vfork_daemon_rexec.c, builtAs -> y, generated -> false, objectFile -> vfork_daemon_rexec, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,944 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,944 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,944 DEBUG PCDerivation$ Expression of path for object occurrence libbb/vfork_daemon_rexec.c: [TRUE]
2012-01-10 11:58:36,944 DEBUG PCDerivation$ Trying to find path for: [Object: warn_ignoring_args]
2012-01-10 11:58:36,944 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/warn_ignoring_args.c, builtAs -> y, generated -> false, objectFile -> warn_ignoring_args, listName -> lib)
2012-01-10 11:58:36,944 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/warn_ignoring_args.c, builtAs -> y, generated -> false, objectFile -> warn_ignoring_args, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,944 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,944 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,944 DEBUG PCDerivation$ Expression of path for object occurrence libbb/warn_ignoring_args.c: [TRUE]
2012-01-10 11:58:36,944 DEBUG PCDerivation$ Trying to find path for: [Object: wfopen]
2012-01-10 11:58:36,944 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen.c, builtAs -> y, generated -> false, objectFile -> wfopen, listName -> lib)
2012-01-10 11:58:36,944 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen.c, builtAs -> y, generated -> false, objectFile -> wfopen, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,944 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,944 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,945 DEBUG PCDerivation$ Expression of path for object occurrence libbb/wfopen.c: [TRUE]
2012-01-10 11:58:36,945 DEBUG PCDerivation$ Trying to find path for: [Object: wfopen_input]
2012-01-10 11:58:36,945 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen_input.c, builtAs -> y, generated -> false, objectFile -> wfopen_input, listName -> lib)
2012-01-10 11:58:36,945 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/wfopen_input.c, builtAs -> y, generated -> false, objectFile -> wfopen_input, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,945 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,945 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,945 DEBUG PCDerivation$ Expression of path for object occurrence libbb/wfopen_input.c: [TRUE]
2012-01-10 11:58:36,945 DEBUG PCDerivation$ Trying to find path for: [Object: write]
2012-01-10 11:58:36,945 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/write.c, builtAs -> y, generated -> false, objectFile -> write, listName -> lib)
2012-01-10 11:58:36,945 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/write.c, builtAs -> y, generated -> false, objectFile -> write, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,945 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,945 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,945 DEBUG PCDerivation$ Expression of path for object occurrence libbb/write.c: [TRUE]
2012-01-10 11:58:36,945 DEBUG PCDerivation$ Trying to find path for: [Object: xatonum]
2012-01-10 11:58:36,945 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xatonum.c, builtAs -> y, generated -> false, objectFile -> xatonum, listName -> lib)
2012-01-10 11:58:36,945 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xatonum.c, builtAs -> y, generated -> false, objectFile -> xatonum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,945 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,945 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,945 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xatonum.c: [TRUE]
2012-01-10 11:58:36,946 DEBUG PCDerivation$ Trying to find path for: [Object: xconnect]
2012-01-10 11:58:36,946 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xconnect.c, builtAs -> y, generated -> false, objectFile -> xconnect, listName -> lib)
2012-01-10 11:58:36,946 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xconnect.c, builtAs -> y, generated -> false, objectFile -> xconnect, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,946 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,946 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,946 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xconnect.c: [TRUE]
2012-01-10 11:58:36,946 DEBUG PCDerivation$ Trying to find path for: [Object: xfuncs]
2012-01-10 11:58:36,946 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs.c, builtAs -> y, generated -> false, objectFile -> xfuncs, listName -> lib)
2012-01-10 11:58:36,946 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs.c, builtAs -> y, generated -> false, objectFile -> xfuncs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,946 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,946 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,946 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfuncs.c: [TRUE]
2012-01-10 11:58:36,946 DEBUG PCDerivation$ Trying to find path for: [Object: xfuncs_printf]
2012-01-10 11:58:36,946 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs_printf.c, builtAs -> y, generated -> false, objectFile -> xfuncs_printf, listName -> lib)
2012-01-10 11:58:36,946 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfuncs_printf.c, builtAs -> y, generated -> false, objectFile -> xfuncs_printf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,946 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,946 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,946 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfuncs_printf.c: [TRUE]
2012-01-10 11:58:36,946 DEBUG PCDerivation$ Trying to find path for: [Object: xfunc_die]
2012-01-10 11:58:36,947 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfunc_die.c, builtAs -> y, generated -> false, objectFile -> xfunc_die, listName -> lib)
2012-01-10 11:58:36,947 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xfunc_die.c, builtAs -> y, generated -> false, objectFile -> xfunc_die, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,947 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,947 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,947 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xfunc_die.c: [TRUE]
2012-01-10 11:58:36,947 DEBUG PCDerivation$ Trying to find path for: [Object: xgetcwd]
2012-01-10 11:58:36,947 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgetcwd.c, builtAs -> y, generated -> false, objectFile -> xgetcwd, listName -> lib)
2012-01-10 11:58:36,947 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgetcwd.c, builtAs -> y, generated -> false, objectFile -> xgetcwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,947 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,947 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,947 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xgetcwd.c: [TRUE]
2012-01-10 11:58:36,947 DEBUG PCDerivation$ Trying to find path for: [Object: xgethostbyname]
2012-01-10 11:58:36,947 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgethostbyname.c, builtAs -> y, generated -> false, objectFile -> xgethostbyname, listName -> lib)
2012-01-10 11:58:36,947 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xgethostbyname.c, builtAs -> y, generated -> false, objectFile -> xgethostbyname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,947 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,947 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,947 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xgethostbyname.c: [TRUE]
2012-01-10 11:58:36,947 DEBUG PCDerivation$ Trying to find path for: [Object: xreadlink]
2012-01-10 11:58:36,948 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xreadlink.c, builtAs -> y, generated -> false, objectFile -> xreadlink, listName -> lib)
2012-01-10 11:58:36,948 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xreadlink.c, builtAs -> y, generated -> false, objectFile -> xreadlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,948 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,948 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,948 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xreadlink.c: [TRUE]
2012-01-10 11:58:36,948 DEBUG PCDerivation$ Trying to find path for: [Object: xrealloc_vector]
2012-01-10 11:58:36,948 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xrealloc_vector.c, builtAs -> y, generated -> false, objectFile -> xrealloc_vector, listName -> lib)
2012-01-10 11:58:36,948 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libbb/xrealloc_vector.c, builtAs -> y, generated -> false, objectFile -> xrealloc_vector, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,948 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,948 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,948 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xrealloc_vector.c: [TRUE]
2012-01-10 11:58:36,948 DEBUG PCDerivation$ Trying to find path for: [Object: match_fstype]
2012-01-10 11:58:36,948 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m")), sourceFile -> libbb/match_fstype.c, generated -> false, objectFile -> match_fstype, listName -> lib)
2012-01-10 11:58:36,948 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m")), sourceFile -> libbb/match_fstype.c, generated -> false, objectFile -> match_fstype, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,948 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,948 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,948 DEBUG PCDerivation$ Expression of path for object occurrence libbb/match_fstype.c: ((CONFIG_PLATFORM_LINUX == "y") || (CONFIG_PLATFORM_LINUX == "m"))
2012-01-10 11:58:36,948 DEBUG PCDerivation$ Trying to find path for: [Object: utmp]
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m")), sourceFile -> libbb/utmp.c, generated -> false, objectFile -> utmp, listName -> lib)
2012-01-10 11:58:36,949 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m")), sourceFile -> libbb/utmp.c, generated -> false, objectFile -> utmp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,949 DEBUG PCDerivation$ Expression of path for object occurrence libbb/utmp.c: ((CONFIG_FEATURE_UTMP == "y") || (CONFIG_FEATURE_UTMP == "m"))
2012-01-10 11:58:36,949 DEBUG PCDerivation$ Trying to find path for: [Object: selinux_common]
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m")), sourceFile -> libbb/selinux_common.c, generated -> false, objectFile -> selinux_common, listName -> lib)
2012-01-10 11:58:36,949 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m")), sourceFile -> libbb/selinux_common.c, generated -> false, objectFile -> selinux_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,949 DEBUG PCDerivation$ Expression of path for object occurrence libbb/selinux_common.c: ((CONFIG_SELINUX == "y") || (CONFIG_SELINUX == "m"))
2012-01-10 11:58:36,949 DEBUG PCDerivation$ Trying to find path for: [Object: mtab]
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m")), sourceFile -> libbb/mtab.c, generated -> false, objectFile -> mtab, listName -> lib)
2012-01-10 11:58:36,949 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m")), sourceFile -> libbb/mtab.c, generated -> false, objectFile -> mtab, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,949 DEBUG PCDerivation$ Expression of path for object occurrence libbb/mtab.c: ((CONFIG_FEATURE_MTAB_SUPPORT == "y") || (CONFIG_FEATURE_MTAB_SUPPORT == "m"))
2012-01-10 11:58:36,949 DEBUG PCDerivation$ Trying to find path for: [Object: unicode]
2012-01-10 11:58:36,949 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m")), sourceFile -> libbb/unicode.c, generated -> false, objectFile -> unicode, listName -> lib)
2012-01-10 11:58:36,950 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m")), sourceFile -> libbb/unicode.c, generated -> false, objectFile -> unicode, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,950 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,950 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,950 DEBUG PCDerivation$ Expression of path for object occurrence libbb/unicode.c: ((CONFIG_UNICODE_SUPPORT == "y") || (CONFIG_UNICODE_SUPPORT == "m"))
2012-01-10 11:58:36,950 DEBUG PCDerivation$ Trying to find path for: [Object: die_if_bad_username]
2012-01-10 11:58:36,950 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m")), sourceFile -> libbb/die_if_bad_username.c, generated -> false, objectFile -> die_if_bad_username, listName -> lib)
2012-01-10 11:58:36,950 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m")), sourceFile -> libbb/die_if_bad_username.c, generated -> false, objectFile -> die_if_bad_username, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,950 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,950 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,950 DEBUG PCDerivation$ Expression of path for object occurrence libbb/die_if_bad_username.c: ((CONFIG_FEATURE_CHECK_NAMES == "y") || (CONFIG_FEATURE_CHECK_NAMES == "m"))
2012-01-10 11:58:36,950 DEBUG PCDerivation$ Trying to find path for: [Object: udp_io]
2012-01-10 11:58:36,950 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))), sourceFile -> libbb/udp_io.c, generated -> false, objectFile -> udp_io, listName -> lib)
2012-01-10 11:58:36,950 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))), sourceFile -> libbb/udp_io.c, generated -> false, objectFile -> udp_io, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,950 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,950 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,950 DEBUG PCDerivation$ Expression of path for object occurrence libbb/udp_io.c: (((((((((CONFIG_NC == "y") || (CONFIG_NC == "m")) || ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))) || ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))) || ((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m"))) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))) || ((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m"))) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")))
2012-01-10 11:58:36,950 DEBUG PCDerivation$ Trying to find path for: [Object: loop]
2012-01-10 11:58:36,950 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m"))), sourceFile -> libbb/loop.c, generated -> false, objectFile -> loop, listName -> lib)
2012-01-10 11:58:36,951 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m"))), sourceFile -> libbb/loop.c, generated -> false, objectFile -> loop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,951 DEBUG PCDerivation$ Expression of path for object occurrence libbb/loop.c: (((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")) || ((CONFIG_FEATURE_MOUNT_LOOP == "y") || (CONFIG_FEATURE_MOUNT_LOOP == "m")))
2012-01-10 11:58:36,951 DEBUG PCDerivation$ Trying to find path for: [Object: update_passwd]
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))), sourceFile -> libbb/update_passwd.c, generated -> false, objectFile -> update_passwd, listName -> lib)
2012-01-10 11:58:36,951 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))), sourceFile -> libbb/update_passwd.c, generated -> false, objectFile -> update_passwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,951 DEBUG PCDerivation$ Expression of path for object occurrence libbb/update_passwd.c: (((((((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")) || ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))) || ((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m"))) || ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")))
2012-01-10 11:58:36,951 DEBUG PCDerivation$ Trying to find path for: [Object: pw_encrypt]
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m"))), sourceFile -> libbb/pw_encrypt.c, generated -> false, objectFile -> pw_encrypt, listName -> lib)
2012-01-10 11:58:36,951 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m"))), sourceFile -> libbb/pw_encrypt.c, generated -> false, objectFile -> pw_encrypt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,951 DEBUG PCDerivation$ Expression of path for object occurrence libbb/pw_encrypt.c: (((((((((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")) || ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))) || ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))) || ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))) || ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))) || ((CONFIG_FEATURE_HTTPD_AUTH_MD5 == "y") || (CONFIG_FEATURE_HTTPD_AUTH_MD5 == "m")))
2012-01-10 11:58:36,951 DEBUG PCDerivation$ Trying to find path for: [Object: obscure]
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> libbb/obscure.c, generated -> false, objectFile -> obscure, listName -> lib)
2012-01-10 11:58:36,951 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> libbb/obscure.c, generated -> false, objectFile -> obscure, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,951 DEBUG PCDerivation$ Expression of path for object occurrence libbb/obscure.c: ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))
2012-01-10 11:58:36,951 DEBUG PCDerivation$ Trying to find path for: [Object: correct_password]
2012-01-10 11:58:36,951 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))), sourceFile -> libbb/correct_password.c, generated -> false, objectFile -> correct_password, listName -> lib)
2012-01-10 11:58:36,951 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))), sourceFile -> libbb/correct_password.c, generated -> false, objectFile -> correct_password, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,952 DEBUG PCDerivation$ Expression of path for object occurrence libbb/correct_password.c: ((((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")) || ((CONFIG_SU == "y") || (CONFIG_SU == "m"))) || ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")))
2012-01-10 11:58:36,952 DEBUG PCDerivation$ Trying to find path for: [Object: find_mount_point]
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))), sourceFile -> libbb/find_mount_point.c, generated -> false, objectFile -> find_mount_point, listName -> lib)
2012-01-10 11:58:36,952 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))), sourceFile -> libbb/find_mount_point.c, generated -> false, objectFile -> find_mount_point, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,952 DEBUG PCDerivation$ Expression of path for object occurrence libbb/find_mount_point.c: (((((((CONFIG_DF == "y") || (CONFIG_DF == "m")) || ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))) || ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))) || ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))) || ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))) || ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")))
2012-01-10 11:58:36,952 DEBUG PCDerivation$ Trying to find path for: [Object: rtc]
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))), sourceFile -> libbb/rtc.c, generated -> false, objectFile -> rtc, listName -> lib)
2012-01-10 11:58:36,952 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))), sourceFile -> libbb/rtc.c, generated -> false, objectFile -> rtc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,952 DEBUG PCDerivation$ Expression of path for object occurrence libbb/rtc.c: (((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")) || ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")))
2012-01-10 11:58:36,952 DEBUG PCDerivation$ Trying to find path for: [Object: get_cpu_count]
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))), sourceFile -> libbb/get_cpu_count.c, generated -> false, objectFile -> get_cpu_count, listName -> lib)
2012-01-10 11:58:36,952 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))), sourceFile -> libbb/get_cpu_count.c, generated -> false, objectFile -> get_cpu_count, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,952 DEBUG PCDerivation$ Expression of path for object occurrence libbb/get_cpu_count.c: ((((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")) || ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))) || ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")))
2012-01-10 11:58:36,952 DEBUG PCDerivation$ Trying to find path for: [Object: inet_cksum]
2012-01-10 11:58:36,952 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> libbb/inet_cksum.c, generated -> false, objectFile -> inet_cksum, listName -> lib)
2012-01-10 11:58:36,955 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> libbb/inet_cksum.c, generated -> false, objectFile -> inet_cksum, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,955 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,955 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,955 DEBUG PCDerivation$ Expression of path for object occurrence libbb/inet_cksum.c: ((((((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))) || ((CONFIG_TRACEROUTE6 == "y") || (CONFIG_TRACEROUTE6 == "m"))) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:58:36,955 DEBUG PCDerivation$ Trying to find path for: [Object: xregcomp]
2012-01-10 11:58:36,955 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m"))), sourceFile -> libbb/xregcomp.c, generated -> false, objectFile -> xregcomp, listName -> lib)
2012-01-10 11:58:36,955 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m"))), sourceFile -> libbb/xregcomp.c, generated -> false, objectFile -> xregcomp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,955 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libbb/Kbuild)
2012-01-10 11:58:36,955 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,955 DEBUG PCDerivation$ Expression of path for object occurrence libbb/xregcomp.c: (((((((((((CONFIG_AWK == "y") || (CONFIG_AWK == "m")) || ((CONFIG_SED == "y") || (CONFIG_SED == "m"))) || ((CONFIG_GREP == "y") || (CONFIG_GREP == "m"))) || ((CONFIG_EXPR == "y") || (CONFIG_EXPR == "m"))) || ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))) || ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))) || ((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m"))) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))) || ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))) || ((CONFIG_FEATURE_FIND_REGEX == "y") || (CONFIG_FEATURE_FIND_REGEX == "m")))
2012-01-10 11:58:36,955 DEBUG PCDerivation$ Trying to find path for: [Object: uidgid_get]
2012-01-10 11:58:36,955 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libpwdgrp/uidgid_get.c, builtAs -> y, generated -> false, objectFile -> uidgid_get, listName -> lib)
2012-01-10 11:58:36,955 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> [TRUE], sourceFile -> libpwdgrp/uidgid_get.c, builtAs -> y, generated -> false, objectFile -> uidgid_get, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:58:36,955 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:58:36,955 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,955 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Expression of path for object occurrence libpwdgrp/uidgid_get.c: [TRUE]
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Trying to find path for: [Object: pwd_grp]
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m")), sourceFile -> libpwdgrp/pwd_grp.c, generated -> false, objectFile -> pwd_grp, listName -> lib)
2012-01-10 11:58:36,956 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m")), sourceFile -> libpwdgrp/pwd_grp.c, generated -> false, objectFile -> pwd_grp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> libpwdgrp/Kbuild)
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Expression of path for object occurrence libpwdgrp/pwd_grp.c: ((CONFIG_USE_BB_PWD_GRP == "y") || (CONFIG_USE_BB_PWD_GRP == "m"))
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Trying to find path for: [Object: add-remove-shell]
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m"))), sourceFile -> loginutils/add-remove-shell.c, generated -> false, objectFile -> add-remove-shell, listName -> lib)
2012-01-10 11:58:36,956 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m"))), sourceFile -> loginutils/add-remove-shell.c, generated -> false, objectFile -> add-remove-shell, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,956 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/add-remove-shell.c: (((CONFIG_ADD_SHELL == "y") || (CONFIG_ADD_SHELL == "m")) || ((CONFIG_REMOVE_SHELL == "y") || (CONFIG_REMOVE_SHELL == "m")))
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Trying to find path for: [Object: addgroup]
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")), sourceFile -> loginutils/addgroup.c, generated -> false, objectFile -> addgroup, listName -> lib)
2012-01-10 11:58:36,956 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m")), sourceFile -> loginutils/addgroup.c, generated -> false, objectFile -> addgroup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/addgroup.c: ((CONFIG_ADDGROUP == "y") || (CONFIG_ADDGROUP == "m"))
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Trying to find path for: [Object: adduser]
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m")), sourceFile -> loginutils/adduser.c, generated -> false, objectFile -> adduser, listName -> lib)
2012-01-10 11:58:36,956 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m")), sourceFile -> loginutils/adduser.c, generated -> false, objectFile -> adduser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/adduser.c: ((CONFIG_ADDUSER == "y") || (CONFIG_ADDUSER == "m"))
2012-01-10 11:58:36,956 DEBUG PCDerivation$ Trying to find path for: [Object: cryptpw]
2012-01-10 11:58:36,956 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m")), sourceFile -> loginutils/cryptpw.c, generated -> false, objectFile -> cryptpw, listName -> lib)
2012-01-10 11:58:36,957 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m")), sourceFile -> loginutils/cryptpw.c, generated -> false, objectFile -> cryptpw, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/cryptpw.c: ((CONFIG_CRYPTPW == "y") || (CONFIG_CRYPTPW == "m"))
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Trying to find path for: [Object: chpasswd]
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")), sourceFile -> loginutils/chpasswd.c, generated -> false, objectFile -> chpasswd, listName -> lib)
2012-01-10 11:58:36,957 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m")), sourceFile -> loginutils/chpasswd.c, generated -> false, objectFile -> chpasswd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/chpasswd.c: ((CONFIG_CHPASSWD == "y") || (CONFIG_CHPASSWD == "m"))
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Trying to find path for: [Object: getty]
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m")), sourceFile -> loginutils/getty.c, generated -> false, objectFile -> getty, listName -> lib)
2012-01-10 11:58:36,957 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m")), sourceFile -> loginutils/getty.c, generated -> false, objectFile -> getty, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/getty.c: ((CONFIG_GETTY == "y") || (CONFIG_GETTY == "m"))
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Trying to find path for: [Object: login]
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")), sourceFile -> loginutils/login.c, generated -> false, objectFile -> login, listName -> lib)
2012-01-10 11:58:36,957 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m")), sourceFile -> loginutils/login.c, generated -> false, objectFile -> login, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/login.c: ((CONFIG_LOGIN == "y") || (CONFIG_LOGIN == "m"))
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Trying to find path for: [Object: passwd]
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> loginutils/passwd.c, generated -> false, objectFile -> passwd, listName -> lib)
2012-01-10 11:58:36,957 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m")), sourceFile -> loginutils/passwd.c, generated -> false, objectFile -> passwd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,957 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/passwd.c: ((CONFIG_PASSWD == "y") || (CONFIG_PASSWD == "m"))
2012-01-10 11:58:36,957 DEBUG PCDerivation$ Trying to find path for: [Object: su]
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SU == "y") || (CONFIG_SU == "m")), sourceFile -> loginutils/su.c, generated -> false, objectFile -> su, listName -> lib)
2012-01-10 11:58:36,958 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SU == "y") || (CONFIG_SU == "m")), sourceFile -> loginutils/su.c, generated -> false, objectFile -> su, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,958 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/su.c: ((CONFIG_SU == "y") || (CONFIG_SU == "m"))
2012-01-10 11:58:36,958 DEBUG PCDerivation$ Trying to find path for: [Object: sulogin]
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m")), sourceFile -> loginutils/sulogin.c, generated -> false, objectFile -> sulogin, listName -> lib)
2012-01-10 11:58:36,958 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m")), sourceFile -> loginutils/sulogin.c, generated -> false, objectFile -> sulogin, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,958 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/sulogin.c: ((CONFIG_SULOGIN == "y") || (CONFIG_SULOGIN == "m"))
2012-01-10 11:58:36,958 DEBUG PCDerivation$ Trying to find path for: [Object: vlock]
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")), sourceFile -> loginutils/vlock.c, generated -> false, objectFile -> vlock, listName -> lib)
2012-01-10 11:58:36,958 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m")), sourceFile -> loginutils/vlock.c, generated -> false, objectFile -> vlock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,958 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/vlock.c: ((CONFIG_VLOCK == "y") || (CONFIG_VLOCK == "m"))
2012-01-10 11:58:36,958 DEBUG PCDerivation$ Trying to find path for: [Object: deluser]
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))), sourceFile -> loginutils/deluser.c, generated -> false, objectFile -> deluser, listName -> lib)
2012-01-10 11:58:36,958 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m"))), sourceFile -> loginutils/deluser.c, generated -> false, objectFile -> deluser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> loginutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,958 DEBUG PCDerivation$ Expression of path for object occurrence loginutils/deluser.c: (((CONFIG_DELUSER == "y") || (CONFIG_DELUSER == "m")) || ((CONFIG_DELGROUP == "y") || (CONFIG_DELGROUP == "m")))
2012-01-10 11:58:36,958 DEBUG PCDerivation$ Trying to find path for: [Object: makemime]
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")), sourceFile -> mailutils/makemime.c, generated -> false, objectFile -> makemime, listName -> lib)
2012-01-10 11:58:36,958 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")), sourceFile -> mailutils/makemime.c, generated -> false, objectFile -> makemime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,958 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,958 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/makemime.c: ((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m"))
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Trying to find path for: [Object: mail]
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))), sourceFile -> mailutils/mail.c, generated -> false, objectFile -> mail, listName -> lib)
2012-01-10 11:58:36,959 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))), sourceFile -> mailutils/mail.c, generated -> false, objectFile -> mail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/mail.c: (((((CONFIG_MAKEMIME == "y") || (CONFIG_MAKEMIME == "m")) || ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))) || ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))) || ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")))
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Trying to find path for: [Object: popmaildir]
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m")), sourceFile -> mailutils/popmaildir.c, generated -> false, objectFile -> popmaildir, listName -> lib)
2012-01-10 11:58:36,959 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m")), sourceFile -> mailutils/popmaildir.c, generated -> false, objectFile -> popmaildir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/popmaildir.c: ((CONFIG_POPMAILDIR == "y") || (CONFIG_POPMAILDIR == "m"))
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Trying to find path for: [Object: reformime]
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m")), sourceFile -> mailutils/reformime.c, generated -> false, objectFile -> reformime, listName -> lib)
2012-01-10 11:58:36,959 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m")), sourceFile -> mailutils/reformime.c, generated -> false, objectFile -> reformime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/reformime.c: ((CONFIG_REFORMIME == "y") || (CONFIG_REFORMIME == "m"))
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Trying to find path for: [Object: sendmail]
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")), sourceFile -> mailutils/sendmail.c, generated -> false, objectFile -> sendmail, listName -> lib)
2012-01-10 11:58:36,959 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m")), sourceFile -> mailutils/sendmail.c, generated -> false, objectFile -> sendmail, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> mailutils/Kbuild)
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Expression of path for object occurrence mailutils/sendmail.c: ((CONFIG_SENDMAIL == "y") || (CONFIG_SENDMAIL == "m"))
2012-01-10 11:58:36,959 DEBUG PCDerivation$ Trying to find path for: [Object: conspy]
2012-01-10 11:58:36,959 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m")), sourceFile -> miscutils/conspy.c, generated -> false, objectFile -> conspy, listName -> lib)
2012-01-10 11:58:36,959 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m")), sourceFile -> miscutils/conspy.c, generated -> false, objectFile -> conspy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,960 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/conspy.c: ((CONFIG_CONSPY == "y") || (CONFIG_CONSPY == "m"))
2012-01-10 11:58:36,960 DEBUG PCDerivation$ Trying to find path for: [Object: nandwrite]
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m"))), sourceFile -> miscutils/nandwrite.c, generated -> false, objectFile -> nandwrite, listName -> lib)
2012-01-10 11:58:36,960 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m"))), sourceFile -> miscutils/nandwrite.c, generated -> false, objectFile -> nandwrite, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,960 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/nandwrite.c: (((CONFIG_NANDWRITE == "y") || (CONFIG_NANDWRITE == "m")) || ((CONFIG_NANDDUMP == "y") || (CONFIG_NANDDUMP == "m")))
2012-01-10 11:58:36,960 DEBUG PCDerivation$ Trying to find path for: [Object: setserial]
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m")), sourceFile -> miscutils/setserial.c, generated -> false, objectFile -> setserial, listName -> lib)
2012-01-10 11:58:36,960 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m")), sourceFile -> miscutils/setserial.c, generated -> false, objectFile -> setserial, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,960 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/setserial.c: ((CONFIG_SETSERIAL == "y") || (CONFIG_SETSERIAL == "m"))
2012-01-10 11:58:36,960 DEBUG PCDerivation$ Trying to find path for: [Object: ubi_tools]
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m"))), sourceFile -> miscutils/ubi_tools.c, generated -> false, objectFile -> ubi_tools, listName -> lib)
2012-01-10 11:58:36,960 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m"))), sourceFile -> miscutils/ubi_tools.c, generated -> false, objectFile -> ubi_tools, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,960 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ubi_tools.c: (((((((CONFIG_UBIATTACH == "y") || (CONFIG_UBIATTACH == "m")) || ((CONFIG_UBIDETACH == "y") || (CONFIG_UBIDETACH == "m"))) || ((CONFIG_UBIMKVOL == "y") || (CONFIG_UBIMKVOL == "m"))) || ((CONFIG_UBIRMVOL == "y") || (CONFIG_UBIRMVOL == "m"))) || ((CONFIG_UBIRSVOL == "y") || (CONFIG_UBIRSVOL == "m"))) || ((CONFIG_UBIUPDATEVOL == "y") || (CONFIG_UBIUPDATEVOL == "m")))
2012-01-10 11:58:36,960 DEBUG PCDerivation$ Trying to find path for: [Object: adjtimex]
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m")), sourceFile -> miscutils/adjtimex.c, generated -> false, objectFile -> adjtimex, listName -> lib)
2012-01-10 11:58:36,960 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m")), sourceFile -> miscutils/adjtimex.c, generated -> false, objectFile -> adjtimex, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,960 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/adjtimex.c: ((CONFIG_ADJTIMEX == "y") || (CONFIG_ADJTIMEX == "m"))
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Trying to find path for: [Object: bbconfig]
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m")), sourceFile -> miscutils/bbconfig.c, generated -> false, objectFile -> bbconfig, listName -> lib)
2012-01-10 11:58:36,961 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m")), sourceFile -> miscutils/bbconfig.c, generated -> false, objectFile -> bbconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/bbconfig.c: ((CONFIG_BBCONFIG == "y") || (CONFIG_BBCONFIG == "m"))
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Trying to find path for: [Object: beep]
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m")), sourceFile -> miscutils/beep.c, generated -> false, objectFile -> beep, listName -> lib)
2012-01-10 11:58:36,961 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m")), sourceFile -> miscutils/beep.c, generated -> false, objectFile -> beep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/beep.c: ((CONFIG_BEEP == "y") || (CONFIG_BEEP == "m"))
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Trying to find path for: [Object: chat]
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m")), sourceFile -> miscutils/chat.c, generated -> false, objectFile -> chat, listName -> lib)
2012-01-10 11:58:36,961 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m")), sourceFile -> miscutils/chat.c, generated -> false, objectFile -> chat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/chat.c: ((CONFIG_CHAT == "y") || (CONFIG_CHAT == "m"))
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Trying to find path for: [Object: chrt]
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m")), sourceFile -> miscutils/chrt.c, generated -> false, objectFile -> chrt, listName -> lib)
2012-01-10 11:58:36,961 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m")), sourceFile -> miscutils/chrt.c, generated -> false, objectFile -> chrt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/chrt.c: ((CONFIG_CHRT == "y") || (CONFIG_CHRT == "m"))
2012-01-10 11:58:36,961 DEBUG PCDerivation$ Trying to find path for: [Object: crond]
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CROND == "y") || (CONFIG_CROND == "m")), sourceFile -> miscutils/crond.c, generated -> false, objectFile -> crond, listName -> lib)
2012-01-10 11:58:36,961 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CROND == "y") || (CONFIG_CROND == "m")), sourceFile -> miscutils/crond.c, generated -> false, objectFile -> crond, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,961 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/crond.c: ((CONFIG_CROND == "y") || (CONFIG_CROND == "m"))
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Trying to find path for: [Object: crontab]
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")), sourceFile -> miscutils/crontab.c, generated -> false, objectFile -> crontab, listName -> lib)
2012-01-10 11:58:36,962 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m")), sourceFile -> miscutils/crontab.c, generated -> false, objectFile -> crontab, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/crontab.c: ((CONFIG_CRONTAB == "y") || (CONFIG_CRONTAB == "m"))
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Trying to find path for: [Object: dc]
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DC == "y") || (CONFIG_DC == "m")), sourceFile -> miscutils/dc.c, generated -> false, objectFile -> dc, listName -> lib)
2012-01-10 11:58:36,962 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DC == "y") || (CONFIG_DC == "m")), sourceFile -> miscutils/dc.c, generated -> false, objectFile -> dc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/dc.c: ((CONFIG_DC == "y") || (CONFIG_DC == "m"))
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Trying to find path for: [Object: devfsd]
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m")), sourceFile -> miscutils/devfsd.c, generated -> false, objectFile -> devfsd, listName -> lib)
2012-01-10 11:58:36,962 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m")), sourceFile -> miscutils/devfsd.c, generated -> false, objectFile -> devfsd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/devfsd.c: ((CONFIG_DEVFSD == "y") || (CONFIG_DEVFSD == "m"))
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Trying to find path for: [Object: devmem]
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m")), sourceFile -> miscutils/devmem.c, generated -> false, objectFile -> devmem, listName -> lib)
2012-01-10 11:58:36,962 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m")), sourceFile -> miscutils/devmem.c, generated -> false, objectFile -> devmem, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/devmem.c: ((CONFIG_DEVMEM == "y") || (CONFIG_DEVMEM == "m"))
2012-01-10 11:58:36,962 DEBUG PCDerivation$ Trying to find path for: [Object: eject]
2012-01-10 11:58:36,962 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m")), sourceFile -> miscutils/eject.c, generated -> false, objectFile -> eject, listName -> lib)
2012-01-10 11:58:36,963 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m")), sourceFile -> miscutils/eject.c, generated -> false, objectFile -> eject, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,963 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/eject.c: ((CONFIG_EJECT == "y") || (CONFIG_EJECT == "m"))
2012-01-10 11:58:36,963 DEBUG PCDerivation$ Trying to find path for: [Object: fbsplash]
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m")), sourceFile -> miscutils/fbsplash.c, generated -> false, objectFile -> fbsplash, listName -> lib)
2012-01-10 11:58:36,963 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m")), sourceFile -> miscutils/fbsplash.c, generated -> false, objectFile -> fbsplash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,963 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/fbsplash.c: ((CONFIG_FBSPLASH == "y") || (CONFIG_FBSPLASH == "m"))
2012-01-10 11:58:36,963 DEBUG PCDerivation$ Trying to find path for: [Object: flashcp]
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m")), sourceFile -> miscutils/flashcp.c, generated -> false, objectFile -> flashcp, listName -> lib)
2012-01-10 11:58:36,963 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m")), sourceFile -> miscutils/flashcp.c, generated -> false, objectFile -> flashcp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,963 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flashcp.c: ((CONFIG_FLASHCP == "y") || (CONFIG_FLASHCP == "m"))
2012-01-10 11:58:36,963 DEBUG PCDerivation$ Trying to find path for: [Object: flash_eraseall]
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m")), sourceFile -> miscutils/flash_eraseall.c, generated -> false, objectFile -> flash_eraseall, listName -> lib)
2012-01-10 11:58:36,963 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m")), sourceFile -> miscutils/flash_eraseall.c, generated -> false, objectFile -> flash_eraseall, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,963 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flash_eraseall.c: ((CONFIG_FLASH_ERASEALL == "y") || (CONFIG_FLASH_ERASEALL == "m"))
2012-01-10 11:58:36,963 DEBUG PCDerivation$ Trying to find path for: [Object: flash_lock_unlock]
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m"))), sourceFile -> miscutils/flash_lock_unlock.c, generated -> false, objectFile -> flash_lock_unlock, listName -> lib)
2012-01-10 11:58:36,963 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m"))), sourceFile -> miscutils/flash_lock_unlock.c, generated -> false, objectFile -> flash_lock_unlock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,963 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,963 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/flash_lock_unlock.c: (((CONFIG_FLASH_LOCK == "y") || (CONFIG_FLASH_LOCK == "m")) || ((CONFIG_FLASH_UNLOCK == "y") || (CONFIG_FLASH_UNLOCK == "m")))
2012-01-10 11:58:36,964 DEBUG PCDerivation$ Trying to find path for: [Object: ionice]
2012-01-10 11:58:36,964 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m")), sourceFile -> miscutils/ionice.c, generated -> false, objectFile -> ionice, listName -> lib)
2012-01-10 11:58:36,964 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m")), sourceFile -> miscutils/ionice.c, generated -> false, objectFile -> ionice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,964 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,964 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,964 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ionice.c: ((CONFIG_IONICE == "y") || (CONFIG_IONICE == "m"))
2012-01-10 11:58:36,964 DEBUG PCDerivation$ Trying to find path for: [Object: hdparm]
2012-01-10 11:58:36,964 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m")), sourceFile -> miscutils/hdparm.c, generated -> false, objectFile -> hdparm, listName -> lib)
2012-01-10 11:58:36,964 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m")), sourceFile -> miscutils/hdparm.c, generated -> false, objectFile -> hdparm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,964 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,964 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,964 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/hdparm.c: ((CONFIG_HDPARM == "y") || (CONFIG_HDPARM == "m"))
2012-01-10 11:58:36,964 DEBUG PCDerivation$ Trying to find path for: [Object: inotifyd]
2012-01-10 11:58:36,964 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m")), sourceFile -> miscutils/inotifyd.c, generated -> false, objectFile -> inotifyd, listName -> lib)
2012-01-10 11:58:36,964 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m")), sourceFile -> miscutils/inotifyd.c, generated -> false, objectFile -> inotifyd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,964 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,964 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,964 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/inotifyd.c: ((CONFIG_INOTIFYD == "y") || (CONFIG_INOTIFYD == "m"))
2012-01-10 11:58:36,964 DEBUG PCDerivation$ Trying to find path for: [Object: last]
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m")), sourceFile -> miscutils/last.c, generated -> false, objectFile -> last, listName -> lib)
2012-01-10 11:58:36,965 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m")), sourceFile -> miscutils/last.c, generated -> false, objectFile -> last, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,965 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/last.c: ((CONFIG_FEATURE_LAST_SMALL == "y") || (CONFIG_FEATURE_LAST_SMALL == "m"))
2012-01-10 11:58:36,965 DEBUG PCDerivation$ Trying to find path for: [Object: last_fancy]
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m")), sourceFile -> miscutils/last_fancy.c, generated -> false, objectFile -> last_fancy, listName -> lib)
2012-01-10 11:58:36,965 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m")), sourceFile -> miscutils/last_fancy.c, generated -> false, objectFile -> last_fancy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,965 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/last_fancy.c: ((CONFIG_FEATURE_LAST_FANCY == "y") || (CONFIG_FEATURE_LAST_FANCY == "m"))
2012-01-10 11:58:36,965 DEBUG PCDerivation$ Trying to find path for: [Object: less]
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LESS == "y") || (CONFIG_LESS == "m")), sourceFile -> miscutils/less.c, generated -> false, objectFile -> less, listName -> lib)
2012-01-10 11:58:36,965 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LESS == "y") || (CONFIG_LESS == "m")), sourceFile -> miscutils/less.c, generated -> false, objectFile -> less, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,965 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/less.c: ((CONFIG_LESS == "y") || (CONFIG_LESS == "m"))
2012-01-10 11:58:36,965 DEBUG PCDerivation$ Trying to find path for: [Object: makedevs]
2012-01-10 11:58:36,965 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m")), sourceFile -> miscutils/makedevs.c, generated -> false, objectFile -> makedevs, listName -> lib)
2012-01-10 11:58:36,965 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m")), sourceFile -> miscutils/makedevs.c, generated -> false, objectFile -> makedevs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,966 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/makedevs.c: ((CONFIG_MAKEDEVS == "y") || (CONFIG_MAKEDEVS == "m"))
2012-01-10 11:58:36,966 DEBUG PCDerivation$ Trying to find path for: [Object: man]
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAN == "y") || (CONFIG_MAN == "m")), sourceFile -> miscutils/man.c, generated -> false, objectFile -> man, listName -> lib)
2012-01-10 11:58:36,966 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MAN == "y") || (CONFIG_MAN == "m")), sourceFile -> miscutils/man.c, generated -> false, objectFile -> man, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,966 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/man.c: ((CONFIG_MAN == "y") || (CONFIG_MAN == "m"))
2012-01-10 11:58:36,966 DEBUG PCDerivation$ Trying to find path for: [Object: microcom]
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m")), sourceFile -> miscutils/microcom.c, generated -> false, objectFile -> microcom, listName -> lib)
2012-01-10 11:58:36,966 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m")), sourceFile -> miscutils/microcom.c, generated -> false, objectFile -> microcom, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,966 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/microcom.c: ((CONFIG_MICROCOM == "y") || (CONFIG_MICROCOM == "m"))
2012-01-10 11:58:36,966 DEBUG PCDerivation$ Trying to find path for: [Object: mountpoint]
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m")), sourceFile -> miscutils/mountpoint.c, generated -> false, objectFile -> mountpoint, listName -> lib)
2012-01-10 11:58:36,966 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m")), sourceFile -> miscutils/mountpoint.c, generated -> false, objectFile -> mountpoint, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,966 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/mountpoint.c: ((CONFIG_MOUNTPOINT == "y") || (CONFIG_MOUNTPOINT == "m"))
2012-01-10 11:58:36,966 DEBUG PCDerivation$ Trying to find path for: [Object: mt]
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MT == "y") || (CONFIG_MT == "m")), sourceFile -> miscutils/mt.c, generated -> false, objectFile -> mt, listName -> lib)
2012-01-10 11:58:36,966 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MT == "y") || (CONFIG_MT == "m")), sourceFile -> miscutils/mt.c, generated -> false, objectFile -> mt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,966 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/mt.c: ((CONFIG_MT == "y") || (CONFIG_MT == "m"))
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Trying to find path for: [Object: raidautorun]
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m")), sourceFile -> miscutils/raidautorun.c, generated -> false, objectFile -> raidautorun, listName -> lib)
2012-01-10 11:58:36,967 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m")), sourceFile -> miscutils/raidautorun.c, generated -> false, objectFile -> raidautorun, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/raidautorun.c: ((CONFIG_RAIDAUTORUN == "y") || (CONFIG_RAIDAUTORUN == "m"))
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Trying to find path for: [Object: readahead]
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m")), sourceFile -> miscutils/readahead.c, generated -> false, objectFile -> readahead, listName -> lib)
2012-01-10 11:58:36,967 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m")), sourceFile -> miscutils/readahead.c, generated -> false, objectFile -> readahead, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/readahead.c: ((CONFIG_READAHEAD == "y") || (CONFIG_READAHEAD == "m"))
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Trying to find path for: [Object: rfkill]
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m")), sourceFile -> miscutils/rfkill.c, generated -> false, objectFile -> rfkill, listName -> lib)
2012-01-10 11:58:36,967 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m")), sourceFile -> miscutils/rfkill.c, generated -> false, objectFile -> rfkill, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/rfkill.c: ((CONFIG_RFKILL == "y") || (CONFIG_RFKILL == "m"))
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Trying to find path for: [Object: runlevel]
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m")), sourceFile -> miscutils/runlevel.c, generated -> false, objectFile -> runlevel, listName -> lib)
2012-01-10 11:58:36,967 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m")), sourceFile -> miscutils/runlevel.c, generated -> false, objectFile -> runlevel, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/runlevel.c: ((CONFIG_RUNLEVEL == "y") || (CONFIG_RUNLEVEL == "m"))
2012-01-10 11:58:36,967 DEBUG PCDerivation$ Trying to find path for: [Object: rx]
2012-01-10 11:58:36,967 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RX == "y") || (CONFIG_RX == "m")), sourceFile -> miscutils/rx.c, generated -> false, objectFile -> rx, listName -> lib)
2012-01-10 11:58:36,967 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RX == "y") || (CONFIG_RX == "m")), sourceFile -> miscutils/rx.c, generated -> false, objectFile -> rx, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,968 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/rx.c: ((CONFIG_RX == "y") || (CONFIG_RX == "m"))
2012-01-10 11:58:36,968 DEBUG PCDerivation$ Trying to find path for: [Object: setsid]
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m")), sourceFile -> miscutils/setsid.c, generated -> false, objectFile -> setsid, listName -> lib)
2012-01-10 11:58:36,968 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m")), sourceFile -> miscutils/setsid.c, generated -> false, objectFile -> setsid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,968 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/setsid.c: ((CONFIG_SETSID == "y") || (CONFIG_SETSID == "m"))
2012-01-10 11:58:36,968 DEBUG PCDerivation$ Trying to find path for: [Object: strings]
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m")), sourceFile -> miscutils/strings.c, generated -> false, objectFile -> strings, listName -> lib)
2012-01-10 11:58:36,968 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m")), sourceFile -> miscutils/strings.c, generated -> false, objectFile -> strings, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,968 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/strings.c: ((CONFIG_STRINGS == "y") || (CONFIG_STRINGS == "m"))
2012-01-10 11:58:36,968 DEBUG PCDerivation$ Trying to find path for: [Object: taskset]
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m")), sourceFile -> miscutils/taskset.c, generated -> false, objectFile -> taskset, listName -> lib)
2012-01-10 11:58:36,968 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m")), sourceFile -> miscutils/taskset.c, generated -> false, objectFile -> taskset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,968 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/taskset.c: ((CONFIG_TASKSET == "y") || (CONFIG_TASKSET == "m"))
2012-01-10 11:58:36,968 DEBUG PCDerivation$ Trying to find path for: [Object: time]
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIME == "y") || (CONFIG_TIME == "m")), sourceFile -> miscutils/time.c, generated -> false, objectFile -> time, listName -> lib)
2012-01-10 11:58:36,968 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIME == "y") || (CONFIG_TIME == "m")), sourceFile -> miscutils/time.c, generated -> false, objectFile -> time, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,968 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/time.c: ((CONFIG_TIME == "y") || (CONFIG_TIME == "m"))
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Trying to find path for: [Object: timeout]
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m")), sourceFile -> miscutils/timeout.c, generated -> false, objectFile -> timeout, listName -> lib)
2012-01-10 11:58:36,969 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m")), sourceFile -> miscutils/timeout.c, generated -> false, objectFile -> timeout, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/timeout.c: ((CONFIG_TIMEOUT == "y") || (CONFIG_TIMEOUT == "m"))
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Trying to find path for: [Object: ttysize]
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m")), sourceFile -> miscutils/ttysize.c, generated -> false, objectFile -> ttysize, listName -> lib)
2012-01-10 11:58:36,969 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m")), sourceFile -> miscutils/ttysize.c, generated -> false, objectFile -> ttysize, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/ttysize.c: ((CONFIG_TTYSIZE == "y") || (CONFIG_TTYSIZE == "m"))
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Trying to find path for: [Object: volname]
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m")), sourceFile -> miscutils/volname.c, generated -> false, objectFile -> volname, listName -> lib)
2012-01-10 11:58:36,969 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m")), sourceFile -> miscutils/volname.c, generated -> false, objectFile -> volname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/volname.c: ((CONFIG_VOLNAME == "y") || (CONFIG_VOLNAME == "m"))
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Trying to find path for: [Object: wall]
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WALL == "y") || (CONFIG_WALL == "m")), sourceFile -> miscutils/wall.c, generated -> false, objectFile -> wall, listName -> lib)
2012-01-10 11:58:36,969 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WALL == "y") || (CONFIG_WALL == "m")), sourceFile -> miscutils/wall.c, generated -> false, objectFile -> wall, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/wall.c: ((CONFIG_WALL == "y") || (CONFIG_WALL == "m"))
2012-01-10 11:58:36,969 DEBUG PCDerivation$ Trying to find path for: [Object: watchdog]
2012-01-10 11:58:36,969 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m")), sourceFile -> miscutils/watchdog.c, generated -> false, objectFile -> watchdog, listName -> lib)
2012-01-10 11:58:36,970 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m")), sourceFile -> miscutils/watchdog.c, generated -> false, objectFile -> watchdog, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> miscutils/Kbuild)
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,970 DEBUG PCDerivation$ Expression of path for object occurrence miscutils/watchdog.c: ((CONFIG_WATCHDOG == "y") || (CONFIG_WATCHDOG == "m"))
2012-01-10 11:58:36,970 DEBUG PCDerivation$ Trying to find path for: [Object: modinfo]
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")), sourceFile -> modutils/modinfo.c, generated -> false, objectFile -> modinfo, listName -> lib)
2012-01-10 11:58:36,970 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")), sourceFile -> modutils/modinfo.c, generated -> false, objectFile -> modinfo, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,970 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,970 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modinfo.c: ((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m"))
2012-01-10 11:58:36,970 DEBUG PCDerivation$ Trying to find path for: [Object: modutils]
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))), sourceFile -> modutils/modutils.c, generated -> false, objectFile -> modutils, listName -> lib)
2012-01-10 11:58:36,970 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))), sourceFile -> modutils/modutils.c, generated -> false, objectFile -> modutils, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,970 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modutils.c: (((((((CONFIG_MODINFO == "y") || (CONFIG_MODINFO == "m")) || ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))) || ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))) || ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))) || ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))) || ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")))
2012-01-10 11:58:36,970 DEBUG PCDerivation$ Trying to find path for: [Object: modprobe-small]
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m")), sourceFile -> modutils/modprobe-small.c, generated -> false, objectFile -> modprobe-small, listName -> lib)
2012-01-10 11:58:36,970 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m")), sourceFile -> modutils/modprobe-small.c, generated -> false, objectFile -> modprobe-small, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,970 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modprobe-small.c: ((CONFIG_MODPROBE_SMALL == "y") || (CONFIG_MODPROBE_SMALL == "m"))
2012-01-10 11:58:36,970 DEBUG PCDerivation$ Trying to find path for: [Object: depmod]
2012-01-10 11:58:36,970 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m")), sourceFile -> modutils/depmod.c, generated -> false, objectFile -> depmod, listName -> lib)
2012-01-10 11:58:36,970 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m")), sourceFile -> modutils/depmod.c, generated -> false, objectFile -> depmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Expression of path for object occurrence modutils/depmod.c: ((CONFIG_DEPMOD == "y") || (CONFIG_DEPMOD == "m"))
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Trying to find path for: [Object: insmod]
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m")), sourceFile -> modutils/insmod.c, generated -> false, objectFile -> insmod, listName -> lib)
2012-01-10 11:58:36,971 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m")), sourceFile -> modutils/insmod.c, generated -> false, objectFile -> insmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Expression of path for object occurrence modutils/insmod.c: ((CONFIG_INSMOD == "y") || (CONFIG_INSMOD == "m"))
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Trying to find path for: [Object: lsmod]
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m")), sourceFile -> modutils/lsmod.c, generated -> false, objectFile -> lsmod, listName -> lib)
2012-01-10 11:58:36,971 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m")), sourceFile -> modutils/lsmod.c, generated -> false, objectFile -> lsmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Expression of path for object occurrence modutils/lsmod.c: ((CONFIG_LSMOD == "y") || (CONFIG_LSMOD == "m"))
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Trying to find path for: [Object: modprobe]
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m")), sourceFile -> modutils/modprobe.c, generated -> false, objectFile -> modprobe, listName -> lib)
2012-01-10 11:58:36,971 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m")), sourceFile -> modutils/modprobe.c, generated -> false, objectFile -> modprobe, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modprobe.c: ((CONFIG_MODPROBE == "y") || (CONFIG_MODPROBE == "m"))
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Trying to find path for: [Object: rmmod]
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")), sourceFile -> modutils/rmmod.c, generated -> false, objectFile -> rmmod, listName -> lib)
2012-01-10 11:58:36,971 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m")), sourceFile -> modutils/rmmod.c, generated -> false, objectFile -> rmmod, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Expression of path for object occurrence modutils/rmmod.c: ((CONFIG_RMMOD == "y") || (CONFIG_RMMOD == "m"))
2012-01-10 11:58:36,971 DEBUG PCDerivation$ Trying to find path for: [Object: modutils-24]
2012-01-10 11:58:36,971 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m")), sourceFile -> modutils/modutils-24.c, generated -> false, objectFile -> modutils-24, listName -> lib)
2012-01-10 11:58:36,972 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m")), sourceFile -> modutils/modutils-24.c, generated -> false, objectFile -> modutils-24, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> modutils/Kbuild)
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,972 DEBUG PCDerivation$ Expression of path for object occurrence modutils/modutils-24.c: ((CONFIG_FEATURE_2_4_MODULES == "y") || (CONFIG_FEATURE_2_4_MODULES == "m"))
2012-01-10 11:58:36,972 DEBUG PCDerivation$ Trying to find path for: [Object: nbd-client]
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m")), sourceFile -> networking/nbd-client.c, generated -> false, objectFile -> nbd-client, listName -> lib)
2012-01-10 11:58:36,972 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m")), sourceFile -> networking/nbd-client.c, generated -> false, objectFile -> nbd-client, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,972 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,972 DEBUG PCDerivation$ Expression of path for object occurrence networking/nbd-client.c: ((CONFIG_NBDCLIENT == "y") || (CONFIG_NBDCLIENT == "m"))
2012-01-10 11:58:36,972 DEBUG PCDerivation$ Trying to find path for: [Object: ping]
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m"))), sourceFile -> networking/ping.c, generated -> false, objectFile -> ping, listName -> lib)
2012-01-10 11:58:36,972 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m"))), sourceFile -> networking/ping.c, generated -> false, objectFile -> ping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,972 DEBUG PCDerivation$ Expression of path for object occurrence networking/ping.c: (((CONFIG_PING == "y") || (CONFIG_PING == "m")) || ((CONFIG_PING6 == "y") || (CONFIG_PING6 == "m")))
2012-01-10 11:58:36,972 DEBUG PCDerivation$ Trying to find path for: [Object: whois]
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m")), sourceFile -> networking/whois.c, generated -> false, objectFile -> whois, listName -> lib)
2012-01-10 11:58:36,972 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m")), sourceFile -> networking/whois.c, generated -> false, objectFile -> whois, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,972 DEBUG PCDerivation$ Expression of path for object occurrence networking/whois.c: ((CONFIG_WHOIS == "y") || (CONFIG_WHOIS == "m"))
2012-01-10 11:58:36,972 DEBUG PCDerivation$ Trying to find path for: [Object: arp]
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARP == "y") || (CONFIG_ARP == "m")), sourceFile -> networking/arp.c, generated -> false, objectFile -> arp, listName -> lib)
2012-01-10 11:58:36,972 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARP == "y") || (CONFIG_ARP == "m")), sourceFile -> networking/arp.c, generated -> false, objectFile -> arp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,972 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Expression of path for object occurrence networking/arp.c: ((CONFIG_ARP == "y") || (CONFIG_ARP == "m"))
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Trying to find path for: [Object: interface]
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))), sourceFile -> networking/interface.c, generated -> false, objectFile -> interface, listName -> lib)
2012-01-10 11:58:36,973 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))), sourceFile -> networking/interface.c, generated -> false, objectFile -> interface, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Expression of path for object occurrence networking/interface.c: ((((CONFIG_ARP == "y") || (CONFIG_ARP == "m")) || ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))) || ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")))
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Trying to find path for: [Object: arping]
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m")), sourceFile -> networking/arping.c, generated -> false, objectFile -> arping, listName -> lib)
2012-01-10 11:58:36,973 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m")), sourceFile -> networking/arping.c, generated -> false, objectFile -> arping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Expression of path for object occurrence networking/arping.c: ((CONFIG_ARPING == "y") || (CONFIG_ARPING == "m"))
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Trying to find path for: [Object: brctl]
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m")), sourceFile -> networking/brctl.c, generated -> false, objectFile -> brctl, listName -> lib)
2012-01-10 11:58:36,973 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m")), sourceFile -> networking/brctl.c, generated -> false, objectFile -> brctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Expression of path for object occurrence networking/brctl.c: ((CONFIG_BRCTL == "y") || (CONFIG_BRCTL == "m"))
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Trying to find path for: [Object: dnsd]
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m")), sourceFile -> networking/dnsd.c, generated -> false, objectFile -> dnsd, listName -> lib)
2012-01-10 11:58:36,973 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m")), sourceFile -> networking/dnsd.c, generated -> false, objectFile -> dnsd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Expression of path for object occurrence networking/dnsd.c: ((CONFIG_DNSD == "y") || (CONFIG_DNSD == "m"))
2012-01-10 11:58:36,973 DEBUG PCDerivation$ Trying to find path for: [Object: ether-wake]
2012-01-10 11:58:36,973 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m")), sourceFile -> networking/ether-wake.c, generated -> false, objectFile -> ether-wake, listName -> lib)
2012-01-10 11:58:36,974 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m")), sourceFile -> networking/ether-wake.c, generated -> false, objectFile -> ether-wake, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,974 DEBUG PCDerivation$ Expression of path for object occurrence networking/ether-wake.c: ((CONFIG_ETHER_WAKE == "y") || (CONFIG_ETHER_WAKE == "m"))
2012-01-10 11:58:36,974 DEBUG PCDerivation$ Trying to find path for: [Object: isrv_identd]
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv_identd.c, generated -> false, objectFile -> isrv_identd, listName -> lib)
2012-01-10 11:58:36,974 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv_identd.c, generated -> false, objectFile -> isrv_identd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,974 DEBUG PCDerivation$ Expression of path for object occurrence networking/isrv_identd.c: ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m"))
2012-01-10 11:58:36,974 DEBUG PCDerivation$ Trying to find path for: [Object: isrv]
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv.c, generated -> false, objectFile -> isrv, listName -> lib)
2012-01-10 11:58:36,974 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m")), sourceFile -> networking/isrv.c, generated -> false, objectFile -> isrv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,974 DEBUG PCDerivation$ Expression of path for object occurrence networking/isrv.c: ((CONFIG_FAKEIDENTD == "y") || (CONFIG_FAKEIDENTD == "m"))
2012-01-10 11:58:36,974 DEBUG PCDerivation$ Trying to find path for: [Object: ftpd]
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")), sourceFile -> networking/ftpd.c, generated -> false, objectFile -> ftpd, listName -> lib)
2012-01-10 11:58:36,974 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m")), sourceFile -> networking/ftpd.c, generated -> false, objectFile -> ftpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,974 DEBUG PCDerivation$ Expression of path for object occurrence networking/ftpd.c: ((CONFIG_FTPD == "y") || (CONFIG_FTPD == "m"))
2012-01-10 11:58:36,974 DEBUG PCDerivation$ Trying to find path for: [Object: ftpgetput]
2012-01-10 11:58:36,974 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m"))), sourceFile -> networking/ftpgetput.c, generated -> false, objectFile -> ftpgetput, listName -> lib)
2012-01-10 11:58:36,974 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m"))), sourceFile -> networking/ftpgetput.c, generated -> false, objectFile -> ftpgetput, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,977 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,978 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,979 DEBUG PCDerivation$ Expression of path for object occurrence networking/ftpgetput.c: (((CONFIG_FTPGET == "y") || (CONFIG_FTPGET == "m")) || ((CONFIG_FTPPUT == "y") || (CONFIG_FTPPUT == "m")))
2012-01-10 11:58:36,979 DEBUG PCDerivation$ Trying to find path for: [Object: hostname]
2012-01-10 11:58:36,979 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m")), sourceFile -> networking/hostname.c, generated -> false, objectFile -> hostname, listName -> lib)
2012-01-10 11:58:36,979 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m")), sourceFile -> networking/hostname.c, generated -> false, objectFile -> hostname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,979 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,979 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,979 DEBUG PCDerivation$ Expression of path for object occurrence networking/hostname.c: ((CONFIG_HOSTNAME == "y") || (CONFIG_HOSTNAME == "m"))
2012-01-10 11:58:36,979 DEBUG PCDerivation$ Trying to find path for: [Object: httpd]
2012-01-10 11:58:36,979 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m")), sourceFile -> networking/httpd.c, generated -> false, objectFile -> httpd, listName -> lib)
2012-01-10 11:58:36,979 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m")), sourceFile -> networking/httpd.c, generated -> false, objectFile -> httpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,979 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,979 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,979 DEBUG PCDerivation$ Expression of path for object occurrence networking/httpd.c: ((CONFIG_HTTPD == "y") || (CONFIG_HTTPD == "m"))
2012-01-10 11:58:36,979 DEBUG PCDerivation$ Trying to find path for: [Object: ifconfig]
2012-01-10 11:58:36,979 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m")), sourceFile -> networking/ifconfig.c, generated -> false, objectFile -> ifconfig, listName -> lib)
2012-01-10 11:58:36,979 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m")), sourceFile -> networking/ifconfig.c, generated -> false, objectFile -> ifconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,979 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,979 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,979 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifconfig.c: ((CONFIG_IFCONFIG == "y") || (CONFIG_IFCONFIG == "m"))
2012-01-10 11:58:36,979 DEBUG PCDerivation$ Trying to find path for: [Object: ifenslave]
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")), sourceFile -> networking/ifenslave.c, generated -> false, objectFile -> ifenslave, listName -> lib)
2012-01-10 11:58:36,980 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m")), sourceFile -> networking/ifenslave.c, generated -> false, objectFile -> ifenslave, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,980 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifenslave.c: ((CONFIG_IFENSLAVE == "y") || (CONFIG_IFENSLAVE == "m"))
2012-01-10 11:58:36,980 DEBUG PCDerivation$ Trying to find path for: [Object: ifplugd]
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m")), sourceFile -> networking/ifplugd.c, generated -> false, objectFile -> ifplugd, listName -> lib)
2012-01-10 11:58:36,980 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m")), sourceFile -> networking/ifplugd.c, generated -> false, objectFile -> ifplugd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,980 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifplugd.c: ((CONFIG_IFPLUGD == "y") || (CONFIG_IFPLUGD == "m"))
2012-01-10 11:58:36,980 DEBUG PCDerivation$ Trying to find path for: [Object: ifupdown]
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m")), sourceFile -> networking/ifupdown.c, generated -> false, objectFile -> ifupdown, listName -> lib)
2012-01-10 11:58:36,980 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m")), sourceFile -> networking/ifupdown.c, generated -> false, objectFile -> ifupdown, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,980 DEBUG PCDerivation$ Expression of path for object occurrence networking/ifupdown.c: ((CONFIG_IFUPDOWN == "y") || (CONFIG_IFUPDOWN == "m"))
2012-01-10 11:58:36,980 DEBUG PCDerivation$ Trying to find path for: [Object: inetd]
2012-01-10 11:58:36,980 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INETD == "y") || (CONFIG_INETD == "m")), sourceFile -> networking/inetd.c, generated -> false, objectFile -> inetd, listName -> lib)
2012-01-10 11:58:36,980 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_INETD == "y") || (CONFIG_INETD == "m")), sourceFile -> networking/inetd.c, generated -> false, objectFile -> inetd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,981 DEBUG PCDerivation$ Expression of path for object occurrence networking/inetd.c: ((CONFIG_INETD == "y") || (CONFIG_INETD == "m"))
2012-01-10 11:58:36,981 DEBUG PCDerivation$ Trying to find path for: [Object: ip]
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/ip.c, generated -> false, objectFile -> ip, listName -> lib)
2012-01-10 11:58:36,981 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/ip.c, generated -> false, objectFile -> ip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,981 DEBUG PCDerivation$ Expression of path for object occurrence networking/ip.c: ((CONFIG_IP == "y") || (CONFIG_IP == "m"))
2012-01-10 11:58:36,981 DEBUG PCDerivation$ Trying to find path for: [Object: ipcalc]
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m")), sourceFile -> networking/ipcalc.c, generated -> false, objectFile -> ipcalc, listName -> lib)
2012-01-10 11:58:36,981 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m")), sourceFile -> networking/ipcalc.c, generated -> false, objectFile -> ipcalc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,981 DEBUG PCDerivation$ Expression of path for object occurrence networking/ipcalc.c: ((CONFIG_IPCALC == "y") || (CONFIG_IPCALC == "m"))
2012-01-10 11:58:36,981 DEBUG PCDerivation$ Trying to find path for: [Object: nameif]
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m")), sourceFile -> networking/nameif.c, generated -> false, objectFile -> nameif, listName -> lib)
2012-01-10 11:58:36,981 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m")), sourceFile -> networking/nameif.c, generated -> false, objectFile -> nameif, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,981 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,981 DEBUG PCDerivation$ Expression of path for object occurrence networking/nameif.c: ((CONFIG_NAMEIF == "y") || (CONFIG_NAMEIF == "m"))
2012-01-10 11:58:36,982 DEBUG PCDerivation$ Trying to find path for: [Object: nc]
2012-01-10 11:58:36,982 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NC == "y") || (CONFIG_NC == "m")), sourceFile -> networking/nc.c, generated -> false, objectFile -> nc, listName -> lib)
2012-01-10 11:58:36,982 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NC == "y") || (CONFIG_NC == "m")), sourceFile -> networking/nc.c, generated -> false, objectFile -> nc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,982 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,982 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,982 DEBUG PCDerivation$ Expression of path for object occurrence networking/nc.c: ((CONFIG_NC == "y") || (CONFIG_NC == "m"))
2012-01-10 11:58:36,982 DEBUG PCDerivation$ Trying to find path for: [Object: netstat]
2012-01-10 11:58:36,982 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m")), sourceFile -> networking/netstat.c, generated -> false, objectFile -> netstat, listName -> lib)
2012-01-10 11:58:36,982 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m")), sourceFile -> networking/netstat.c, generated -> false, objectFile -> netstat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,982 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,982 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,982 DEBUG PCDerivation$ Expression of path for object occurrence networking/netstat.c: ((CONFIG_NETSTAT == "y") || (CONFIG_NETSTAT == "m"))
2012-01-10 11:58:36,982 DEBUG PCDerivation$ Trying to find path for: [Object: nslookup]
2012-01-10 11:58:36,982 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m")), sourceFile -> networking/nslookup.c, generated -> false, objectFile -> nslookup, listName -> lib)
2012-01-10 11:58:36,982 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m")), sourceFile -> networking/nslookup.c, generated -> false, objectFile -> nslookup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,982 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,983 DEBUG PCDerivation$ Expression of path for object occurrence networking/nslookup.c: ((CONFIG_NSLOOKUP == "y") || (CONFIG_NSLOOKUP == "m"))
2012-01-10 11:58:36,983 DEBUG PCDerivation$ Trying to find path for: [Object: ntpd]
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m")), sourceFile -> networking/ntpd.c, generated -> false, objectFile -> ntpd, listName -> lib)
2012-01-10 11:58:36,983 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m")), sourceFile -> networking/ntpd.c, generated -> false, objectFile -> ntpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,983 DEBUG PCDerivation$ Expression of path for object occurrence networking/ntpd.c: ((CONFIG_NTPD == "y") || (CONFIG_NTPD == "m"))
2012-01-10 11:58:36,983 DEBUG PCDerivation$ Trying to find path for: [Object: pscan]
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m")), sourceFile -> networking/pscan.c, generated -> false, objectFile -> pscan, listName -> lib)
2012-01-10 11:58:36,983 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m")), sourceFile -> networking/pscan.c, generated -> false, objectFile -> pscan, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,983 DEBUG PCDerivation$ Expression of path for object occurrence networking/pscan.c: ((CONFIG_PSCAN == "y") || (CONFIG_PSCAN == "m"))
2012-01-10 11:58:36,983 DEBUG PCDerivation$ Trying to find path for: [Object: route]
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m")), sourceFile -> networking/route.c, generated -> false, objectFile -> route, listName -> lib)
2012-01-10 11:58:36,983 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m")), sourceFile -> networking/route.c, generated -> false, objectFile -> route, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,983 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,983 DEBUG PCDerivation$ Expression of path for object occurrence networking/route.c: ((CONFIG_ROUTE == "y") || (CONFIG_ROUTE == "m"))
2012-01-10 11:58:36,983 DEBUG PCDerivation$ Trying to find path for: [Object: slattach]
2012-01-10 11:58:36,984 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")), sourceFile -> networking/slattach.c, generated -> false, objectFile -> slattach, listName -> lib)
2012-01-10 11:58:36,984 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")), sourceFile -> networking/slattach.c, generated -> false, objectFile -> slattach, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,984 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,984 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,984 DEBUG PCDerivation$ Expression of path for object occurrence networking/slattach.c: ((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m"))
2012-01-10 11:58:36,984 DEBUG PCDerivation$ Trying to find path for: [Object: tc]
2012-01-10 11:58:36,984 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TC == "y") || (CONFIG_TC == "m")), sourceFile -> networking/tc.c, generated -> false, objectFile -> tc, listName -> lib)
2012-01-10 11:58:36,984 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TC == "y") || (CONFIG_TC == "m")), sourceFile -> networking/tc.c, generated -> false, objectFile -> tc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,984 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,984 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,984 DEBUG PCDerivation$ Expression of path for object occurrence networking/tc.c: ((CONFIG_TC == "y") || (CONFIG_TC == "m"))
2012-01-10 11:58:36,984 DEBUG PCDerivation$ Trying to find path for: [Object: telnet]
2012-01-10 11:58:36,984 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m")), sourceFile -> networking/telnet.c, generated -> false, objectFile -> telnet, listName -> lib)
2012-01-10 11:58:36,984 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m")), sourceFile -> networking/telnet.c, generated -> false, objectFile -> telnet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,984 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,984 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,985 DEBUG PCDerivation$ Expression of path for object occurrence networking/telnet.c: ((CONFIG_TELNET == "y") || (CONFIG_TELNET == "m"))
2012-01-10 11:58:36,985 DEBUG PCDerivation$ Trying to find path for: [Object: telnetd]
2012-01-10 11:58:36,985 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m")), sourceFile -> networking/telnetd.c, generated -> false, objectFile -> telnetd, listName -> lib)
2012-01-10 11:58:36,985 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m")), sourceFile -> networking/telnetd.c, generated -> false, objectFile -> telnetd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,985 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,985 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,985 DEBUG PCDerivation$ Expression of path for object occurrence networking/telnetd.c: ((CONFIG_TELNETD == "y") || (CONFIG_TELNETD == "m"))
2012-01-10 11:58:36,985 DEBUG PCDerivation$ Trying to find path for: [Object: tftp]
2012-01-10 11:58:36,985 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))), sourceFile -> networking/tftp.c, generated -> false, objectFile -> tftp, listName -> lib)
2012-01-10 11:58:36,985 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m"))), sourceFile -> networking/tftp.c, generated -> false, objectFile -> tftp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,985 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,985 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,985 DEBUG PCDerivation$ Expression of path for object occurrence networking/tftp.c: (((CONFIG_TFTP == "y") || (CONFIG_TFTP == "m")) || ((CONFIG_TFTPD == "y") || (CONFIG_TFTPD == "m")))
2012-01-10 11:58:36,985 DEBUG PCDerivation$ Trying to find path for: [Object: traceroute]
2012-01-10 11:58:36,985 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")), sourceFile -> networking/traceroute.c, generated -> false, objectFile -> traceroute, listName -> lib)
2012-01-10 11:58:36,985 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m")), sourceFile -> networking/traceroute.c, generated -> false, objectFile -> traceroute, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,985 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,985 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,985 DEBUG PCDerivation$ Expression of path for object occurrence networking/traceroute.c: ((CONFIG_TRACEROUTE == "y") || (CONFIG_TRACEROUTE == "m"))
2012-01-10 11:58:36,985 DEBUG PCDerivation$ Trying to find path for: [Object: tunctl]
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m")), sourceFile -> networking/tunctl.c, generated -> false, objectFile -> tunctl, listName -> lib)
2012-01-10 11:58:36,986 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m")), sourceFile -> networking/tunctl.c, generated -> false, objectFile -> tunctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,986 DEBUG PCDerivation$ Expression of path for object occurrence networking/tunctl.c: ((CONFIG_TUNCTL == "y") || (CONFIG_TUNCTL == "m"))
2012-01-10 11:58:36,986 DEBUG PCDerivation$ Trying to find path for: [Object: vconfig]
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m")), sourceFile -> networking/vconfig.c, generated -> false, objectFile -> vconfig, listName -> lib)
2012-01-10 11:58:36,986 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m")), sourceFile -> networking/vconfig.c, generated -> false, objectFile -> vconfig, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,986 DEBUG PCDerivation$ Expression of path for object occurrence networking/vconfig.c: ((CONFIG_VCONFIG == "y") || (CONFIG_VCONFIG == "m"))
2012-01-10 11:58:36,986 DEBUG PCDerivation$ Trying to find path for: [Object: wget]
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WGET == "y") || (CONFIG_WGET == "m")), sourceFile -> networking/wget.c, generated -> false, objectFile -> wget, listName -> lib)
2012-01-10 11:58:36,986 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WGET == "y") || (CONFIG_WGET == "m")), sourceFile -> networking/wget.c, generated -> false, objectFile -> wget, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,986 DEBUG PCDerivation$ Expression of path for object occurrence networking/wget.c: ((CONFIG_WGET == "y") || (CONFIG_WGET == "m"))
2012-01-10 11:58:36,986 DEBUG PCDerivation$ Trying to find path for: [Object: zcip]
2012-01-10 11:58:36,986 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m")), sourceFile -> networking/zcip.c, generated -> false, objectFile -> zcip, listName -> lib)
2012-01-10 11:58:36,986 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m")), sourceFile -> networking/zcip.c, generated -> false, objectFile -> zcip, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,987 DEBUG PCDerivation$ Expression of path for object occurrence networking/zcip.c: ((CONFIG_ZCIP == "y") || (CONFIG_ZCIP == "m"))
2012-01-10 11:58:36,987 DEBUG PCDerivation$ Trying to find path for: [Object: tcpudp]
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp.c, generated -> false, objectFile -> tcpudp, listName -> lib)
2012-01-10 11:58:36,987 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp.c, generated -> false, objectFile -> tcpudp, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,987 DEBUG PCDerivation$ Expression of path for object occurrence networking/tcpudp.c: (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m")))
2012-01-10 11:58:36,987 DEBUG PCDerivation$ Trying to find path for: [Object: tcpudp_perhost]
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp_perhost.c, generated -> false, objectFile -> tcpudp_perhost, listName -> lib)
2012-01-10 11:58:36,987 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m"))), sourceFile -> networking/tcpudp_perhost.c, generated -> false, objectFile -> tcpudp_perhost, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/Kbuild)
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,987 DEBUG PCDerivation$ Expression of path for object occurrence networking/tcpudp_perhost.c: (((CONFIG_TCPSVD == "y") || (CONFIG_TCPSVD == "m")) || ((CONFIG_UDPSVD == "y") || (CONFIG_UDPSVD == "m")))
2012-01-10 11:58:36,987 DEBUG PCDerivation$ Trying to find path for: [Object: utils]
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/utils.c, generated -> false, objectFile -> utils, listName -> lib)
2012-01-10 11:58:36,987 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/utils.c, generated -> false, objectFile -> utils, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,987 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,988 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,988 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,988 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/utils.c: ((((((((CONFIG_SLATTACH == "y") || (CONFIG_SLATTACH == "m")) || ((CONFIG_IP == "y") || (CONFIG_IP == "m"))) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-10 11:58:36,988 DEBUG PCDerivation$ Trying to find path for: [Object: ip_parse_common_args]
2012-01-10 11:58:36,988 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/ip_parse_common_args.c, generated -> false, objectFile -> ip_parse_common_args, listName -> lib)
2012-01-10 11:58:36,988 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/ip_parse_common_args.c, generated -> false, objectFile -> ip_parse_common_args, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,988 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,988 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,988 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ip_parse_common_args.c: (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-10 11:58:36,988 DEBUG PCDerivation$ Trying to find path for: [Object: libnetlink]
2012-01-10 11:58:36,988 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/libnetlink.c, generated -> false, objectFile -> libnetlink, listName -> lib)
2012-01-10 11:58:36,988 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/libnetlink.c, generated -> false, objectFile -> libnetlink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,988 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,988 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,988 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/libnetlink.c: (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-10 11:58:36,988 DEBUG PCDerivation$ Trying to find path for: [Object: ll_addr]
2012-01-10 11:58:36,988 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_addr.c, generated -> false, objectFile -> ll_addr, listName -> lib)
2012-01-10 11:58:36,989 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_addr.c, generated -> false, objectFile -> ll_addr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,989 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,989 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,989 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_addr.c: ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-10 11:58:36,989 DEBUG PCDerivation$ Trying to find path for: [Object: ll_map]
2012-01-10 11:58:36,989 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/ll_map.c, generated -> false, objectFile -> ll_map, listName -> lib)
2012-01-10 11:58:36,989 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/ll_map.c, generated -> false, objectFile -> ll_map, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,989 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,989 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,989 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_map.c: (((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-10 11:58:36,989 DEBUG PCDerivation$ Trying to find path for: [Object: ll_proto]
2012-01-10 11:58:36,989 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/libiproute/ll_proto.c, generated -> false, objectFile -> ll_proto, listName -> lib)
2012-01-10 11:58:36,989 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IP == "y") || (CONFIG_IP == "m")), sourceFile -> networking/libiproute/ll_proto.c, generated -> false, objectFile -> ll_proto, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,989 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,989 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,989 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_proto.c: ((CONFIG_IP == "y") || (CONFIG_IP == "m"))
2012-01-10 11:58:36,989 DEBUG PCDerivation$ Trying to find path for: [Object: ll_types]
2012-01-10 11:58:36,990 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_types.c, generated -> false, objectFile -> ll_types, listName -> lib)
2012-01-10 11:58:36,990 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ll_types.c, generated -> false, objectFile -> ll_types, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,990 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,990 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,990 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ll_types.c: ((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-10 11:58:36,990 DEBUG PCDerivation$ Trying to find path for: [Object: rt_names]
2012-01-10 11:58:36,990 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/rt_names.c, generated -> false, objectFile -> rt_names, listName -> lib)
2012-01-10 11:58:36,990 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))), sourceFile -> networking/libiproute/rt_names.c, generated -> false, objectFile -> rt_names, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,990 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,990 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,990 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/rt_names.c: (((((((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m"))) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))) || ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))) || ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")))
2012-01-10 11:58:36,990 DEBUG PCDerivation$ Trying to find path for: [Object: rtm_map]
2012-01-10 11:58:36,990 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/rtm_map.c, generated -> false, objectFile -> rtm_map, listName -> lib)
2012-01-10 11:58:36,990 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))), sourceFile -> networking/libiproute/rtm_map.c, generated -> false, objectFile -> rtm_map, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,990 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,990 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,990 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/rtm_map.c: (((CONFIG_IP == "y") || (CONFIG_IP == "m")) || ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")))
2012-01-10 11:58:36,990 DEBUG PCDerivation$ Trying to find path for: [Object: ipaddress]
2012-01-10 11:58:36,991 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ipaddress.c, generated -> false, objectFile -> ipaddress, listName -> lib)
2012-01-10 11:58:36,991 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))), sourceFile -> networking/libiproute/ipaddress.c, generated -> false, objectFile -> ipaddress, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,991 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,991 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,991 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/ipaddress.c: (((CONFIG_FEATURE_IP_ADDRESS == "y") || (CONFIG_FEATURE_IP_ADDRESS == "m")) || ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")))
2012-01-10 11:58:36,991 DEBUG PCDerivation$ Trying to find path for: [Object: iplink]
2012-01-10 11:58:36,991 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")), sourceFile -> networking/libiproute/iplink.c, generated -> false, objectFile -> iplink, listName -> lib)
2012-01-10 11:58:36,991 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m")), sourceFile -> networking/libiproute/iplink.c, generated -> false, objectFile -> iplink, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,991 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,991 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,991 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iplink.c: ((CONFIG_FEATURE_IP_LINK == "y") || (CONFIG_FEATURE_IP_LINK == "m"))
2012-01-10 11:58:36,991 DEBUG PCDerivation$ Trying to find path for: [Object: iproute]
2012-01-10 11:58:36,991 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")), sourceFile -> networking/libiproute/iproute.c, generated -> false, objectFile -> iproute, listName -> lib)
2012-01-10 11:58:36,991 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m")), sourceFile -> networking/libiproute/iproute.c, generated -> false, objectFile -> iproute, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,991 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,991 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,991 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iproute.c: ((CONFIG_FEATURE_IP_ROUTE == "y") || (CONFIG_FEATURE_IP_ROUTE == "m"))
2012-01-10 11:58:36,991 DEBUG PCDerivation$ Trying to find path for: [Object: iptunnel]
2012-01-10 11:58:36,992 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m")), sourceFile -> networking/libiproute/iptunnel.c, generated -> false, objectFile -> iptunnel, listName -> lib)
2012-01-10 11:58:36,992 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m")), sourceFile -> networking/libiproute/iptunnel.c, generated -> false, objectFile -> iptunnel, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,992 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,992 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,992 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iptunnel.c: ((CONFIG_FEATURE_IP_TUNNEL == "y") || (CONFIG_FEATURE_IP_TUNNEL == "m"))
2012-01-10 11:58:36,992 DEBUG PCDerivation$ Trying to find path for: [Object: iprule]
2012-01-10 11:58:36,992 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")), sourceFile -> networking/libiproute/iprule.c, generated -> false, objectFile -> iprule, listName -> lib)
2012-01-10 11:58:36,992 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m")), sourceFile -> networking/libiproute/iprule.c, generated -> false, objectFile -> iprule, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,992 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/libiproute/Kbuild)
2012-01-10 11:58:36,992 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,992 DEBUG PCDerivation$ Expression of path for object occurrence networking/libiproute/iprule.c: ((CONFIG_FEATURE_IP_RULE == "y") || (CONFIG_FEATURE_IP_RULE == "m"))
2012-01-10 11:58:36,992 DEBUG PCDerivation$ Trying to find path for: [Object: d6_dhcpc]
2012-01-10 11:58:36,992 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_dhcpc.c, generated -> false, objectFile -> d6_dhcpc, listName -> lib)
2012-01-10 11:58:36,992 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_dhcpc.c, generated -> false, objectFile -> d6_dhcpc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,992 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,992 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,992 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,992 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_dhcpc.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-10 11:58:36,992 DEBUG PCDerivation$ Trying to find path for: [Object: d6_packet]
2012-01-10 11:58:36,993 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_packet.c, generated -> false, objectFile -> d6_packet, listName -> lib)
2012-01-10 11:58:36,993 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_packet.c, generated -> false, objectFile -> d6_packet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,993 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,993 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,993 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_packet.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-10 11:58:36,993 DEBUG PCDerivation$ Trying to find path for: [Object: d6_socket]
2012-01-10 11:58:36,993 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_socket.c, generated -> false, objectFile -> d6_socket, listName -> lib)
2012-01-10 11:58:36,993 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")), sourceFile -> networking/udhcp/d6_socket.c, generated -> false, objectFile -> d6_socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,993 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,993 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,993 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/d6_socket.c: ((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m"))
2012-01-10 11:58:36,993 DEBUG PCDerivation$ Trying to find path for: [Object: common]
2012-01-10 11:58:36,993 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/common.c, generated -> false, objectFile -> common, listName -> lib)
2012-01-10 11:58:36,993 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/common.c, generated -> false, objectFile -> common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,993 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,993 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,993 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/common.c: ((((CONFIG_UDHCPC6 == "y") || (CONFIG_UDHCPC6 == "m")) || ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:58:36,994 DEBUG PCDerivation$ Trying to find path for: [Object: packet]
2012-01-10 11:58:36,994 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/packet.c, generated -> false, objectFile -> packet, listName -> lib)
2012-01-10 11:58:36,994 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/packet.c, generated -> false, objectFile -> packet, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,994 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,994 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,994 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/packet.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:58:36,994 DEBUG PCDerivation$ Trying to find path for: [Object: signalpipe]
2012-01-10 11:58:36,994 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/signalpipe.c, generated -> false, objectFile -> signalpipe, listName -> lib)
2012-01-10 11:58:36,994 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/signalpipe.c, generated -> false, objectFile -> signalpipe, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,994 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,994 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,994 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/signalpipe.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:58:36,994 DEBUG PCDerivation$ Trying to find path for: [Object: socket]
2012-01-10 11:58:36,994 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/socket.c, generated -> false, objectFile -> socket, listName -> lib)
2012-01-10 11:58:36,994 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))), sourceFile -> networking/udhcp/socket.c, generated -> false, objectFile -> socket, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,994 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,994 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,995 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/socket.c: (((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")) || ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")))
2012-01-10 11:58:36,995 DEBUG PCDerivation$ Trying to find path for: [Object: dhcpc]
2012-01-10 11:58:36,995 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")), sourceFile -> networking/udhcp/dhcpc.c, generated -> false, objectFile -> dhcpc, listName -> lib)
2012-01-10 11:58:36,995 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m")), sourceFile -> networking/udhcp/dhcpc.c, generated -> false, objectFile -> dhcpc, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,995 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,995 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,995 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcpc.c: ((CONFIG_UDHCPC == "y") || (CONFIG_UDHCPC == "m"))
2012-01-10 11:58:36,995 DEBUG PCDerivation$ Trying to find path for: [Object: dhcpd]
2012-01-10 11:58:36,995 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/dhcpd.c, generated -> false, objectFile -> dhcpd, listName -> lib)
2012-01-10 11:58:36,995 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/dhcpd.c, generated -> false, objectFile -> dhcpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,995 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,995 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,995 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcpd.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:58:36,995 DEBUG PCDerivation$ Trying to find path for: [Object: arpping]
2012-01-10 11:58:36,995 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m"))), sourceFile -> networking/udhcp/arpping.c, generated -> false, objectFile -> arpping, listName -> lib)
2012-01-10 11:58:36,995 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m"))), sourceFile -> networking/udhcp/arpping.c, generated -> false, objectFile -> arpping, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,995 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,995 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,995 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/arpping.c: (((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")) || ((CONFIG_FEATURE_UDHCPC_ARPING == "y") || (CONFIG_FEATURE_UDHCPC_ARPING == "m")))
2012-01-10 11:58:36,996 DEBUG PCDerivation$ Trying to find path for: [Object: files]
2012-01-10 11:58:36,996 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/files.c, generated -> false, objectFile -> files, listName -> lib)
2012-01-10 11:58:36,996 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/files.c, generated -> false, objectFile -> files, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,996 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,996 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,996 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/files.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:58:36,996 DEBUG PCDerivation$ Trying to find path for: [Object: leases]
2012-01-10 11:58:36,996 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/leases.c, generated -> false, objectFile -> leases, listName -> lib)
2012-01-10 11:58:36,996 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/leases.c, generated -> false, objectFile -> leases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,996 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,996 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,996 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/leases.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:58:36,996 DEBUG PCDerivation$ Trying to find path for: [Object: static_leases]
2012-01-10 11:58:36,996 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/static_leases.c, generated -> false, objectFile -> static_leases, listName -> lib)
2012-01-10 11:58:36,996 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m")), sourceFile -> networking/udhcp/static_leases.c, generated -> false, objectFile -> static_leases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,996 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,996 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,996 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/static_leases.c: ((CONFIG_UDHCPD == "y") || (CONFIG_UDHCPD == "m"))
2012-01-10 11:58:36,996 DEBUG PCDerivation$ Trying to find path for: [Object: dumpleases]
2012-01-10 11:58:36,997 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m")), sourceFile -> networking/udhcp/dumpleases.c, generated -> false, objectFile -> dumpleases, listName -> lib)
2012-01-10 11:58:36,997 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m")), sourceFile -> networking/udhcp/dumpleases.c, generated -> false, objectFile -> dumpleases, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,997 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,997 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,997 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dumpleases.c: ((CONFIG_DUMPLEASES == "y") || (CONFIG_DUMPLEASES == "m"))
2012-01-10 11:58:36,997 DEBUG PCDerivation$ Trying to find path for: [Object: dhcprelay]
2012-01-10 11:58:36,997 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m")), sourceFile -> networking/udhcp/dhcprelay.c, generated -> false, objectFile -> dhcprelay, listName -> lib)
2012-01-10 11:58:36,997 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m")), sourceFile -> networking/udhcp/dhcprelay.c, generated -> false, objectFile -> dhcprelay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,997 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,997 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,997 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/dhcprelay.c: ((CONFIG_DHCPRELAY == "y") || (CONFIG_DHCPRELAY == "m"))
2012-01-10 11:58:36,997 DEBUG PCDerivation$ Trying to find path for: [Object: domain_codec]
2012-01-10 11:58:36,997 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m")), sourceFile -> networking/udhcp/domain_codec.c, generated -> false, objectFile -> domain_codec, listName -> lib)
2012-01-10 11:58:36,997 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m")), sourceFile -> networking/udhcp/domain_codec.c, generated -> false, objectFile -> domain_codec, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,997 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> networking/udhcp/Kbuild)
2012-01-10 11:58:36,997 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,998 DEBUG PCDerivation$ Expression of path for object occurrence networking/udhcp/domain_codec.c: ((CONFIG_FEATURE_UDHCP_RFC3397 == "y") || (CONFIG_FEATURE_UDHCP_RFC3397 == "m"))
2012-01-10 11:58:36,998 DEBUG PCDerivation$ Trying to find path for: [Object: lpd]
2012-01-10 11:58:36,998 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LPD == "y") || (CONFIG_LPD == "m")), sourceFile -> printutils/lpd.c, generated -> false, objectFile -> lpd, listName -> lib)
2012-01-10 11:58:36,998 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LPD == "y") || (CONFIG_LPD == "m")), sourceFile -> printutils/lpd.c, generated -> false, objectFile -> lpd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:58:36,998 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:58:36,998 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,998 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,998 DEBUG PCDerivation$ Expression of path for object occurrence printutils/lpd.c: ((CONFIG_LPD == "y") || (CONFIG_LPD == "m"))
2012-01-10 11:58:36,998 DEBUG PCDerivation$ Trying to find path for: [Object: lpr]
2012-01-10 11:58:36,998 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m"))), sourceFile -> printutils/lpr.c, generated -> false, objectFile -> lpr, listName -> lib)
2012-01-10 11:58:36,998 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m"))), sourceFile -> printutils/lpr.c, generated -> false, objectFile -> lpr, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:58:36,998 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> printutils/Kbuild)
2012-01-10 11:58:36,998 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,998 DEBUG PCDerivation$ Expression of path for object occurrence printutils/lpr.c: (((CONFIG_LPR == "y") || (CONFIG_LPR == "m")) || ((CONFIG_LPQ == "y") || (CONFIG_LPQ == "m")))
2012-01-10 11:58:36,998 DEBUG PCDerivation$ Trying to find path for: [Object: iostat]
2012-01-10 11:58:36,998 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")), sourceFile -> procps/iostat.c, generated -> false, objectFile -> iostat, listName -> lib)
2012-01-10 11:58:36,998 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m")), sourceFile -> procps/iostat.c, generated -> false, objectFile -> iostat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:36,998 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:36,998 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:36,998 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,999 DEBUG PCDerivation$ Expression of path for object occurrence procps/iostat.c: ((CONFIG_IOSTAT == "y") || (CONFIG_IOSTAT == "m"))
2012-01-10 11:58:36,999 DEBUG PCDerivation$ Trying to find path for: [Object: mpstat]
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m")), sourceFile -> procps/mpstat.c, generated -> false, objectFile -> mpstat, listName -> lib)
2012-01-10 11:58:36,999 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m")), sourceFile -> procps/mpstat.c, generated -> false, objectFile -> mpstat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,999 DEBUG PCDerivation$ Expression of path for object occurrence procps/mpstat.c: ((CONFIG_MPSTAT == "y") || (CONFIG_MPSTAT == "m"))
2012-01-10 11:58:36,999 DEBUG PCDerivation$ Trying to find path for: [Object: nmeter]
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m")), sourceFile -> procps/nmeter.c, generated -> false, objectFile -> nmeter, listName -> lib)
2012-01-10 11:58:36,999 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m")), sourceFile -> procps/nmeter.c, generated -> false, objectFile -> nmeter, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,999 DEBUG PCDerivation$ Expression of path for object occurrence procps/nmeter.c: ((CONFIG_NMETER == "y") || (CONFIG_NMETER == "m"))
2012-01-10 11:58:36,999 DEBUG PCDerivation$ Trying to find path for: [Object: pmap]
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m")), sourceFile -> procps/pmap.c, generated -> false, objectFile -> pmap, listName -> lib)
2012-01-10 11:58:36,999 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m")), sourceFile -> procps/pmap.c, generated -> false, objectFile -> pmap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:36,999 DEBUG PCDerivation$ Expression of path for object occurrence procps/pmap.c: ((CONFIG_PMAP == "y") || (CONFIG_PMAP == "m"))
2012-01-10 11:58:36,999 DEBUG PCDerivation$ Trying to find path for: [Object: powertop]
2012-01-10 11:58:36,999 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")), sourceFile -> procps/powertop.c, generated -> false, objectFile -> powertop, listName -> lib)
2012-01-10 11:58:37,000 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m")), sourceFile -> procps/powertop.c, generated -> false, objectFile -> powertop, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,000 DEBUG PCDerivation$ Expression of path for object occurrence procps/powertop.c: ((CONFIG_POWERTOP == "y") || (CONFIG_POWERTOP == "m"))
2012-01-10 11:58:37,000 DEBUG PCDerivation$ Trying to find path for: [Object: pstree]
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m")), sourceFile -> procps/pstree.c, generated -> false, objectFile -> pstree, listName -> lib)
2012-01-10 11:58:37,000 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m")), sourceFile -> procps/pstree.c, generated -> false, objectFile -> pstree, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,000 DEBUG PCDerivation$ Expression of path for object occurrence procps/pstree.c: ((CONFIG_PSTREE == "y") || (CONFIG_PSTREE == "m"))
2012-01-10 11:58:37,000 DEBUG PCDerivation$ Trying to find path for: [Object: pwdx]
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m")), sourceFile -> procps/pwdx.c, generated -> false, objectFile -> pwdx, listName -> lib)
2012-01-10 11:58:37,000 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m")), sourceFile -> procps/pwdx.c, generated -> false, objectFile -> pwdx, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,000 DEBUG PCDerivation$ Expression of path for object occurrence procps/pwdx.c: ((CONFIG_PWDX == "y") || (CONFIG_PWDX == "m"))
2012-01-10 11:58:37,000 DEBUG PCDerivation$ Trying to find path for: [Object: smemcap]
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m")), sourceFile -> procps/smemcap.c, generated -> false, objectFile -> smemcap, listName -> lib)
2012-01-10 11:58:37,000 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m")), sourceFile -> procps/smemcap.c, generated -> false, objectFile -> smemcap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,000 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,001 DEBUG PCDerivation$ Expression of path for object occurrence procps/smemcap.c: ((CONFIG_SMEMCAP == "y") || (CONFIG_SMEMCAP == "m"))
2012-01-10 11:58:37,001 DEBUG PCDerivation$ Trying to find path for: [Object: free]
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FREE == "y") || (CONFIG_FREE == "m")), sourceFile -> procps/free.c, generated -> false, objectFile -> free, listName -> lib)
2012-01-10 11:58:37,001 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FREE == "y") || (CONFIG_FREE == "m")), sourceFile -> procps/free.c, generated -> false, objectFile -> free, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,001 DEBUG PCDerivation$ Expression of path for object occurrence procps/free.c: ((CONFIG_FREE == "y") || (CONFIG_FREE == "m"))
2012-01-10 11:58:37,001 DEBUG PCDerivation$ Trying to find path for: [Object: fuser]
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m")), sourceFile -> procps/fuser.c, generated -> false, objectFile -> fuser, listName -> lib)
2012-01-10 11:58:37,001 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m")), sourceFile -> procps/fuser.c, generated -> false, objectFile -> fuser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,001 DEBUG PCDerivation$ Expression of path for object occurrence procps/fuser.c: ((CONFIG_FUSER == "y") || (CONFIG_FUSER == "m"))
2012-01-10 11:58:37,001 DEBUG PCDerivation$ Trying to find path for: [Object: kill]
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))), sourceFile -> procps/kill.c, generated -> false, objectFile -> kill, listName -> lib)
2012-01-10 11:58:37,001 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))), sourceFile -> procps/kill.c, generated -> false, objectFile -> kill, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,001 DEBUG PCDerivation$ Expression of path for object occurrence procps/kill.c: (((CONFIG_KILL == "y") || (CONFIG_KILL == "m")) || ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")))
2012-01-10 11:58:37,001 DEBUG PCDerivation$ Trying to find path for: [Object: pgrep]
2012-01-10 11:58:37,001 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))), sourceFile -> procps/pgrep.c, generated -> false, objectFile -> pgrep, listName -> lib)
2012-01-10 11:58:37,001 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m"))), sourceFile -> procps/pgrep.c, generated -> false, objectFile -> pgrep, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Expression of path for object occurrence procps/pgrep.c: (((CONFIG_PGREP == "y") || (CONFIG_PGREP == "m")) || ((CONFIG_PKILL == "y") || (CONFIG_PKILL == "m")))
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Trying to find path for: [Object: pidof]
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m")), sourceFile -> procps/pidof.c, generated -> false, objectFile -> pidof, listName -> lib)
2012-01-10 11:58:37,002 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m")), sourceFile -> procps/pidof.c, generated -> false, objectFile -> pidof, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Expression of path for object occurrence procps/pidof.c: ((CONFIG_PIDOF == "y") || (CONFIG_PIDOF == "m"))
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Trying to find path for: [Object: ps]
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PS == "y") || (CONFIG_PS == "m")), sourceFile -> procps/ps.c, generated -> false, objectFile -> ps, listName -> lib)
2012-01-10 11:58:37,002 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PS == "y") || (CONFIG_PS == "m")), sourceFile -> procps/ps.c, generated -> false, objectFile -> ps, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Expression of path for object occurrence procps/ps.c: ((CONFIG_PS == "y") || (CONFIG_PS == "m"))
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Trying to find path for: [Object: renice]
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m")), sourceFile -> procps/renice.c, generated -> false, objectFile -> renice, listName -> lib)
2012-01-10 11:58:37,002 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m")), sourceFile -> procps/renice.c, generated -> false, objectFile -> renice, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Expression of path for object occurrence procps/renice.c: ((CONFIG_RENICE == "y") || (CONFIG_RENICE == "m"))
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Trying to find path for: [Object: sysctl]
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m")), sourceFile -> procps/sysctl.c, generated -> false, objectFile -> sysctl, listName -> lib)
2012-01-10 11:58:37,002 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m")), sourceFile -> procps/sysctl.c, generated -> false, objectFile -> sysctl, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Expression of path for object occurrence procps/sysctl.c: ((CONFIG_BB_SYSCTL == "y") || (CONFIG_BB_SYSCTL == "m"))
2012-01-10 11:58:37,002 DEBUG PCDerivation$ Trying to find path for: [Object: top]
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOP == "y") || (CONFIG_TOP == "m")), sourceFile -> procps/top.c, generated -> false, objectFile -> top, listName -> lib)
2012-01-10 11:58:37,002 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_TOP == "y") || (CONFIG_TOP == "m")), sourceFile -> procps/top.c, generated -> false, objectFile -> top, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,002 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Expression of path for object occurrence procps/top.c: ((CONFIG_TOP == "y") || (CONFIG_TOP == "m"))
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Trying to find path for: [Object: uptime]
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m")), sourceFile -> procps/uptime.c, generated -> false, objectFile -> uptime, listName -> lib)
2012-01-10 11:58:37,003 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m")), sourceFile -> procps/uptime.c, generated -> false, objectFile -> uptime, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Expression of path for object occurrence procps/uptime.c: ((CONFIG_UPTIME == "y") || (CONFIG_UPTIME == "m"))
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Trying to find path for: [Object: watch]
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m")), sourceFile -> procps/watch.c, generated -> false, objectFile -> watch, listName -> lib)
2012-01-10 11:58:37,003 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m")), sourceFile -> procps/watch.c, generated -> false, objectFile -> watch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> procps/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Expression of path for object occurrence procps/watch.c: ((CONFIG_WATCH == "y") || (CONFIG_WATCH == "m"))
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Trying to find path for: [Object: runsv]
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m")), sourceFile -> runit/runsv.c, generated -> false, objectFile -> runsv, listName -> lib)
2012-01-10 11:58:37,003 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m")), sourceFile -> runit/runsv.c, generated -> false, objectFile -> runsv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Expression of path for object occurrence runit/runsv.c: ((CONFIG_RUNSV == "y") || (CONFIG_RUNSV == "m"))
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Trying to find path for: [Object: runsvdir]
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m")), sourceFile -> runit/runsvdir.c, generated -> false, objectFile -> runsvdir, listName -> lib)
2012-01-10 11:58:37,003 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m")), sourceFile -> runit/runsvdir.c, generated -> false, objectFile -> runsvdir, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Expression of path for object occurrence runit/runsvdir.c: ((CONFIG_RUNSVDIR == "y") || (CONFIG_RUNSVDIR == "m"))
2012-01-10 11:58:37,003 DEBUG PCDerivation$ Trying to find path for: [Object: sv]
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SV == "y") || (CONFIG_SV == "m")), sourceFile -> runit/sv.c, generated -> false, objectFile -> sv, listName -> lib)
2012-01-10 11:58:37,003 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SV == "y") || (CONFIG_SV == "m")), sourceFile -> runit/sv.c, generated -> false, objectFile -> sv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,003 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Expression of path for object occurrence runit/sv.c: ((CONFIG_SV == "y") || (CONFIG_SV == "m"))
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Trying to find path for: [Object: svlogd]
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m")), sourceFile -> runit/svlogd.c, generated -> false, objectFile -> svlogd, listName -> lib)
2012-01-10 11:58:37,004 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m")), sourceFile -> runit/svlogd.c, generated -> false, objectFile -> svlogd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Expression of path for object occurrence runit/svlogd.c: ((CONFIG_SVLOGD == "y") || (CONFIG_SVLOGD == "m"))
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Trying to find path for: [Object: chpst]
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m"))), sourceFile -> runit/chpst.c, generated -> false, objectFile -> chpst, listName -> lib)
2012-01-10 11:58:37,004 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m"))), sourceFile -> runit/chpst.c, generated -> false, objectFile -> chpst, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> runit/Kbuild)
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Expression of path for object occurrence runit/chpst.c: ((((((CONFIG_CHPST == "y") || (CONFIG_CHPST == "m")) || ((CONFIG_ENVDIR == "y") || (CONFIG_ENVDIR == "m"))) || ((CONFIG_ENVUIDGID == "y") || (CONFIG_ENVUIDGID == "m"))) || ((CONFIG_SETUIDGID == "y") || (CONFIG_SETUIDGID == "m"))) || ((CONFIG_SOFTLIMIT == "y") || (CONFIG_SOFTLIMIT == "m")))
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Trying to find path for: [Object: chcon]
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m")), sourceFile -> selinux/chcon.c, generated -> false, objectFile -> chcon, listName -> lib)
2012-01-10 11:58:37,004 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m")), sourceFile -> selinux/chcon.c, generated -> false, objectFile -> chcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,004 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Expression of path for object occurrence selinux/chcon.c: ((CONFIG_CHCON == "y") || (CONFIG_CHCON == "m"))
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Trying to find path for: [Object: getenforce]
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m")), sourceFile -> selinux/getenforce.c, generated -> false, objectFile -> getenforce, listName -> lib)
2012-01-10 11:58:37,004 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m")), sourceFile -> selinux/getenforce.c, generated -> false, objectFile -> getenforce, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Expression of path for object occurrence selinux/getenforce.c: ((CONFIG_GETENFORCE == "y") || (CONFIG_GETENFORCE == "m"))
2012-01-10 11:58:37,004 DEBUG PCDerivation$ Trying to find path for: [Object: getsebool]
2012-01-10 11:58:37,004 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m")), sourceFile -> selinux/getsebool.c, generated -> false, objectFile -> getsebool, listName -> lib)
2012-01-10 11:58:37,004 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m")), sourceFile -> selinux/getsebool.c, generated -> false, objectFile -> getsebool, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Expression of path for object occurrence selinux/getsebool.c: ((CONFIG_GETSEBOOL == "y") || (CONFIG_GETSEBOOL == "m"))
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Trying to find path for: [Object: load_policy]
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m")), sourceFile -> selinux/load_policy.c, generated -> false, objectFile -> load_policy, listName -> lib)
2012-01-10 11:58:37,005 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m")), sourceFile -> selinux/load_policy.c, generated -> false, objectFile -> load_policy, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Expression of path for object occurrence selinux/load_policy.c: ((CONFIG_LOAD_POLICY == "y") || (CONFIG_LOAD_POLICY == "m"))
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Trying to find path for: [Object: matchpathcon]
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m")), sourceFile -> selinux/matchpathcon.c, generated -> false, objectFile -> matchpathcon, listName -> lib)
2012-01-10 11:58:37,005 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m")), sourceFile -> selinux/matchpathcon.c, generated -> false, objectFile -> matchpathcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Expression of path for object occurrence selinux/matchpathcon.c: ((CONFIG_MATCHPATHCON == "y") || (CONFIG_MATCHPATHCON == "m"))
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Trying to find path for: [Object: runcon]
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m")), sourceFile -> selinux/runcon.c, generated -> false, objectFile -> runcon, listName -> lib)
2012-01-10 11:58:37,005 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m")), sourceFile -> selinux/runcon.c, generated -> false, objectFile -> runcon, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Expression of path for object occurrence selinux/runcon.c: ((CONFIG_RUNCON == "y") || (CONFIG_RUNCON == "m"))
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Trying to find path for: [Object: selinuxenabled]
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUXENABLED == "y") || (CONFIG_SELINUXENABLED == "m")), sourceFile -> selinux/selinuxenabled.c, generated -> false, objectFile -> selinuxenabled, listName -> lib)
2012-01-10 11:58:37,005 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SELINUXENABLED == "y") || (CONFIG_SELINUXENABLED == "m")), sourceFile -> selinux/selinuxenabled.c, generated -> false, objectFile -> selinuxenabled, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Expression of path for object occurrence selinux/selinuxenabled.c: ((CONFIG_SELINUXENABLED == "y") || (CONFIG_SELINUXENABLED == "m"))
2012-01-10 11:58:37,005 DEBUG PCDerivation$ Trying to find path for: [Object: setenforce]
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETENFORCE == "y") || (CONFIG_SETENFORCE == "m")), sourceFile -> selinux/setenforce.c, generated -> false, objectFile -> setenforce, listName -> lib)
2012-01-10 11:58:37,005 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETENFORCE == "y") || (CONFIG_SETENFORCE == "m")), sourceFile -> selinux/setenforce.c, generated -> false, objectFile -> setenforce, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,005 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Expression of path for object occurrence selinux/setenforce.c: ((CONFIG_SETENFORCE == "y") || (CONFIG_SETENFORCE == "m"))
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Trying to find path for: [Object: setfiles]
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_SETFILES == "y") || (CONFIG_SETFILES == "m")) || ((CONFIG_RESTORECON == "y") || (CONFIG_RESTORECON == "m"))), sourceFile -> selinux/setfiles.c, generated -> false, objectFile -> setfiles, listName -> lib)
2012-01-10 11:58:37,006 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_SETFILES == "y") || (CONFIG_SETFILES == "m")) || ((CONFIG_RESTORECON == "y") || (CONFIG_RESTORECON == "m"))), sourceFile -> selinux/setfiles.c, generated -> false, objectFile -> setfiles, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Expression of path for object occurrence selinux/setfiles.c: (((CONFIG_SETFILES == "y") || (CONFIG_SETFILES == "m")) || ((CONFIG_RESTORECON == "y") || (CONFIG_RESTORECON == "m")))
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Trying to find path for: [Object: setsebool]
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSEBOOL == "y") || (CONFIG_SETSEBOOL == "m")), sourceFile -> selinux/setsebool.c, generated -> false, objectFile -> setsebool, listName -> lib)
2012-01-10 11:58:37,006 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETSEBOOL == "y") || (CONFIG_SETSEBOOL == "m")), sourceFile -> selinux/setsebool.c, generated -> false, objectFile -> setsebool, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Expression of path for object occurrence selinux/setsebool.c: ((CONFIG_SETSEBOOL == "y") || (CONFIG_SETSEBOOL == "m"))
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Trying to find path for: [Object: sestatus]
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SESTATUS == "y") || (CONFIG_SESTATUS == "m")), sourceFile -> selinux/sestatus.c, generated -> false, objectFile -> sestatus, listName -> lib)
2012-01-10 11:58:37,006 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SESTATUS == "y") || (CONFIG_SESTATUS == "m")), sourceFile -> selinux/sestatus.c, generated -> false, objectFile -> sestatus, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> selinux/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Expression of path for object occurrence selinux/sestatus.c: ((CONFIG_SESTATUS == "y") || (CONFIG_SESTATUS == "m"))
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Trying to find path for: [Object: ash]
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash.c, generated -> false, objectFile -> ash, listName -> lib)
2012-01-10 11:58:37,006 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash.c, generated -> false, objectFile -> ash, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Expression of path for object occurrence shell/ash.c: ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))
2012-01-10 11:58:37,006 DEBUG PCDerivation$ Trying to find path for: [Object: ash_ptr_hack]
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash_ptr_hack.c, generated -> false, objectFile -> ash_ptr_hack, listName -> lib)
2012-01-10 11:58:37,006 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ASH == "y") || (CONFIG_ASH == "m")), sourceFile -> shell/ash_ptr_hack.c, generated -> false, objectFile -> ash_ptr_hack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,006 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Expression of path for object occurrence shell/ash_ptr_hack.c: ((CONFIG_ASH == "y") || (CONFIG_ASH == "m"))
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Trying to find path for: [Object: shell_common]
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH == "y") || (CONFIG_ASH == "m")) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> shell/shell_common.c, generated -> false, objectFile -> shell_common, listName -> lib)
2012-01-10 11:58:37,007 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH == "y") || (CONFIG_ASH == "m")) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))), sourceFile -> shell/shell_common.c, generated -> false, objectFile -> shell_common, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Expression of path for object occurrence shell/shell_common.c: (((CONFIG_ASH == "y") || (CONFIG_ASH == "m")) || ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")))
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Trying to find path for: [Object: random]
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH_RANDOM_SUPPORT == "y") || (CONFIG_ASH_RANDOM_SUPPORT == "m")) || ((CONFIG_HUSH_RANDOM_SUPPORT == "y") || (CONFIG_HUSH_RANDOM_SUPPORT == "m"))), sourceFile -> shell/random.c, generated -> false, objectFile -> random, listName -> lib)
2012-01-10 11:58:37,007 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_ASH_RANDOM_SUPPORT == "y") || (CONFIG_ASH_RANDOM_SUPPORT == "m")) || ((CONFIG_HUSH_RANDOM_SUPPORT == "y") || (CONFIG_HUSH_RANDOM_SUPPORT == "m"))), sourceFile -> shell/random.c, generated -> false, objectFile -> random, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Expression of path for object occurrence shell/random.c: (((CONFIG_ASH_RANDOM_SUPPORT == "y") || (CONFIG_ASH_RANDOM_SUPPORT == "m")) || ((CONFIG_HUSH_RANDOM_SUPPORT == "y") || (CONFIG_HUSH_RANDOM_SUPPORT == "m")))
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Trying to find path for: [Object: cttyhack]
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CTTYHACK == "y") || (CONFIG_CTTYHACK == "m")), sourceFile -> shell/cttyhack.c, generated -> false, objectFile -> cttyhack, listName -> lib)
2012-01-10 11:58:37,007 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_CTTYHACK == "y") || (CONFIG_CTTYHACK == "m")), sourceFile -> shell/cttyhack.c, generated -> false, objectFile -> cttyhack, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Expression of path for object occurrence shell/cttyhack.c: ((CONFIG_CTTYHACK == "y") || (CONFIG_CTTYHACK == "m"))
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Trying to find path for: [Object: hush]
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/hush.c, generated -> false, objectFile -> hush, listName -> lib)
2012-01-10 11:58:37,007 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/hush.c, generated -> false, objectFile -> hush, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Expression of path for object occurrence shell/hush.c: ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))
2012-01-10 11:58:37,007 DEBUG PCDerivation$ Trying to find path for: [Object: match]
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/match.c, generated -> false, objectFile -> match, listName -> lib)
2012-01-10 11:58:37,007 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m")), sourceFile -> shell/match.c, generated -> false, objectFile -> match, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,007 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Expression of path for object occurrence shell/match.c: ((CONFIG_HUSH == "y") || (CONFIG_HUSH == "m"))
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Trying to find path for: [Object: math]
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SH_MATH_SUPPORT == "y") || (CONFIG_SH_MATH_SUPPORT == "m")), sourceFile -> shell/math.c, generated -> false, objectFile -> math, listName -> lib)
2012-01-10 11:58:37,008 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SH_MATH_SUPPORT == "y") || (CONFIG_SH_MATH_SUPPORT == "m")), sourceFile -> shell/math.c, generated -> false, objectFile -> math, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> shell/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Expression of path for object occurrence shell/math.c: ((CONFIG_SH_MATH_SUPPORT == "y") || (CONFIG_SH_MATH_SUPPORT == "m"))
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Trying to find path for: [Object: klogd]
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KLOGD == "y") || (CONFIG_KLOGD == "m")), sourceFile -> sysklogd/klogd.c, generated -> false, objectFile -> klogd, listName -> lib)
2012-01-10 11:58:37,008 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_KLOGD == "y") || (CONFIG_KLOGD == "m")), sourceFile -> sysklogd/klogd.c, generated -> false, objectFile -> klogd, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Expression of path for object occurrence sysklogd/klogd.c: ((CONFIG_KLOGD == "y") || (CONFIG_KLOGD == "m"))
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Trying to find path for: [Object: syslogd_and_logger]
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOGGER == "y") || (CONFIG_LOGGER == "m")) || ((CONFIG_SYSLOGD == "y") || (CONFIG_SYSLOGD == "m"))), sourceFile -> sysklogd/syslogd_and_logger.c, generated -> false, objectFile -> syslogd_and_logger, listName -> lib)
2012-01-10 11:58:37,008 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_LOGGER == "y") || (CONFIG_LOGGER == "m")) || ((CONFIG_SYSLOGD == "y") || (CONFIG_SYSLOGD == "m"))), sourceFile -> sysklogd/syslogd_and_logger.c, generated -> false, objectFile -> syslogd_and_logger, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Expression of path for object occurrence sysklogd/syslogd_and_logger.c: (((CONFIG_LOGGER == "y") || (CONFIG_LOGGER == "m")) || ((CONFIG_SYSLOGD == "y") || (CONFIG_SYSLOGD == "m")))
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Trying to find path for: [Object: logread]
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGREAD == "y") || (CONFIG_LOGREAD == "m")), sourceFile -> sysklogd/logread.c, generated -> false, objectFile -> logread, listName -> lib)
2012-01-10 11:58:37,008 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOGREAD == "y") || (CONFIG_LOGREAD == "m")), sourceFile -> sysklogd/logread.c, generated -> false, objectFile -> logread, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> sysklogd/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Expression of path for object occurrence sysklogd/logread.c: ((CONFIG_LOGREAD == "y") || (CONFIG_LOGREAD == "m"))
2012-01-10 11:58:37,008 DEBUG PCDerivation$ Trying to find path for: [Object: blockdev]
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLOCKDEV == "y") || (CONFIG_BLOCKDEV == "m")), sourceFile -> util-linux/blockdev.c, generated -> false, objectFile -> blockdev, listName -> lib)
2012-01-10 11:58:37,008 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLOCKDEV == "y") || (CONFIG_BLOCKDEV == "m")), sourceFile -> util-linux/blockdev.c, generated -> false, objectFile -> blockdev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,008 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/blockdev.c: ((CONFIG_BLOCKDEV == "y") || (CONFIG_BLOCKDEV == "m"))
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Trying to find path for: [Object: mdev]
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m")), sourceFile -> util-linux/mdev.c, generated -> false, objectFile -> mdev, listName -> lib)
2012-01-10 11:58:37,009 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m")), sourceFile -> util-linux/mdev.c, generated -> false, objectFile -> mdev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mdev.c: ((CONFIG_MDEV == "y") || (CONFIG_MDEV == "m"))
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Trying to find path for: [Object: rev]
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REV == "y") || (CONFIG_REV == "m")), sourceFile -> util-linux/rev.c, generated -> false, objectFile -> rev, listName -> lib)
2012-01-10 11:58:37,009 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_REV == "y") || (CONFIG_REV == "m")), sourceFile -> util-linux/rev.c, generated -> false, objectFile -> rev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rev.c: ((CONFIG_REV == "y") || (CONFIG_REV == "m"))
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Trying to find path for: [Object: acpid]
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ACPID == "y") || (CONFIG_ACPID == "m")), sourceFile -> util-linux/acpid.c, generated -> false, objectFile -> acpid, listName -> lib)
2012-01-10 11:58:37,009 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_ACPID == "y") || (CONFIG_ACPID == "m")), sourceFile -> util-linux/acpid.c, generated -> false, objectFile -> acpid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/acpid.c: ((CONFIG_ACPID == "y") || (CONFIG_ACPID == "m"))
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Trying to find path for: [Object: blkid]
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")), sourceFile -> util-linux/blkid.c, generated -> false, objectFile -> blkid, listName -> lib)
2012-01-10 11:58:37,009 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")), sourceFile -> util-linux/blkid.c, generated -> false, objectFile -> blkid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/blkid.c: ((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m"))
2012-01-10 11:58:37,009 DEBUG PCDerivation$ Trying to find path for: [Object: dmesg]
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DMESG == "y") || (CONFIG_DMESG == "m")), sourceFile -> util-linux/dmesg.c, generated -> false, objectFile -> dmesg, listName -> lib)
2012-01-10 11:58:37,009 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_DMESG == "y") || (CONFIG_DMESG == "m")), sourceFile -> util-linux/dmesg.c, generated -> false, objectFile -> dmesg, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,009 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/dmesg.c: ((CONFIG_DMESG == "y") || (CONFIG_DMESG == "m"))
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Trying to find path for: [Object: fbset]
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSET == "y") || (CONFIG_FBSET == "m")), sourceFile -> util-linux/fbset.c, generated -> false, objectFile -> fbset, listName -> lib)
2012-01-10 11:58:37,010 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FBSET == "y") || (CONFIG_FBSET == "m")), sourceFile -> util-linux/fbset.c, generated -> false, objectFile -> fbset, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fbset.c: ((CONFIG_FBSET == "y") || (CONFIG_FBSET == "m"))
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Trying to find path for: [Object: freeramdisk]
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FDFLUSH == "y") || (CONFIG_FDFLUSH == "m")) || ((CONFIG_FREERAMDISK == "y") || (CONFIG_FREERAMDISK == "m"))), sourceFile -> util-linux/freeramdisk.c, generated -> false, objectFile -> freeramdisk, listName -> lib)
2012-01-10 11:58:37,010 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> (((CONFIG_FDFLUSH == "y") || (CONFIG_FDFLUSH == "m")) || ((CONFIG_FREERAMDISK == "y") || (CONFIG_FREERAMDISK == "m"))), sourceFile -> util-linux/freeramdisk.c, generated -> false, objectFile -> freeramdisk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/freeramdisk.c: (((CONFIG_FDFLUSH == "y") || (CONFIG_FDFLUSH == "m")) || ((CONFIG_FREERAMDISK == "y") || (CONFIG_FREERAMDISK == "m")))
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Trying to find path for: [Object: fdformat]
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDFORMAT == "y") || (CONFIG_FDFORMAT == "m")), sourceFile -> util-linux/fdformat.c, generated -> false, objectFile -> fdformat, listName -> lib)
2012-01-10 11:58:37,010 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDFORMAT == "y") || (CONFIG_FDFORMAT == "m")), sourceFile -> util-linux/fdformat.c, generated -> false, objectFile -> fdformat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fdformat.c: ((CONFIG_FDFORMAT == "y") || (CONFIG_FDFORMAT == "m"))
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Trying to find path for: [Object: fdisk]
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDISK == "y") || (CONFIG_FDISK == "m")), sourceFile -> util-linux/fdisk.c, generated -> false, objectFile -> fdisk, listName -> lib)
2012-01-10 11:58:37,010 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FDISK == "y") || (CONFIG_FDISK == "m")), sourceFile -> util-linux/fdisk.c, generated -> false, objectFile -> fdisk, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fdisk.c: ((CONFIG_FDISK == "y") || (CONFIG_FDISK == "m"))
2012-01-10 11:58:37,010 DEBUG PCDerivation$ Trying to find path for: [Object: findfs]
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m")), sourceFile -> util-linux/findfs.c, generated -> false, objectFile -> findfs, listName -> lib)
2012-01-10 11:58:37,010 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m")), sourceFile -> util-linux/findfs.c, generated -> false, objectFile -> findfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,010 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,011 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/findfs.c: ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))
2012-01-10 11:58:37,011 DEBUG PCDerivation$ Trying to find path for: [Object: flock]
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLOCK == "y") || (CONFIG_FLOCK == "m")), sourceFile -> util-linux/flock.c, generated -> false, objectFile -> flock, listName -> lib)
2012-01-10 11:58:37,011 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FLOCK == "y") || (CONFIG_FLOCK == "m")), sourceFile -> util-linux/flock.c, generated -> false, objectFile -> flock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,011 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/flock.c: ((CONFIG_FLOCK == "y") || (CONFIG_FLOCK == "m"))
2012-01-10 11:58:37,011 DEBUG PCDerivation$ Trying to find path for: [Object: fsck_minix]
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m")), sourceFile -> util-linux/fsck_minix.c, generated -> false, objectFile -> fsck_minix, listName -> lib)
2012-01-10 11:58:37,011 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m")), sourceFile -> util-linux/fsck_minix.c, generated -> false, objectFile -> fsck_minix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,011 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/fsck_minix.c: ((CONFIG_FSCK_MINIX == "y") || (CONFIG_FSCK_MINIX == "m"))
2012-01-10 11:58:37,011 DEBUG PCDerivation$ Trying to find path for: [Object: getopt]
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETOPT == "y") || (CONFIG_GETOPT == "m")), sourceFile -> util-linux/getopt.c, generated -> false, objectFile -> getopt, listName -> lib)
2012-01-10 11:58:37,011 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_GETOPT == "y") || (CONFIG_GETOPT == "m")), sourceFile -> util-linux/getopt.c, generated -> false, objectFile -> getopt, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,011 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/getopt.c: ((CONFIG_GETOPT == "y") || (CONFIG_GETOPT == "m"))
2012-01-10 11:58:37,011 DEBUG PCDerivation$ Trying to find path for: [Object: hexdump]
2012-01-10 11:58:37,011 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEXDUMP == "y") || (CONFIG_HEXDUMP == "m")), sourceFile -> util-linux/hexdump.c, generated -> false, objectFile -> hexdump, listName -> lib)
2012-01-10 11:58:37,012 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HEXDUMP == "y") || (CONFIG_HEXDUMP == "m")), sourceFile -> util-linux/hexdump.c, generated -> false, objectFile -> hexdump, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,012 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,012 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,012 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/hexdump.c: ((CONFIG_HEXDUMP == "y") || (CONFIG_HEXDUMP == "m"))
2012-01-10 11:58:37,012 DEBUG PCDerivation$ Trying to find path for: [Object: hwclock]
2012-01-10 11:58:37,012 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")), sourceFile -> util-linux/hwclock.c, generated -> false, objectFile -> hwclock, listName -> lib)
2012-01-10 11:58:37,012 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m")), sourceFile -> util-linux/hwclock.c, generated -> false, objectFile -> hwclock, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,012 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,012 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,012 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/hwclock.c: ((CONFIG_HWCLOCK == "y") || (CONFIG_HWCLOCK == "m"))
2012-01-10 11:58:37,012 DEBUG PCDerivation$ Trying to find path for: [Object: ipcrm]
2012-01-10 11:58:37,012 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCRM == "y") || (CONFIG_IPCRM == "m")), sourceFile -> util-linux/ipcrm.c, generated -> false, objectFile -> ipcrm, listName -> lib)
2012-01-10 11:58:37,012 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCRM == "y") || (CONFIG_IPCRM == "m")), sourceFile -> util-linux/ipcrm.c, generated -> false, objectFile -> ipcrm, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,012 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,012 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,012 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/ipcrm.c: ((CONFIG_IPCRM == "y") || (CONFIG_IPCRM == "m"))
2012-01-10 11:58:37,012 DEBUG PCDerivation$ Trying to find path for: [Object: ipcs]
2012-01-10 11:58:37,012 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCS == "y") || (CONFIG_IPCS == "m")), sourceFile -> util-linux/ipcs.c, generated -> false, objectFile -> ipcs, listName -> lib)
2012-01-10 11:58:37,013 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_IPCS == "y") || (CONFIG_IPCS == "m")), sourceFile -> util-linux/ipcs.c, generated -> false, objectFile -> ipcs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,013 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/ipcs.c: ((CONFIG_IPCS == "y") || (CONFIG_IPCS == "m"))
2012-01-10 11:58:37,013 DEBUG PCDerivation$ Trying to find path for: [Object: losetup]
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")), sourceFile -> util-linux/losetup.c, generated -> false, objectFile -> losetup, listName -> lib)
2012-01-10 11:58:37,013 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m")), sourceFile -> util-linux/losetup.c, generated -> false, objectFile -> losetup, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,013 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/losetup.c: ((CONFIG_LOSETUP == "y") || (CONFIG_LOSETUP == "m"))
2012-01-10 11:58:37,013 DEBUG PCDerivation$ Trying to find path for: [Object: lspci]
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSPCI == "y") || (CONFIG_LSPCI == "m")), sourceFile -> util-linux/lspci.c, generated -> false, objectFile -> lspci, listName -> lib)
2012-01-10 11:58:37,013 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSPCI == "y") || (CONFIG_LSPCI == "m")), sourceFile -> util-linux/lspci.c, generated -> false, objectFile -> lspci, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,013 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/lspci.c: ((CONFIG_LSPCI == "y") || (CONFIG_LSPCI == "m"))
2012-01-10 11:58:37,013 DEBUG PCDerivation$ Trying to find path for: [Object: lsusb]
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSUSB == "y") || (CONFIG_LSUSB == "m")), sourceFile -> util-linux/lsusb.c, generated -> false, objectFile -> lsusb, listName -> lib)
2012-01-10 11:58:37,013 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_LSUSB == "y") || (CONFIG_LSUSB == "m")), sourceFile -> util-linux/lsusb.c, generated -> false, objectFile -> lsusb, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,013 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,014 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/lsusb.c: ((CONFIG_LSUSB == "y") || (CONFIG_LSUSB == "m"))
2012-01-10 11:58:37,014 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_ext2]
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m")), sourceFile -> util-linux/mkfs_ext2.c, generated -> false, objectFile -> mkfs_ext2, listName -> lib)
2012-01-10 11:58:37,014 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m")), sourceFile -> util-linux/mkfs_ext2.c, generated -> false, objectFile -> mkfs_ext2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,014 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_ext2.c: ((CONFIG_MKFS_EXT2 == "y") || (CONFIG_MKFS_EXT2 == "m"))
2012-01-10 11:58:37,014 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_minix]
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m")), sourceFile -> util-linux/mkfs_minix.c, generated -> false, objectFile -> mkfs_minix, listName -> lib)
2012-01-10 11:58:37,014 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m")), sourceFile -> util-linux/mkfs_minix.c, generated -> false, objectFile -> mkfs_minix, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,014 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_minix.c: ((CONFIG_MKFS_MINIX == "y") || (CONFIG_MKFS_MINIX == "m"))
2012-01-10 11:58:37,014 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_reiser]
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m")), sourceFile -> util-linux/mkfs_reiser.c, generated -> false, objectFile -> mkfs_reiser, listName -> lib)
2012-01-10 11:58:37,014 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m")), sourceFile -> util-linux/mkfs_reiser.c, generated -> false, objectFile -> mkfs_reiser, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,014 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,014 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_reiser.c: ((CONFIG_MKFS_REISER == "y") || (CONFIG_MKFS_REISER == "m"))
2012-01-10 11:58:37,014 DEBUG PCDerivation$ Trying to find path for: [Object: mkfs_vfat]
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_VFAT == "y") || (CONFIG_MKFS_VFAT == "m")), sourceFile -> util-linux/mkfs_vfat.c, generated -> false, objectFile -> mkfs_vfat, listName -> lib)
2012-01-10 11:58:37,015 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKFS_VFAT == "y") || (CONFIG_MKFS_VFAT == "m")), sourceFile -> util-linux/mkfs_vfat.c, generated -> false, objectFile -> mkfs_vfat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,015 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkfs_vfat.c: ((CONFIG_MKFS_VFAT == "y") || (CONFIG_MKFS_VFAT == "m"))
2012-01-10 11:58:37,015 DEBUG PCDerivation$ Trying to find path for: [Object: mkswap]
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKSWAP == "y") || (CONFIG_MKSWAP == "m")), sourceFile -> util-linux/mkswap.c, generated -> false, objectFile -> mkswap, listName -> lib)
2012-01-10 11:58:37,015 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MKSWAP == "y") || (CONFIG_MKSWAP == "m")), sourceFile -> util-linux/mkswap.c, generated -> false, objectFile -> mkswap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,015 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mkswap.c: ((CONFIG_MKSWAP == "y") || (CONFIG_MKSWAP == "m"))
2012-01-10 11:58:37,015 DEBUG PCDerivation$ Trying to find path for: [Object: more]
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MORE == "y") || (CONFIG_MORE == "m")), sourceFile -> util-linux/more.c, generated -> false, objectFile -> more, listName -> lib)
2012-01-10 11:58:37,015 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MORE == "y") || (CONFIG_MORE == "m")), sourceFile -> util-linux/more.c, generated -> false, objectFile -> more, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,015 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/more.c: ((CONFIG_MORE == "y") || (CONFIG_MORE == "m"))
2012-01-10 11:58:37,015 DEBUG PCDerivation$ Trying to find path for: [Object: mount]
2012-01-10 11:58:37,015 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")), sourceFile -> util-linux/mount.c, generated -> false, objectFile -> mount, listName -> lib)
2012-01-10 11:58:37,015 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m")), sourceFile -> util-linux/mount.c, generated -> false, objectFile -> mount, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,016 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/mount.c: ((CONFIG_MOUNT == "y") || (CONFIG_MOUNT == "m"))
2012-01-10 11:58:37,016 DEBUG PCDerivation$ Trying to find path for: [Object: pivot_root]
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIVOT_ROOT == "y") || (CONFIG_PIVOT_ROOT == "m")), sourceFile -> util-linux/pivot_root.c, generated -> false, objectFile -> pivot_root, listName -> lib)
2012-01-10 11:58:37,016 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_PIVOT_ROOT == "y") || (CONFIG_PIVOT_ROOT == "m")), sourceFile -> util-linux/pivot_root.c, generated -> false, objectFile -> pivot_root, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,016 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/pivot_root.c: ((CONFIG_PIVOT_ROOT == "y") || (CONFIG_PIVOT_ROOT == "m"))
2012-01-10 11:58:37,016 DEBUG PCDerivation$ Trying to find path for: [Object: rdate]
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDATE == "y") || (CONFIG_RDATE == "m")), sourceFile -> util-linux/rdate.c, generated -> false, objectFile -> rdate, listName -> lib)
2012-01-10 11:58:37,016 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDATE == "y") || (CONFIG_RDATE == "m")), sourceFile -> util-linux/rdate.c, generated -> false, objectFile -> rdate, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,016 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rdate.c: ((CONFIG_RDATE == "y") || (CONFIG_RDATE == "m"))
2012-01-10 11:58:37,016 DEBUG PCDerivation$ Trying to find path for: [Object: rdev]
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDEV == "y") || (CONFIG_RDEV == "m")), sourceFile -> util-linux/rdev.c, generated -> false, objectFile -> rdev, listName -> lib)
2012-01-10 11:58:37,016 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RDEV == "y") || (CONFIG_RDEV == "m")), sourceFile -> util-linux/rdev.c, generated -> false, objectFile -> rdev, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,016 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,016 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rdev.c: ((CONFIG_RDEV == "y") || (CONFIG_RDEV == "m"))
2012-01-10 11:58:37,016 DEBUG PCDerivation$ Trying to find path for: [Object: readprofile]
2012-01-10 11:58:37,017 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READPROFILE == "y") || (CONFIG_READPROFILE == "m")), sourceFile -> util-linux/readprofile.c, generated -> false, objectFile -> readprofile, listName -> lib)
2012-01-10 11:58:37,017 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_READPROFILE == "y") || (CONFIG_READPROFILE == "m")), sourceFile -> util-linux/readprofile.c, generated -> false, objectFile -> readprofile, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,017 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,017 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,017 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/readprofile.c: ((CONFIG_READPROFILE == "y") || (CONFIG_READPROFILE == "m"))
2012-01-10 11:58:37,017 DEBUG PCDerivation$ Trying to find path for: [Object: rtcwake]
2012-01-10 11:58:37,017 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")), sourceFile -> util-linux/rtcwake.c, generated -> false, objectFile -> rtcwake, listName -> lib)
2012-01-10 11:58:37,017 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m")), sourceFile -> util-linux/rtcwake.c, generated -> false, objectFile -> rtcwake, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,017 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,017 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,017 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/rtcwake.c: ((CONFIG_RTCWAKE == "y") || (CONFIG_RTCWAKE == "m"))
2012-01-10 11:58:37,017 DEBUG PCDerivation$ Trying to find path for: [Object: script]
2012-01-10 11:58:37,017 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPT == "y") || (CONFIG_SCRIPT == "m")), sourceFile -> util-linux/script.c, generated -> false, objectFile -> script, listName -> lib)
2012-01-10 11:58:37,017 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPT == "y") || (CONFIG_SCRIPT == "m")), sourceFile -> util-linux/script.c, generated -> false, objectFile -> script, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,017 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,017 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,017 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/script.c: ((CONFIG_SCRIPT == "y") || (CONFIG_SCRIPT == "m"))
2012-01-10 11:58:37,017 DEBUG PCDerivation$ Trying to find path for: [Object: scriptreplay]
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPTREPLAY == "y") || (CONFIG_SCRIPTREPLAY == "m")), sourceFile -> util-linux/scriptreplay.c, generated -> false, objectFile -> scriptreplay, listName -> lib)
2012-01-10 11:58:37,018 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SCRIPTREPLAY == "y") || (CONFIG_SCRIPTREPLAY == "m")), sourceFile -> util-linux/scriptreplay.c, generated -> false, objectFile -> scriptreplay, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,018 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/scriptreplay.c: ((CONFIG_SCRIPTREPLAY == "y") || (CONFIG_SCRIPTREPLAY == "m"))
2012-01-10 11:58:37,018 DEBUG PCDerivation$ Trying to find path for: [Object: setarch]
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETARCH == "y") || (CONFIG_SETARCH == "m")), sourceFile -> util-linux/setarch.c, generated -> false, objectFile -> setarch, listName -> lib)
2012-01-10 11:58:37,018 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SETARCH == "y") || (CONFIG_SETARCH == "m")), sourceFile -> util-linux/setarch.c, generated -> false, objectFile -> setarch, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,018 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/setarch.c: ((CONFIG_SETARCH == "y") || (CONFIG_SETARCH == "m"))
2012-01-10 11:58:37,018 DEBUG PCDerivation$ Trying to find path for: [Object: swaponoff]
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWAPONOFF == "y") || (CONFIG_SWAPONOFF == "m")), sourceFile -> util-linux/swaponoff.c, generated -> false, objectFile -> swaponoff, listName -> lib)
2012-01-10 11:58:37,018 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWAPONOFF == "y") || (CONFIG_SWAPONOFF == "m")), sourceFile -> util-linux/swaponoff.c, generated -> false, objectFile -> swaponoff, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,018 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/swaponoff.c: ((CONFIG_SWAPONOFF == "y") || (CONFIG_SWAPONOFF == "m"))
2012-01-10 11:58:37,018 DEBUG PCDerivation$ Trying to find path for: [Object: switch_root]
2012-01-10 11:58:37,018 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWITCH_ROOT == "y") || (CONFIG_SWITCH_ROOT == "m")), sourceFile -> util-linux/switch_root.c, generated -> false, objectFile -> switch_root, listName -> lib)
2012-01-10 11:58:37,018 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_SWITCH_ROOT == "y") || (CONFIG_SWITCH_ROOT == "m")), sourceFile -> util-linux/switch_root.c, generated -> false, objectFile -> switch_root, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,019 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/switch_root.c: ((CONFIG_SWITCH_ROOT == "y") || (CONFIG_SWITCH_ROOT == "m"))
2012-01-10 11:58:37,019 DEBUG PCDerivation$ Trying to find path for: [Object: umount]
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UMOUNT == "y") || (CONFIG_UMOUNT == "m")), sourceFile -> util-linux/umount.c, generated -> false, objectFile -> umount, listName -> lib)
2012-01-10 11:58:37,019 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_UMOUNT == "y") || (CONFIG_UMOUNT == "m")), sourceFile -> util-linux/umount.c, generated -> false, objectFile -> umount, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/Kbuild)
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,019 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/umount.c: ((CONFIG_UMOUNT == "y") || (CONFIG_UMOUNT == "m"))
2012-01-10 11:58:37,019 DEBUG PCDerivation$ Trying to find path for: [Object: get_devname]
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")) || ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))) || ((CONFIG_FEATURE_MOUNT_LABEL == "y") || (CONFIG_FEATURE_MOUNT_LABEL == "m"))), sourceFile -> util-linux/volume_id/get_devname.c, generated -> false, objectFile -> get_devname, listName -> lib)
2012-01-10 11:58:37,019 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")) || ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))) || ((CONFIG_FEATURE_MOUNT_LABEL == "y") || (CONFIG_FEATURE_MOUNT_LABEL == "m"))), sourceFile -> util-linux/volume_id/get_devname.c, generated -> false, objectFile -> get_devname, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,019 TRACE PCDerivation$ parent of MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild) is: RootNode --> Map()
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,019 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/get_devname.c: ((((CONFIG_BLKID == "y") || (CONFIG_BLKID == "m")) || ((CONFIG_FINDFS == "y") || (CONFIG_FINDFS == "m"))) || ((CONFIG_FEATURE_MOUNT_LABEL == "y") || (CONFIG_FEATURE_MOUNT_LABEL == "m")))
2012-01-10 11:58:37,019 DEBUG PCDerivation$ Trying to find path for: [Object: volume_id]
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/volume_id.c, generated -> false, objectFile -> volume_id, listName -> lib)
2012-01-10 11:58:37,019 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/volume_id.c, generated -> false, objectFile -> volume_id, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,019 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,020 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/volume_id.c: ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m"))
2012-01-10 11:58:37,020 DEBUG PCDerivation$ Trying to find path for: [Object: util]
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/util.c, generated -> false, objectFile -> util, listName -> lib)
2012-01-10 11:58:37,020 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m")), sourceFile -> util-linux/volume_id/util.c, generated -> false, objectFile -> util, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,020 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/util.c: ((CONFIG_VOLUMEID == "y") || (CONFIG_VOLUMEID == "m"))
2012-01-10 11:58:37,020 DEBUG PCDerivation$ Trying to find path for: [Object: btrfs]
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_BTRFS == "y") || (CONFIG_FEATURE_VOLUMEID_BTRFS == "m")), sourceFile -> util-linux/volume_id/btrfs.c, generated -> false, objectFile -> btrfs, listName -> lib)
2012-01-10 11:58:37,020 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_BTRFS == "y") || (CONFIG_FEATURE_VOLUMEID_BTRFS == "m")), sourceFile -> util-linux/volume_id/btrfs.c, generated -> false, objectFile -> btrfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,020 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/btrfs.c: ((CONFIG_FEATURE_VOLUMEID_BTRFS == "y") || (CONFIG_FEATURE_VOLUMEID_BTRFS == "m"))
2012-01-10 11:58:37,020 DEBUG PCDerivation$ Trying to find path for: [Object: ext]
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_EXT == "y") || (CONFIG_FEATURE_VOLUMEID_EXT == "m")), sourceFile -> util-linux/volume_id/ext.c, generated -> false, objectFile -> ext, listName -> lib)
2012-01-10 11:58:37,020 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_EXT == "y") || (CONFIG_FEATURE_VOLUMEID_EXT == "m")), sourceFile -> util-linux/volume_id/ext.c, generated -> false, objectFile -> ext, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,020 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,020 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/ext.c: ((CONFIG_FEATURE_VOLUMEID_EXT == "y") || (CONFIG_FEATURE_VOLUMEID_EXT == "m"))
2012-01-10 11:58:37,020 DEBUG PCDerivation$ Trying to find path for: [Object: fat]
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_FAT == "y") || (CONFIG_FEATURE_VOLUMEID_FAT == "m")), sourceFile -> util-linux/volume_id/fat.c, generated -> false, objectFile -> fat, listName -> lib)
2012-01-10 11:58:37,021 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_FAT == "y") || (CONFIG_FEATURE_VOLUMEID_FAT == "m")), sourceFile -> util-linux/volume_id/fat.c, generated -> false, objectFile -> fat, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,021 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/fat.c: ((CONFIG_FEATURE_VOLUMEID_FAT == "y") || (CONFIG_FEATURE_VOLUMEID_FAT == "m"))
2012-01-10 11:58:37,021 DEBUG PCDerivation$ Trying to find path for: [Object: hfs]
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_HFS == "y") || (CONFIG_FEATURE_VOLUMEID_HFS == "m")), sourceFile -> util-linux/volume_id/hfs.c, generated -> false, objectFile -> hfs, listName -> lib)
2012-01-10 11:58:37,021 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_HFS == "y") || (CONFIG_FEATURE_VOLUMEID_HFS == "m")), sourceFile -> util-linux/volume_id/hfs.c, generated -> false, objectFile -> hfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,021 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/hfs.c: ((CONFIG_FEATURE_VOLUMEID_HFS == "y") || (CONFIG_FEATURE_VOLUMEID_HFS == "m"))
2012-01-10 11:58:37,021 DEBUG PCDerivation$ Trying to find path for: [Object: iso9660]
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ISO9660 == "y") || (CONFIG_FEATURE_VOLUMEID_ISO9660 == "m")), sourceFile -> util-linux/volume_id/iso9660.c, generated -> false, objectFile -> iso9660, listName -> lib)
2012-01-10 11:58:37,021 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ISO9660 == "y") || (CONFIG_FEATURE_VOLUMEID_ISO9660 == "m")), sourceFile -> util-linux/volume_id/iso9660.c, generated -> false, objectFile -> iso9660, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,021 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/iso9660.c: ((CONFIG_FEATURE_VOLUMEID_ISO9660 == "y") || (CONFIG_FEATURE_VOLUMEID_ISO9660 == "m"))
2012-01-10 11:58:37,021 DEBUG PCDerivation$ Trying to find path for: [Object: jfs]
2012-01-10 11:58:37,021 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_JFS == "y") || (CONFIG_FEATURE_VOLUMEID_JFS == "m")), sourceFile -> util-linux/volume_id/jfs.c, generated -> false, objectFile -> jfs, listName -> lib)
2012-01-10 11:58:37,021 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_JFS == "y") || (CONFIG_FEATURE_VOLUMEID_JFS == "m")), sourceFile -> util-linux/volume_id/jfs.c, generated -> false, objectFile -> jfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,022 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/jfs.c: ((CONFIG_FEATURE_VOLUMEID_JFS == "y") || (CONFIG_FEATURE_VOLUMEID_JFS == "m"))
2012-01-10 11:58:37,022 DEBUG PCDerivation$ Trying to find path for: [Object: linux_raid]
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXRAID == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXRAID == "m")), sourceFile -> util-linux/volume_id/linux_raid.c, generated -> false, objectFile -> linux_raid, listName -> lib)
2012-01-10 11:58:37,022 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXRAID == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXRAID == "m")), sourceFile -> util-linux/volume_id/linux_raid.c, generated -> false, objectFile -> linux_raid, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,022 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/linux_raid.c: ((CONFIG_FEATURE_VOLUMEID_LINUXRAID == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXRAID == "m"))
2012-01-10 11:58:37,022 DEBUG PCDerivation$ Trying to find path for: [Object: linux_swap]
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "m")), sourceFile -> util-linux/volume_id/linux_swap.c, generated -> false, objectFile -> linux_swap, listName -> lib)
2012-01-10 11:58:37,022 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "m")), sourceFile -> util-linux/volume_id/linux_swap.c, generated -> false, objectFile -> linux_swap, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,022 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/linux_swap.c: ((CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "y") || (CONFIG_FEATURE_VOLUMEID_LINUXSWAP == "m"))
2012-01-10 11:58:37,022 DEBUG PCDerivation$ Trying to find path for: [Object: ntfs]
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_NTFS == "y") || (CONFIG_FEATURE_VOLUMEID_NTFS == "m")), sourceFile -> util-linux/volume_id/ntfs.c, generated -> false, objectFile -> ntfs, listName -> lib)
2012-01-10 11:58:37,022 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_NTFS == "y") || (CONFIG_FEATURE_VOLUMEID_NTFS == "m")), sourceFile -> util-linux/volume_id/ntfs.c, generated -> false, objectFile -> ntfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,022 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,022 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/ntfs.c: ((CONFIG_FEATURE_VOLUMEID_NTFS == "y") || (CONFIG_FEATURE_VOLUMEID_NTFS == "m"))
2012-01-10 11:58:37,023 DEBUG PCDerivation$ Trying to find path for: [Object: reiserfs]
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_REISERFS == "y") || (CONFIG_FEATURE_VOLUMEID_REISERFS == "m")), sourceFile -> util-linux/volume_id/reiserfs.c, generated -> false, objectFile -> reiserfs, listName -> lib)
2012-01-10 11:58:37,023 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_REISERFS == "y") || (CONFIG_FEATURE_VOLUMEID_REISERFS == "m")), sourceFile -> util-linux/volume_id/reiserfs.c, generated -> false, objectFile -> reiserfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,023 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/reiserfs.c: ((CONFIG_FEATURE_VOLUMEID_REISERFS == "y") || (CONFIG_FEATURE_VOLUMEID_REISERFS == "m"))
2012-01-10 11:58:37,023 DEBUG PCDerivation$ Trying to find path for: [Object: udf]
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_UDF == "y") || (CONFIG_FEATURE_VOLUMEID_UDF == "m")), sourceFile -> util-linux/volume_id/udf.c, generated -> false, objectFile -> udf, listName -> lib)
2012-01-10 11:58:37,023 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_UDF == "y") || (CONFIG_FEATURE_VOLUMEID_UDF == "m")), sourceFile -> util-linux/volume_id/udf.c, generated -> false, objectFile -> udf, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,023 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/udf.c: ((CONFIG_FEATURE_VOLUMEID_UDF == "y") || (CONFIG_FEATURE_VOLUMEID_UDF == "m"))
2012-01-10 11:58:37,023 DEBUG PCDerivation$ Trying to find path for: [Object: xfs]
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_XFS == "y") || (CONFIG_FEATURE_VOLUMEID_XFS == "m")), sourceFile -> util-linux/volume_id/xfs.c, generated -> false, objectFile -> xfs, listName -> lib)
2012-01-10 11:58:37,023 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_XFS == "y") || (CONFIG_FEATURE_VOLUMEID_XFS == "m")), sourceFile -> util-linux/volume_id/xfs.c, generated -> false, objectFile -> xfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,023 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/xfs.c: ((CONFIG_FEATURE_VOLUMEID_XFS == "y") || (CONFIG_FEATURE_VOLUMEID_XFS == "m"))
2012-01-10 11:58:37,023 DEBUG PCDerivation$ Trying to find path for: [Object: cramfs]
2012-01-10 11:58:37,023 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_CRAMFS == "y") || (CONFIG_FEATURE_VOLUMEID_CRAMFS == "m")), sourceFile -> util-linux/volume_id/cramfs.c, generated -> false, objectFile -> cramfs, listName -> lib)
2012-01-10 11:58:37,024 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_CRAMFS == "y") || (CONFIG_FEATURE_VOLUMEID_CRAMFS == "m")), sourceFile -> util-linux/volume_id/cramfs.c, generated -> false, objectFile -> cramfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,024 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/cramfs.c: ((CONFIG_FEATURE_VOLUMEID_CRAMFS == "y") || (CONFIG_FEATURE_VOLUMEID_CRAMFS == "m"))
2012-01-10 11:58:37,024 DEBUG PCDerivation$ Trying to find path for: [Object: romfs]
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ROMFS == "y") || (CONFIG_FEATURE_VOLUMEID_ROMFS == "m")), sourceFile -> util-linux/volume_id/romfs.c, generated -> false, objectFile -> romfs, listName -> lib)
2012-01-10 11:58:37,024 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_ROMFS == "y") || (CONFIG_FEATURE_VOLUMEID_ROMFS == "m")), sourceFile -> util-linux/volume_id/romfs.c, generated -> false, objectFile -> romfs, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,024 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/romfs.c: ((CONFIG_FEATURE_VOLUMEID_ROMFS == "y") || (CONFIG_FEATURE_VOLUMEID_ROMFS == "m"))
2012-01-10 11:58:37,024 DEBUG PCDerivation$ Trying to find path for: [Object: sysv]
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_SYSV == "y") || (CONFIG_FEATURE_VOLUMEID_SYSV == "m")), sourceFile -> util-linux/volume_id/sysv.c, generated -> false, objectFile -> sysv, listName -> lib)
2012-01-10 11:58:37,024 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_SYSV == "y") || (CONFIG_FEATURE_VOLUMEID_SYSV == "m")), sourceFile -> util-linux/volume_id/sysv.c, generated -> false, objectFile -> sysv, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,024 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/sysv.c: ((CONFIG_FEATURE_VOLUMEID_SYSV == "y") || (CONFIG_FEATURE_VOLUMEID_SYSV == "m"))
2012-01-10 11:58:37,024 DEBUG PCDerivation$ Trying to find path for: [Object: luks]
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LUKS == "y") || (CONFIG_FEATURE_VOLUMEID_LUKS == "m")), sourceFile -> util-linux/volume_id/luks.c, generated -> false, objectFile -> luks, listName -> lib)
2012-01-10 11:58:37,024 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_LUKS == "y") || (CONFIG_FEATURE_VOLUMEID_LUKS == "m")), sourceFile -> util-linux/volume_id/luks.c, generated -> false, objectFile -> luks, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,024 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/luks.c: ((CONFIG_FEATURE_VOLUMEID_LUKS == "y") || (CONFIG_FEATURE_VOLUMEID_LUKS == "m"))
2012-01-10 11:58:37,024 DEBUG PCDerivation$ Trying to find path for: [Object: ocfs2]
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_OCFS2 == "y") || (CONFIG_FEATURE_VOLUMEID_OCFS2 == "m")), sourceFile -> util-linux/volume_id/ocfs2.c, generated -> false, objectFile -> ocfs2, listName -> lib)
2012-01-10 11:58:37,024 TRACE PCDerivation$ parent of ObjectBNode --> Map(extension -> o, expr -> ((CONFIG_FEATURE_VOLUMEID_OCFS2 == "y") || (CONFIG_FEATURE_VOLUMEID_OCFS2 == "m")), sourceFile -> util-linux/volume_id/ocfs2.c, generated -> false, objectFile -> ocfs2, listName -> lib) is: MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting MakefileBNode --> Map(expr -> [TRUE], path -> util-linux/volume_id/Kbuild)
2012-01-10 11:58:37,024 TRACE PCDerivation$ moveUpStrategy: visiting RootNode --> Map()
2012-01-10 11:58:37,024 DEBUG PCDerivation$ Expression of path for object occurrence util-linux/volume_id/ocfs2.c: ((CONFIG_FEATURE_VOLUMEID_OCFS2 == "y") || (CONFIG_FEATURE_VOLUMEID_OCFS2 == "m"))
2012-01-10 11:58:37,060 INFO KBuildMinerMain$ Saving PCs to: ../gitbusybox/pc.txt
2012-01-10 11:58:37,091 INFO KBuildMinerMain$ Extracting additional C flags...
